[
    [
        {
            "title": "Quick Start",
            "source": "react",
            "url": "https://react.dev/learn",
            "sections": [
                "Welcome to the React documentation! This page will give you an introduction to the 80% of React concepts that you will use on a daily basis.",
                "You will learn\nHow to create and nest components\nHow to add markup and styles\nHow to display data\nHow to render conditions and lists\nHow to respond to events and update the screen\nHow to share data between components\n",
                {
                    "subHeader": "Creating and nesting components ",
                    "url": "https://react.dev/learn/#components",
                    "sections": [
                        "React apps are made out of components. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.",
                        "React components are JavaScript functions that return markup:",
                        {
                            "code_example": "function MyButton() {  return (    <button>I'm a button</button>  );}"
                        },
                        "Now that you’ve declared MyButton, you can nest it into another component:",
                        {
                            "code_example": "export default function MyApp() {  return (    <div>      <h1>Welcome to my app</h1>      <MyButton />    </div>  );}"
                        },
                        "Notice that <MyButton /> starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.",
                        "Have a look at the result:",
                        {
                            "code_sandbox": "function MyButton() {  return (    <button>      I'm a button    </button>  );}export default function MyApp() {  return (    <div>      <h1>Welcome to my app</h1>      <MyButton />    </div>  );}"
                        },
                        "The export default keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, MDN and javascript.info have great references."
                    ]
                },
                {
                    "subHeader": "Writing markup with JSX ",
                    "url": "https://react.dev/learn/#writing-markup-with-jsx",
                    "sections": [
                        "The markup syntax you’ve seen above is called JSX. It is optional, but most React projects use JSX for its convenience. All of the tools we recommend for local development support JSX out of the box.",
                        "JSX is stricter than HTML. You have to close tags like <br />. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a <div>...</div> or an empty <>...</> wrapper:",
                        {
                            "code_example": "function AboutPage() {  return (    <>      <h1>About</h1>      <p>Hello there.<br />How do you do?</p>    </>  );}"
                        },
                        "If you have a lot of HTML to port to JSX, you can use an online converter."
                    ]
                },
                {
                    "subHeader": "Adding styles ",
                    "url": "https://react.dev/learn/#adding-styles",
                    "sections": [
                        "In React, you specify a CSS class with className. It works the same way as the HTML class attribute:",
                        {
                            "code_example": "<img className=\"avatar\" />"
                        },
                        "Then you write the CSS rules for it in a separate CSS file:",
                        {
                            "code_example": "/* In your CSS */.avatar {  border-radius: 50%;}"
                        },
                        "React does not prescribe how you add CSS files. In the simplest case, you’ll add a <link> tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project."
                    ]
                },
                {
                    "subHeader": "Displaying data ",
                    "url": "https://react.dev/learn/#displaying-data",
                    "sections": [
                        "JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display user.name:",
                        {
                            "code_example": "return (  <h1>    {user.name}  </h1>);"
                        },
                        "You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces instead of quotes. For example, className=\"avatar\" passes the \"avatar\" string as the CSS class, but src={user.imageUrl} reads the JavaScript user.imageUrl variable value, and then passes that value as the src attribute:",
                        {
                            "code_example": "return (  <img    className=\"avatar\"    src={user.imageUrl}  />);"
                        },
                        "You can put more complex expressions inside the JSX curly braces too, for example, string concatenation:",
                        {
                            "code_sandbox": "const user = {  name: 'Hedy Lamarr',  imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',  imageSize: 90,};export default function Profile() {  return (    <>      <h1>{user.name}</h1>      <img        className=\"avatar\"        src={user.imageUrl}        alt={'Photo of ' + user.name}        style={{          width: user.imageSize,          height: user.imageSize        }}      />    </>  );}"
                        },
                        "In the above example, style={{}} is not a special syntax, but a regular {} object inside the style={ } JSX curly braces. You can use the style attribute when your styles depend on JavaScript variables."
                    ]
                },
                {
                    "subHeader": "Conditional rendering ",
                    "url": "https://react.dev/learn/#conditional-rendering",
                    "sections": [
                        "In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an if statement to conditionally include JSX:",
                        {
                            "code_example": "let content;if (isLoggedIn) {  content = <AdminPanel />;} else {  content = <LoginForm />;}return (  <div>    {content}  </div>);"
                        },
                        "If you prefer more compact code, you can use the conditional ? operator. Unlike if, it works inside JSX:",
                        {
                            "code_example": "<div>  {isLoggedIn ? (    <AdminPanel />  ) : (    <LoginForm />  )}</div>"
                        },
                        "When you don’t need the else branch, you can also use a shorter logical && syntax:",
                        {
                            "code_example": "<div>  {isLoggedIn && <AdminPanel />}</div>"
                        },
                        "All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using if...else."
                    ]
                },
                {
                    "subHeader": "Rendering lists ",
                    "url": "https://react.dev/learn/#rendering-lists",
                    "sections": [
                        "You will rely on JavaScript features like for loop and the array map() function to render lists of components.",
                        "For example, let’s say you have an array of products:",
                        {
                            "code_example": "const products = [  { title: 'Cabbage', id: 1 },  { title: 'Garlic', id: 2 },  { title: 'Apple', id: 3 },];"
                        },
                        "Inside your component, use the map() function to transform an array of products into an array of <li> items:",
                        {
                            "code_example": "const listItems = products.map(product =>  <li key={product.id}>    {product.title}  </li>);return (  <ul>{listItems}</ul>);"
                        },
                        "Notice how <li> has a key attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.",
                        {
                            "code_sandbox": "const products = [  { title: 'Cabbage', isFruit: false, id: 1 },  { title: 'Garlic', isFruit: false, id: 2 },  { title: 'Apple', isFruit: true, id: 3 },];export default function ShoppingList() {  const listItems = products.map(product =>    <li      key={product.id}      style={{        color: product.isFruit ? 'magenta' : 'darkgreen'      }}    >      {product.title}    </li>  );  return (    <ul>{listItems}</ul>  );}"
                        }
                    ]
                },
                {
                    "subHeader": "Responding to events ",
                    "url": "https://react.dev/learn/#responding-to-events",
                    "sections": [
                        "You can respond to events by declaring event handler functions inside your components:",
                        {
                            "code_example": "function MyButton() {  function handleClick() {    alert('You clicked me!');  }  return (    <button onClick={handleClick}>      Click me    </button>  );}"
                        },
                        "Notice how onClick={handleClick} has no parentheses at the end! Do not call the event handler function: you only need to pass it down. React will call your event handler when the user clicks the button."
                    ]
                },
                {
                    "subHeader": "Updating the screen ",
                    "url": "https://react.dev/learn/#updating-the-screen",
                    "sections": [
                        "Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add state to your component.",
                        "First, import useState from React:",
                        {
                            "code_example": "import { useState } from 'react';"
                        },
                        "Now you can declare a state variable inside your component:",
                        {
                            "code_example": "function MyButton() {  const [count, setCount] = useState(0);  // ..."
                        },
                        "You’ll get two things from useState: the current state (count), and the function that lets you update it (setCount). You can give them any names, but the convention is to write [something, setSomething].",
                        "The first time the button is displayed, count will be 0 because you passed 0 to useState(). When you want to change state, call setCount() and pass the new value to it. Clicking this button will increment the counter:",
                        {
                            "code_example": "function MyButton() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <button onClick={handleClick}>      Clicked {count} times    </button>  );}"
                        },
                        "React will call your component function again. This time, count will be 1. Then it will be 2. And so on.",
                        "If you render the same component multiple times, each will get its own state. Click each button separately:",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function MyApp() {  return (    <div>      <h1>Counters that update separately</h1>      <MyButton />      <MyButton />    </div>  );}function MyButton() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <button onClick={handleClick}>      Clicked {count} times    </button>  );}"
                        },
                        "Notice how each button “remembers” its own count state and doesn’t affect other buttons."
                    ]
                },
                {
                    "subHeader": "Using Hooks ",
                    "url": "https://react.dev/learn/#using-hooks",
                    "sections": [
                        "Functions starting with use are called Hooks. useState is a built-in Hook provided by React. You can find other built-in Hooks in the API reference. You can also write your own Hooks by combining the existing ones.",
                        "Hooks are more restrictive than other functions. You can only call Hooks at the top of your components (or other Hooks). If you want to use useState in a condition or a loop, extract a new component and put it there."
                    ]
                },
                {
                    "subHeader": "Sharing data between components ",
                    "url": "https://react.dev/learn/#sharing-data-between-components",
                    "sections": [
                        "In the previous example, each MyButton had its own independent count, and when each button was clicked, only the count for the button clicked changed:",
                        {
                            "code_example": "MyButton"
                        },
                        "However, often you’ll need components to share data and always update together.",
                        "To make both MyButton components display the same count and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.",
                        "In this example, it is MyApp:",
                        {
                            "code_example": "MyApp"
                        },
                        "Now when you click either button, the count in MyApp will change, which will change both of the counts in MyButton. Here’s how you can express this in code.",
                        "First, move the state up from MyButton into MyApp:",
                        {
                            "code_example": "export default function MyApp() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <div>      <h1>Counters that update separately</h1>      <MyButton />      <MyButton />    </div>  );}function MyButton() {  // ... we're moving code from here ...}"
                        },
                        "Then, pass the state down from MyApp to each MyButton, together with the shared click handler. You can pass information to MyButton using the JSX curly braces, just like you previously did with built-in tags like <img>:",
                        {
                            "code_example": "export default function MyApp() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <div>      <h1>Counters that update together</h1>      <MyButton count={count} onClick={handleClick} />      <MyButton count={count} onClick={handleClick} />    </div>  );}"
                        },
                        "The information you pass down like this is called props. Now the MyApp component contains the count state and the handleClick event handler, and passes both of them down as props to each of the buttons.",
                        "Finally, change MyButton to read the props you have passed from its parent component:",
                        {
                            "code_example": "function MyButton({ count, onClick }) {  return (    <button onClick={onClick}>      Clicked {count} times    </button>  );}"
                        },
                        "When you click the button, the onClick handler fires. Each button’s onClick prop was set to the handleClick function inside MyApp, so the code inside of it runs. That code calls setCount(count + 1), incrementing the count state variable. The new count value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function MyApp() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <div>      <h1>Counters that update together</h1>      <MyButton count={count} onClick={handleClick} />      <MyButton count={count} onClick={handleClick} />    </div>  );}function MyButton({ count, onClick }) {  return (    <button onClick={onClick}>      Clicked {count} times    </button>  );}"
                        }
                    ]
                },
                {
                    "subHeader": "Next Steps ",
                    "url": "https://react.dev/learn/#next-steps",
                    "sections": [
                        "By now, you know the basics of how to write React code!",
                        "Check out the Tutorial to put them into practice and build your first mini-app with React."
                    ]
                }
            ],
            "subTopics": [
                {
                    "headers": "Tutorial: Tic-Tac-Toe",
                    "url": "https://react.dev/learn/tutorial-tic-tac-toe",
                    "content": [
                        "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.",
                        "NoteThis tutorial is designed for people who prefer to learn by doing and want to quickly try making something tangible. If you prefer learning each concept step by step, start with Describing the UI.",
                        "The tutorial is divided into several sections:",
                        "  1.Setup for the tutorial will give you a starting point to follow the tutorial.",
                        "  2.Overview will teach you the fundamentals of React: components, props, and state.",
                        "  3.Completing the game will teach you the most common techniques in React development.",
                        "  4.Adding time travel will give you a deeper insight into the unique strengths of React.",
                        {
                            "sub_header": "What are you building? ",
                            "content": [
                                "In this tutorial, you’ll build an interactive tic-tac-toe game with React.",
                                "You can see what it will look like when you’re finished here:",
                                {
                                    "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const xIsNext = currentMove % 2 === 0;  const currentSquares = history[currentMove];  function handlePlay(nextSquares) {    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];    setHistory(nextHistory);    setCurrentMove(nextHistory.length - 1);  }  function jumpTo(nextMove) {    setCurrentMove(nextMove);  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li key={move}>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                },
                                "If the code doesn’t make sense to you yet, or if you are unfamiliar with the code’s syntax, don’t worry! The goal of this tutorial is to help you understand React and its syntax.",
                                "We recommend that you check out the tic-tac-toe game above before continuing with the tutorial. One of the features that you’ll notice is that there is a numbered list to the right of the game’s board. This list gives you a history of all of the moves that have occurred in the game, and it is updated as the game progresses.",
                                "Once you’ve played around with the finished tic-tac-toe game, keep scrolling. You’ll start with a simpler template in this tutorial. Our next step is to set you up so that you can start building the game."
                            ]
                        },
                        {
                            "sub_header": "Setup for the tutorial ",
                            "content": [
                                "In the live code editor below, click Fork in the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you’ve created. The new tab should display an empty square and the starter code for this tutorial.",
                                {
                                    "code_sandbox": "export default function Square() {  return <button className=\"square\">X</button>;}"
                                },
                                {
                                    "code_example": "cd"
                                }
                            ]
                        },
                        {
                            "sub_header": "Overview ",
                            "content": [
                                "Now that you’re set up, let’s get an overview of React!",
                                {
                                    "sub_header": "Inspecting the starter code ",
                                    "content": [
                                        "In CodeSandbox you’ll see three main sections:",
                                        "",
                                        "  1.The Files section with a list of files like App.js, index.js, styles.css and a folder called public",
                                        "  2.The code editor where you’ll see the source code of your selected file",
                                        "  3.The browser section where you’ll see how the code you’ve written will be displayed",
                                        "The App.js file should be selected in the Files section. The contents of that file in the code editor should be:",
                                        {
                                            "code_example": "export default function Square() {  return <button className=\"square\">X</button>;}"
                                        },
                                        "The browser section should be displaying a square with a X in it like this:",
                                        "",
                                        "Now let’s have a look at the files in the starter code.",
                                        {
                                            "sub_header": "App.js ",
                                            "content": [
                                                "The code in App.js creates a component. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let’s look at the component line by line to see what’s going on:",
                                                {
                                                    "code_example": "export default function Square() {  return <button className=\"square\">X</button>;}"
                                                },
                                                "The first line defines a function called Square. The export JavaScript keyword makes this function accessible outside of this file. The default keyword tells other files using your code that it’s the main function in your file.",
                                                {
                                                    "code_example": "export default function Square() {  return <button className=\"square\">X</button>;}"
                                                },
                                                "The second line returns a button. The return JavaScript keyword means whatever comes after is returned as a value to the caller of the function. <button> is a JSX element. A JSX element is a combination of JavaScript code and HTML tags that describes what you’d like to display. className=\"square\" is a button property or prop that tells CSS how to style the button. X is the text displayed inside of the button and </button> closes the JSX element to indicate that any following content shouldn’t be placed inside the button."
                                            ]
                                        },
                                        {
                                            "sub_header": "styles.css ",
                                            "content": [
                                                "Click on the file labeled styles.css in the Files section of CodeSandbox. This file defines the styles for your React app. The first two CSS selectors (* and body) define the style of large parts of your app while the .square selector defines the style of any component where the className property is set to square. In your code, that would match the button from your Square component in the App.js file."
                                            ]
                                        },
                                        {
                                            "sub_header": "index.js ",
                                            "content": [
                                                "Click on the file labeled index.js in the Files section of CodeSandbox. You won’t be editing this file during the tutorial but it is the bridge between the component you created in the App.js file and the web browser.",
                                                {
                                                    "code_example": "import { StrictMode } from 'react';import { createRoot } from 'react-dom/client';import './styles.css';import App from './App';"
                                                },
                                                "Lines 1-5 bring all the necessary pieces together:",
                                                "  1.React",
                                                "  2.React’s library to talk to web browsers (React DOM)",
                                                "  3.the styles for your components",
                                                "  4.the component you created in App.js.",
                                                "The remainder of the file brings all the pieces together and injects the final product into index.html in the public folder."
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Building the board ",
                                    "content": [
                                        "Let’s get back to App.js. This is where you’ll spend the rest of the tutorial.",
                                        "Currently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:",
                                        {
                                            "code_example": "export default function Square() {  return <button className=\"square\">X</button><button className=\"square\">X</button>;}"
                                        },
                                        "You’ll get this error:",
                                        {
                                            "code_example": "<>...</>"
                                        },
                                        "React components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can use Fragments (<> and </>) to wrap multiple adjacent JSX elements like this:",
                                        {
                                            "code_example": "export default function Square() {  return (    <>      <button className=\"square\">X</button>      <button className=\"square\">X</button>    </>  );}"
                                        },
                                        "Now you should see:",
                                        "",
                                        "Great! Now you just need to copy-paste a few times to add nine squares and…",
                                        "",
                                        "Oh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you’ll need to group your squares into rows with divs and add some CSS classes. While you’re at it, you’ll give each square a number to make sure you know where each square is displayed.",
                                        "In the App.js file, update the Square component to look like this:",
                                        {
                                            "code_example": "export default function Square() {  return (    <>      <div className=\"board-row\">        <button className=\"square\">1</button>        <button className=\"square\">2</button>        <button className=\"square\">3</button>      </div>      <div className=\"board-row\">        <button className=\"square\">4</button>        <button className=\"square\">5</button>        <button className=\"square\">6</button>      </div>      <div className=\"board-row\">        <button className=\"square\">7</button>        <button className=\"square\">8</button>        <button className=\"square\">9</button>      </div>    </>  );}"
                                        },
                                        "The CSS defined in styles.css styles the divs with the className of board-row. Now that you’ve grouped your components into rows with the styled divs you have your tic-tac-toe board:",
                                        "",
                                        "But you now have a problem. Your component named Square, really isn’t a square anymore. Let’s fix that by changing the name to Board:",
                                        {
                                            "code_example": "export default function Board() {  //...}"
                                        },
                                        "At this point your code should look something like this:",
                                        {
                                            "code_sandbox": "export default function Board() {  return (    <>      <div className=\"board-row\">        <button className=\"square\">1</button>        <button className=\"square\">2</button>        <button className=\"square\">3</button>      </div>      <div className=\"board-row\">        <button className=\"square\">4</button>        <button className=\"square\">5</button>        <button className=\"square\">6</button>      </div>      <div className=\"board-row\">        <button className=\"square\">7</button>        <button className=\"square\">8</button>        <button className=\"square\">9</button>      </div>    </>  );}"
                                        },
                                        "NotePsssst… That’s a lot to type! It’s okay to copy and paste code from this page. However, if you’re up for a little challenge, we recommend only copying code that you’ve manually typed at least once yourself."
                                    ]
                                },
                                {
                                    "sub_header": "Passing data through props ",
                                    "content": [
                                        "Next, you’ll want to change the value of a square from empty to “X” when the user clicks on the square. With how you’ve built the board so far you would need to copy-paste the code that updates the square nine times (once for each square you have)! Instead of copy-pasting, React’s component architecture allows you to create a reusable component to avoid messy, duplicated code.",
                                        "First, you are going to copy the line defining your first square (<button className=\"square\">1</button>) from your Board component into a new Square component:",
                                        {
                                            "code_example": "function Square() {  return <button className=\"square\">1</button>;}export default function Board() {  // ...}"
                                        },
                                        "Then you’ll update the Board component to render that Square component using JSX syntax:",
                                        {
                                            "code_example": "// ...export default function Board() {  return (    <>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>    </>  );}"
                                        },
                                        "Note how unlike the browser divs, your own components Board and Square must start with a capital letter.",
                                        "Let’s take a look:",
                                        "",
                                        "Oh no! You lost the numbered squares you had before. Now each square says “1”. To fix this, you will use props to pass the value each square should have from the parent component (Board) to its child (Square).",
                                        "Update the Square component to read the value prop that you’ll pass from the Board:",
                                        {
                                            "code_example": "function Square({ value }) {  return <button className=\"square\">1</button>;}"
                                        },
                                        "function Square({ value }) indicates the Square component can be passed a prop called value.",
                                        "Now you want to display that value instead of 1 inside every square. Try doing it like this:",
                                        {
                                            "code_example": "function Square({ value }) {  return <button className=\"square\">value</button>;}"
                                        },
                                        "Oops, this is not what you wanted:",
                                        "",
                                        "You wanted to render the JavaScript variable called value from your component, not the word “value”. To “escape into JavaScript” from JSX, you need curly braces. Add curly braces around value in JSX like so:",
                                        {
                                            "code_example": "function Square({ value }) {  return <button className=\"square\">{value}</button>;}"
                                        },
                                        "For now, you should see an empty board:",
                                        "",
                                        "This is because the Board component hasn’t passed the value prop to each Square component it renders yet. To fix it you’ll add the value prop to each Square component rendered by the Board component:",
                                        {
                                            "code_example": "export default function Board() {  return (    <>      <div className=\"board-row\">        <Square value=\"1\" />        <Square value=\"2\" />        <Square value=\"3\" />      </div>      <div className=\"board-row\">        <Square value=\"4\" />        <Square value=\"5\" />        <Square value=\"6\" />      </div>      <div className=\"board-row\">        <Square value=\"7\" />        <Square value=\"8\" />        <Square value=\"9\" />      </div>    </>  );}"
                                        },
                                        "Now you should see a grid of numbers again:",
                                        "",
                                        "Your updated code should look like this:",
                                        {
                                            "code_sandbox": "function Square({ value }) {  return <button className=\"square\">{value}</button>;}export default function Board() {  return (    <>      <div className=\"board-row\">        <Square value=\"1\" />        <Square value=\"2\" />        <Square value=\"3\" />      </div>      <div className=\"board-row\">        <Square value=\"4\" />        <Square value=\"5\" />        <Square value=\"6\" />      </div>      <div className=\"board-row\">        <Square value=\"7\" />        <Square value=\"8\" />        <Square value=\"9\" />      </div>    </>  );}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Making an interactive component ",
                                    "content": [
                                        "Let’s fill the Square component with an X when you click it. Declare a function called handleClick inside of the Square. Then, add onClick to the props of the button JSX element returned from the Square:",
                                        {
                                            "code_example": "function Square({ value }) {  function handleClick() {    console.log('clicked!');  }  return (    <button      className=\"square\"      onClick={handleClick}    >      {value}    </button>  );}"
                                        },
                                        "If you click on a square now, you should see a log saying \"clicked!\" in the Console tab at the bottom of the Browser section in CodeSandbox. Clicking the square more than once will log \"clicked!\" again. Repeated console logs with the same message will not create more lines in the console. Instead, you will see an incrementing counter next to your first \"clicked!\" log.",
                                        "NoteIf you are following this tutorial using your local development environment, you need to open your browser’s Console. For example, if you use the Chrome browser, you can view the Console with the keyboard shortcut Shift + Ctrl + J (on Windows/Linux) or Option + ⌘ + J (on macOS).",
                                        "As a next step, you want the Square component to “remember” that it got clicked, and fill it with an “X” mark. To “remember” things, components use state.",
                                        "React provides a special function called useState that you can call from your component to let it “remember” things. Let’s store the current value of the Square in state, and change it when the Square is clicked.",
                                        "Import useState at the top of the file. Remove the value prop from the Square component. Instead, add a new line at the start of the Square that calls useState. Have it return a state variable called value:",
                                        {
                                            "code_example": "import { useState } from 'react';function Square() {  const [value, setValue] = useState(null);  function handleClick() {    //..."
                                        },
                                        "value stores the value and setValue is a function that can be used to change the value. The null passed to useState is used as the initial value for this state variable, so value here starts off equal to null.",
                                        "Since the Square component no longer accepts props anymore, you’ll remove the value prop from all nine of the Square components created by the Board component:",
                                        {
                                            "code_example": "// ...export default function Board() {  return (    <>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>    </>  );}"
                                        },
                                        "Now you’ll change Square to display an “X” when clicked. Replace the console.log(\"clicked!\"); event handler with setValue('X');. Now your Square component looks like this:",
                                        {
                                            "code_example": "function Square() {  const [value, setValue] = useState(null);  function handleClick() {    setValue('X');  }  return (    <button      className=\"square\"      onClick={handleClick}    >      {value}    </button>  );}"
                                        },
                                        "By calling this set function from an onClick handler, you’re telling React to re-render that Square whenever its <button> is clicked. After the update, the Square’s value will be 'X', so you’ll see the “X” on the game board. Click on any Square, and “X” should show up:",
                                        "",
                                        "Each Square has its own state: the value stored in each Square is completely independent of the others. When you call a set function in a component, React automatically updates the child components inside too.",
                                        "After you’ve made the above changes, your code will look like this:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square() {  const [value, setValue] = useState(null);  function handleClick() {    setValue('X');  }  return (    <button      className=\"square\"      onClick={handleClick}    >      {value}    </button>  );}export default function Board() {  return (    <>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>    </>  );}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "React Developer Tools ",
                                    "content": [
                                        "React DevTools let you check the props and the state of your React components. You can find the React DevTools tab at the bottom of the browser section in CodeSandbox:",
                                        "",
                                        "To inspect a particular component on the screen, use the button in the top left corner of React DevTools:",
                                        "",
                                        "NoteFor local development, React DevTools is available as a Chrome, Firefox, and Edge browser extension. Install it, and the Components tab will appear in your browser Developer Tools for sites using React."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Completing the game ",
                            "content": [
                                "By this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing “X”s and “O”s on the board, and you need a way to determine a winner.",
                                {
                                    "sub_header": "Lifting state up ",
                                    "content": [
                                        "Currently, each Square component maintains a part of the game’s state. To check for a winner in a tic-tac-toe game, the Board would need to somehow know the state of each of the 9 Square components.",
                                        "How would you approach that? At first, you might guess that the Board needs to “ask” each Square for that Square’s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game’s state in the parent Board component instead of in each Square. The Board component can tell each Square what to display by passing a prop, like you did when you passed a number to each Square.",
                                        "To collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.",
                                        "Lifting state into a parent component is common when React components are refactored.",
                                        "Let’s take this opportunity to try it out. Edit the Board component so that it declares a state variable named squares that defaults to an array of 9 nulls corresponding to the 9 squares:",
                                        {
                                            "code_example": "// ...export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  return (    // ...  );}"
                                        },
                                        "Array(9).fill(null) creates an array with nine elements and sets each of them to null. The useState() call around it declares a squares state variable that’s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, the squares array will look like this:",
                                        {
                                            "code_example": "['O', null, 'X', 'X', 'X', 'O', 'O', null, null]"
                                        },
                                        "Now your Board component needs to pass the value prop down to each Square that it renders:",
                                        {
                                            "code_example": "export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} />        <Square value={squares[1]} />        <Square value={squares[2]} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} />        <Square value={squares[4]} />        <Square value={squares[5]} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} />        <Square value={squares[7]} />        <Square value={squares[8]} />      </div>    </>  );}"
                                        },
                                        "Next, you’ll edit the Square component to receive the value prop from the Board component. This will require removing the Square component’s own stateful tracking of value and the button’s onClick prop:",
                                        {
                                            "code_example": "function Square({value}) {  return <button className=\"square\">{value}</button>;}"
                                        },
                                        "At this point you should see an empty tic-tac-toe board:",
                                        "",
                                        "And your code should look like this:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({ value }) {  return <button className=\"square\">{value}</button>;}export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} />        <Square value={squares[1]} />        <Square value={squares[2]} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} />        <Square value={squares[4]} />        <Square value={squares[5]} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} />        <Square value={squares[7]} />        <Square value={squares[8]} />      </div>    </>  );}"
                                        },
                                        "Each Square will now receive a value prop that will either be 'X', 'O', or null for empty squares.",
                                        "Next, you need to change what happens when a Square is clicked. The Board component now maintains which squares are filled. You’ll need to create a way for the Square to update the Board’s state. Since state is private to a component that defines it, you cannot update the Board’s state directly from Square.",
                                        "Instead, you’ll pass down a function from the Board component to the Square component, and you’ll have Square call that function when a square is clicked. You’ll start with the function that the Square component will call when it is clicked. You’ll call that function onSquareClick:",
                                        {
                                            "code_example": "function Square({ value }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}"
                                        },
                                        "Next, you’ll add the onSquareClick function to the Square component’s props:",
                                        {
                                            "code_example": "function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}"
                                        },
                                        "Now you’ll connect the onSquareClick prop to a function in the Board component that you’ll name handleClick. To connect onSquareClick to handleClick you’ll pass a function to the onSquareClick prop of the first Square component:",
                                        {
                                            "code_example": "export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={handleClick} />        //...  );}"
                                        },
                                        "Lastly, you will define the handleClick function inside the Board component to update the squares array holding your board’s state:",
                                        {
                                            "code_example": "export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick() {    const nextSquares = squares.slice();    nextSquares[0] = \"X\";    setSquares(nextSquares);  }  return (    // ...  )}"
                                        },
                                        "The handleClick function creates a copy of the squares array (nextSquares) with the JavaScript slice() Array method. Then, handleClick updates the nextSquares array to add X to the first ([0] index) square.",
                                        "Calling the setSquares function lets React know the state of the component has changed. This will trigger a re-render of the components that use the squares state (Board) as well as its child components (the Square components that make up the board).",
                                        {
                                            "code_example": "handleClick"
                                        },
                                        "Now you can add X’s to the board…  but only to the upper left square. Your handleClick function is hardcoded to update the index for the upper left square (0). Let’s update handleClick to be able to update any square. Add an argument i to the handleClick function that takes the index of the square to update:",
                                        {
                                            "code_example": "export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    const nextSquares = squares.slice();    nextSquares[i] = \"X\";    setSquares(nextSquares);  }  return (    // ...  )}"
                                        },
                                        "Next, you will need to pass that i to handleClick. You could try to set the onSquareClick prop of square to be handleClick(0) directly in the JSX like this, but it won’t work:",
                                        {
                                            "code_example": "<Square value={squares[0]} onSquareClick={handleClick(0)} />"
                                        },
                                        "Here is why this doesn’t work. The handleClick(0) call will be a part of rendering the board component. Because handleClick(0) alters the state of the board component by calling setSquares, your entire board component will be re-rendered again. But this runs handleClick(0) again, leading to an infinite loop:",
                                        "ConsoleToo many re-renders. React limits the number of renders to prevent an infinite loop.",
                                        "Why didn’t this problem happen earlier?",
                                        "When you were passing onSquareClick={handleClick}, you were passing the handleClick function down as a prop. You were not calling it! But now you are calling that function right away—notice the parentheses in handleClick(0)—and that’s why it runs too early. You don’t want to call handleClick until the user clicks!",
                                        "You could fix this by creating a function like handleFirstSquareClick that calls handleClick(0), a function like handleSecondSquareClick that calls handleClick(1), and so on. You would pass (rather than call) these functions down as props like onSquareClick={handleFirstSquareClick}. This would solve the infinite loop.",
                                        "However, defining nine different functions and giving each of them a name is too verbose. Instead, let’s do this:",
                                        {
                                            "code_example": "export default function Board() {  // ...  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        // ...  );}"
                                        },
                                        "Notice the new () => syntax. Here, () => handleClick(0) is an arrow function, which is a shorter way to define functions. When the square is clicked, the code after the => “arrow” will run, calling handleClick(0).",
                                        "Now you need to update the other eight squares to call handleClick from the arrow functions you pass. Make sure that the argument for each call of the handleClick corresponds to the index of the correct square:",
                                        {
                                            "code_example": "export default function Board() {  // ...  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );};"
                                        },
                                        "Now you can again add X’s to any square on the board by clicking on them:",
                                        "",
                                        "But this time all the state management is handled by the Board component!",
                                        "This is what your code should look like:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    const nextSquares = squares.slice();    nextSquares[i] = 'X';    setSquares(nextSquares);  }  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}"
                                        },
                                        "Now that your state handling is in the Board component, the parent Board component passes props to the child Square components so that they can be displayed correctly. When clicking on a Square, the child Square component now asks the parent Board component to update the state of the board. When the Board’s state changes, both the Board component and every child Square re-renders automatically. Keeping the state of all squares in the Board component will allow it to determine the winner in the future.",
                                        "Let’s recap what happens when a user clicks the top left square on your board to add an X to it:",
                                        "  1.Clicking on the upper left square runs the function that the button received as its onClick prop from the Square. The Square component received that function as its onSquareClick prop from the Board. The Board component defined that function directly in the JSX. It calls handleClick with an argument of 0.",
                                        "  2.handleClick uses the argument (0) to update the first element of the squares array from null to X.",
                                        "  3.The squares state of the Board component was updated, so the Board and all of its children re-render. This causes the value prop of the Square component with index 0 to change from null to X.",
                                        "In the end the user sees that the upper left square has changed from empty to having a X after clicking it.",
                                        {
                                            "code_example": "<button>"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Why immutability is important ",
                                    "content": [
                                        "Note how in handleClick, you call .slice() to create a copy of the squares array instead of modifying the existing array. To explain why, we need to discuss immutability and why immutability is important to learn.",
                                        "There are generally two approaches to changing data. The first approach is to mutate the data by directly changing the data’s values. The second approach is to replace the data with a new copy which has the desired changes. Here is what it would look like if you mutated the squares array:",
                                        {
                                            "code_example": "const squares = [null, null, null, null, null, null, null, null, null];squares[0] = 'X';// Now `squares` is [\"X\", null, null, null, null, null, null, null, null];"
                                        },
                                        "And here is what it would look like if you changed data without mutating the squares array:",
                                        {
                                            "code_example": "const squares = [null, null, null, null, null, null, null, null, null];const nextSquares = ['X', null, null, null, null, null, null, null, null];// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`"
                                        },
                                        "The result is the same but by not mutating (changing the underlying data) directly, you gain several benefits.",
                                        "Immutability makes complex features much easier to implement. Later in this tutorial, you will implement a “time travel” feature that lets you review the game’s history and “jump back” to past moves. This functionality isn’t specific to games—an ability to undo and redo certain actions is a common requirement for apps. Avoiding direct data mutation lets you keep previous versions of the data intact, and reuse them later.",
                                        "There is also another benefit of immutability. By default, all child components re-render automatically when the state of a parent component changes. This includes even the child components that weren’t affected by the change. Although re-rendering is not by itself noticeable to the user (you shouldn’t actively try to avoid it!), you might want to skip re-rendering a part of the tree that clearly wasn’t affected by it for performance reasons. Immutability makes it very cheap for components to compare whether their data has changed or not. You can learn more about how React chooses when to re-render a component in the memo API reference."
                                    ]
                                },
                                {
                                    "sub_header": "Taking turns ",
                                    "content": [
                                        "It’s now time to fix a major defect in this tic-tac-toe game: the “O”s cannot be marked on the board.",
                                        "You’ll set the first move to be “X” by default. Let’s keep track of this by adding another piece of state to the Board component:",
                                        {
                                            "code_example": "function Board() {  const [xIsNext, setXIsNext] = useState(true);  const [squares, setSquares] = useState(Array(9).fill(null));  // ...}"
                                        },
                                        "Each time a player moves, xIsNext (a boolean) will be flipped to determine which player goes next and the game’s state will be saved. You’ll update the Board’s handleClick function to flip the value of xIsNext:",
                                        {
                                            "code_example": "export default function Board() {  const [xIsNext, setXIsNext] = useState(true);  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = \"X\";    } else {      nextSquares[i] = \"O\";    }    setSquares(nextSquares);    setXIsNext(!xIsNext);  }  return (    //...  );}"
                                        },
                                        "Now, as you click on different squares, they will alternate between X and O, as they should!",
                                        "But wait, there’s a problem. Try clicking on the same square multiple times:",
                                        "",
                                        "The X is overwritten by an O! While this would add a very interesting twist to the game, we’re going to stick to the original rules for now.",
                                        "When you mark a square with a X or an O you aren’t first checking to see if the square already has a X or O value. You can fix this by returning early. You’ll check to see if the square already has a X or an O. If the square is already filled, you will return in the handleClick function early—before it tries to update the board state.",
                                        {
                                            "code_example": "function handleClick(i) {  if (squares[i]) {    return;  }  const nextSquares = squares.slice();  //...}"
                                        },
                                        "Now you can only add X’s or O’s to empty squares! Here is what your code should look like at this point:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({value, onSquareClick}) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}export default function Board() {  const [xIsNext, setXIsNext] = useState(true);  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    if (squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    setSquares(nextSquares);    setXIsNext(!xIsNext);  }  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Declaring a winner ",
                                    "content": [
                                        "Now that the players can take turns, you’ll want to show when the game is won and there are no more turns to make. To do this you’ll add a helper function called calculateWinner that takes an array of 9 squares, checks for a winner and returns 'X', 'O', or null as appropriate. Don’t worry too much about the calculateWinner function; it’s not specific to React:",
                                        {
                                            "code_example": "export default function Board() {  //...}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6]  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                        },
                                        {
                                            "code_example": "calculateWinner"
                                        },
                                        "You will call calculateWinner(squares) in the Board component’s handleClick function to check if a player has won. You can perform this check at the same time you check if a user has clicked a square that already has a X or and O. We’d like to return early in both cases:",
                                        {
                                            "code_example": "function handleClick(i) {  if (squares[i] || calculateWinner(squares)) {    return;  }  const nextSquares = squares.slice();  //...}"
                                        },
                                        "To let the players know when the game is over, you can display text such as “Winner: X” or “Winner: O”. To do that you’ll add a status section to the Board component. The status will display the winner if the game is over and if the game is ongoing you’ll display which player’s turn is next:",
                                        {
                                            "code_example": "export default function Board() {  // ...  const winner = calculateWinner(squares);  let status;  if (winner) {    status = \"Winner: \" + winner;  } else {    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        // ...  )}"
                                        },
                                        "Congratulations! You now have a working tic-tac-toe game. And you’ve just learned the basics of React too. So you are the real winner here. Here is what the code should look like:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({value, onSquareClick}) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}export default function Board() {  const [xIsNext, setXIsNext] = useState(true);  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    setSquares(nextSquares);    setXIsNext(!xIsNext);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Adding time travel ",
                            "content": [
                                "As a final exercise, let’s make it possible to “go back in time” to the previous moves in the game.",
                                {
                                    "sub_header": "Storing a history of moves ",
                                    "content": [
                                        "If you mutated the squares array, implementing time travel would be very difficult.",
                                        "However, you used slice() to create a new copy of the squares array after every move, and treated it as immutable. This will allow you to store every past version of the squares array, and navigate between the turns that have already happened.",
                                        "You’ll store the past squares arrays in another array called history, which you’ll store as a new state variable. The history array represents all board states, from the first to the last move, and has a shape like this:",
                                        {
                                            "code_example": "[  // Before first move  [null, null, null, null, null, null, null, null, null],  // After first move  [null, null, null, null, 'X', null, null, null, null],  // After second move  [null, null, null, null, 'X', null, null, null, 'O'],  // ...]"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Lifting state up, again ",
                                    "content": [
                                        "You will now write a new top-level component called Game to display a list of past moves. That’s where you will place the history state that contains the entire game history.",
                                        "Placing the history state into the Game component will let you remove the squares state from its child Board component. Just like you “lifted state up” from the Square component into the Board component, you will now lift it up from the Board into the top-level Game component. This gives the Game component full control over the Board’s data and lets it instruct the Board to render previous turns from the history.",
                                        "First, add a Game component with export default. Have it render the Board component and some markup:",
                                        {
                                            "code_example": "function Board() {  // ...}export default function Game() {  return (    <div className=\"game\">      <div className=\"game-board\">        <Board />      </div>      <div className=\"game-info\">        <ol>{/*TODO*/}</ol>      </div>    </div>  );}"
                                        },
                                        "Note that you are removing the export default keywords before the function Board() { declaration and adding them before the function Game() { declaration. This tells your index.js file to use the Game component as the top-level component instead of your Board component. The additional divs returned by the Game component are making room for the game information you’ll add to the board later.",
                                        "Add some state to the Game component to track which player is next and the history of moves:",
                                        {
                                            "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  // ..."
                                        },
                                        "Notice how [Array(9).fill(null)] is an array with a single item, which itself is an array of 9 nulls.",
                                        "To render the squares for the current move, you’ll want to read the last squares array from the history. You don’t need useState for this—you already have enough information to calculate it during rendering:",
                                        {
                                            "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  // ..."
                                        },
                                        "Next, create a handlePlay function inside the Game component that will be called by the Board component to update the game. Pass xIsNext, currentSquares and handlePlay as props to the Board component:",
                                        {
                                            "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    // TODO  }  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />        //...  )}"
                                        },
                                        "Let’s make the Board component fully controlled by the props it receives. Change the Board component to take three props: xIsNext, squares, and a new onPlay function that Board can call with the updated squares array when a player makes a move. Next, remove the first two lines of the Board function that call useState:",
                                        {
                                            "code_example": "function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    //...  }  // ...}"
                                        },
                                        "Now replace the setSquares and setXIsNext calls in handleClick in the Board component with a single call to your new onPlay function so the Game component can update the Board when the user clicks a square:",
                                        {
                                            "code_example": "function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = \"X\";    } else {      nextSquares[i] = \"O\";    }    onPlay(nextSquares);  }  //...}"
                                        },
                                        "The Board component is fully controlled by the props passed to it by the Game component. You need to implement the handlePlay function in the Game component to get the game working again.",
                                        "What should handlePlay do when called? Remember that Board used to call setSquares with an updated array; now it passes the updated squares array to onPlay.",
                                        "The handlePlay function needs to update Game’s state to trigger a re-render, but you don’t have a setSquares function that you can call any more—you’re now using the history state variable to store this information. You’ll want to update history by appending the updated squares array as a new history entry. You also want to toggle xIsNext, just as Board used to do:",
                                        {
                                            "code_example": "export default function Game() {  //...  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  //...}"
                                        },
                                        "Here, [...history, nextSquares] creates a new array that contains all the items in history, followed by nextSquares. (You can read the ...history spread syntax as “enumerate all the items in history”.)",
                                        "For example, if history is [[null,null,null], [\"X\",null,null]] and nextSquares is [\"X\",null,\"O\"], then the new [...history, nextSquares] array will be [[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]].",
                                        "At this point, you’ve moved the state to live in the Game component, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{/*TODO*/}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Showing the past moves ",
                                    "content": [
                                        "Since you are recording the tic-tac-toe game’s history, you can now display a list of past moves to the player.",
                                        "React elements like <button> are regular JavaScript objects; you can pass them around in your application. To render multiple items in React, you can use an array of React elements.",
                                        "You already have an array of history moves in state, so now you need to transform it to an array of React elements. In JavaScript, to transform one array into another, you can use the array map method:",
                                        {
                                            "code_example": "[1, 2, 3].map((x) => x * 2) // [2, 4, 6]"
                                        },
                                        "You’ll use map to transform your history of moves into React elements representing buttons on the screen, and display a list of buttons to “jump” to past moves. Let’s map over the history in the Game component:",
                                        {
                                            "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  function jumpTo(nextMove) {    // TODO  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}"
                                        },
                                        "You can see what your code should look like below. Note that you should see an error in the developer tools console that says:",
                                        "ConsoleWarning: Each child in an array or iterator should have a unique “key” prop. Check the render method of `Game`.",
                                        "You’ll fix this error in the next section.",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  function jumpTo(nextMove) {    // TODO  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                        },
                                        "As you iterate through history array inside the function you passed to map, the squares argument goes through each element of history, and the move argument goes through each array index: 0, 1, 2, …. (In most cases, you’d need the actual array elements, but to render a list of moves you will only need indexes.)",
                                        "For each move in the tic-tac-toe game’s history, you create a list item <li> which contains a button <button>. The button has an onClick handler which calls a function called jumpTo (that you haven’t implemented yet).",
                                        "For now, you should see a list of the moves that occurred in the game and an error in the developer tools console. Let’s discuss what the “key” error means."
                                    ]
                                },
                                {
                                    "sub_header": "Picking a key ",
                                    "content": [
                                        "When you render a list, React stores some information about each rendered list item. When you update a list, React needs to determine what has changed. You could have added, removed, re-arranged, or updated the list’s items.",
                                        "Imagine transitioning from",
                                        {
                                            "code_example": "<li>Alexa: 7 tasks left</li><li>Ben: 5 tasks left</li>"
                                        },
                                        "to",
                                        {
                                            "code_example": "<li>Ben: 9 tasks left</li><li>Claudia: 8 tasks left</li><li>Alexa: 5 tasks left</li>"
                                        },
                                        "In addition to the updated counts, a human reading this would probably say that you swapped Alexa and Ben’s ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and does not know what you intended, so you need to specify a key property for each list item to differentiate each list item from its siblings. If your data was from a database, Alexa, Ben, and Claudia’s database IDs could be used as keys.",
                                        {
                                            "code_example": "<li key={user.id}>  {user.name}: {user.taskCount} tasks left</li>"
                                        },
                                        "When a list is re-rendered, React takes each list item’s key and searches the previous list’s items for a matching key. If the current list has a key that didn’t exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved.",
                                        "Keys tell React about the identity of each component, which allows React to maintain state between re-renders. If a component’s key changes, the component will be destroyed and re-created with a new state.",
                                        "key is a special and reserved property in React. When an element is created, React extracts the key property and stores the key directly on the returned element. Even though key may look like it is passed as props, React automatically uses key to decide which components to update. There’s no way for a component to ask what key its parent specified.",
                                        "It’s strongly recommended that you assign proper keys whenever you build dynamic lists. If you don’t have an appropriate key, you may want to consider restructuring your data so that you do.",
                                        "If no key is specified, React will report an error and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list’s items or inserting/removing list items. Explicitly passing key={i} silences the error but has the same problems as array indices and is not recommended in most cases.",
                                        "Keys do not need to be globally unique; they only need to be unique between components and their siblings."
                                    ]
                                },
                                {
                                    "sub_header": "Implementing time travel ",
                                    "content": [
                                        "In the tic-tac-toe game’s history, each past move has a unique ID associated with it: it’s the sequential number of the move. Moves will never be re-ordered, deleted, or inserted in the middle, so it’s safe to use the move index as a key.",
                                        "In the Game function, you can add the key as <li key={move}>, and if you reload the rendered game, React’s “key” error should disappear:",
                                        {
                                            "code_example": "const moves = history.map((squares, move) => {  //...  return (    <li key={move}>      <button onClick={() => jumpTo(move)}>{description}</button>    </li>  );});"
                                        },
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  function jumpTo(nextMove) {    // TODO  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li key={move}>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                        },
                                        "Before you can implement jumpTo, you need the Game component to keep track of which step the user is currently viewing. To do this, define a new state variable called currentMove, defaulting to 0:",
                                        {
                                            "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const currentSquares = history[history.length - 1];  //...}"
                                        },
                                        "Next, update the jumpTo function inside Game to update that currentMove. You’ll also set xIsNext to true if the number that you’re changing currentMove to is even.",
                                        {
                                            "code_example": "export default function Game() {  // ...  function jumpTo(nextMove) {    setCurrentMove(nextMove);    setXIsNext(nextMove % 2 === 0);  }  //...}"
                                        },
                                        "You will now make two changes to the Game’s handlePlay function which is called when you click on a square.",
                                        "  1.If you “go back in time” and then make a new move from that point, you only want to keep the history up to that point. Instead of adding nextSquares after all items (... spread syntax) in history, you’ll add it after all items in history.slice(0, currentMove + 1) so that you’re only keeping that portion of the old history.",
                                        "  2.Each time a move is made, you need to update currentMove to point to the latest history entry.",
                                        {
                                            "code_example": "function handlePlay(nextSquares) {  const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];  setHistory(nextHistory);  setCurrentMove(nextHistory.length - 1);  setXIsNext(!xIsNext);}"
                                        },
                                        "Finally, you will modify the Game component to render the currently selected move, instead of always rendering the final move:",
                                        {
                                            "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const currentSquares = history[currentMove];  // ...}"
                                        },
                                        "If you click on any step in the game’s history, the tic-tac-toe board should immediately update to show what the board looked like after that step occurred.",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({value, onSquareClick}) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const currentSquares = history[currentMove];  function handlePlay(nextSquares) {    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];    setHistory(nextHistory);    setCurrentMove(nextHistory.length - 1);    setXIsNext(!xIsNext);  }  function jumpTo(nextMove) {    setCurrentMove(nextMove);    setXIsNext(nextMove % 2 === 0);  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li key={move}>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Final cleanup ",
                                    "content": [
                                        "If you look at the code very closely, you may notice that xIsNext === true when currentMove is even and xIsNext === false when currentMove is odd. In other words, if you know the value of currentMove, then you can always figure out what xIsNext should be.",
                                        "There’s no reason for you to store both of these in state. In fact, always try to avoid redundant state. Simplifying what you store in state reduces bugs and makes your code easier to understand. Change Game so that it doesn’t store xIsNext as a separate state variable and instead figures it out based on the currentMove:",
                                        {
                                            "code_example": "export default function Game() {  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const xIsNext = currentMove % 2 === 0;  const currentSquares = history[currentMove];  function handlePlay(nextSquares) {    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];    setHistory(nextHistory);    setCurrentMove(nextHistory.length - 1);  }  function jumpTo(nextMove) {    setCurrentMove(nextMove);  }  // ...}"
                                        },
                                        "You no longer need the xIsNext state declaration or the calls to setXIsNext. Now, there’s no chance for xIsNext to get out of sync with currentMove, even if you make a mistake while coding the components."
                                    ]
                                },
                                {
                                    "sub_header": "Wrapping up ",
                                    "content": [
                                        "Congratulations! You’ve created a tic-tac-toe game that:",
                                        "  1.Lets you play tic-tac-toe,",
                                        "  2.Indicates when a player has won the game,",
                                        "  3.Stores a game’s history as a game progresses,",
                                        "  4.Allows players to review a game’s history and see previous versions of a game’s board.",
                                        "Nice work! We hope you now feel like you have a decent grasp of how React works.",
                                        "Check out the final result here:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const xIsNext = currentMove % 2 === 0;  const currentSquares = history[currentMove];  function handlePlay(nextSquares) {    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];    setHistory(nextHistory);    setCurrentMove(nextHistory.length - 1);  }  function jumpTo(nextMove) {    setCurrentMove(nextMove);  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li key={move}>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                        },
                                        "If you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game, listed in order of increasing difficulty:",
                                        "  1.For the current move only, show “You are at move #…” instead of a button.",
                                        "  2.Rewrite Board to use two loops to make the squares instead of hardcoding them.",
                                        "  3.Add a toggle button that lets you sort the moves in either ascending or descending order.",
                                        "  4.When someone wins, highlight the three squares that caused the win (and when no one wins, display a message about the result being a draw).",
                                        "  5.Display the location for each move in the format (row, col) in the move history list.",
                                        "Throughout this tutorial, you’ve touched on React concepts including elements, components, props, and state. Now that you’ve seen how these concepts work when building a game, check out Thinking in React to see how the same React concepts work when building an app’s UI."
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Thinking in React",
                    "url": "https://react.dev/learn/thinking-in-react",
                    "content": [
                        "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.",
                        {
                            "sub_header": "Start with the mockup ",
                            "content": [
                                "Imagine that you already have a JSON API and a mockup from a designer.",
                                "The JSON API returns some data that looks like this:",
                                {
                                    "code_example": "[  { category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\" },  { category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\" },  { category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\" },  { category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\" },  { category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\" },  { category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\" }]"
                                },
                                "The mockup looks like this:",
                                "",
                                "To implement a UI in React, you will usually follow the same five steps."
                            ]
                        },
                        {
                            "sub_header": "Step 1: Break the UI into a component hierarchy ",
                            "content": [
                                "Start by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Ask them!",
                                "Depending on your background, you can think about splitting up a design into components in different ways:",
                                "  1.Programming—use the same techniques for deciding if you should create a new function or object. One such technique is the single responsibility principle, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.",
                                "  2.CSS—consider what you would make class selectors for. (However, components are a bit less granular.)",
                                "  3.Design—consider how you would organize the design’s layers.",
                                "If your JSON is well-structured, you’ll often find that it naturally maps to the component structure of your UI. That’s because UI and data models often have the same information architecture—that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.",
                                "There are five components on this screen:",
                                {
                                    "code_example": "FilterableProductTable"
                                },
                                "If you look at ProductTable (lavender), you’ll see that the table header (containing the “Name” and “Price” labels) isn’t its own component. This is a matter of preference, and you could go either way. For this example, it is a part of ProductTable because it appears inside the ProductTable’s list. However, if this header grows to be complex (e.g., if you add sorting), you can move it into its own ProductTableHeader component.",
                                "Now that you’ve identified the components in the mockup, arrange them into a hierarchy. Components that appear within another component in the mockup should appear as a child in the hierarchy:",
                                "  1.FilterableProductTable\n\nSearchBar\nProductTable\n\nProductCategoryRow\nProductRow\n\n\n\n",
                                "  2.SearchBar",
                                "  3.ProductTable\n\nProductCategoryRow\nProductRow\n\n",
                                "  4.ProductCategoryRow",
                                "  5.ProductRow"
                            ]
                        },
                        {
                            "sub_header": "Step 2: Build a static version in React ",
                            "content": [
                                "Now that you have your component hierarchy, it’s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity… yet! It’s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.",
                                "To build a static version of your app that renders your data model, you’ll want to build components that reuse other components and pass data using props. Props are a way of passing data from parent to child. (If you’re familiar with the concept of state, don’t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don’t need it.)",
                                "You can either build “top down” by starting with building the components higher up in the hierarchy (like FilterableProductTable) or “bottom up” by working from components lower down (like ProductRow). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up.",
                                {
                                    "code_sandbox": "function ProductCategoryRow({ category }) {  return (    <tr>      <th colSpan=\"2\">        {category}      </th>    </tr>  );}function ProductRow({ product }) {  const name = product.stocked ? product.name :    <span style={{ color: 'red' }}>      {product.name}    </span>;  return (    <tr>      <td>{name}</td>      <td>{product.price}</td>    </tr>  );}function ProductTable({ products }) {  const rows = [];  let lastCategory = null;  products.forEach((product) => {    if (product.category !== lastCategory) {      rows.push(        <ProductCategoryRow          category={product.category}          key={product.category} />      );    }    rows.push(      <ProductRow        product={product}        key={product.name} />    );    lastCategory = product.category;  });  return (    <table>      <thead>        <tr>          <th>Name</th>          <th>Price</th>        </tr>      </thead>      <tbody>{rows}</tbody>    </table>  );}function SearchBar() {  return (    <form>      <input type=\"text\" placeholder=\"Search...\" />      <label>        <input type=\"checkbox\" />        {' '}        Only show products in stock      </label>    </form>  );}function FilterableProductTable({ products }) {  return (    <div>      <SearchBar />      <ProductTable products={products} />    </div>  );}const PRODUCTS = [  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}];export default function App() {  return <FilterableProductTable products={PRODUCTS} />;}"
                                },
                                "(If this code looks intimidating, go through the Quick Start first!)",
                                "After building your components, you’ll have a library of reusable components that render your data model. Because this is a static app, the components will only return JSX. The component at the top of the hierarchy (FilterableProductTable) will take your data model as a prop. This is called one-way data flow because the data flows down from the top-level component to the ones at the bottom of the tree.",
                                "PitfallAt this point, you should not be using any state values. That’s for the next step!"
                            ]
                        },
                        {
                            "sub_header": "Step 3: Find the minimal but complete representation of UI state ",
                            "content": [
                                "To make the UI interactive, you need to let users change your underlying data model. You will use state for this.",
                                "Think of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep it DRY (Don’t Repeat Yourself). Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you’re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don’t store the number of items as another state value—instead, read the length of your array.",
                                "Now think of all of the pieces of data in this example application:",
                                "  1.The original list of products",
                                "  2.The search text the user has entered",
                                "  3.The value of the checkbox",
                                "  4.The filtered list of products",
                                "Which of these are state? Identify the ones that are not:",
                                "  1.Does it remain unchanged over time? If so, it isn’t state.",
                                "  2.Is it passed in from a parent via props? If so, it isn’t state.",
                                "  3.Can you compute it based on existing state or props in your component? If so, it definitely isn’t state!",
                                "What’s left is probably state.",
                                "Let’s go through them one by one again:",
                                "  1.The original list of products is passed in as props, so it’s not state.",
                                "  2.The search text seems to be state since it changes over time and can’t be computed from anything.",
                                "  3.The value of the checkbox seems to be state since it changes over time and can’t be computed from anything.",
                                "  4.The filtered list of products isn’t state because it can be computed by taking the original list of products and filtering it according to the search text and value of the checkbox.",
                                "This means only the search text and the value of the checkbox are state! Nicely done!",
                                "Deep DiveProps vs State Show DetailsThere are two types of “model” data in React: props and state. The two are very different:\nProps are like arguments you pass to a function. They let a parent component pass data to a child component and customize its appearance. For example, a Form can pass a color prop to a Button.\nState is like a component’s memory. It lets a component keep track of some information and change it in response to interactions. For example, a Button might keep track of isHovered state.\nProps and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), and pass it down to child components as their props. It’s okay if the difference still feels fuzzy on the first read. It takes a bit of practice for it to really stick!"
                            ]
                        },
                        {
                            "sub_header": "Step 4: Identify where your state should live ",
                            "content": [
                                "After identifying your app’s minimal state data, you need to identify which component is responsible for changing this state, or owns the state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you’re new to this concept, but you can figure it out by following these steps!",
                                "For each piece of state in your application:",
                                "  1.Identify every component that renders something based on that state.",
                                "  2.Find their closest common parent component—a component above them all in the hierarchy.",
                                "  3.Decide where the state should live:\n\nOften, you can put the state directly into their common parent.\nYou can also put the state into some component above their common parent.\nIf you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\n\n",
                                "  4.Often, you can put the state directly into their common parent.",
                                "  5.You can also put the state into some component above their common parent.",
                                "  6.If you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.",
                                "In the previous step, you found two pieces of state in this application: the search input text, and the value of the checkbox. In this example, they always appear together, so it makes sense to put them into the same place.",
                                "Now let’s run through our strategy for them:",
                                "  1.Identify components that use state:\n\nProductTable needs to filter the product list based on that state (search text and checkbox value).\nSearchBar needs to display that state (search text and checkbox value).\n\n",
                                "  2.ProductTable needs to filter the product list based on that state (search text and checkbox value).",
                                "  3.SearchBar needs to display that state (search text and checkbox value).",
                                "  4.Find their common parent: The first parent component both components share is FilterableProductTable.",
                                "  5.Decide where the state lives: We’ll keep the filter text and checked state values in FilterableProductTable.",
                                "So the state values will live in FilterableProductTable.",
                                "Add state to the component with the useState() Hook. Hooks are special functions that let you “hook into” React. Add two state variables at the top of FilterableProductTable and specify their initial state:",
                                {
                                    "code_example": "function FilterableProductTable({ products }) {  const [filterText, setFilterText] = useState('');  const [inStockOnly, setInStockOnly] = useState(false);"
                                },
                                "Then, pass filterText and inStockOnly to ProductTable and SearchBar as props:",
                                {
                                    "code_example": "<div>  <SearchBar     filterText={filterText}     inStockOnly={inStockOnly} />  <ProductTable     products={products}    filterText={filterText}    inStockOnly={inStockOnly} /></div>"
                                },
                                "You can start seeing how your application will behave. Edit the filterText initial value from useState('') to useState('fruit') in the sandbox code below. You’ll see both the search input text and the table update:",
                                {
                                    "code_sandbox": "import { useState } from 'react';function FilterableProductTable({ products }) {  const [filterText, setFilterText] = useState('');  const [inStockOnly, setInStockOnly] = useState(false);  return (    <div>      <SearchBar         filterText={filterText}         inStockOnly={inStockOnly} />      <ProductTable         products={products}        filterText={filterText}        inStockOnly={inStockOnly} />    </div>  );}function ProductCategoryRow({ category }) {  return (    <tr>      <th colSpan=\"2\">        {category}      </th>    </tr>  );}function ProductRow({ product }) {  const name = product.stocked ? product.name :    <span style={{ color: 'red' }}>      {product.name}    </span>;  return (    <tr>      <td>{name}</td>      <td>{product.price}</td>    </tr>  );}function ProductTable({ products, filterText, inStockOnly }) {  const rows = [];  let lastCategory = null;  products.forEach((product) => {    if (      product.name.toLowerCase().indexOf(        filterText.toLowerCase()      ) === -1    ) {      return;    }    if (inStockOnly && !product.stocked) {      return;    }    if (product.category !== lastCategory) {      rows.push(        <ProductCategoryRow          category={product.category}          key={product.category} />      );    }    rows.push(      <ProductRow        product={product}        key={product.name} />    );    lastCategory = product.category;  });  return (    <table>      <thead>        <tr>          <th>Name</th>          <th>Price</th>        </tr>      </thead>      <tbody>{rows}</tbody>    </table>  );}function SearchBar({ filterText, inStockOnly }) {  return (    <form>      <input         type=\"text\"         value={filterText}         placeholder=\"Search...\"/>      <label>        <input           type=\"checkbox\"           checked={inStockOnly} />        {' '}        Only show products in stock      </label>    </form>  );}const PRODUCTS = [  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}];export default function App() {  return <FilterableProductTable products={PRODUCTS} />;}"
                                },
                                "Notice that editing the form doesn’t work yet. There is a console error in the sandbox above explaining why:",
                                "ConsoleYou provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field.",
                                "In the sandbox above, ProductTable and SearchBar read the filterText and inStockOnly props to render the table, the input, and the checkbox. For example, here is how SearchBar populates the input value:",
                                {
                                    "code_example": "function SearchBar({ filterText, inStockOnly }) {  return (    <form>      <input         type=\"text\"         value={filterText}         placeholder=\"Search...\"/>"
                                },
                                "However, you haven’t added any code to respond to the user actions like typing yet. This will be your final step."
                            ]
                        },
                        {
                            "sub_header": "Step 5: Add inverse data flow ",
                            "content": [
                                "Currently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state in FilterableProductTable.",
                                "React makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you’ll see that React ignores your input. This is intentional. By writing <input value={filterText} />, you’ve set the value prop of the input to always be equal to the filterText state passed in from FilterableProductTable. Since filterText state is never set, the input never changes.",
                                "You want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned by FilterableProductTable, so only it can call setFilterText and setInStockOnly. To let SearchBar update the FilterableProductTable’s state, you need to pass these functions down to SearchBar:",
                                {
                                    "code_example": "function FilterableProductTable({ products }) {  const [filterText, setFilterText] = useState('');  const [inStockOnly, setInStockOnly] = useState(false);  return (    <div>      <SearchBar         filterText={filterText}         inStockOnly={inStockOnly}        onFilterTextChange={setFilterText}        onInStockOnlyChange={setInStockOnly} />"
                                },
                                "Inside the SearchBar, you will add the onChange event handlers and set the parent state from them:",
                                {
                                    "code_example": "function SearchBar({  filterText,  inStockOnly,  onFilterTextChange,  onInStockOnlyChange}) {  return (    <form>      <input        type=\"text\"        value={filterText}        placeholder=\"Search...\"        onChange={(e) => onFilterTextChange(e.target.value)}      />      <label>        <input          type=\"checkbox\"          checked={inStockOnly}          onChange={(e) => onInStockOnlyChange(e.target.checked)}"
                                },
                                "Now the application fully works!",
                                {
                                    "code_sandbox": "import { useState } from 'react';function FilterableProductTable({ products }) {  const [filterText, setFilterText] = useState('');  const [inStockOnly, setInStockOnly] = useState(false);  return (    <div>      <SearchBar         filterText={filterText}         inStockOnly={inStockOnly}         onFilterTextChange={setFilterText}         onInStockOnlyChange={setInStockOnly} />      <ProductTable         products={products}         filterText={filterText}        inStockOnly={inStockOnly} />    </div>  );}function ProductCategoryRow({ category }) {  return (    <tr>      <th colSpan=\"2\">        {category}      </th>    </tr>  );}function ProductRow({ product }) {  const name = product.stocked ? product.name :    <span style={{ color: 'red' }}>      {product.name}    </span>;  return (    <tr>      <td>{name}</td>      <td>{product.price}</td>    </tr>  );}function ProductTable({ products, filterText, inStockOnly }) {  const rows = [];  let lastCategory = null;  products.forEach((product) => {    if (      product.name.toLowerCase().indexOf(        filterText.toLowerCase()      ) === -1    ) {      return;    }    if (inStockOnly && !product.stocked) {      return;    }    if (product.category !== lastCategory) {      rows.push(        <ProductCategoryRow          category={product.category}          key={product.category} />      );    }    rows.push(      <ProductRow        product={product}        key={product.name} />    );    lastCategory = product.category;  });  return (    <table>      <thead>        <tr>          <th>Name</th>          <th>Price</th>        </tr>      </thead>      <tbody>{rows}</tbody>    </table>  );}function SearchBar({  filterText,  inStockOnly,  onFilterTextChange,  onInStockOnlyChange}) {  return (    <form>      <input         type=\"text\"         value={filterText} placeholder=\"Search...\"         onChange={(e) => onFilterTextChange(e.target.value)} />      <label>        <input           type=\"checkbox\"           checked={inStockOnly}           onChange={(e) => onInStockOnlyChange(e.target.checked)} />        {' '}        Only show products in stock      </label>    </form>  );}const PRODUCTS = [  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}];export default function App() {  return <FilterableProductTable products={PRODUCTS} />;}"
                                },
                                "You can learn all about handling events and updating state in the Adding Interactivity section."
                            ]
                        },
                        {
                            "sub_header": "Where to go from here ",
                            "content": [
                                "This was a very brief introduction to how to think about building components and applications with React. You can start a React project right now or dive deeper on all the syntax used in this tutorial."
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "Installation",
            "source": "react",
            "url": "https://react.dev/learn/installation",
            "sections": [
                "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.",
                "In this chapter\nHow to start a new React project\nHow to add React to an existing project\nHow to set up your editor\nHow to install React Developer Tools\n",
                {
                    "subHeader": "Next steps ",
                    "url": "https://react.dev/learn/installation/#try-react-locally",
                    "sections": [
                        {
                            "subHeader": "Next steps ",
                            "url": "https://react.dev/learn/installation/#try-react-locally",
                            "sections": [
                                "Head to the Quick Start guide for a tour of the most important React concepts you will encounter every day."
                            ]
                        }
                    ]
                }
            ],
            "subTopics": [
                {
                    "headers": "Start a New React Project",
                    "url": "https://react.dev/learn/start-a-new-react-project",
                    "content": [
                        "If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.",
                        "You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.",
                        "By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.",
                        "Deep DiveCan I use React without a framework? Show DetailsYou can definitely use React without a framework—that’s how you’d use React for a part of your page. However, if you’re building a new app or a site fully with React, we recommend using a framework.Here’s why.Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on. To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.React frameworks on this page solve problems like these by default, with no extra work from your side. They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).If your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grab react and react-dom from npm, set up your custom build process with a bundler like Vite or Parcel, and add other tools as you need them for routing, static generation or server-side rendering, and more.",
                        {
                            "sub_header": "Production-grade React frameworks ",
                            "content": [
                                "These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting our full-stack architecture vision. All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you’re a framework author interested in being included on this list, please let us know.",
                                {
                                    "sub_header": "Next.js ",
                                    "content": [
                                        "Next.js’ Pages Router is a full-stack React framework. It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:",
                                        " Terminal  Copynpx create-next-app@latest",
                                        "If you’re new to Next.js, check out the learn Next.js course.",
                                        "Next.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports a static export which doesn’t require a server."
                                    ]
                                },
                                {
                                    "sub_header": "Remix ",
                                    "content": [
                                        "Remix is a full-stack React framework with nested routing. It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:",
                                        " Terminal  Copynpx create-remix",
                                        "If you’re new to Remix, check out the Remix blog tutorial (short) and app tutorial (long).",
                                        "Remix is maintained by Shopify. When you create a Remix project, you need to pick your deployment target. You can deploy a Remix app to any Node.js or serverless hosting by using or writing an adapter."
                                    ]
                                },
                                {
                                    "sub_header": "Gatsby ",
                                    "content": [
                                        "Gatsby is a React framework for fast CMS-backed websites. Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:",
                                        " Terminal  Copynpx create-gatsby",
                                        "If you’re new to Gatsby, check out the Gatsby tutorial.",
                                        "Gatsby is maintained by Netlify. You can deploy a fully static Gatsby site to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby."
                                    ]
                                },
                                {
                                    "sub_header": "Expo (for native apps) ",
                                    "content": [
                                        "Expo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. To create a new Expo project, run:",
                                        " Terminal  Copynpx create-expo-app",
                                        "If you’re new to Expo, check out the Expo tutorial.",
                                        "Expo is maintained by Expo (the company). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Bleeding-edge React frameworks ",
                            "content": [
                                "As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like React Server Components.",
                                "These features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)",
                                {
                                    "sub_header": "Next.js (App Router) ",
                                    "content": [
                                        "Next.js’s App Router is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision. It lets you fetch data in asynchronous components that run on the server or even during the build.",
                                        "Next.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports static export which doesn’t require a server.",
                                        "Deep DiveWhich features make up the React team’s full-stack architecture vision? Show DetailsNext.js’s App Router bundler fully implements the official React Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.For example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components:// This component runs *only* on the server (or during the build).async function Talks({ confId }) {  // 1. You're on the server, so you can talk to your data layer. API endpoint not required.  const talks = await db.Talks.findAll({ confId });  // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.  const videos = talks.map(talk => talk.video);  // 3. Pass the data down to the components that will run in the browser.  return <SearchableVideoList videos={videos} />;}Next.js’s App Router also integrates data fetching with Suspense. This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:<Suspense fallback={<TalksLoading />}>  <Talks confId={conf.id} /></Suspense>Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks."
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Add React to an Existing Project",
                    "url": "https://react.dev/learn/add-react-to-an-existing-project",
                    "content": [
                        "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.",
                        "NoteYou need to install Node.js for local development. Although you can try React online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.",
                        {
                            "sub_header": "Using React for an entire subroute of your existing website ",
                            "content": [
                                "Let’s say you have an existing web app at example.com built with another server technology (like Rails), and you want to implement all routes starting with example.com/some-app/ fully with React.",
                                "Here’s how we recommend to set it up:",
                                "  1.Build the React part of your app using one of the React-based frameworks.",
                                "  2.Specify /some-app as the base path in your framework’s configuration (here’s how: Next.js, Gatsby).",
                                "  3.Configure your server or a proxy so that all requests under /some-app/ are handled by your React app.",
                                "This ensures the React part of your app can benefit from the best practices baked into those frameworks.",
                                "Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (next export output for Next.js, default for Gatsby) at /some-app/ instead."
                            ]
                        },
                        {
                            "sub_header": "Using React for a part of your existing page ",
                            "content": [
                                "Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!",
                                "You can do this in two steps:",
                                "  1.Set up a JavaScript environment that lets you use the JSX syntax, split your code into modules with the import / export syntax, and use packages (for example, React) from the npm package registry.",
                                "  2.Render your React components where you want to see them on the page.",
                                "The exact approach depends on your existing page setup, so let’s walk through some details.",
                                {
                                    "sub_header": "Step 1: Set up a modular JavaScript environment ",
                                    "content": [
                                        "A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the npm registry—including React itself! How you do this depends on your existing setup:",
                                        "  1.\nIf your app is already split into files that use import statements, try to use the setup you already have. Check whether writing <div /> in your JS code causes a syntax error. If it causes a syntax error, you might need to transform your JavaScript code with Babel, and enable the Babel React preset to use JSX.\n",
                                        "  2.\nIf your app doesn’t have an existing setup for compiling JavaScript modules, set it up with Vite. The Vite community maintains many integrations with backend frameworks, including Rails, Django, and Laravel. If your backend framework is not listed, follow this guide to manually integrate Vite builds with your backend.\n",
                                        "To check whether your setup works, run this command in your project folder:",
                                        " Terminal  Copynpm install react react-dom",
                                        "Then add these lines of code at the top of your main JavaScript file (it might be called index.js or main.js):",
                                        {
                                            "code_sandbox": "import { createRoot } from 'react-dom/client';// Clear the existing HTML contentdocument.body.innerHTML = '<div id=\"app\"></div>';// Render your React component insteadconst root = createRoot(document.getElementById('app'));root.render(<h1>Hello, world</h1>);"
                                        },
                                        "If the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.",
                                        "NoteIntegrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our community resources or the Vite Chat."
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Render React components anywhere on the page ",
                                    "content": [
                                        "In the previous step, you put this code at the top of your main file:",
                                        {
                                            "code_example": "import { createRoot } from 'react-dom/client';// Clear the existing HTML contentdocument.body.innerHTML = '<div id=\"app\"></div>';// Render your React component insteadconst root = createRoot(document.getElementById('app'));root.render(<h1>Hello, world</h1>);"
                                        },
                                        "Of course, you don’t actually want to clear the existing HTML content!",
                                        "Delete this code.",
                                        "Instead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique id attribute to any tag, for example:",
                                        {
                                            "code_example": "<!-- ... somewhere in your html ... --><nav id=\"navigation\"></nav><!-- ... more html ... -->"
                                        },
                                        "This lets you find that HTML element with document.getElementById and pass it to createRoot so that you can render your own React component inside:",
                                        {
                                            "code_sandbox": "import { createRoot } from 'react-dom/client';function NavigationBar() {  // TODO: Actually implement a navigation bar  return <h1>Hello from React!</h1>;}const domNode = document.getElementById('navigation');const root = createRoot(domNode);root.render(<NavigationBar />);"
                                        },
                                        "Notice how the original HTML content from index.html is preserved, but your own NavigationBar React component now appears inside the <nav id=\"navigation\"> from your HTML. Read the createRoot usage documentation to learn more about rendering React components inside an existing HTML page.",
                                        "When you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to a React framework right after to get the most out of React."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Using React Native in an existing native mobile app ",
                            "content": [
                                "React Native can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), follow this guide to add a React Native screen to it."
                            ]
                        }
                    ]
                },
                {
                    "headers": "Editor Setup",
                    "url": "https://react.dev/learn/editor-setup",
                    "content": [
                        "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.",
                        "You will learn\nWhat the most popular editors are\nHow to format your code automatically\n",
                        {
                            "sub_header": "Your editor ",
                            "content": [
                                "VS Code is one of the most popular editors in use today. It has a large marketplace of extensions and integrates well with popular services like GitHub. Most of the features listed below can be added to VS Code as extensions as well, making it highly configurable!",
                                "Other popular text editors used in the React community include:",
                                "  1.WebStorm is an integrated development environment designed specifically for JavaScript.",
                                "  2.Sublime Text has support for JSX and TypeScript, syntax highlighting and autocomplete built in.",
                                "  3.Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as “vi” with most UNIX systems and with Apple OS X."
                            ]
                        },
                        {
                            "sub_header": "Recommended text editor features ",
                            "content": [
                                "Some editors come with these features built in, but others might require adding an extension. Check to see what support your editor of choice provides to be sure!",
                                {
                                    "sub_header": "Linting ",
                                    "content": [
                                        "Code linters find problems in your code as you write, helping you fix them early. ESLint is a popular, open source linter for JavaScript.",
                                        "  1.Install ESLint with the recommended configuration for React (be sure you have Node installed!)",
                                        "  2.Integrate ESLint in VSCode with the official extension",
                                        "Make sure that you’ve enabled all the eslint-plugin-react-hooks rules for your project. They are essential and catch the most severe bugs early. The recommended eslint-config-react-app preset already includes them."
                                    ]
                                },
                                {
                                    "sub_header": "Formatting ",
                                    "content": [
                                        "The last thing you want to do when sharing your code with another contributor is get into a discussion about tabs vs spaces! Fortunately, Prettier will clean up your code by reformatting it to conform to preset, configurable rules. Run Prettier, and all your tabs will be converted to spaces—and your indentation, quotes, etc will also all be changed to conform to the configuration. In the ideal setup, Prettier will run when you save your file, quickly making these edits for you.",
                                        "You can install the Prettier extension in VSCode by following these steps:",
                                        "  1.Launch VS Code",
                                        "  2.Use Quick Open (press Ctrl/Cmd+P)",
                                        "  3.Paste in ext install esbenp.prettier-vscode",
                                        "  4.Press Enter",
                                        {
                                            "sub_header": "Formatting on save ",
                                            "content": [
                                                "Ideally, you should format your code on every save. VS Code has settings for this!",
                                                "  1.In VS Code, press CTRL/CMD + SHIFT + P.",
                                                "  2.Type “settings”",
                                                "  3.Hit Enter",
                                                "  4.In the search bar, type “format on save”",
                                                "  5.Be sure the “format on save” option is ticked!",
                                                "\nIf your ESLint preset has formatting rules, they may conflict with Prettier. We recommend disabling all formatting rules in your ESLint preset using eslint-config-prettier so that ESLint is only used for catching logical mistakes. If you want to enforce that files are formatted before a pull request is merged, use prettier --check for your continuous integration.\n"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Using TypeScript",
                    "url": "https://react.dev/learn/typescript",
                    "content": [
                        {
                            "sub_header": "Installation ",
                            "content": [
                                "All production-grade React frameworks offer support for using TypeScript. Follow the framework specific guide for installation:",
                                "  1.Next.js",
                                "  2.Remix",
                                "  3.Gatsby",
                                "  4.Expo",
                                {
                                    "sub_header": "Adding TypeScript to an existing React project ",
                                    "content": [
                                        "To install the latest version of React’s type definitions:",
                                        " Terminal  Copynpm install @types/react @types/react-dom",
                                        "The following compiler options need to be set in your tsconfig.json:",
                                        "  1.dom must be included in lib (Note: If no lib option is specified, dom is included by default).",
                                        "  2.jsx must be set to one of the valid options. preserve should suffice for most applications.\nIf you’re publishing a library, consult the jsx documentation on what value to choose."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "TypeScript with React Components ",
                            "content": [
                                "Writing TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can provide types for your component’s props. These types can be used for correctness checking and providing inline documentation in editors.",
                                "Taking the MyButton component from the Quick Start guide, we can add a type describing the title for the button:",
                                {
                                    "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundfunction MyButton({ title }: { title: string }) {  return (    <button>{title}</button>  );}export default function MyApp() {  return (    <div>      <h1>Welcome to my app</h1>      <MyButton title=\"I'm a button\" />    </div>  );}"
                                },
                                "NoteThese sandboxes can handle TypeScript code, but they do not run the type-checker. This means you can amend the TypeScript sandboxes to learn, but you won’t get any type errors or warnings. To get type-checking, you can use the TypeScript Playground or use a more fully-featured online sandbox.",
                                "This inline syntax is the simplest way to provide types for a component, though once you start to have a few fields to describe it can become unwieldy. Instead, you can use an interface or type to describe the component’s props:",
                                {
                                    "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundinterface MyButtonProps {  /** The text to display inside the button */  title: string;  /** Whether the button can be interacted with */  disabled: boolean;}function MyButton({ title, disabled }: MyButtonProps) {  return (    <button disabled={disabled}>{title}</button>  );}export default function MyApp() {  return (    <div>      <h1>Welcome to my app</h1>      <MyButton title=\"I'm a disabled button\" disabled={true}/>    </div>  );}"
                                },
                                "The type describing your component’s props can be as simple or as complex as you need, though they should be an object type described with either a type or interface. You can learn about how TypeScript describes objects in Object Types but you may also be interested in using Union Types to describe a prop that can be one of a few different types and the Creating Types from Types guide for more advanced use cases."
                            ]
                        },
                        {
                            "sub_header": "Example Hooks ",
                            "content": [
                                "The type definitions from @types/react include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get inferred types a lot of the time and ideally do not need to handle the minutiae of providing the types.",
                                "However, we can look at a few examples of how to provide types for Hooks.",
                                {
                                    "sub_header": "useState ",
                                    "content": [
                                        "The useState Hook will re-use the value passed in as the initial state to determine what the type of the value should be. For example:",
                                        {
                                            "code_example": "// Infer the type as \"boolean\"const [enabled, setEnabled] = useState(false);"
                                        },
                                        "This will assign the type of boolean to enabled, and setEnabled will be a function accepting either a boolean argument, or a function that returns a boolean. If you want to explicitly provide a type for the state, you can do so by providing a type argument to the useState call:",
                                        {
                                            "code_example": "// Explicitly set the type to \"boolean\"const [enabled, setEnabled] = useState<boolean>(false);"
                                        },
                                        "This isn’t very useful in this case, but a common case where you may want to provide a type is when you have a union type. For example, status here can be one of a few different strings:",
                                        {
                                            "code_example": "type Status = \"idle\" | \"loading\" | \"success\" | \"error\";const [status, setStatus] = useState<Status>(\"idle\");"
                                        },
                                        "Or, as recommended in Principles for structuring state, you can group related state as an object and describe the different possibilities via object types:",
                                        {
                                            "code_example": "type RequestState =  | { status: 'idle' }  | { status: 'loading' }  | { status: 'success', data: any }  | { status: 'error', error: Error };const [requestState, setRequestState] = useState<RequestState>({ status: 'idle' });"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "useReducer ",
                                    "content": [
                                        "The useReducer Hook is a more complex Hook that takes a reducer function and an initial state. The types for the reducer function are inferred from the initial state. You can optionally provide a type argument to the useReducer call to provide a type for the state, but it is often better to set the type on the initial state instead:",
                                        {
                                            "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundimport {useReducer} from 'react';interface State {   count: number };type CounterAction =  | { type: \"reset\" }  | { type: \"setCount\"; value: State[\"count\"] }const initialState: State = { count: 0 };function stateReducer(state: State, action: CounterAction): State {  switch (action.type) {    case \"reset\":      return initialState;    case \"setCount\":      return { ...state, count: action.value };    default:      throw new Error(\"Unknown action\");  }}export default function App() {  const [state, dispatch] = useReducer(stateReducer, initialState);  const addFive = () => dispatch({ type: \"setCount\", value: state.count + 5 });  const reset = () => dispatch({ type: \"reset\" });  return (    <div>      <h1>Welcome to my counter</h1>      <p>Count: {state.count}</p>      <button onClick={addFive}>Add 5</button>      <button onClick={reset}>Reset</button>    </div>  );}"
                                        },
                                        "We are using TypeScript in a few key places:",
                                        "  1.interface State describes the shape of the reducer’s state.",
                                        "  2.type CounterAction describes the different actions which can be dispatched to the reducer.",
                                        "  3.const initialState: State provides a type for the initial state, and also the type which is used by useReducer by default.",
                                        "  4.stateReducer(state: State, action: CounterAction): State sets the types for the reducer function’s arguments and return value.",
                                        "A more explicit alternative to setting the type on initialState is to provide a type argument to useReducer:",
                                        {
                                            "code_example": "import { stateReducer, State } from './your-reducer-implementation';const initialState = { count: 0 };export default function App() {  const [state, dispatch] = useReducer<State>(stateReducer, initialState);}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "useContext ",
                                    "content": [
                                        "The useContext Hook is a technique for passing data down the component tree without having to pass props through components. It is used by creating a provider component and often by creating a Hook to consume the value in a child component.",
                                        "The type of the value provided by the context is inferred from the value passed to the createContext call:",
                                        {
                                            "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundimport { createContext, useContext, useState } from 'react';type Theme = \"light\" | \"dark\" | \"system\";const ThemeContext = createContext<Theme>(\"system\");const useGetTheme = () => useContext(ThemeContext);export default function MyApp() {  const [theme, setTheme] = useState<Theme>('light');  return (    <ThemeContext.Provider value={theme}>      <MyComponent />    </ThemeContext.Provider>  )}function MyComponent() {  const theme = useGetTheme();  return (    <div>      <p>Current theme: {theme}</p>    </div>  )}"
                                        },
                                        "This technique works when you have a default value which makes sense - but there are occasionally cases when you do not, and in those cases null can feel reasonable as a default value. However, to allow the type-system to understand your code, you need to explicitly set ContextShape | null on the createContext.",
                                        "This causes the issue that you need to eliminate the | null in the type for context consumers. Our recommendation is to have the Hook do a runtime check for it’s existence and throw an error when not present:",
                                        {
                                            "code_example": "import { createContext, useContext, useState, useMemo } from 'react';// This is a simpler example, but you can imagine a more complex object heretype ComplexObject = {  kind: string};// The context is created with `| null` in the type, to accurately reflect the default value.const Context = createContext<ComplexObject | null>(null);// The `| null` will be removed via the check in the Hook.const useGetComplexObject = () => {  const object = useContext(Context);  if (!object) { throw new Error(\"useGetComplexObject must be used within a Provider\") }  return object;}export default function MyApp() {  const object = useMemo(() => ({ kind: \"complex\" }), []);  return (    <Context.Provider value={object}>      <MyComponent />    </Context.Provider>  )}function MyComponent() {  const object = useGetComplexObject();  return (    <div>      <p>Current object: {object.kind}</p>    </div>  )}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "useMemo ",
                                    "content": [
                                        "The useMemo Hooks will create/re-access a memorized value from a function call, re-running the function only when dependencies passed as the 2nd parameter are changed. The result of calling the Hook is inferred from the return value from the function in the first parameter. You can be more explicit by providing a type argument to the Hook.",
                                        {
                                            "code_example": "// The type of visibleTodos is inferred from the return value of filterTodosconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "useCallback ",
                                    "content": [
                                        "The useCallback provide a stable reference to a function as long as the dependencies passed into the second parameter are the same. Like useMemo, the function’s type is inferred from the return value of the function in the first parameter, and you can be more explicit by providing a type argument to the Hook.",
                                        {
                                            "code_example": "const handleClick = useCallback(() => {  // ...}, [todos]);"
                                        },
                                        "When working in TypeScript strict mode useCallback requires adding types for the parameters in your callback. This is because the type of the callback is inferred from the return value of the function, and without parameters the type cannot be fully understood.",
                                        "Depending on your code-style preferences, you could use the *EventHandler functions from the React types to provide the type for the event handler at the same time as defining the callback:",
                                        {
                                            "code_example": "import { useState, useCallback } from 'react';export default function Form() {  const [value, setValue] = useState(\"Change me\");  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {    setValue(event.currentTarget.value);  }, [setValue])    return (    <>      <input value={value} onChange={handleChange} />      <p>Value: {value}</p>    </>  );}"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Useful Types ",
                            "content": [
                                "There is quite an expansive set of types which come from the @types/react package, it is worth a read when you feel comfortable with how React and TypeScript interact. You can find them in React’s folder in DefinitelyTyped. We will cover a few of the more common types here.",
                                {
                                    "sub_header": "DOM Events ",
                                    "content": [
                                        "When working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to explicitly set the type of the event.",
                                        {
                                            "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundimport { useState } from 'react';export default function Form() {  const [value, setValue] = useState(\"Change me\");  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {    setValue(event.currentTarget.value);  }  return (    <>      <input value={value} onChange={handleChange} />      <p>Value: {value}</p>    </>  );}"
                                        },
                                        "There are many types of events provided in the React types - the full list can be found here which is based on the most popular events from the DOM.",
                                        "When determining the type you are looking for you can first look at the hover information for the event handler you are using, which will show the type of the event.",
                                        "If you need to use an event that is not included in this list, you can use the React.SyntheticEvent type, which is the base type for all events."
                                    ]
                                },
                                {
                                    "sub_header": "Children ",
                                    "content": [
                                        "There are two common paths to describing the children of a component. The first is to use the React.ReactNode type, which is a union of all the possible types that can be passed as children in JSX:",
                                        {
                                            "code_example": "interface ModalRendererProps {  title: string;  children: React.ReactNode;}"
                                        },
                                        "This is a very broad definition of children. The second is to use the React.ReactElement type, which is only JSX elements and not JavaScript primitives like strings or numbers:",
                                        {
                                            "code_example": "interface ModalRendererProps {  title: string;  children: React.ReactElement;}"
                                        },
                                        "Note, that you cannot use TypeScript to describe that the children are a certain type of JSX elements, so you cannot use the type-system to describe a component which only accepts <li> children.",
                                        "You can see an example of both React.ReactNode and React.ReactElement with the type-checker in this TypeScript playground."
                                    ]
                                },
                                {
                                    "sub_header": "Style Props ",
                                    "content": [
                                        "When using inline styles in React, you can use React.CSSProperties to describe the object passed to the style prop. This type is a union of all the possible CSS properties, and is a good way to ensure you are passing valid CSS properties to the style prop, and to get auto-complete in your editor.",
                                        {
                                            "code_example": "interface MyComponentProps {  style: React.CSSProperties;}"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Further learning ",
                            "content": [
                                "This guide has covered the basics of using TypeScript with React, but there is a lot more to learn.\nIndividual API pages on the docs may contain more in-depth documentation on how to use them with TypeScript.",
                                "We recommend the following resources:",
                                "  1.\nThe TypeScript handbook is the official documentation for TypeScript, and covers most key language features.\n",
                                "  2.\nThe TypeScript release notes cover new features in depth.\n",
                                "  3.\nReact TypeScript Cheatsheet is a community-maintained cheatsheet for using TypeScript with React, covering a lot of useful edge cases and providing more breadth than this document.\n",
                                "  4.\nTypeScript Community Discord is a great place to ask questions and get help with TypeScript and React issues.\n"
                            ]
                        }
                    ]
                },
                {
                    "headers": "React Developer Tools",
                    "url": "https://react.dev/learn/react-developer-tools",
                    "content": [
                        "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.",
                        "You will learn\nHow to install React Developer Tools\n",
                        {
                            "sub_header": "Browser extension ",
                            "content": [
                                "The easiest way to debug websites built with React is to install the React Developer Tools browser extension. It is available for several popular browsers:",
                                "  1.Install for Chrome",
                                "  2.Install for Firefox",
                                "  3.Install for Edge",
                                "Now, if you visit a website built with React, you will see the Components and Profiler panels.",
                                "",
                                {
                                    "sub_header": "Safari and other browsers ",
                                    "content": [
                                        "For other browsers (for example, Safari), install the react-devtools npm package:",
                                        {
                                            "code_example": "# Yarnyarn global add react-devtools# Npmnpm install -g react-devtools"
                                        },
                                        "Next open the developer tools from the terminal:",
                                        {
                                            "code_example": "react-devtools"
                                        },
                                        "Then connect your website by adding the following <script> tag to the beginning of your website’s <head>:",
                                        {
                                            "code_example": "<html>  <head>    <script src=\"http://localhost:8097\"></script>"
                                        },
                                        "Reload your website in the browser now to view it in developer tools.",
                                        ""
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Mobile (React Native) ",
                            "content": [
                                "React Developer Tools can be used to inspect apps built with React Native as well.",
                                "The easiest way to use React Developer Tools is to install it globally:",
                                {
                                    "code_example": "# Yarnyarn global add react-devtools# Npmnpm install -g react-devtools"
                                },
                                "Next open the developer tools from the terminal.",
                                {
                                    "code_example": "react-devtools"
                                },
                                "It should connect to any local React Native app that’s running.",
                                "\nTry reloading the app if developer tools doesn’t connect after a few seconds.\n",
                                "Learn more about debugging React Native."
                            ]
                        }
                    ]
                },
                {
                    "headers": "React Compiler",
                    "url": "https://react.dev/learn/react-compiler",
                    "content": [
                        "This page will give you an introduction to React Compiler and how to try it out successfully.",
                        "Under ConstructionThese docs are still a work in progress. More documentation is available in the React Compiler Working Group repo, and will be upstreamed into these docs when they are more stable.",
                        "You will learn\nGetting started with the compiler\nInstalling the compiler and ESLint plugin\nTroubleshooting\n",
                        {
                            "code_example": "@beta"
                        },
                        "React Compiler is a new compiler that we’ve open sourced to get early feedback from the community. It is a build-time only tool that automatically optimizes your React app. It works with plain JavaScript, and understands the Rules of React, so you don’t need to rewrite any code to use it.",
                        "The compiler also includes an ESLint plugin that surfaces the analysis from the compiler right in your editor. We strongly recommend everyone use the linter today. The linter does not require that you have the compiler installed, so you can use it even if you are not ready to try out the compiler.",
                        "The compiler is currently released as beta, and is available to try out on React 17+ apps and libraries. To install the Beta:",
                        " Terminal  Copynpm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta",
                        "Or, if you’re using Yarn:",
                        " Terminal  Copyyarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta",
                        "If you are not using React 19 yet, please see the section below for further instructions.",
                        {
                            "sub_header": "What does the compiler do? ",
                            "content": [
                                "In order to optimize applications, React Compiler automatically memoizes your code. You may be familiar today with memoization through APIs such as useMemo, useCallback, and React.memo. With these APIs you can tell React that certain parts of your application don’t need to recompute if their inputs haven’t changed, reducing work on updates. While powerful, it’s easy to forget to apply memoization or apply them incorrectly. This can lead to inefficient updates as React has to check parts of your UI that don’t have any meaningful changes.",
                                "The compiler uses its knowledge of JavaScript and React’s rules to automatically memoize values or groups of values within your components and hooks. If it detects breakages of the rules, it will automatically skip over just those components or hooks, and continue safely compiling other code.",
                                "NoteReact Compiler can statically detect when Rules of React are broken, and safely opt-out of optimizing just the affected components or hooks. It is not necessary for the compiler to optimize 100% of your codebase.",
                                "If your codebase is already very well-memoized, you might not expect to see major performance improvements with the compiler. However, in practice memoizing the correct dependencies that cause performance issues is tricky to get right by hand.",
                                "Deep DiveWhat kind of memoization does React Compiler add? Show DetailsThe initial release of React Compiler is primarily focused on improving update performance (re-rendering existing components), so it focuses on these two use cases:\nSkipping cascading re-rendering of components\n\nRe-rendering <Parent /> causes many components in its component tree to re-render, even though only <Parent /> has changed\n\n\nSkipping expensive calculations from outside of React\n\nFor example, calling expensivelyProcessAReallyLargeArrayOfObjects() inside of your component or hook that needs that data\n\n\nOptimizing Re-renders React lets you express your UI as a function of their current state (more concretely: their props, state, and context). In its current implementation, when a component’s state changes, React will re-render that component and all of its children — unless you have applied some form of manual memoization with useMemo(), useCallback(), or React.memo(). For example, in the following example, <MessageButton> will re-render whenever <FriendList>’s state changes:function FriendList({ friends }) {  const onlineCount = useFriendOnlineCount();  if (friends.length === 0) {    return <NoFriends />;  }  return (    <div>      <span>{onlineCount} online</span>      {friends.map((friend) => (        <FriendListCard key={friend.id} friend={friend} />      ))}      <MessageButton />    </div>  );}See this example in the React Compiler PlaygroundReact Compiler automatically applies the equivalent of manual memoization, ensuring that only the relevant parts of an app re-render as state changes, which is sometimes referred to as “fine-grained reactivity”. In the above example, React Compiler determines that the return value of <FriendListCard /> can be reused even as friends changes, and can avoid recreating this JSX and avoid re-rendering <MessageButton> as the count changes.Expensive calculations also get memoized The compiler can also automatically memoize for expensive calculations used during rendering:// **Not** memoized by React Compiler, since this is not a component or hookfunction expensivelyProcessAReallyLargeArrayOfObjects() { /* ... */ }// Memoized by React Compiler since this is a componentfunction TableContainer({ items }) {  // This function call would be memoized:  const data = expensivelyProcessAReallyLargeArrayOfObjects(items);  // ...}See this example in the React Compiler PlaygroundHowever, if expensivelyProcessAReallyLargeArrayOfObjects is truly an expensive function, you may want to consider implementing its own memoization outside of React, because:\nReact Compiler only memoizes React components and hooks, not every function\nReact Compiler’s memoization is not shared across multiple components or hooks\nSo if expensivelyProcessAReallyLargeArrayOfObjects was used in many different components, even if the same exact items were passed down, that expensive calculation would be run repeatedly. We recommend profiling first to see if it really is that expensive before making code more complicated.",
                                {
                                    "sub_header": "Should I try out the compiler? ",
                                    "content": [
                                        "Please note that the compiler is still in Beta and has many rough edges. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you’ve followed the Rules of React.",
                                        "You don’t have to rush into using the compiler now. It’s okay to wait until it reaches a stable release before adopting it. However, we do appreciate trying it out in small experiments in your apps so that you can provide feedback to us to help make the compiler better."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Getting Started ",
                            "content": [
                                "In addition to these docs, we recommend checking the React Compiler Working Group for additional information and discussion about the compiler.",
                                {
                                    "sub_header": "Installing eslint-plugin-react-compiler ",
                                    "content": [
                                        "React Compiler also powers an ESLint plugin. The ESLint plugin can be used independently of the compiler, meaning you can use the ESLint plugin even if you don’t use the compiler.",
                                        " Terminal  Copynpm install -D eslint-plugin-react-compiler@beta",
                                        "Then, add it to your ESLint config:",
                                        {
                                            "code_example": "import reactCompiler from 'eslint-plugin-react-compiler'export default [  {    plugins: {      'react-compiler': reactCompiler,    },    rules: {      'react-compiler/react-compiler': 'error',    },  },]"
                                        },
                                        "Or, in the deprecated eslintrc config format:",
                                        {
                                            "code_example": "module.exports = {  plugins: [    'eslint-plugin-react-compiler',  ],  rules: {    'react-compiler/react-compiler': 'error',  },}"
                                        },
                                        "The ESLint plugin will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase.",
                                        "NoteYou don’t have to fix all ESLint violations straight away. You can address them at your own pace to increase the amount of components and hooks being optimized, but it is not required to fix everything before you can use the compiler."
                                    ]
                                },
                                {
                                    "sub_header": "Rolling out the compiler to your codebase ",
                                    "content": [
                                        {
                                            "sub_header": "Existing projects ",
                                            "content": [
                                                "The compiler is designed to compile functional components and hooks that follow the Rules of React. It can also handle code that breaks those rules by bailing out (skipping over) those components or hooks. However, due to the flexible nature of JavaScript, the compiler cannot catch every possible violation and may compile with false negatives: that is, the compiler may accidentally compile a component/hook that breaks the Rules of React which can lead to undefined behavior.",
                                                "For this reason, to adopt the compiler successfully on existing projects, we recommend running it on a small directory in your product code first. You can do this by configuring the compiler to only run on a specific set of directories:",
                                                {
                                                    "code_example": "const ReactCompilerConfig = {  sources: (filename) => {    return filename.indexOf('src/path/to/dir') !== -1;  },};"
                                                },
                                                "When you have more confidence with rolling out the compiler, you can expand coverage to other directories as well and slowly roll it out to your whole app."
                                            ]
                                        },
                                        {
                                            "sub_header": "New projects ",
                                            "content": [
                                                "If you’re starting a new project, you can enable the compiler on your entire codebase, which is the default behavior."
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Using React Compiler with React 17 or 18 ",
                                    "content": [
                                        "React Compiler works best with React 19 RC. If you are unable to upgrade, you can install the extra react-compiler-runtime package which will allow the compiled code to run on versions prior to 19. However, note that the minimum supported version is 17.",
                                        " Terminal  Copynpm install react-compiler-runtime@beta",
                                        "You should also add the correct target to your compiler config, where target is the major version of React you are targeting:",
                                        {
                                            "code_example": "// babel.config.jsconst ReactCompilerConfig = {  target: '18' // '17' | '18' | '19'};module.exports = function () {  return {    plugins: [      ['babel-plugin-react-compiler', ReactCompilerConfig],    ],  };};"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Using the compiler on libraries ",
                                    "content": [
                                        "React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.",
                                        "Because your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum target and add react-compiler-runtime as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.",
                                        "Library code can often require more complex patterns and usage of escape hatches. For this reason, we recommend ensuring that you have sufficient testing in order to identify any issues that might arise from using the compiler on your library. If you identify any issues, you can always opt-out the specific components or hooks with the 'use no memo' directive.",
                                        "Similarly to apps, it is not necessary to fully compile 100% of your components or hooks to see benefits in your library. A good starting point might be to identify the most performance sensitive parts of your library and ensuring that they don’t break the Rules of React, which you can use eslint-plugin-react-compiler to identify."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Usage ",
                            "content": [
                                {
                                    "sub_header": "Babel ",
                                    "content": [
                                        " Terminal  Copynpm install babel-plugin-react-compiler@beta",
                                        "The compiler includes a Babel plugin which you can use in your build pipeline to run the compiler.",
                                        "After installing, add it to your Babel config. Please note that it’s critical that the compiler run first in the pipeline:",
                                        {
                                            "code_example": "// babel.config.jsconst ReactCompilerConfig = { /* ... */ };module.exports = function () {  return {    plugins: [      ['babel-plugin-react-compiler', ReactCompilerConfig], // must run first!      // ...    ],  };};"
                                        },
                                        "babel-plugin-react-compiler should run first before other Babel plugins as the compiler requires the input source information for sound analysis."
                                    ]
                                },
                                {
                                    "sub_header": "Vite ",
                                    "content": [
                                        "If you use Vite, you can add the plugin to vite-plugin-react:",
                                        {
                                            "code_example": "// vite.config.jsconst ReactCompilerConfig = { /* ... */ };export default defineConfig(() => {  return {    plugins: [      react({        babel: {          plugins: [            [\"babel-plugin-react-compiler\", ReactCompilerConfig],          ],        },      }),    ],    // ...  };});"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Next.js ",
                                    "content": [
                                        "Please refer to the Next.js docs for more information."
                                    ]
                                },
                                {
                                    "sub_header": "Remix ",
                                    "content": [
                                        "Install vite-plugin-babel, and add the compiler’s Babel plugin to it:",
                                        " Terminal  Copynpm install vite-plugin-babel",
                                        {
                                            "code_example": "// vite.config.jsimport babel from \"vite-plugin-babel\";const ReactCompilerConfig = { /* ... */ };export default defineConfig({  plugins: [    remix({ /* ... */}),    babel({      filter: /\\.[jt]sx?$/,      babelConfig: {        presets: [\"@babel/preset-typescript\"], // if you use TypeScript        plugins: [          [\"babel-plugin-react-compiler\", ReactCompilerConfig],        ],      },    }),  ],});"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Webpack ",
                                    "content": [
                                        "A community Webpack loader is now available here."
                                    ]
                                },
                                {
                                    "sub_header": "Expo ",
                                    "content": [
                                        "Please refer to Expo’s docs to enable and use the React Compiler in Expo apps."
                                    ]
                                },
                                {
                                    "sub_header": "Metro (React Native) ",
                                    "content": [
                                        "React Native uses Babel via Metro, so refer to the Usage with Babel section for installation instructions."
                                    ]
                                },
                                {
                                    "sub_header": "Rspack ",
                                    "content": [
                                        "Please refer to Rspack’s docs to enable and use the React Compiler in Rspack apps."
                                    ]
                                },
                                {
                                    "sub_header": "Rsbuild ",
                                    "content": [
                                        "Please refer to Rsbuild’s docs to enable and use the React Compiler in Rsbuild apps."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Troubleshooting ",
                            "content": [
                                "To report issues, please first create a minimal repro on the React Compiler Playground and include it in your bug report. You can open issues in the facebook/react repo.",
                                "You can also provide feedback in the React Compiler Working Group by applying to be a member. Please see the README for more details on joining.",
                                {
                                    "sub_header": "What does the compiler assume? ",
                                    "content": [
                                        "React Compiler assumes that your code:",
                                        "  1.Is valid, semantic JavaScript.",
                                        "  2.Tests that nullable/optional values and properties are defined before accessing them (for example, by enabling strictNullChecks if using TypeScript), i.e., if (object.nullableProperty) { object.nullableProperty.foo } or with optional-chaining object.nullableProperty?.foo.",
                                        "  3.Follows the Rules of React.",
                                        "React Compiler can verify many of the Rules of React statically, and will safely skip compilation when it detects an error. To see the errors we recommend also installing eslint-plugin-react-compiler."
                                    ]
                                },
                                {
                                    "sub_header": "How do I know my components have been optimized? ",
                                    "content": [
                                        "React Devtools (v5.0+) has built-in support for React Compiler and will display a “Memo ✨” badge next to components that have been optimized by the compiler."
                                    ]
                                },
                                {
                                    "sub_header": "Something is not working after compilation ",
                                    "content": [
                                        "If you have eslint-plugin-react-compiler installed, the compiler will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase. You don’t have to fix all ESLint violations straight away. You can address them at your own pace to increase the amount of components and hooks being optimized.",
                                        "Due to the flexible and dynamic nature of JavaScript however, it’s not possible to comprehensively detect all cases. Bugs and undefined behavior such as infinite loops may occur in those cases.",
                                        "If your app doesn’t work properly after compilation and you aren’t seeing any ESLint errors, the compiler may be incorrectly compiling your code. To confirm this, try to make the issue go away by aggressively opting out any component or hook you think might be related via the \"use no memo\" directive.",
                                        {
                                            "code_example": "function SuspiciousComponent() {  \"use no memo\"; // opts out this component from being compiled by React Compiler  // ...}"
                                        },
                                        {
                                            "code_example": "\"use no memo\""
                                        },
                                        "When you make the error go away, confirm that removing the opt out directive makes the issue come back. Then share a bug report with us (you can try to reduce it to a small repro, or if it’s open source code you can also just paste the entire source) using the React Compiler Playground so we can identify and help fix the issue."
                                    ]
                                },
                                {
                                    "sub_header": "Other issues ",
                                    "content": [
                                        "Please see https://github.com/reactwg/react-compiler/discussions/7."
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "Describing the UI",
            "source": "react",
            "url": "https://react.dev/learn/describing-the-ui",
            "sections": [
                "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.",
                "In this chapter\nHow to write your first React component\nWhen and how to create multi-component files\nHow to add markup to JavaScript with JSX\nHow to use curly braces with JSX to access JavaScript functionality from your components\nHow to configure components with props\nHow to conditionally render components\nHow to render multiple components at a time\nHow to avoid confusing bugs by keeping components pure\nWhy understanding your UI as trees is useful\n",
                {
                    "subHeader": "Your first component ",
                    "url": "https://react.dev/learn/describing-the-ui/#your-first-component",
                    "sections": [
                        "React applications are built from isolated pieces of UI called components. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a Gallery component rendering three Profile components:",
                        {
                            "code_sandbox": "function Profile() {  return (    <img      src=\"https://i.imgur.com/MK3eW3As.jpg\"      alt=\"Katherine Johnson\"    />  );}export default function Gallery() {  return (    <section>      <h1>Amazing scientists</h1>      <Profile />      <Profile />      <Profile />    </section>  );}"
                        },
                        "Ready to learn this topic?Read Your First Component to learn how to declare and use React components.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Importing and exporting components ",
                    "url": "https://react.dev/learn/describing-the-ui/#importing-and-exporting-components",
                    "sections": [
                        "You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can export a component into its own file, and then import that component from another file:",
                        {
                            "code_sandbox": "Gallery.jsProfile.jsGallery.jsimport Profile from './Profile.js';export default function Gallery() {  return (    <section>      <h1>Amazing scientists</h1>      <Profile />      <Profile />      <Profile />    </section>  );}"
                        },
                        "Ready to learn this topic?Read Importing and Exporting Components to learn how to split components into their own files.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Writing markup with JSX ",
                    "url": "https://react.dev/learn/describing-the-ui/#writing-markup-with-jsx",
                    "sections": [
                        "Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.",
                        "If we paste existing HTML markup into a React component, it won’t always work:",
                        {
                            "code_sandbox": "export default function TodoList() {  return (    // This doesn't quite work!    <h1>Hedy Lamarr's Todos</h1>    <img      src=\"https://i.imgur.com/yXOvdOSs.jpg\"      alt=\"Hedy Lamarr\"      class=\"photo\"    >    <ul>      <li>Invent new traffic lights      <li>Rehearse a movie scene      <li>Improve spectrum technology    </ul>"
                        },
                        "If you have existing HTML like this, you can fix it using a converter:",
                        {
                            "code_sandbox": "export default function TodoList() {  return (    <>      <h1>Hedy Lamarr's Todos</h1>      <img        src=\"https://i.imgur.com/yXOvdOSs.jpg\"        alt=\"Hedy Lamarr\"        className=\"photo\"      />      <ul>        <li>Invent new traffic lights</li>        <li>Rehearse a movie scene</li>        <li>Improve spectrum technology</li>      </ul>    </>  );}"
                        },
                        "Ready to learn this topic?Read Writing Markup with JSX to learn how to write valid JSX.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "JavaScript in JSX with curly braces ",
                    "url": "https://react.dev/learn/describing-the-ui/#javascript-in-jsx-with-curly-braces",
                    "sections": [
                        "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:",
                        {
                            "code_sandbox": "const person = {  name: 'Gregorio Y. Zara',  theme: {    backgroundColor: 'black',    color: 'pink'  }};export default function TodoList() {  return (    <div style={person.theme}>      <h1>{person.name}'s Todos</h1>      <img        className=\"avatar\"        src=\"https://i.imgur.com/7vQD0fPs.jpg\"        alt=\"Gregorio Y. Zara\"      />      <ul>        <li>Improve the videophone</li>        <li>Prepare aeronautics lectures</li>        <li>Work on the alcohol-fuelled engine</li>      </ul>    </div>  );}"
                        },
                        "Ready to learn this topic?Read JavaScript in JSX with Curly Braces to learn how to access JavaScript data from JSX.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Passing props to a component ",
                    "url": "https://react.dev/learn/describing-the-ui/#passing-props-to-a-component",
                    "sections": [
                        "React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!",
                        {
                            "code_sandbox": "utils.jsimport { getImageUrl } from './utils.js'export default function Profile() {  return (    <Card>      <Avatar        size={100}        person={{          name: 'Katsuko Saruhashi',          imageId: 'YfeOqp2'        }}      />    </Card>  );}function Avatar({ person, size }) {  return (    <img      className=\"avatar\"      src={getImageUrl(person)}      alt={person.name}      width={size}      height={size}    />  );}function Card({ children }) {  return (    <div className=\"card\">      {children}    </div>  );}"
                        },
                        "Ready to learn this topic?Read Passing Props to a Component to learn how to pass and read props.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Conditional rendering ",
                    "url": "https://react.dev/learn/describing-the-ui/#conditional-rendering",
                    "sections": [
                        "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.",
                        "In this example, the JavaScript && operator is used to conditionally render a checkmark:",
                        {
                            "code_sandbox": "function Item({ name, isPacked }) {  return (    <li className=\"item\">      {name} {isPacked && '✅'}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item          isPacked={true}          name=\"Space suit\"        />        <Item          isPacked={true}          name=\"Helmet with a golden leaf\"        />        <Item          isPacked={false}          name=\"Photo of Tam\"        />      </ul>    </section>  );}"
                        },
                        "Ready to learn this topic?Read Conditional Rendering to learn the different ways to render content conditionally.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Rendering lists ",
                    "url": "https://react.dev/learn/describing-the-ui/#rendering-lists",
                    "sections": [
                        "You will often want to display multiple similar components from a collection of data. You can use JavaScript’s filter() and map() with React to filter and transform your array of data into an array of components.",
                        "For each array item, you will need to specify a key. Usually, you will want to use an ID from the database as a key. Keys let React keep track of each item’s place in the list even if the list changes.",
                        {
                            "code_sandbox": "data.jsutils.jsimport { people } from './data.js';import { getImageUrl } from './utils.js';export default function List() {  const listItems = people.map(person =>    <li key={person.id}>      <img        src={getImageUrl(person)}        alt={person.name}      />      <p>        <b>{person.name}:</b>        {' ' + person.profession + ' '}        known for {person.accomplishment}      </p>    </li>  );  return (    <article>      <h1>Scientists</h1>      <ul>{listItems}</ul>    </article>  );}"
                        },
                        "Ready to learn this topic?Read Rendering Lists to learn how to render a list of components, and how to choose a key.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Keeping components pure ",
                    "url": "https://react.dev/learn/describing-the-ui/#keeping-components-pure",
                    "sections": [
                        "Some JavaScript functions are pure. A pure function:",
                        "  1.Minds its own business. It does not change any objects or variables that existed before it was called.",
                        "  2.Same inputs, same output. Given the same inputs, a pure function should always return the same result.",
                        "By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:",
                        {
                            "code_sandbox": "let guest = 0;function Cup() {  // Bad: changing a preexisting variable!  guest = guest + 1;  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaSet() {  return (    <>      <Cup />      <Cup />      <Cup />    </>  );}"
                        },
                        "You can make this component pure by passing a prop instead of modifying a preexisting variable:",
                        {
                            "code_sandbox": "function Cup({ guest }) {  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaSet() {  return (    <>      <Cup guest={1} />      <Cup guest={2} />      <Cup guest={3} />    </>  );}"
                        },
                        "Ready to learn this topic?Read Keeping Components Pure to learn how to write components as pure, predictable functions.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Your UI as a tree ",
                    "url": "https://react.dev/learn/describing-the-ui/#your-ui-as-a-tree",
                    "sections": [
                        "React uses trees to model the relationships between components and modules.",
                        "A React render tree is a representation of the parent and child relationship between components.",
                        "An example React render tree.",
                        "Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.",
                        "Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.",
                        "An example module dependency tree.",
                        "A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.",
                        "Ready to learn this topic?Read Your UI as a Tree to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "What’s next? ",
                    "url": "https://react.dev/learn/describing-the-ui/#whats-next",
                    "sections": [
                        "Head over to Your First Component to start reading this chapter page by page!",
                        "Or, if you’re already familiar with these topics, why not read about Adding Interactivity?"
                    ]
                }
            ],
            "subTopics": [
                {
                    "headers": "Your First Component",
                    "url": "https://react.dev/learn/your-first-component",
                    "content": [
                        "Components are one of the core concepts of React. They are the foundation upon which you build user interfaces (UI), which makes them the perfect place to start your React journey!",
                        "You will learn\nWhat a component is\nWhat role components play in a React application\nHow to write your first React component\n",
                        {
                            "sub_header": "Components: UI building blocks ",
                            "content": [
                                "On the Web, HTML lets us create rich structured documents with its built-in set of tags like <h1> and <li>:",
                                {
                                    "code_example": "<article>  <h1>My First Component</h1>  <ol>    <li>Components: UI Building Blocks</li>    <li>Defining a Component</li>    <li>Using a Component</li>  </ol></article>"
                                },
                                "This markup represents this article <article>, its heading <h1>, and an (abbreviated) table of contents as an ordered list <ol>. Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown—every piece of UI you see on the Web.",
                                "React lets you combine your markup, CSS, and JavaScript into custom “components”, reusable UI elements for your app. The table of contents code you saw above could be turned into a <TableOfContents /> component you could render on every page. Under the hood, it still uses the same HTML tags like <article>, <h1>, etc.",
                                "Just like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you’re reading is made out of React components:",
                                {
                                    "code_example": "<PageLayout>  <NavigationHeader>    <SearchBar />    <Link to=\"/docs\">Docs</Link>  </NavigationHeader>  <Sidebar />  <PageContent>    <TableOfContents />    <DocumentationText />  </PageContent></PageLayout>"
                                },
                                "As your project grows, you will notice that many of your designs can be composed by reusing components you already wrote, speeding up your development. Our table of contents above could be added to any screen with <TableOfContents />! You can even jumpstart your project with the thousands of components shared by the React open source community like Chakra UI and Material UI."
                            ]
                        },
                        {
                            "sub_header": "Defining a component ",
                            "content": [
                                "Traditionally when creating web pages, web developers marked up their content and then added interaction by sprinkling on some JavaScript. This worked great when interaction was a nice-to-have on the web. Now it is expected for many sites and all apps. React puts interactivity first while still using the same technology: a React component is a JavaScript function that you can sprinkle with markup. Here’s what that looks like (you can edit the example below):",
                                {
                                    "code_sandbox": "export default function Profile() {  return (    <img      src=\"https://i.imgur.com/MK3eW3Am.jpg\"      alt=\"Katherine Johnson\"    />  )}"
                                },
                                "And here’s how to build a component:",
                                {
                                    "sub_header": "Step 1: Export the component ",
                                    "content": [
                                        "The export default prefix is a standard JavaScript syntax (not specific to React). It lets you mark the main function in a file so that you can later import it from other files. (More on importing in Importing and Exporting Components!)"
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Define the function ",
                                    "content": [
                                        "With function Profile() { } you define a JavaScript function with the name Profile.",
                                        "PitfallReact components are regular JavaScript functions, but their names must start with a capital letter or they won’t work!"
                                    ]
                                },
                                {
                                    "sub_header": "Step 3: Add markup ",
                                    "content": [
                                        "The component returns an <img /> tag with src and alt attributes. <img /> is written like HTML, but it is actually JavaScript under the hood! This syntax is called JSX, and it lets you embed markup inside JavaScript.",
                                        "Return statements can be written all on one line, as in this component:",
                                        {
                                            "code_example": "return <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />;"
                                        },
                                        "But if your markup isn’t all on the same line as the return keyword, you must wrap it in a pair of parentheses:",
                                        {
                                            "code_example": "return (  <div>    <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />  </div>);"
                                        },
                                        {
                                            "code_example": "return"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Using a component ",
                            "content": [
                                "Now that you’ve defined your Profile component, you can nest it inside other components. For example, you can export a Gallery component that uses multiple Profile components:",
                                {
                                    "code_sandbox": "function Profile() {  return (    <img      src=\"https://i.imgur.com/MK3eW3As.jpg\"      alt=\"Katherine Johnson\"    />  );}export default function Gallery() {  return (    <section>      <h1>Amazing scientists</h1>      <Profile />      <Profile />      <Profile />    </section>  );}"
                                },
                                {
                                    "sub_header": "What the browser sees ",
                                    "content": [
                                        "Notice the difference in casing:",
                                        "  1.<section> is lowercase, so React knows we refer to an HTML tag.",
                                        "  2.<Profile /> starts with a capital P, so React knows that we want to use our component called Profile.",
                                        "And Profile contains even more HTML: <img />. In the end, this is what the browser sees:",
                                        {
                                            "code_example": "<section>  <h1>Amazing scientists</h1>  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" /></section>"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Nesting and organizing components ",
                                    "content": [
                                        "Components are regular JavaScript functions, so you can keep multiple components in the same file. This is convenient when components are relatively small or tightly related to each other. If this file gets crowded, you can always move Profile to a separate file. You will learn how to do this shortly on the page about imports.",
                                        "Because the Profile components are rendered inside Gallery—even several times!—we can say that Gallery is a parent component, rendering each Profile as a “child”. This is part of the magic of React: you can define a component once, and then use it in as many places and as many times as you like.",
                                        {
                                            "code_example": "export default function Gallery() {  // 🔴 Never define a component inside another component!  function Profile() {    // ...  }  // ...}"
                                        },
                                        "Deep DiveComponents all the way down Show DetailsYour React application begins at a “root” component. Usually, it is created automatically when you start a new project. For example, if you use CodeSandbox or if you use the framework Next.js, the root component is defined in pages/index.js. In these examples, you’ve been exporting root components.Most React apps use components all the way down. This means that you won’t only use components for reusable pieces like buttons, but also for larger pieces like sidebars, lists, and ultimately, complete pages! Components are a handy way to organize UI code and markup, even if some of them are only used once.React-based frameworks take this a step further. Instead of using an empty HTML file and letting React “take over” managing the page with JavaScript, they also generate the HTML automatically from your React components. This allows your app to show some content before the JavaScript code loads.Still, many websites only use React to add interactivity to existing HTML pages. They have many root components instead of a single one for the entire page. You can use as much—or as little—React as you need.",
                                        "RecapYou’ve just gotten your first taste of React! Let’s recap some key points.\n\nReact lets you create components, reusable UI elements for your app.\n\n\nIn a React app, every piece of UI is a component.\n\n\nReact components are regular JavaScript functions except:\n\nTheir names always begin with a capital letter.\nThey return JSX markup.\n\n\n",
                                        "Try out some challenges1. Export the component 2. Fix the return statement 3. Spot the mistake 4. Your own component Challenge 1 of 4: Export the component This sandbox doesn’t work because the root component is not exported:App.jsApp.js ResetForkfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/lICfvbD.jpg\"\n      alt=\"Aklilu Lemma\"\n    />\n  );\n}\n\nTry to fix it yourself before looking at the solution! Show solutionNext Challenge"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Importing and Exporting Components",
                    "url": "https://react.dev/learn/importing-and-exporting-components",
                    "content": [
                        "The magic of components lies in their reusability: you can create components that are composed of other components. But as you nest more and more components, it often makes sense to start splitting them into different files. This lets you keep your files easy to scan and reuse components in more places.",
                        "You will learn\nWhat a root component file is\nHow to import and export a component\nWhen to use default and named imports and exports\nHow to import and export multiple components from one file\nHow to split components into multiple files\n",
                        {
                            "sub_header": "The root component file ",
                            "content": [
                                "In Your First Component, you made a Profile component and a Gallery component that renders it:",
                                {
                                    "code_sandbox": "function Profile() {  return (    <img      src=\"https://i.imgur.com/MK3eW3As.jpg\"      alt=\"Katherine Johnson\"    />  );}export default function Gallery() {  return (    <section>      <h1>Amazing scientists</h1>      <Profile />      <Profile />      <Profile />    </section>  );}"
                                },
                                "These currently live in a root component file, named App.js in this example. Depending on your setup, your root component could be in another file, though. If you use a framework with file-based routing, such as Next.js, your root component will be different for every page."
                            ]
                        },
                        {
                            "sub_header": "Exporting and importing a component ",
                            "content": [
                                "What if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move Gallery and Profile out of the root component file. This will make them more modular and reusable in other files. You can move a component in three steps:",
                                "  1.Make a new JS file to put the components in.",
                                "  2.Export your function component from that file (using either default or named exports).",
                                "  3.Import it in the file where you’ll use the component (using the corresponding technique for importing default or named exports).",
                                "Here both Profile and Gallery have been moved out of App.js into a new file called Gallery.js. Now you can change App.js to import Gallery from Gallery.js:",
                                {
                                    "code_sandbox": "Gallery.jsimport Gallery from './Gallery.js';export default function App() {  return (    <Gallery />  );}"
                                },
                                "Notice how this example is broken down into two component files now:",
                                "  1.Gallery.js:\n\nDefines the Profile component which is only used within the same file and is not exported.\nExports the Gallery component as a default export.\n\n",
                                "  2.Defines the Profile component which is only used within the same file and is not exported.",
                                "  3.Exports the Gallery component as a default export.",
                                "  4.App.js:\n\nImports Gallery as a default import from Gallery.js.\nExports the root App component as a default export.\n\n",
                                "  5.Imports Gallery as a default import from Gallery.js.",
                                "  6.Exports the root App component as a default export.",
                                {
                                    "code_example": ".js"
                                },
                                "Deep DiveDefault vs named exports Show DetailsThere are two primary ways to export values with JavaScript: default exports and named exports. So far, our examples have only used default exports. But you can use one or both of them in the same file. A file can have no more than one default export, but it can have as many named exports as you like.How you export your component dictates how you must import it. You will get an error if you try to import a default export the same way you would a named export! This chart can help you keep track:SyntaxExport statementImport statementDefaultexport default function Button() {}import Button from './Button.js';Namedexport function Button() {}import { Button } from './Button.js';When you write a default import, you can put any name you want after import. For example, you could write import Banana from './Button.js' instead and it would still provide you with the same default export. In contrast, with named imports, the name has to match on both sides. That’s why they are called named imports!People often use default exports if the file exports only one component, and use named exports if it exports multiple components and values. Regardless of which coding style you prefer, always give meaningful names to your component functions and the files that contain them. Components without names, like export default () => {}, are discouraged because they make debugging harder."
                            ]
                        },
                        {
                            "sub_header": "Exporting and importing multiple components from the same file ",
                            "content": [
                                "What if you want to show just one Profile instead of a gallery? You can export the Profile component, too. But Gallery.js already has a default export, and you can’t have two default exports. You could create a new file with a default export, or you could add a named export for Profile. A file can only have one default export, but it can have numerous named exports!",
                                "NoteTo reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. Do what works best for you!",
                                "First, export Profile from Gallery.js using a named export (no default keyword):",
                                {
                                    "code_example": "export function Profile() {  // ...}"
                                },
                                "Then, import Profile from Gallery.js to App.js using a named import (with the curly braces):",
                                {
                                    "code_example": "import { Profile } from './Gallery.js';"
                                },
                                "Finally, render <Profile /> from the App component:",
                                {
                                    "code_example": "export default function App() {  return <Profile />;}"
                                },
                                "Now Gallery.js contains two exports: a default Gallery export, and a named Profile export. App.js imports both of them. Try editing <Profile /> to <Gallery /> and back in this example:",
                                {
                                    "code_sandbox": "Gallery.jsimport Gallery from './Gallery.js';import { Profile } from './Gallery.js';export default function App() {  return (    <Profile />  );}"
                                },
                                "Now you’re using a mix of default and named exports:",
                                "  1.Gallery.js:\n\nExports the Profile component as a named export called Profile.\nExports the Gallery component as a default export.\n\n",
                                "  2.Exports the Profile component as a named export called Profile.",
                                "  3.Exports the Gallery component as a default export.",
                                "  4.App.js:\n\nImports Profile as a named import called Profile from Gallery.js.\nImports Gallery as a default import from Gallery.js.\nExports the root App component as a default export.\n\n",
                                "  5.Imports Profile as a named import called Profile from Gallery.js.",
                                "  6.Imports Gallery as a default import from Gallery.js.",
                                "  7.Exports the root App component as a default export.",
                                "RecapOn this page you learned:\nWhat a root component file is\nHow to import and export a component\nWhen and how to use default and named imports and exports\nHow to export multiple components from the same file\n",
                                {
                                    "code_example": "Gallery.js"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Writing Markup with JSX",
                    "url": "https://react.dev/learn/writing-markup-with-jsx",
                    "content": [
                        "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.",
                        "You will learn\nWhy React mixes markup with rendering logic\nHow JSX is different from HTML\nHow to display information with JSX\n",
                        {
                            "sub_header": "JSX: Putting markup into JavaScript ",
                            "content": [
                                "The Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript—often in separate files! Content was marked up inside HTML while the page’s logic lived separately in JavaScript:",
                                "HTMLJavaScript",
                                "But as the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is why in React, rendering logic and markup live together in the same place—components.",
                                {
                                    "code_example": "Sidebar.js"
                                },
                                "Keeping a button’s rendering logic and markup together ensures that they stay in sync with each other on every edit. Conversely, details that are unrelated, such as the button’s markup and a sidebar’s markup, are isolated from each other, making it safer to change either of them on their own.",
                                "Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information. The best way to understand this is to convert some HTML markup to JSX markup.",
                                "NoteJSX and React are two separate things. They’re often used together, but you can use them independently of each other. JSX is a syntax extension, while React is a JavaScript library."
                            ]
                        },
                        {
                            "sub_header": "Converting HTML to JSX ",
                            "content": [
                                "Suppose that you have some (perfectly valid) HTML:",
                                {
                                    "code_example": "<h1>Hedy Lamarr's Todos</h1><img   src=\"https://i.imgur.com/yXOvdOSs.jpg\"   alt=\"Hedy Lamarr\"   class=\"photo\"><ul>    <li>Invent new traffic lights    <li>Rehearse a movie scene    <li>Improve the spectrum technology</ul>"
                                },
                                "And you want to put it into your component:",
                                {
                                    "code_example": "export default function TodoList() {  return (    // ???  )}"
                                },
                                "If you copy and paste it as is, it will not work:",
                                {
                                    "code_sandbox": "export default function TodoList() {  return (    // This doesn't quite work!    <h1>Hedy Lamarr's Todos</h1>    <img       src=\"https://i.imgur.com/yXOvdOSs.jpg\"       alt=\"Hedy Lamarr\"       class=\"photo\"    >    <ul>      <li>Invent new traffic lights      <li>Rehearse a movie scene      <li>Improve the spectrum technology    </ul>"
                                },
                                "This is because JSX is stricter and has a few more rules than HTML! If you read the error messages above, they’ll guide you to fix the markup, or you can follow the guide below.",
                                "NoteMost of the time, React’s on-screen error messages will help you find where the problem is. Give them a read if you get stuck!"
                            ]
                        },
                        {
                            "sub_header": "The Rules of JSX ",
                            "content": [
                                {
                                    "sub_header": "1. Return a single root element ",
                                    "content": [
                                        "To return multiple elements from a component, wrap them with a single parent tag.",
                                        "For example, you can use a <div>:",
                                        {
                                            "code_example": "<div>  <h1>Hedy Lamarr's Todos</h1>  <img     src=\"https://i.imgur.com/yXOvdOSs.jpg\"     alt=\"Hedy Lamarr\"     class=\"photo\"  >  <ul>    ...  </ul></div>"
                                        },
                                        "If you don’t want to add an extra <div> to your markup, you can write <> and </> instead:",
                                        {
                                            "code_example": "<>  <h1>Hedy Lamarr's Todos</h1>  <img     src=\"https://i.imgur.com/yXOvdOSs.jpg\"     alt=\"Hedy Lamarr\"     class=\"photo\"  >  <ul>    ...  </ul></>"
                                        },
                                        "This empty tag is called a Fragment. Fragments let you group things without leaving any trace in the browser HTML tree.",
                                        "Deep DiveWhy do multiple JSX tags need to be wrapped? Show DetailsJSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can’t return two objects from a function without wrapping them into an array. This explains why you also can’t return two JSX tags without wrapping them into another tag or a Fragment."
                                    ]
                                },
                                {
                                    "sub_header": "2. Close all the tags ",
                                    "content": [
                                        "JSX requires tags to be explicitly closed: self-closing tags like <img> must become <img />, and wrapping tags like <li>oranges must be written as <li>oranges</li>.",
                                        "This is how Hedy Lamarr’s image and list items look closed:",
                                        {
                                            "code_example": "<>  <img     src=\"https://i.imgur.com/yXOvdOSs.jpg\"     alt=\"Hedy Lamarr\"     class=\"photo\"   />  <ul>    <li>Invent new traffic lights</li>    <li>Rehearse a movie scene</li>    <li>Improve the spectrum technology</li>  </ul></>"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "3. camelCase all most of the things! ",
                                    "content": [
                                        "JSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can’t contain dashes or be reserved words like class.",
                                        "This is why, in React, many HTML and SVG attributes are written in camelCase. For example, instead of stroke-width you use strokeWidth. Since class is a reserved word, in React you write className instead, named after the corresponding DOM property:",
                                        {
                                            "code_example": "<img   src=\"https://i.imgur.com/yXOvdOSs.jpg\"   alt=\"Hedy Lamarr\"   className=\"photo\"/>"
                                        },
                                        "You can find all these attributes in the list of DOM component props. If you get one wrong, don’t worry—React will print a message with a possible correction to the browser console.",
                                        {
                                            "code_example": "aria-*"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Pro-tip: Use a JSX Converter ",
                                    "content": [
                                        "Converting all these attributes in existing markup can be tedious! We recommend using a converter to translate your existing HTML and SVG to JSX. Converters are very useful in practice, but it’s still worth understanding what is going on so that you can comfortably write JSX on your own.",
                                        "Here is your final result:",
                                        {
                                            "code_sandbox": "export default function TodoList() {  return (    <>      <h1>Hedy Lamarr's Todos</h1>      <img         src=\"https://i.imgur.com/yXOvdOSs.jpg\"         alt=\"Hedy Lamarr\"         className=\"photo\"       />      <ul>        <li>Invent new traffic lights</li>        <li>Rehearse a movie scene</li>        <li>Improve the spectrum technology</li>      </ul>    </>  );}"
                                        },
                                        "RecapNow you know why JSX exists and how to use it in components:\nReact components group rendering logic together with markup because they are related.\nJSX is similar to HTML, with a few differences. You can use a converter if you need to.\nError messages will often point you in the right direction to fixing your markup.\n",
                                        "Try out some challengesChallenge 1 of 1: Convert some HTML to JSX This HTML was pasted into a component, but it’s not valid JSX. Fix it:App.jsApp.js ResetForkexport default function Bio() {\n  return (\n    <div class=\"intro\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <p class=\"summary\">\n      You can find my thoughts here.\n      <br><br>\n      <b>And <i>pictures</b></i> of scientists!\n    </p>\n  );\n}\n\nWhether to do it by hand or using the converter is up to you! Show solution"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "JavaScript in JSX with Curly Braces",
                    "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
                    "content": [
                        "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.",
                        "You will learn\nHow to pass strings with quotes\nHow to reference a JavaScript variable inside JSX with curly braces\nHow to call a JavaScript function inside JSX with curly braces\nHow to use a JavaScript object inside JSX with curly braces\n",
                        {
                            "sub_header": "Passing strings with quotes ",
                            "content": [
                                "When you want to pass a string attribute to JSX, you put it in single or double quotes:",
                                {
                                    "code_sandbox": "export default function Avatar() {  return (    <img      className=\"avatar\"      src=\"https://i.imgur.com/7vQD0fPs.jpg\"      alt=\"Gregorio Y. Zara\"    />  );}"
                                },
                                "Here, \"https://i.imgur.com/7vQD0fPs.jpg\" and \"Gregorio Y. Zara\" are being passed as strings.",
                                "But what if you want to dynamically specify the src or alt text? You could use a value from JavaScript by replacing \" and \" with { and }:",
                                {
                                    "code_sandbox": "export default function Avatar() {  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';  const description = 'Gregorio Y. Zara';  return (    <img      className=\"avatar\"      src={avatar}      alt={description}    />  );}"
                                },
                                "Notice the difference between className=\"avatar\", which specifies an \"avatar\" CSS class name that makes the image round, and src={avatar} that reads the value of the JavaScript variable called avatar. That’s because curly braces let you work with JavaScript right there in your markup!"
                            ]
                        },
                        {
                            "sub_header": "Using curly braces: A window into the JavaScript world ",
                            "content": [
                                "JSX is a special way of writing JavaScript. That means it’s possible to use JavaScript inside it—with curly braces { }. The example below first declares a name for the scientist, name, then embeds it with curly braces inside the <h1>:",
                                {
                                    "code_sandbox": "export default function TodoList() {  const name = 'Gregorio Y. Zara';  return (    <h1>{name}'s To Do List</h1>  );}"
                                },
                                "Try changing the name’s value from 'Gregorio Y. Zara' to 'Hedy Lamarr'. See how the list title changes?",
                                "Any JavaScript expression will work between curly braces, including function calls like formatDate():",
                                {
                                    "code_sandbox": "const today = new Date();function formatDate(date) {  return new Intl.DateTimeFormat(    'en-US',    { weekday: 'long' }  ).format(date);}export default function TodoList() {  return (    <h1>To Do List for {formatDate(today)}</h1>  );}"
                                },
                                {
                                    "sub_header": "Where to use curly braces ",
                                    "content": [
                                        "You can only use curly braces in two ways inside JSX:",
                                        "  1.As text directly inside a JSX tag: <h1>{name}'s To Do List</h1> works, but <{tag}>Gregorio Y. Zara's To Do List</{tag}>  will not.",
                                        "  2.As attributes immediately following the = sign: src={avatar} will read the avatar variable, but src=\"{avatar}\" will pass the string \"{avatar}\"."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Using “double curlies”: CSS and other objects in JSX ",
                            "content": [
                                "In addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like { name: \"Hedy Lamarr\", inventions: 5 }. Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: person={{ name: \"Hedy Lamarr\", inventions: 5 }}.",
                                "You may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the style attribute:",
                                {
                                    "code_sandbox": "export default function TodoList() {  return (    <ul style={{      backgroundColor: 'black',      color: 'pink'    }}>      <li>Improve the videophone</li>      <li>Prepare aeronautics lectures</li>      <li>Work on the alcohol-fuelled engine</li>    </ul>  );}"
                                },
                                "Try changing the values of backgroundColor and color.",
                                "You can really see the JavaScript object inside the curly braces when you write it like this:",
                                {
                                    "code_example": "<ul style={  {    backgroundColor: 'black',    color: 'pink'  }}>"
                                },
                                "The next time you see {{ and }} in JSX, know that it’s nothing more than an object inside the JSX curlies!",
                                {
                                    "code_example": "style"
                                }
                            ]
                        },
                        {
                            "sub_header": "More fun with JavaScript objects and curly braces ",
                            "content": [
                                "You can move several expressions into one object, and reference them in your JSX inside curly braces:",
                                {
                                    "code_sandbox": "const person = {  name: 'Gregorio Y. Zara',  theme: {    backgroundColor: 'black',    color: 'pink'  }};export default function TodoList() {  return (    <div style={person.theme}>      <h1>{person.name}'s Todos</h1>      <img        className=\"avatar\"        src=\"https://i.imgur.com/7vQD0fPs.jpg\"        alt=\"Gregorio Y. Zara\"      />      <ul>        <li>Improve the videophone</li>        <li>Prepare aeronautics lectures</li>        <li>Work on the alcohol-fuelled engine</li>      </ul>    </div>  );}"
                                },
                                "In this example, the person JavaScript object contains a name string and a theme object:",
                                {
                                    "code_example": "const person = {  name: 'Gregorio Y. Zara',  theme: {    backgroundColor: 'black',    color: 'pink'  }};"
                                },
                                "The component can use these values from person like so:",
                                {
                                    "code_example": "<div style={person.theme}>  <h1>{person.name}'s Todos</h1>"
                                },
                                "JSX is very minimal as a templating language because it lets you organize data and logic using JavaScript.",
                                "RecapNow you know almost everything about JSX:\nJSX attributes inside quotes are passed as strings.\nCurly braces let you bring JavaScript logic and variables into your markup.\nThey work inside the JSX tag content or immediately after = in attributes.\n{{ and }} is not special syntax: it’s a JavaScript object tucked inside JSX curly braces.\n",
                                {
                                    "code_example": "Objects are not valid as a React child"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Passing Props to a Component",
                    "url": "https://react.dev/learn/passing-props-to-a-component",
                    "content": [
                        "React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.",
                        "You will learn\nHow to pass props to a component\nHow to read props from a component\nHow to specify default values for props\nHow to pass some JSX to a component\nHow props change over time\n",
                        {
                            "sub_header": "Familiar props ",
                            "content": [
                                "Props are the information that you pass to a JSX tag. For example, className, src, alt, width, and height are some of the props you can pass to an <img>:",
                                {
                                    "code_sandbox": "function Avatar() {  return (    <img      className=\"avatar\"      src=\"https://i.imgur.com/1bX5QH6.jpg\"      alt=\"Lin Lanying\"      width={100}      height={100}    />  );}export default function Profile() {  return (    <Avatar />  );}"
                                },
                                "The props you can pass to an <img> tag are predefined (ReactDOM conforms to the HTML standard). But you can pass any props to your own components, such as <Avatar>, to customize them. Here’s how!"
                            ]
                        },
                        {
                            "sub_header": "Passing props to a component ",
                            "content": [
                                "In this code, the Profile component isn’t passing any props to its child component, Avatar:",
                                {
                                    "code_example": "export default function Profile() {  return (    <Avatar />  );}"
                                },
                                "You can give Avatar some props in two steps.",
                                {
                                    "sub_header": "Step 1: Pass props to the child component ",
                                    "content": [
                                        "First, pass some props to Avatar. For example, let’s pass two props: person (an object), and size (a number):",
                                        {
                                            "code_example": "export default function Profile() {  return (    <Avatar      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}      size={100}    />  );}"
                                        },
                                        {
                                            "code_example": "person="
                                        },
                                        "Now you can read these props inside the Avatar component."
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Read props inside the child component ",
                                    "content": [
                                        "You can read these props by listing their names person, size separated by the commas inside ({ and }) directly after function Avatar. This lets you use them inside the Avatar code, like you would with a variable.",
                                        {
                                            "code_example": "function Avatar({ person, size }) {  // person and size are available here}"
                                        },
                                        "Add some logic to Avatar that uses the person and size props for rendering, and you’re done.",
                                        "Now you can configure Avatar to render in many different ways with different props. Try tweaking the values!",
                                        {
                                            "code_sandbox": "utils.jsimport { getImageUrl } from './utils.js';function Avatar({ person, size }) {  return (    <img      className=\"avatar\"      src={getImageUrl(person)}      alt={person.name}      width={size}      height={size}    />  );}export default function Profile() {  return (    <div>      <Avatar        size={100}        person={{           name: 'Katsuko Saruhashi',           imageId: 'YfeOqp2'        }}      />      <Avatar        size={80}        person={{          name: 'Aklilu Lemma',           imageId: 'OKS67lh'        }}      />      <Avatar        size={50}        person={{           name: 'Lin Lanying',          imageId: '1bX5QH6'        }}      />    </div>  );}"
                                        },
                                        "Props let you think about parent and child components independently. For example, you can change the person or the size props inside Profile without having to think about how Avatar uses them. Similarly, you can change how the Avatar uses these props, without looking at the Profile.",
                                        "You can think of props like “knobs” that you can adjust. They serve the same role as arguments serve for functions—in fact, props are the only argument to your component! React component functions accept a single argument, a props object:",
                                        {
                                            "code_example": "function Avatar(props) {  let person = props.person;  let size = props.size;  // ...}"
                                        },
                                        "Usually you don’t need the whole props object itself, so you destructure it into individual props.",
                                        {
                                            "code_example": "{"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Specifying a default value for a prop ",
                            "content": [
                                "If you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting = and the default value right after the parameter:",
                                {
                                    "code_example": "function Avatar({ person, size = 100 }) {  // ...}"
                                },
                                "Now, if <Avatar person={...} /> is rendered with no size prop, the size will be set to 100.",
                                "The default value is only used if the size prop is missing or if you pass size={undefined}. But if you pass size={null} or size={0}, the default value will not be used."
                            ]
                        },
                        {
                            "sub_header": "Forwarding props with the JSX spread syntax ",
                            "content": [
                                "Sometimes, passing props gets very repetitive:",
                                {
                                    "code_example": "function Profile({ person, size, isSepia, thickBorder }) {  return (    <div className=\"card\">      <Avatar        person={person}        size={size}        isSepia={isSepia}        thickBorder={thickBorder}      />    </div>  );}"
                                },
                                "There’s nothing wrong with repetitive code—it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this Profile does with Avatar. Because they don’t use any of their props directly, it can make sense to use a more concise “spread” syntax:",
                                {
                                    "code_example": "function Profile(props) {  return (    <div className=\"card\">      <Avatar {...props} />    </div>  );}"
                                },
                                "This forwards all of Profile’s props to the Avatar without listing each of their names.",
                                "Use spread syntax with restraint. If you’re using it in every other component, something is wrong. Often, it indicates that you should split your components and pass children as JSX. More on that next!"
                            ]
                        },
                        {
                            "sub_header": "Passing JSX as children ",
                            "content": [
                                "It is common to nest built-in browser tags:",
                                {
                                    "code_example": "<div>  <img /></div>"
                                },
                                "Sometimes you’ll want to nest your own components the same way:",
                                {
                                    "code_example": "<Card>  <Avatar /></Card>"
                                },
                                "When you nest content inside a JSX tag, the parent component will receive that content in a prop called children. For example, the Card component below will receive a children prop set to <Avatar /> and render it in a wrapper div:",
                                {
                                    "code_sandbox": "Avatar.jsutils.jsimport Avatar from './Avatar.js';function Card({ children }) {  return (    <div className=\"card\">      {children}    </div>  );}export default function Profile() {  return (    <Card>      <Avatar        size={100}        person={{           name: 'Katsuko Saruhashi',          imageId: 'YfeOqp2'        }}      />    </Card>  );}"
                                },
                                "Try replacing the <Avatar> inside <Card> with some text to see how the Card component can wrap any nested content. It doesn’t need to “know” what’s being rendered inside of it. You will see this flexible pattern in many places.",
                                "You can think of a component with a children prop as having a “hole” that can be “filled in” by its parent components with arbitrary JSX. You will often use the children prop for visual wrappers: panels, grids, etc.",
                                "",
                                "Illustrated by Rachel Lee Nabors"
                            ]
                        },
                        {
                            "sub_header": "How props change over time ",
                            "content": [
                                "The Clock component below receives two props from its parent component: color and time. (The parent component’s code is omitted because it uses state, which we won’t dive into just yet.)",
                                "Try changing the color in the select box below:",
                                {
                                    "code_sandbox": "Clock.jsClock.jsexport default function Clock({ color, time }) {  return (    <h1 style={{ color: color }}>      {time}    </h1>  );}"
                                },
                                "This example illustrates that a component may receive different props over time. Props are not always static! Here, the time prop changes every second, and the color prop changes when you select another color. Props reflect a component’s data at any point in time, rather than only in the beginning.",
                                "However, props are immutable—a term from computer science meaning “unchangeable”. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to “ask” its parent component to pass it different props—a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them.",
                                "Don’t try to “change props”. When you need to respond to the user input (like changing the selected color), you will need to “set state”, which you can learn about in State: A Component’s Memory.",
                                "Recap\nTo pass props, add them to the JSX, just like you would with HTML attributes.\nTo read props, use the function Avatar({ person, size }) destructuring syntax.\nYou can specify a default value like size = 100, which is used for missing and undefined props.\nYou can forward all props with <Avatar {...props} /> JSX spread syntax, but don’t overuse it!\nNested JSX like <Card><Avatar /></Card> will appear as Card component’s children prop.\nProps are read-only snapshots in time: every render receives a new version of props.\nYou can’t change props. When you need interactivity, you’ll need to set state.\n",
                                {
                                    "code_example": "children"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Conditional Rendering",
                    "url": "https://react.dev/learn/conditional-rendering",
                    "content": [
                        "You will learn\nHow to return different JSX depending on a condition\nHow to conditionally include or exclude a piece of JSX\nCommon conditional syntax shortcuts you’ll encounter in React codebases\n",
                        {
                            "sub_header": "Conditionally returning JSX ",
                            "content": [
                                "Let’s say you have a PackingList component rendering several Items, which can be marked as packed or not:",
                                {
                                    "code_sandbox": "function Item({ name, isPacked }) {  return <li className=\"item\">{name}</li>;}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                },
                                "Notice that some of the Item components have their isPacked prop set to true instead of false. You want to add a checkmark (✅) to packed items if isPacked={true}.",
                                "You can write this as an if/else statement like so:",
                                {
                                    "code_example": "if (isPacked) {  return <li className=\"item\">{name} ✅</li>;}return <li className=\"item\">{name}</li>;"
                                },
                                "If the isPacked prop is true, this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:",
                                {
                                    "code_sandbox": "function Item({ name, isPacked }) {  if (isPacked) {    return <li className=\"item\">{name} ✅</li>;  }  return <li className=\"item\">{name}</li>;}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                },
                                "Try editing what gets returned in either case, and see how the result changes!",
                                "Notice how you’re creating branching logic with JavaScript’s if and return statements. In React, control flow (like conditions) is handled by JavaScript.",
                                {
                                    "sub_header": "Conditionally returning nothing with null ",
                                    "content": [
                                        "In some situations, you won’t want to render anything at all. For example, say you don’t want to show packed items at all. A component must return something. In this case, you can return null:",
                                        {
                                            "code_example": "if (isPacked) {  return null;}return <li className=\"item\">{name}</li>;"
                                        },
                                        "If isPacked is true, the component will return nothing, null. Otherwise, it will return JSX to render.",
                                        {
                                            "code_sandbox": "function Item({ name, isPacked }) {  if (isPacked) {    return null;  }  return <li className=\"item\">{name}</li>;}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                        },
                                        "In practice, returning null from a component isn’t common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component’s JSX. Here’s how to do that!"
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Conditionally including JSX ",
                            "content": [
                                "In the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:",
                                {
                                    "code_example": "<li className=\"item\">{name} ✅</li>"
                                },
                                "is very similar to",
                                {
                                    "code_example": "<li className=\"item\">{name}</li>"
                                },
                                "Both of the conditional branches return <li className=\"item\">...</li>:",
                                {
                                    "code_example": "if (isPacked) {  return <li className=\"item\">{name} ✅</li>;}return <li className=\"item\">{name}</li>;"
                                },
                                "While this duplication isn’t harmful, it could make your code harder to maintain. What if you want to change the className? You’d have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code more DRY.",
                                {
                                    "sub_header": "Conditional (ternary) operator (? :) ",
                                    "content": [
                                        "JavaScript has a compact syntax for writing a conditional expression — the conditional operator or “ternary operator”.",
                                        "Instead of this:",
                                        {
                                            "code_example": "if (isPacked) {  return <li className=\"item\">{name} ✅</li>;}return <li className=\"item\">{name}</li>;"
                                        },
                                        "You can write this:",
                                        {
                                            "code_example": "return (  <li className=\"item\">    {isPacked ? name + ' ✅' : name}  </li>);"
                                        },
                                        "You can read it as “if isPacked is true, then (?) render name + ' ✅', otherwise (:) render name”.",
                                        "Deep DiveAre these two examples fully equivalent? Show DetailsIf you’re coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different “instances” of <li>. But JSX elements aren’t “instances” because they don’t hold any internal state and aren’t real DOM nodes. They’re lightweight descriptions, like blueprints. So these two examples, in fact, are completely equivalent. Preserving and Resetting State goes into detail about how this works.",
                                        "Now let’s say you want to wrap the completed item’s text into another HTML tag, like <del> to strike it out. You can add even more newlines and parentheses so that it’s easier to nest more JSX in each of the cases:",
                                        {
                                            "code_sandbox": "function Item({ name, isPacked }) {  return (    <li className=\"item\">      {isPacked ? (        <del>          {name + ' ✅'}        </del>      ) : (        name      )}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                        },
                                        "This style works well for simple conditions, but use it in moderation. If your components get messy with too much nested conditional markup, consider extracting child components to clean things up. In React, markup is a part of your code, so you can use tools like variables and functions to tidy up complex expressions."
                                    ]
                                },
                                {
                                    "sub_header": "Logical AND operator (&&) ",
                                    "content": [
                                        "Another common shortcut you’ll encounter is the JavaScript logical AND (&&) operator. Inside React components, it often comes up when you want to render some JSX when the condition is true, or render nothing otherwise. With &&, you could conditionally render the checkmark only if isPacked is true:",
                                        {
                                            "code_example": "return (  <li className=\"item\">    {name} {isPacked && '✅'}  </li>);"
                                        },
                                        "You can read this as “if isPacked, then (&&) render the checkmark, otherwise, render nothing”.",
                                        "Here it is in action:",
                                        {
                                            "code_sandbox": "function Item({ name, isPacked }) {  return (    <li className=\"item\">      {name} {isPacked && '✅'}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                        },
                                        "A JavaScript && expression returns the value of its right side (in our case, the checkmark) if the left side (our condition) is true. But if the condition is false, the whole expression becomes false. React considers false as a “hole” in the JSX tree, just like null or undefined, and doesn’t render anything in its place.",
                                        {
                                            "code_example": "&&"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Conditionally assigning JSX to a variable ",
                                    "content": [
                                        "When the shortcuts get in the way of writing plain code, try using an if statement and a variable. You can reassign variables defined with let, so start by providing the default content you want to display, the name:",
                                        {
                                            "code_example": "let itemContent = name;"
                                        },
                                        "Use an if statement to reassign a JSX expression to itemContent if isPacked is true:",
                                        {
                                            "code_example": "if (isPacked) {  itemContent = name + \" ✅\";}"
                                        },
                                        "Curly braces open the “window into JavaScript”. Embed the variable with curly braces in the returned JSX tree, nesting the previously calculated expression inside of JSX:",
                                        {
                                            "code_example": "<li className=\"item\">  {itemContent}</li>"
                                        },
                                        "This style is the most verbose, but it’s also the most flexible. Here it is in action:",
                                        {
                                            "code_sandbox": "function Item({ name, isPacked }) {  let itemContent = name;  if (isPacked) {    itemContent = name + \" ✅\";  }  return (    <li className=\"item\">      {itemContent}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                        },
                                        "Like before, this works not only for text, but for arbitrary JSX too:",
                                        {
                                            "code_sandbox": "function Item({ name, isPacked }) {  let itemContent = name;  if (isPacked) {    itemContent = (      <del>        {name + \" ✅\"}      </del>    );  }  return (    <li className=\"item\">      {itemContent}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                        },
                                        "If you’re not familiar with JavaScript, this variety of styles might seem overwhelming at first. However, learning them will help you read and write any JavaScript code — and not just React components! Pick the one you prefer for a start, and then consult this reference again if you forget how the other ones work.",
                                        "Recap\nIn React, you control branching logic with JavaScript.\nYou can return a JSX expression conditionally with an if statement.\nYou can conditionally save some JSX to a variable and then include it inside other JSX by using the curly braces.\nIn JSX, {cond ? <A /> : <B />} means “if cond, render <A />, otherwise <B />”.\nIn JSX, {cond && <A />} means “if cond, render <A />, otherwise nothing”.\nThe shortcuts are common, but you don’t have to use them if you prefer plain if.\n",
                                        {
                                            "code_example": "? :"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Rendering Lists",
                    "url": "https://react.dev/learn/rendering-lists",
                    "content": [
                        {
                            "sub_header": "Rendering data from arrays ",
                            "content": [
                                "Say that you have a list of content.",
                                {
                                    "code_example": "<ul>  <li>Creola Katherine Johnson: mathematician</li>  <li>Mario José Molina-Pasquel Henríquez: chemist</li>  <li>Mohammad Abdus Salam: physicist</li>  <li>Percy Lavon Julian: chemist</li>  <li>Subrahmanyan Chandrasekhar: astrophysicist</li></ul>"
                                },
                                "The only difference among those list items is their contents, their data. You will often need to show several instances of the same component using different data when building interfaces: from lists of comments to galleries of profile images. In these situations, you can store that data in JavaScript objects and arrays and use methods like map() and filter() to render lists of components from them.",
                                "Here’s a short example of how to generate a list of items from an array:",
                                "  1.Move the data into an array:",
                                {
                                    "code_example": "const people = [  'Creola Katherine Johnson: mathematician',  'Mario José Molina-Pasquel Henríquez: chemist',  'Mohammad Abdus Salam: physicist',  'Percy Lavon Julian: chemist',  'Subrahmanyan Chandrasekhar: astrophysicist'];"
                                },
                                "  1.Map the people members into a new array of JSX nodes, listItems:",
                                {
                                    "code_example": "const listItems = people.map(person => <li>{person}</li>);"
                                },
                                "  1.Return listItems from your component wrapped in a <ul>:",
                                {
                                    "code_example": "return <ul>{listItems}</ul>;"
                                },
                                "Here is the result:",
                                {
                                    "code_sandbox": "const people = [  'Creola Katherine Johnson: mathematician',  'Mario José Molina-Pasquel Henríquez: chemist',  'Mohammad Abdus Salam: physicist',  'Percy Lavon Julian: chemist',  'Subrahmanyan Chandrasekhar: astrophysicist'];export default function List() {  const listItems = people.map(person =>    <li>{person}</li>  );  return <ul>{listItems}</ul>;}"
                                },
                                "Notice the sandbox above displays a console error:",
                                "ConsoleWarning: Each child in a list should have a unique “key” prop.",
                                "You’ll learn how to fix this error later on this page. Before we get to that, let’s add some structure to your data."
                            ]
                        },
                        {
                            "sub_header": "Filtering arrays of items ",
                            "content": [
                                "This data can be structured even more.",
                                {
                                    "code_example": "const people = [{  id: 0,  name: 'Creola Katherine Johnson',  profession: 'mathematician',}, {  id: 1,  name: 'Mario José Molina-Pasquel Henríquez',  profession: 'chemist',}, {  id: 2,  name: 'Mohammad Abdus Salam',  profession: 'physicist',}, {  id: 3,  name: 'Percy Lavon Julian',  profession: 'chemist',  }, {  id: 4,  name: 'Subrahmanyan Chandrasekhar',  profession: 'astrophysicist',}];"
                                },
                                "Let’s say you want a way to only show people whose profession is 'chemist'. You can use JavaScript’s filter() method to return just those people. This method takes an array of items, passes them through a “test” (a function that returns true or false), and returns a new array of only those items that passed the test (returned true).",
                                "You only want the items where profession is 'chemist'. The “test” function for this looks like (person) => person.profession === 'chemist'. Here’s how to put it together:",
                                "  1.Create a new array of just “chemist” people, chemists, by calling filter() on the people filtering by person.profession === 'chemist':",
                                {
                                    "code_example": "const chemists = people.filter(person =>  person.profession === 'chemist');"
                                },
                                "  1.Now map over chemists:",
                                {
                                    "code_example": "const listItems = chemists.map(person =>  <li>     <img       src={getImageUrl(person)}       alt={person.name}     />     <p>       <b>{person.name}:</b>       {' ' + person.profession + ' '}       known for {person.accomplishment}     </p>  </li>);"
                                },
                                "  1.Lastly, return the listItems from your component:",
                                {
                                    "code_example": "return <ul>{listItems}</ul>;"
                                },
                                {
                                    "code_sandbox": "data.jsutils.jsimport { people } from './data.js';import { getImageUrl } from './utils.js';export default function List() {  const chemists = people.filter(person =>    person.profession === 'chemist'  );  const listItems = chemists.map(person =>    <li>      <img        src={getImageUrl(person)}        alt={person.name}      />      <p>        <b>{person.name}:</b>        {' ' + person.profession + ' '}        known for {person.accomplishment}      </p>    </li>  );  return <ul>{listItems}</ul>;}"
                                },
                                {
                                    "code_example": "=>"
                                }
                            ]
                        },
                        {
                            "sub_header": "Keeping list items in order with key ",
                            "content": [
                                "Notice that all the sandboxes above show an error in the console:",
                                "ConsoleWarning: Each child in a list should have a unique “key” prop.",
                                "You need to give each array item a key — a string or a number that uniquely identifies it among other items in that array:",
                                {
                                    "code_example": "<li key={person.id}>...</li>"
                                },
                                {
                                    "code_example": "map()"
                                },
                                "Keys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.",
                                "Rather than generating keys on the fly, you should include them in your data:",
                                {
                                    "code_sandbox": "data.jsutils.jsdata.jsexport const people = [{  id: 0, // Used in JSX as a key  name: 'Creola Katherine Johnson',  profession: 'mathematician',  accomplishment: 'spaceflight calculations',  imageId: 'MK3eW3A'}, {  id: 1, // Used in JSX as a key  name: 'Mario José Molina-Pasquel Henríquez',  profession: 'chemist',  accomplishment: 'discovery of Arctic ozone hole',  imageId: 'mynHUSa'}, {  id: 2, // Used in JSX as a key  name: 'Mohammad Abdus Salam',  profession: 'physicist',  accomplishment: 'electromagnetism theory',  imageId: 'bE7W1ji'}, {  id: 3, // Used in JSX as a key  name: 'Percy Lavon Julian',  profession: 'chemist',  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',  imageId: 'IOjWm71'}, {  id: 4, // Used in JSX as a key  name: 'Subrahmanyan Chandrasekhar',  profession: 'astrophysicist',  accomplishment: 'white dwarf star mass calculations',  imageId: 'lrWQx8l'}];"
                                },
                                "Deep DiveDisplaying several DOM nodes for each list item Show DetailsWhat do you do when each item needs to render not one, but several DOM nodes?The short <>...</> Fragment syntax won’t let you pass a key, so you need to either group them into a single <div>, or use the slightly longer and more explicit <Fragment> syntax:import { Fragment } from 'react';// ...const listItems = people.map(person =>  <Fragment key={person.id}>    <h1>{person.name}</h1>    <p>{person.bio}</p>  </Fragment>);Fragments disappear from the DOM, so this will produce a flat list of <h1>, <p>, <h1>, <p>, and so on.",
                                {
                                    "sub_header": "Where to get your key ",
                                    "content": [
                                        "Different sources of data provide different sources of keys:",
                                        "  1.Data from a database: If your data is coming from a database, you can use the database keys/IDs, which are unique by nature.",
                                        "  2.Locally generated data: If your data is generated and persisted locally (e.g. notes in a note-taking app), use an incrementing counter, crypto.randomUUID() or a package like uuid when creating items."
                                    ]
                                },
                                {
                                    "sub_header": "Rules of keys ",
                                    "content": [
                                        "  1.Keys must be unique among siblings. However, it’s okay to use the same keys for JSX nodes in different arrays.",
                                        "  2.Keys must not change or that defeats their purpose! Don’t generate them while rendering."
                                    ]
                                },
                                {
                                    "sub_header": "Why does React need keys? ",
                                    "content": [
                                        "Imagine that files on your desktop didn’t have names. Instead, you’d refer to them by their order — the first file, the second file, and so on. You could get used to it, but once you delete a file, it would get confusing. The second file would become the first file, the third file would be the second file, and so on.",
                                        "File names in a folder and JSX keys in an array serve a similar purpose. They let us uniquely identify an item between its siblings. A well-chosen key provides more information than the position within the array. Even if the position changes due to reordering, the key lets React identify the item throughout its lifetime.",
                                        {
                                            "code_example": "key"
                                        },
                                        "RecapOn this page you learned:\nHow to move data out of components and into data structures like arrays and objects.\nHow to generate sets of similar components with JavaScript’s map().\nHow to create arrays of filtered items with JavaScript’s filter().\nWhy and how to set key on each component in a collection so React can keep track of each of them even if their position or data changes.\n",
                                        {
                                            "code_example": "person.profession === 'chemist'"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Keeping Components Pure",
                    "url": "https://react.dev/learn/keeping-components-pure",
                    "content": [
                        "Some JavaScript functions are pure. Pure functions only perform a calculation and nothing more. By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. To get these benefits, though, there are a few rules you must follow.",
                        "You will learn\nWhat purity is and how it helps you avoid bugs\nHow to keep components pure by keeping changes out of the render phase\nHow to use Strict Mode to find mistakes in your components\n",
                        {
                            "sub_header": "Purity: Components as formulas ",
                            "content": [
                                "In computer science (and especially the world of functional programming), a pure function is a function with the following characteristics:",
                                "  1.It minds its own business. It does not change any objects or variables that existed before it was called.",
                                "  2.Same inputs, same output. Given the same inputs, a pure function should always return the same result.",
                                "You might already be familiar with one example of pure functions: formulas in math.",
                                "Consider this math formula: y = 2x.",
                                "If x = 2 then y = 4. Always.",
                                "If x = 3 then y = 6. Always.",
                                "If x = 3, y won’t sometimes be 9 or –1 or 2.5 depending on the time of day or the state of the stock market.",
                                "If y = 2x and x = 3, y will always be 6.",
                                "If we made this into a JavaScript function, it would look like this:",
                                {
                                    "code_example": "function double(number) {  return 2 * number;}"
                                },
                                "In the above example, double is a pure function. If you pass it 3, it will return 6. Always.",
                                "React is designed around this concept. React assumes that every component you write is a pure function. This means that React components you write must always return the same JSX given the same inputs:",
                                {
                                    "code_sandbox": "function Recipe({ drinkers }) {  return (    <ol>          <li>Boil {drinkers} cups of water.</li>      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>    </ol>  );}export default function App() {  return (    <section>      <h1>Spiced Chai Recipe</h1>      <h2>For two</h2>      <Recipe drinkers={2} />      <h2>For a gathering</h2>      <Recipe drinkers={4} />    </section>  );}"
                                },
                                "When you pass drinkers={2} to Recipe, it will return JSX containing 2 cups of water. Always.",
                                "If you pass drinkers={4}, it will return JSX containing 4 cups of water. Always.",
                                "Just like a math formula.",
                                "You could think of your components as recipes: if you follow them and don’t introduce new ingredients during the cooking process, you will get the same dish every time. That “dish” is the JSX that the component serves to React to render.",
                                "",
                                "Illustrated by Rachel Lee Nabors"
                            ]
                        },
                        {
                            "sub_header": "Side Effects: (un)intended consequences ",
                            "content": [
                                "React’s rendering process must always be pure. Components should only return their JSX, and not change any objects or variables that existed before rendering—that would make them impure!",
                                "Here is a component that breaks this rule:",
                                {
                                    "code_sandbox": "let guest = 0;function Cup() {  // Bad: changing a preexisting variable!  guest = guest + 1;  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaSet() {  return (    <>      <Cup />      <Cup />      <Cup />    </>  );}"
                                },
                                "This component is reading and writing a guest variable declared outside of it. This means that calling this component multiple times will produce different JSX! And what’s more, if other components read guest, they will produce different JSX, too, depending on when they were rendered! That’s not predictable.",
                                "Going back to our formula y = 2x, now even if x = 2, we cannot trust that y = 4. Our tests could fail, our users would be baffled, planes would fall out of the sky—you can see how this would lead to confusing bugs!",
                                "You can fix this component by passing guest as a prop instead:",
                                {
                                    "code_sandbox": "function Cup({ guest }) {  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaSet() {  return (    <>      <Cup guest={1} />      <Cup guest={2} />      <Cup guest={3} />    </>  );}"
                                },
                                "Now your component is pure, as the JSX it returns only depends on the guest prop.",
                                "In general, you should not expect your components to be rendered in any particular order. It doesn’t matter if you call y = 2x before or after y = 5x: both formulas will resolve independently of each other. In the same way, each component should only “think for itself”, and not attempt to coordinate with or depend upon others during rendering. Rendering is like a school exam: each component should calculate JSX on their own!",
                                "Deep DiveDetecting impure calculations with StrictMode Show DetailsAlthough you might not have used them all yet, in React there are three kinds of inputs that you can read while rendering: props, state, and context. You should always treat these inputs as read-only.When you want to change something in response to user input, you should set state instead of writing to a variable. You should never change preexisting variables or objects while your component is rendering.React offers a “Strict Mode” in which it calls each component’s function twice during development. By calling the component functions twice, Strict Mode helps find components that break these rules.Notice how the original example displayed “Guest #2”, “Guest #4”, and “Guest #6” instead of “Guest #1”, “Guest #2”, and “Guest #3”. The original function was impure, so calling it twice broke it. But the fixed pure version works even if the function is called twice every time. Pure functions only calculate, so calling them twice won’t change anything—just like calling double(2) twice doesn’t change what’s returned, and solving y = 2x twice doesn’t change what y is. Same inputs, same outputs. Always.Strict Mode has no effect in production, so it won’t slow down the app for your users. To opt into Strict Mode, you can wrap your root component into <React.StrictMode>. Some frameworks do this by default.",
                                {
                                    "sub_header": "Local mutation: Your component’s little secret ",
                                    "content": [
                                        "In the above example, the problem was that the component changed a preexisting variable while rendering. This is often called a “mutation” to make it sound a bit scarier. Pure functions don’t mutate variables outside of the function’s scope or objects that were created before the call—that makes them impure!",
                                        "However, it’s completely fine to change variables and objects that you’ve just created while rendering. In this example, you create an [] array, assign it to a cups variable, and then push a dozen cups into it:",
                                        {
                                            "code_sandbox": "function Cup({ guest }) {  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaGathering() {  let cups = [];  for (let i = 1; i <= 12; i++) {    cups.push(<Cup key={i} guest={i} />);  }  return cups;}"
                                        },
                                        "If the cups variable or the [] array were created outside the TeaGathering function, this would be a huge problem! You would be changing a preexisting object by pushing items into that array.",
                                        "However, it’s fine because you’ve created them during the same render, inside TeaGathering. No code outside of TeaGathering will ever know that this happened. This is called “local mutation”—it’s like your component’s little secret."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Where you can cause side effects ",
                            "content": [
                                "While functional programming relies heavily on purity, at some point, somewhere, something has to change. That’s kind of the point of programming! These changes—updating the screen, starting an animation, changing the data—are called side effects. They’re things that happen “on the side”, not during rendering.",
                                "In React, side effects usually belong inside event handlers. Event handlers are functions that React runs when you perform some action—for example, when you click a button. Even though event handlers are defined inside your component, they don’t run during rendering! So event handlers don’t need to be pure.",
                                "If you’ve exhausted all other options and can’t find the right event handler for your side effect, you can still attach it to your returned JSX with a useEffect call in your component. This tells React to execute it later, after rendering, when side effects are allowed. However, this approach should be your last resort.",
                                "When possible, try to express your logic with rendering alone. You’ll be surprised how far this can take you!",
                                "Deep DiveWhy does React care about purity? Show DetailsWriting pure functions takes some habit and discipline. But it also unlocks marvelous opportunities:\nYour components could run in a different environment—for example, on the server! Since they return the same result for the same inputs, one component can serve many user requests.\nYou can improve performance by skipping rendering components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.\nIf some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\nEvery new React feature we’re building takes advantage of purity. From data fetching to animations to performance, keeping components pure unlocks the power of the React paradigm.",
                                "Recap\nA component must be pure, meaning:\n\nIt minds its own business. It should not change any objects or variables that existed before rendering.\nSame inputs, same output. Given the same inputs, a component should always return the same JSX.\n\n\nRendering can happen at any time, so components should not depend on each others’ rendering sequence.\nYou should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen, “set” state instead of mutating preexisting objects.\nStrive to express your component’s logic in the JSX you return. When you need to “change things”, you’ll usually want to do it in an event handler. As a last resort, you can useEffect.\nWriting pure functions takes a bit of practice, but it unlocks the power of React’s paradigm.\n",
                                {
                                    "code_example": "<h1>"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Understanding Your UI as a Tree",
                    "url": "https://react.dev/learn/understanding-your-ui-as-a-tree",
                    "content": [
                        "Your React app is taking shape with many components being nested within each other. How does React keep track of your app’s component structure?React, and many other UI libraries, model UI as a tree. Thinking of your app as a tree is useful for understanding the relationship between components. This understanding will help you debug future concepts like performance and state management.",
                        "You will learn\nHow React “sees” component structures\nWhat a render tree is and what it is useful for\nWhat a module dependency tree is and what it is useful for\n",
                        {
                            "sub_header": "Your UI as a tree ",
                            "content": [
                                "Trees are a relationship model between items and UI is often represented using tree structures. For example, browsers use tree structures to model HTML (DOM) and CSS (CSSOM). Mobile platforms also use trees to represent their view hierarchy.",
                                "React creates a UI tree from your components. In this example, the UI tree is then used to render to the DOM.",
                                "Like browsers and mobile platforms, React also uses tree structures to manage and model the relationship between components in a React app. These trees are useful tools to understand how data flows through a React app and how to optimize rendering and app size."
                            ]
                        },
                        {
                            "sub_header": "The Render Tree ",
                            "content": [
                                "A major feature of components is the ability to compose components of other components. As we nest components, we have the concept of parent and child components, where each parent component may itself be a child of another component.",
                                "When we render a React app, we can model this relationship in a tree, known as the render tree.",
                                "Here is a React app that renders inspirational quotes.",
                                {
                                    "code_sandbox": "FancyText.jsInspirationGenerator.jsCopyright.jsquotes.jsimport FancyText from './FancyText';import InspirationGenerator from './InspirationGenerator';import Copyright from './Copyright';export default function App() {  return (    <>      <FancyText title text=\"Get Inspired App\" />      <InspirationGenerator>        <Copyright year={2004} />      </InspirationGenerator>    </>  );}"
                                },
                                "React creates a render tree, a UI tree, composed of the rendered components.",
                                "From the example app, we can construct the above render tree.",
                                "The tree is composed of nodes, each of which represents a component. App, FancyText, Copyright, to name a few, are all nodes in our tree.",
                                "The root node in a React render tree is the root component of the app. In this case, the root component is App and it is the first component React renders. Each arrow in the tree points from a parent component to a child component.",
                                "Deep DiveWhere are the HTML tags in the render tree? Show DetailsYou’ll notice in the above render tree, there is no mention of the HTML tags that each component renders. This is because the render tree is only composed of React components.React, as a UI framework, is platform agnostic. On react.dev, we showcase examples that render to the web, which uses HTML markup as its UI primitives. But a React app could just as likely render to a mobile or desktop platform, which may use different UI primitives like UIView or FrameworkElement.These platform UI primitives are not a part of React. React render trees can provide insight to our React app regardless of what platform your app renders to.",
                                "A render tree represents a single render pass of a React application. With conditional rendering, a parent component may render different children depending on the data passed.",
                                "We can update the app to conditionally render either an inspirational quote or color.",
                                {
                                    "code_sandbox": "FancyText.jsColor.jsInspirationGenerator.jsCopyright.jsinspirations.jsimport FancyText from './FancyText';import InspirationGenerator from './InspirationGenerator';import Copyright from './Copyright';export default function App() {  return (    <>      <FancyText title text=\"Get Inspired App\" />      <InspirationGenerator>        <Copyright year={2004} />      </InspirationGenerator>    </>  );}"
                                },
                                "With conditional rendering, across different renders, the render tree may render different components.",
                                "In this example, depending on what inspiration.type is, we may render <FancyText> or <Color>. The render tree may be different for each render pass.",
                                "Although render trees may differ across render passes, these trees are generally helpful for identifying what the top-level and leaf components are in a React app. Top-level components are the components nearest to the root component and affect the rendering performance of all the components beneath them and often contain the most complexity. Leaf components are near the bottom of the tree and have no child components and are often frequently re-rendered.",
                                "Identifying these categories of components are useful for understanding data flow and performance of your app."
                            ]
                        },
                        {
                            "sub_header": "The Module Dependency Tree ",
                            "content": [
                                "Another relationship in a React app that can be modeled with a tree are an app’s module dependencies. As we break up our components and logic into separate files, we create JS modules where we may export components, functions, or constants.",
                                "Each node in a module dependency tree is a module and each branch represents an import statement in that module.",
                                "If we take the previous Inspirations app, we can build a module dependency tree, or dependency tree for short.",
                                "The module dependency tree for the Inspirations app.",
                                "The root node of the tree is the root module, also known as the entrypoint file. It often is the module that contains the root component.",
                                "Comparing to the render tree of the same app, there are similar structures but some notable differences:",
                                "  1.The nodes that make-up the tree represent modules, not components.",
                                "  2.Non-component modules, like inspirations.js, are also represented in this tree. The render tree only encapsulates components.",
                                "  3.Copyright.js appears under App.js but in the render tree, Copyright, the component, appears as a child of InspirationGenerator. This is because InspirationGenerator accepts JSX as children props, so it renders Copyright as a child component but does not import the module.",
                                "Dependency trees are useful to determine what modules are necessary to run your React app. When building a React app for production, there is typically a build step that will bundle all the necessary JavaScript to ship to the client. The tool responsible for this is called a bundler, and bundlers will use the dependency tree to determine what modules should be included.",
                                "As your app grows, often the bundle size does too. Large bundle sizes are expensive for a client to download and run. Large bundle sizes can delay the time for your UI to get drawn. Getting a sense of your app’s dependency tree may help with debugging these issues.",
                                "Recap\nTrees are a common way to represent the relationship between entities. They are often used to model UI.\nRender trees represent the nested relationship between React components across a single render.\nWith conditional rendering, the render tree may change across different renders. With different prop values, components may render different children components.\nRender trees help identify what the top-level and leaf components are. Top-level components affect the rendering performance of all components beneath them and leaf components are often re-rendered frequently. Identifying them is useful for understanding and debugging rendering performance.\nDependency trees represent the module dependencies in a React app.\nDependency trees are used by build tools to bundle the necessary code to ship an app.\nDependency trees are useful for debugging large bundle sizes that slow time to paint and expose opportunities for optimizing what code is bundled.\n"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "Adding Interactivity",
            "source": "react",
            "url": "https://react.dev/learn/adding-interactivity",
            "sections": [
                "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.",
                "In this chapter\nHow to handle user-initiated events\nHow to make components “remember” information with state\nHow React updates the UI in two phases\nWhy state doesn’t update right after you change it\nHow to queue multiple state updates\nHow to update an object in state\nHow to update an array in state\n",
                {
                    "subHeader": "Responding to events ",
                    "url": "https://react.dev/learn/adding-interactivity/#responding-to-events",
                    "sections": [
                        "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.",
                        "Built-in components like <button> only support built-in browser events like onClick. However, you can also create your own components, and give their event handler props any application-specific names that you like.",
                        {
                            "code_sandbox": "export default function App() {  return (    <Toolbar      onPlayMovie={() => alert('Playing!')}      onUploadImage={() => alert('Uploading!')}    />  );}function Toolbar({ onPlayMovie, onUploadImage }) {  return (    <div>      <Button onClick={onPlayMovie}>        Play Movie      </Button>      <Button onClick={onUploadImage}>        Upload Image      </Button>    </div>  );}function Button({ onClick, children }) {  return (    <button onClick={onClick}>      {children}    </button>  );}"
                        },
                        "Ready to learn this topic?Read Responding to Events to learn how to add event handlers.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "State: a component’s memory ",
                    "url": "https://react.dev/learn/adding-interactivity/#state-a-components-memory",
                    "sections": [
                        "Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.",
                        "You can add state to a component with a useState Hook. Hooks are special functions that let your components use React features (state is one of those features). The useState Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.",
                        {
                            "code_example": "const [index, setIndex] = useState(0);const [showMore, setShowMore] = useState(false);"
                        },
                        "Here is how an image gallery uses and updates state on click:",
                        {
                            "code_sandbox": "data.jsimport { useState } from 'react';import { sculptureList } from './data.js';export default function Gallery() {  const [index, setIndex] = useState(0);  const [showMore, setShowMore] = useState(false);  const hasNext = index < sculptureList.length - 1;  function handleNextClick() {    if (hasNext) {      setIndex(index + 1);    } else {      setIndex(0);    }  }  function handleMoreClick() {    setShowMore(!showMore);  }  let sculpture = sculptureList[index];  return (    <>      <button onClick={handleNextClick}>        Next      </button>      <h2>        <i>{sculpture.name} </i>        by {sculpture.artist}      </h2>      <h3>        ({index + 1} of {sculptureList.length})      </h3>      <button onClick={handleMoreClick}>        {showMore ? 'Hide' : 'Show'} details      </button>      {showMore && <p>{sculpture.description}</p>}      <img        src={sculpture.url}        alt={sculpture.alt}      />    </>  );}"
                        },
                        "Ready to learn this topic?Read State: A Component’s Memory to learn how to remember a value and update it on interaction.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Render and commit ",
                    "url": "https://react.dev/learn/adding-interactivity/#render-and-commit",
                    "sections": [
                        "Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.",
                        "Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:",
                        "  1.Triggering a render (delivering the diner’s order to the kitchen)",
                        "  2.Rendering the component (preparing the order in the kitchen)",
                        "  3.Committing to the DOM (placing the order on the table)",
                        "  1.Trigger",
                        "  2.Render",
                        "  3.Commit",
                        "Illustrated by Rachel Lee Nabors",
                        "Ready to learn this topic?Read Render and Commit to learn the lifecycle of a UI update.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "State as a snapshot ",
                    "url": "https://react.dev/learn/adding-interactivity/#state-as-a-snapshot",
                    "sections": [
                        "Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!",
                        {
                            "code_example": "console.log(count);  // 0setCount(count + 1); // Request a re-render with 1console.log(count);  // Still 0!"
                        },
                        "This behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press “Send” first and then change the recipient to Bob. Whose name will appear in the alert five seconds later?",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function Form() {  const [to, setTo] = useState('Alice');  const [message, setMessage] = useState('Hello');  function handleSubmit(e) {    e.preventDefault();    setTimeout(() => {      alert(`You said ${message} to ${to}`);    }, 5000);  }  return (    <form onSubmit={handleSubmit}>      <label>        To:{' '}        <select          value={to}          onChange={e => setTo(e.target.value)}>          <option value=\"Alice\">Alice</option>          <option value=\"Bob\">Bob</option>        </select>      </label>      <textarea        placeholder=\"Message\"        value={message}        onChange={e => setMessage(e.target.value)}      />      <button type=\"submit\">Send</button>    </form>  );}"
                        },
                        "Ready to learn this topic?Read State as a Snapshot to learn why state appears “fixed” and unchanging inside the event handlers.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Queueing a series of state updates ",
                    "url": "https://react.dev/learn/adding-interactivity/#queueing-a-series-of-state-updates",
                    "sections": [
                        "This component is buggy: clicking “+3” increments the score only once.",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [score, setScore] = useState(0);  function increment() {    setScore(score + 1);  }  return (    <>      <button onClick={() => increment()}>+1</button>      <button onClick={() => {        increment();        increment();        increment();      }}>+3</button>      <h1>Score: {score}</h1>    </>  )}"
                        },
                        "State as a Snapshot explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So score continues to be 0 right after you call setScore(score + 1).",
                        {
                            "code_example": "console.log(score);  // 0setScore(score + 1); // setScore(0 + 1);console.log(score);  // 0setScore(score + 1); // setScore(0 + 1);console.log(score);  // 0setScore(score + 1); // setScore(0 + 1);console.log(score);  // 0"
                        },
                        "You can fix this by passing an updater function when setting state. Notice how replacing setScore(score + 1) with setScore(s => s + 1) fixes the “+3” button. This lets you queue multiple state updates.",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [score, setScore] = useState(0);  function increment() {    setScore(s => s + 1);  }  return (    <>      <button onClick={() => increment()}>+1</button>      <button onClick={() => {        increment();        increment();        increment();      }}>+3</button>      <h1>Score: {score}</h1>    </>  )}"
                        },
                        "Ready to learn this topic?Read Queueing a Series of State Updates to learn how to queue a sequence of state updates.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Updating objects in state ",
                    "url": "https://react.dev/learn/adding-interactivity/#updating-objects-in-state",
                    "sections": [
                        "State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.",
                        "Usually, you will use the ... spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function Form() {  const [person, setPerson] = useState({    name: 'Niki de Saint Phalle',    artwork: {      title: 'Blue Nana',      city: 'Hamburg',      image: 'https://i.imgur.com/Sd1AgUOm.jpg',    }  });  function handleNameChange(e) {    setPerson({      ...person,      name: e.target.value    });  }  function handleTitleChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        title: e.target.value      }    });  }  function handleCityChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        city: e.target.value      }    });  }  function handleImageChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        image: e.target.value      }    });  }  return (    <>      <label>        Name:        <input          value={person.name}          onChange={handleNameChange}        />      </label>      <label>        Title:        <input          value={person.artwork.title}          onChange={handleTitleChange}        />      </label>      <label>        City:        <input          value={person.artwork.city}          onChange={handleCityChange}        />      </label>      <label>        Image:        <input          value={person.artwork.image}          onChange={handleImageChange}        />      </label>      <p>        <i>{person.artwork.title}</i>        {' by '}        {person.name}        <br />        (located in {person.artwork.city})      </p>      <img        src={person.artwork.image}        alt={person.artwork.title}      />    </>  );}"
                        },
                        "If copying objects in code gets tedious, you can use a library like Immer to reduce repetitive code:",
                        {
                            "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                        },
                        "Ready to learn this topic?Read Updating Objects in State to learn how to update objects correctly.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Updating arrays in state ",
                    "url": "https://react.dev/learn/adding-interactivity/#updating-arrays-in-state",
                    "sections": [
                        "Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:",
                        {
                            "code_sandbox": "import { useState } from 'react';const initialList = [  { id: 0, title: 'Big Bellies', seen: false },  { id: 1, title: 'Lunar Landscape', seen: false },  { id: 2, title: 'Terracotta Army', seen: true },];export default function BucketList() {  const [list, setList] = useState(    initialList  );  function handleToggle(artworkId, nextSeen) {    setList(list.map(artwork => {      if (artwork.id === artworkId) {        return { ...artwork, seen: nextSeen };      } else {        return artwork;      }    }));  }  return (    <>      <h1>Art Bucket List</h1>      <h2>My list of art to see:</h2>      <ItemList        artworks={list}        onToggle={handleToggle} />    </>  );}function ItemList({ artworks, onToggle }) {  return (    <ul>      {artworks.map(artwork => (        <li key={artwork.id}>          <label>            <input              type=\"checkbox\"              checked={artwork.seen}              onChange={e => {                onToggle(                  artwork.id,                  e.target.checked                );              }}            />            {artwork.title}          </label>        </li>      ))}    </ul>  );}"
                        },
                        "If copying arrays in code gets tedious, you can use a library like Immer to reduce repetitive code:",
                        {
                            "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                        },
                        "Ready to learn this topic?Read Updating Arrays in State to learn how to update arrays correctly.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "What’s next? ",
                    "url": "https://react.dev/learn/adding-interactivity/#whats-next",
                    "sections": [
                        "Head over to Responding to Events to start reading this chapter page by page!",
                        "Or, if you’re already familiar with these topics, why not read about Managing State?"
                    ]
                }
            ],
            "subTopics": [
                {
                    "headers": "Responding to Events",
                    "url": "https://react.dev/learn/responding-to-events",
                    "content": [
                        "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.",
                        "You will learn\nDifferent ways to write an event handler\nHow to pass event handling logic from a parent component\nHow events propagate and how to stop them\n",
                        {
                            "sub_header": "Adding event handlers ",
                            "content": [
                                "To add an event handler, you will first define a function and then pass it as a prop to the appropriate JSX tag. For example, here is a button that doesn’t do anything yet:",
                                {
                                    "code_sandbox": "export default function Button() {  return (    <button>      I don't do anything    </button>  );}"
                                },
                                "You can make it show a message when a user clicks by following these three steps:",
                                "  1.Declare a function called handleClick inside your Button component.",
                                "  2.Implement the logic inside that function (use alert to show the message).",
                                "  3.Add onClick={handleClick} to the <button> JSX.",
                                {
                                    "code_sandbox": "export default function Button() {  function handleClick() {    alert('You clicked me!');  }  return (    <button onClick={handleClick}>      Click me    </button>  );}"
                                },
                                "You defined the handleClick function and then passed it as a prop to <button>.  handleClick is an event handler. Event handler functions:",
                                "  1.Are usually defined inside your components.",
                                "  2.Have names that start with handle, followed by the name of the event.",
                                "By convention, it is common to name event handlers as handle followed by the event name. You’ll often see onClick={handleClick}, onMouseEnter={handleMouseEnter}, and so on.",
                                "Alternatively, you can define an event handler inline in the JSX:",
                                {
                                    "code_example": "<button onClick={function handleClick() {  alert('You clicked me!');}}>"
                                },
                                "Or, more concisely, using an arrow function:",
                                {
                                    "code_example": "<button onClick={() => {  alert('You clicked me!');}}>"
                                },
                                "All of these styles are equivalent. Inline event handlers are convenient for short functions.",
                                {
                                    "code_example": "<button onClick={handleClick}>"
                                },
                                {
                                    "sub_header": "Reading props in event handlers ",
                                    "content": [
                                        "Because event handlers are declared inside of a component, they have access to the component’s props. Here is a button that, when clicked, shows an alert with its message prop:",
                                        {
                                            "code_sandbox": "function AlertButton({ message, children }) {  return (    <button onClick={() => alert(message)}>      {children}    </button>  );}export default function Toolbar() {  return (    <div>      <AlertButton message=\"Playing!\">        Play Movie      </AlertButton>      <AlertButton message=\"Uploading!\">        Upload Image      </AlertButton>    </div>  );}"
                                        },
                                        "This lets these two buttons show different messages. Try changing the messages passed to them."
                                    ]
                                },
                                {
                                    "sub_header": "Passing event handlers as props ",
                                    "content": [
                                        "Often you’ll want the parent component to specify a child’s event handler. Consider buttons: depending on where you’re using a Button component, you might want to execute a different function—perhaps one plays a movie and another uploads an image.",
                                        "To do this, pass a prop the component receives from its parent as the event handler like so:",
                                        {
                                            "code_sandbox": "function Button({ onClick, children }) {  return (    <button onClick={onClick}>      {children}    </button>  );}function PlayButton({ movieName }) {  function handlePlayClick() {    alert(`Playing ${movieName}!`);  }  return (    <Button onClick={handlePlayClick}>      Play \"{movieName}\"    </Button>  );}function UploadButton() {  return (    <Button onClick={() => alert('Uploading!')}>      Upload Image    </Button>  );}export default function Toolbar() {  return (    <div>      <PlayButton movieName=\"Kiki's Delivery Service\" />      <UploadButton />    </div>  );}"
                                        },
                                        "Here, the Toolbar component renders a PlayButton and an UploadButton:",
                                        "  1.PlayButton passes handlePlayClick as the onClick prop to the Button inside.",
                                        "  2.UploadButton passes () => alert('Uploading!') as the onClick prop to the Button inside.",
                                        "Finally, your Button component accepts a prop called onClick. It passes that prop directly to the built-in browser <button> with onClick={onClick}. This tells React to call the passed function on click.",
                                        "If you use a design system, it’s common for components like buttons to contain styling but not specify behavior. Instead, components like PlayButton and UploadButton will pass event handlers down."
                                    ]
                                },
                                {
                                    "sub_header": "Naming event handler props ",
                                    "content": [
                                        "Built-in components like <button> and <div> only support browser event names like onClick. However, when you’re building your own components, you can name their event handler props any way that you like.",
                                        "By convention, event handler props should start with on, followed by a capital letter.",
                                        "For example, the Button component’s onClick prop could have been called onSmash:",
                                        {
                                            "code_sandbox": "function Button({ onSmash, children }) {  return (    <button onClick={onSmash}>      {children}    </button>  );}export default function App() {  return (    <div>      <Button onSmash={() => alert('Playing!')}>        Play Movie      </Button>      <Button onSmash={() => alert('Uploading!')}>        Upload Image      </Button>    </div>  );}"
                                        },
                                        "In this example, <button onClick={onSmash}> shows that the browser <button> (lowercase) still needs a prop called onClick, but the prop name received by your custom Button component is up to you!",
                                        "When your component supports multiple interactions, you might name event handler props for app-specific concepts. For example, this Toolbar component receives onPlayMovie and onUploadImage event handlers:",
                                        {
                                            "code_sandbox": "export default function App() {  return (    <Toolbar      onPlayMovie={() => alert('Playing!')}      onUploadImage={() => alert('Uploading!')}    />  );}function Toolbar({ onPlayMovie, onUploadImage }) {  return (    <div>      <Button onClick={onPlayMovie}>        Play Movie      </Button>      <Button onClick={onUploadImage}>        Upload Image      </Button>    </div>  );}function Button({ onClick, children }) {  return (    <button onClick={onClick}>      {children}    </button>  );}"
                                        },
                                        "Notice how the App component does not need to know what Toolbar will do with onPlayMovie or onUploadImage. That’s an implementation detail of the Toolbar. Here, Toolbar passes them down as onClick handlers to its Buttons, but it could later also trigger them on a keyboard shortcut. Naming props after app-specific interactions like onPlayMovie gives you the flexibility to change how they’re used later.",
                                        {
                                            "code_example": "<button onClick={handleClick}>"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Event propagation ",
                            "content": [
                                "Event handlers will also catch events from any children your component might have. We say that an event “bubbles” or “propagates” up the tree: it starts with where the event happened, and then goes up the tree.",
                                "This <div> contains two buttons. Both the <div> and each button have their own onClick handlers. Which handlers do you think will fire when you click a button?",
                                {
                                    "code_sandbox": "export default function Toolbar() {  return (    <div className=\"Toolbar\" onClick={() => {      alert('You clicked on the toolbar!');    }}>      <button onClick={() => alert('Playing!')}>        Play Movie      </button>      <button onClick={() => alert('Uploading!')}>        Upload Image      </button>    </div>  );}"
                                },
                                "If you click on either button, its onClick will run first, followed by the parent <div>’s onClick. So two messages will appear. If you click the toolbar itself, only the parent <div>’s onClick will run.",
                                {
                                    "code_example": "onScroll"
                                },
                                {
                                    "sub_header": "Stopping propagation ",
                                    "content": [
                                        "Event handlers receive an event object as their only argument. By convention, it’s usually called e, which stands for “event”. You can use this object to read information about the event.",
                                        "That event object also lets you stop the propagation. If you want to prevent an event from reaching parent components, you need to call e.stopPropagation() like this Button component does:",
                                        {
                                            "code_sandbox": "function Button({ onClick, children }) {  return (    <button onClick={e => {      e.stopPropagation();      onClick();    }}>      {children}    </button>  );}export default function Toolbar() {  return (    <div className=\"Toolbar\" onClick={() => {      alert('You clicked on the toolbar!');    }}>      <Button onClick={() => alert('Playing!')}>        Play Movie      </Button>      <Button onClick={() => alert('Uploading!')}>        Upload Image      </Button>    </div>  );}"
                                        },
                                        "When you click on a button:",
                                        "  1.React calls the onClick handler passed to <button>.",
                                        "  2.That handler, defined in Button, does the following:\n\nCalls e.stopPropagation(), preventing the event from bubbling further.\nCalls the onClick function, which is a prop passed from the Toolbar component.\n\n",
                                        "  3.Calls e.stopPropagation(), preventing the event from bubbling further.",
                                        "  4.Calls the onClick function, which is a prop passed from the Toolbar component.",
                                        "  5.That function, defined in the Toolbar component, displays the button’s own alert.",
                                        "  6.Since the propagation was stopped, the parent <div>’s onClick handler does not run.",
                                        "As a result of e.stopPropagation(), clicking on the buttons now only shows a single alert (from the <button>) rather than the two of them (from the <button> and the parent toolbar <div>). Clicking a button is not the same thing as clicking the surrounding toolbar, so stopping the propagation makes sense for this UI.",
                                        "Deep DiveCapture phase events Show DetailsIn rare cases, you might need to catch all events on child elements, even if they stopped propagation. For example, maybe you want to log every click to analytics, regardless of the propagation logic. You can do this by adding Capture at the end of the event name:<div onClickCapture={() => { /* this runs first */ }}>  <button onClick={e => e.stopPropagation()} />  <button onClick={e => e.stopPropagation()} /></div>Each event propagates in three phases:\nIt travels down, calling all onClickCapture handlers.\nIt runs the clicked element’s onClick handler.\nIt travels upwards, calling all onClick handlers.\nCapture events are useful for code like routers or analytics, but you probably won’t use them in app code."
                                    ]
                                },
                                {
                                    "sub_header": "Passing handlers as alternative to propagation ",
                                    "content": [
                                        "Notice how this click handler runs a line of code and then calls the onClick prop passed by the parent:",
                                        {
                                            "code_example": "function Button({ onClick, children }) {  return (    <button onClick={e => {      e.stopPropagation();      onClick();    }}>      {children}    </button>  );}"
                                        },
                                        "You could add more code to this handler before calling the parent onClick event handler, too. This pattern provides an alternative to propagation. It lets the child component handle the event, while also letting the parent component specify some additional behavior. Unlike propagation, it’s not automatic. But the benefit of this pattern is that you can clearly follow the whole chain of code that executes as a result of some event.",
                                        "If you rely on propagation and it’s difficult to trace which handlers execute and why, try this approach instead."
                                    ]
                                },
                                {
                                    "sub_header": "Preventing default behavior ",
                                    "content": [
                                        "Some browser events have default behavior associated with them. For example, a <form> submit event, which happens when a button inside of it is clicked, will reload the whole page by default:",
                                        {
                                            "code_sandbox": "export default function Signup() {  return (    <form onSubmit={() => alert('Submitting!')}>      <input />      <button>Send</button>    </form>  );}"
                                        },
                                        "You can call e.preventDefault() on the event object to stop this from happening:",
                                        {
                                            "code_sandbox": "export default function Signup() {  return (    <form onSubmit={e => {      e.preventDefault();      alert('Submitting!');    }}>      <input />      <button>Send</button>    </form>  );}"
                                        },
                                        "Don’t confuse e.stopPropagation() and e.preventDefault(). They are both useful, but are unrelated:",
                                        "  1.e.stopPropagation() stops the event handlers attached to the tags above from firing.",
                                        "  2.e.preventDefault()  prevents the default browser behavior for the few events that have it."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Can event handlers have side effects? ",
                            "content": [
                                "Absolutely! Event handlers are the best place for side effects.",
                                "Unlike rendering functions, event handlers don’t need to be pure, so it’s a great place to change something—for example, change an input’s value in response to typing, or change a list in response to a button press. However, in order to change some information, you first need some way to store it. In React, this is done by using state, a component’s memory. You will learn all about it on the next page.",
                                "Recap\nYou can handle events by passing a function as a prop to an element like <button>.\nEvent handlers must be passed, not called! onClick={handleClick}, not onClick={handleClick()}.\nYou can define an event handler function separately or inline.\nEvent handlers are defined inside a component, so they can access props.\nYou can declare an event handler in a parent and pass it as a prop to a child.\nYou can define your own event handler props with application-specific names.\nEvents propagate upwards. Call e.stopPropagation() on the first argument to prevent that.\nEvents may have unwanted default browser behavior. Call e.preventDefault() to prevent that.\nExplicitly calling an event handler prop from a child handler is a good alternative to propagation.\n",
                                {
                                    "code_example": "handleClick"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "State: A Component's Memory",
                    "url": "https://react.dev/learn/state-a-components-memory",
                    "content": [
                        "Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” should put a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.",
                        {
                            "code_example": "useState"
                        },
                        {
                            "sub_header": "When a regular variable isn’t enough ",
                            "content": [
                                "Here’s a component that renders a sculpture image. Clicking the “Next” button should show the next sculpture by changing the index to 1, then 2, and so on. However, this won’t work (you can try it!):",
                                {
                                    "code_sandbox": "data.jsimport { sculptureList } from './data.js';export default function Gallery() {  let index = 0;  function handleClick() {    index = index + 1;  }  let sculpture = sculptureList[index];  return (    <>      <button onClick={handleClick}>        Next      </button>      <h2>        <i>{sculpture.name} </i>         by {sculpture.artist}      </h2>      <h3>          ({index + 1} of {sculptureList.length})      </h3>      <img         src={sculpture.url}         alt={sculpture.alt}      />      <p>        {sculpture.description}      </p>    </>  );}"
                                },
                                "The handleClick event handler is updating a local variable, index. But two things prevent that change from being visible:",
                                "  1.Local variables don’t persist between renders. When React renders this component a second time, it renders it from scratch—it doesn’t consider any changes to the local variables.",
                                "  2.Changes to local variables won’t trigger renders. React doesn’t realize it needs to render the component again with the new data.",
                                "To update a component with new data, two things need to happen:",
                                "  1.Retain the data between renders.",
                                "  2.Trigger React to render the component with new data (re-rendering).",
                                "The useState Hook provides those two things:",
                                "  1.A state variable to retain the data between renders.",
                                "  2.A state setter function to update the variable and trigger React to render the component again."
                            ]
                        },
                        {
                            "sub_header": "Adding a state variable ",
                            "content": [
                                "To add a state variable, import useState from React at the top of the file:",
                                {
                                    "code_example": "import { useState } from 'react';"
                                },
                                "Then, replace this line:",
                                {
                                    "code_example": "let index = 0;"
                                },
                                "with",
                                {
                                    "code_example": "const [index, setIndex] = useState(0);"
                                },
                                "index is a state variable and setIndex is the setter function.",
                                "\nThe [ and ] syntax here is called array destructuring and it lets you read values from an array. The array returned by useState always has exactly two items.\n",
                                "This is how they work together in handleClick:",
                                {
                                    "code_example": "function handleClick() {  setIndex(index + 1);}"
                                },
                                "Now clicking the “Next” button switches the current sculpture:",
                                {
                                    "code_sandbox": "data.jsimport { useState } from 'react';import { sculptureList } from './data.js';export default function Gallery() {  const [index, setIndex] = useState(0);  function handleClick() {    setIndex(index + 1);  }  let sculpture = sculptureList[index];  return (    <>      <button onClick={handleClick}>        Next      </button>      <h2>        <i>{sculpture.name} </i>         by {sculpture.artist}      </h2>      <h3>          ({index + 1} of {sculptureList.length})      </h3>      <img         src={sculpture.url}         alt={sculpture.alt}      />      <p>        {sculpture.description}      </p>    </>  );}"
                                },
                                {
                                    "sub_header": "Meet your first Hook ",
                                    "content": [
                                        "In React, useState, as well as any other function starting with “use”, is called a Hook.",
                                        "Hooks are special functions that are only available while React is rendering (which we’ll get into in more detail on the next page). They let you “hook into” different React features.",
                                        "State is just one of those features, but you will meet the other Hooks later.",
                                        {
                                            "code_example": "use"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Anatomy of useState ",
                                    "content": [
                                        "When you call useState, you are telling React that you want this component to remember something:",
                                        {
                                            "code_example": "const [index, setIndex] = useState(0);"
                                        },
                                        "In this case, you want React to remember index.",
                                        {
                                            "code_example": "const [something, setSomething]"
                                        },
                                        "The only argument to useState is the initial value of your state variable. In this example, the index’s initial value is set to 0 with useState(0).",
                                        "Every time your component renders, useState gives you an array containing two values:",
                                        "  1.The state variable (index) with the value you stored.",
                                        "  2.The state setter function (setIndex) which can update the state variable and trigger React to render the component again.",
                                        "Here’s how that happens in action:",
                                        {
                                            "code_example": "const [index, setIndex] = useState(0);"
                                        },
                                        "  1.Your component renders the first time. Because you passed 0 to useState as the initial value for index, it will return [0, setIndex]. React remembers 0 is the latest state value.",
                                        "  2.You update the state. When a user clicks the button, it calls setIndex(index + 1). index is 0, so it’s setIndex(1). This tells React to remember index is 1 now and triggers another render.",
                                        "  3.Your component’s second render. React still sees useState(0), but because React remembers that you set index to 1, it returns [1, setIndex] instead.",
                                        "  4.And so on!"
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Giving a component multiple state variables ",
                            "content": [
                                "You can have as many state variables of as many types as you like in one component. This component has two state variables, a number index and a boolean showMore that’s toggled when you click “Show details”:",
                                {
                                    "code_sandbox": "data.jsimport { useState } from 'react';import { sculptureList } from './data.js';export default function Gallery() {  const [index, setIndex] = useState(0);  const [showMore, setShowMore] = useState(false);  function handleNextClick() {    setIndex(index + 1);  }  function handleMoreClick() {    setShowMore(!showMore);  }  let sculpture = sculptureList[index];  return (    <>      <button onClick={handleNextClick}>        Next      </button>      <h2>        <i>{sculpture.name} </i>         by {sculpture.artist}      </h2>      <h3>          ({index + 1} of {sculptureList.length})      </h3>      <button onClick={handleMoreClick}>        {showMore ? 'Hide' : 'Show'} details      </button>      {showMore && <p>{sculpture.description}</p>}      <img         src={sculpture.url}         alt={sculpture.alt}      />    </>  );}"
                                },
                                "It is a good idea to have multiple state variables if their state is unrelated, like index and showMore in this example. But if you find that you often change two state variables together, it might be easier to combine them into one. For example, if you have a form with many fields, it’s more convenient to have a single state variable that holds an object than state variable per field. Read Choosing the State Structure for more tips.",
                                "Deep DiveHow does React know which state to return? Show DetailsYou might have noticed that the useState call does not receive any information about which state variable it refers to. There is no “identifier” that is passed to useState, so how does it know which of the state variables to return? Does it rely on some magic like parsing your functions? The answer is no.Instead, to enable their concise syntax, Hooks rely on a stable call order on every render of the same component. This works well in practice because if you follow the rule above (“only call Hooks at the top level”), Hooks will always be called in the same order. Additionally, a linter plugin catches most mistakes.Internally, React holds an array of state pairs for every component. It also maintains the current pair index, which is set to 0 before rendering. Each time you call useState, React gives you the next state pair and increments the index. You can read more about this mechanism in React Hooks: Not Magic, Just Arrays.This example doesn’t use React but it gives you an idea of how useState works internally:index.jsindex.htmlindex.js ResetForklet componentHooks = [];\nlet currentHookIndex = 0;\n\n// How useState works inside React (simplified).\nfunction useState(initialState) {\n  let pair = componentHooks[currentHookIndex];\n  if (pair) {\n    // This is not the first render,\n    // so the state pair already exists.\n    // Return it and prepare for next Hook call.\n    currentHookIndex++;\n    return pair;\n  }\n\n  // This is the first time we're rendering,\n  // so create a state pair and store it.\n  pair = [initialState, setState];\n\n  function setState(nextState) {\n    // When the user requests a state change,\n    // put the new value into the pair.\n    pair[0] = nextState;\n    updateDOM();\n  }\n\n  // Store the pair for future renders\n  // and prepare for the next Hook call.\n  componentHooks[currentHookIndex] = pair;\n  currentHookIndex++;\n  return pair;\n}\n\nfunction Gallery() {\n  // Each useState() call will get the next pair.\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  // This example doesn't use React, so\n  // return an output object instead of JSX.\n  return {\n    onNextClick: handleNextClick,\n    onMoreClick: handleMoreClick,\n    header: `${sculpture.name} by ${sculpture.artist}`,\n    counter: `${index + 1} of ${sculptureList.length}`,\n    more: `${showMore ? 'Hide' : 'Show'} details`,\n    description: showMore ? sculpture.description : null,\n    imageSrc: sculpture.url,\n    imageAlt: sculpture.alt\n  };\n}\n\nfunction updateDOM() {\n  // Reset the current Hook index\n  // before rendering the component.\n  currentHookIndex = 0;\n  let output = Gallery();\n\n  // Update the DOM to match the output.\n  // This is the part React does for you.\n  nextButton.onclick = output.onNextClick;\n  header.textContent = output.header;\n  moreButton.onclick = output.onMoreClick;\n  moreButton.textContent = output.more;\n  image.src = output.imageSrc;\n  image.alt = output.imageAlt;\n  if (output.description !== null) {\n    description.textContent = output.description;\n    description.style.display = '';\n  } else {\n    description.style.display = 'none';\n  }\n}\n\nlet nextButton = document.getElementById('nextButton');\nlet header = document.getElementById('header');\nlet moreButton = document.getElementById('moreButton');\nlet description = document.getElementById('description');\nlet image = document.getElementById('image');\nlet sculptureList = [{\n  name: 'Homenaje a la Neurocirugía',\n  artist: 'Marta Colvin Andrade',\n  description: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n  url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n  alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'  \n}, {\n  name: 'Floralis Genérica',\n  artist: 'Eduardo Catalano',\n  description: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n  url: 'https://i.imgur.com/ZF6s192m.jpg',\n  alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n}, {\n  name: 'Eternal Presence',\n  artist: 'John Woodrow Wilson',\n  description: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n  url: 'https://i.imgur.com/aTtVpES.jpg',\n  alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n}, {\n  name: 'Moai',\n  artist: 'Unknown Artist',\n  description: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n  url: 'https://i.imgur.com/RCwLEoQm.jpg',\n  alt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n}, {\n  name: 'Blue Nana',\n  artist: 'Niki de Saint Phalle',\n  description: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n  url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n}, {\n  name: 'Ultimate Form',\n  artist: 'Barbara Hepworth',\n  description: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n  url: 'https://i.imgur.com/2heNQDcm.jpg',\n  alt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n}, {\n  name: 'Cavaliere',\n  artist: 'Lamidi Olonade Fakeye',\n  description: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n  url: 'https://i.imgur.com/wIdGuZwm.png',\n  alt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n}, {\n  name: 'Big Bellies',\n  artist: 'Alina Szapocznikow',\n  description: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n  url: 'https://i.imgur.com/AlHTAdDm.jpg',\n  alt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n}, {\n  name: 'Terracotta Army',\n  artist: 'Unknown Artist',\n  description: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n  url: 'https://i.imgur.com/HMFmH6m.jpg',\n  alt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n}, {\n  name: 'Lunar Landscape',\n  artist: 'Louise Nevelson',\n  description: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n  url: 'https://i.imgur.com/rN7hY6om.jpg',\n  alt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n}, {\n  name: 'Aureole',\n  artist: 'Ranjani Shettar',\n  description: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n  url: 'https://i.imgur.com/okTpbHhm.jpg',\n  alt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n}, {\n  name: 'Hippos',\n  artist: 'Taipei Zoo',\n  description: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n  url: 'https://i.imgur.com/6o5Vuyu.jpg',\n  alt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n}];\n\n// Make UI match the initial state.\nupdateDOM();\n\nShow moreYou don’t have to understand it to use React, but you might find this a helpful mental model."
                            ]
                        },
                        {
                            "sub_header": "State is isolated and private ",
                            "content": [
                                "State is local to a component instance on the screen. In other words, if you render the same component twice, each copy will have completely isolated state! Changing one of them will not affect the other.",
                                "In this example, the Gallery component from earlier is rendered twice with no changes to its logic. Try clicking the buttons inside each of the galleries. Notice that their state is independent:",
                                {
                                    "code_sandbox": "Gallery.jsdata.jsimport Gallery from './Gallery.js';export default function Page() {  return (    <div className=\"Page\">      <Gallery />      <Gallery />    </div>  );}"
                                },
                                "This is what makes state different from regular variables that you might declare at the top of your module. State is not tied to a particular function call or a place in the code, but it’s “local” to the specific place on the screen. You rendered two <Gallery /> components, so their state is stored separately.",
                                "Also notice how the Page component doesn’t “know” anything about the Gallery state or even whether it has any. Unlike props, state is fully private to the component declaring it. The parent component can’t change it. This lets you add state to any component or remove it without impacting the rest of the components.",
                                "What if you wanted both galleries to keep their states in sync? The right way to do it in React is to remove state from child components and add it to their closest shared parent. The next few pages will focus on organizing state of a single component, but we will return to this topic in Sharing State Between Components.",
                                "Recap\nUse a state variable when a component needs to “remember” some information between renders.\nState variables are declared by calling the useState Hook.\nHooks are special functions that start with use. They let you “hook into” React features like state.\nHooks might remind you of imports: they need to be called unconditionally. Calling Hooks, including useState, is only valid at the top level of a component or another Hook.\nThe useState Hook returns a pair of values: the current state and the function to update it.\nYou can have more than one state variable. Internally, React matches them up by their order.\nState is private to the component. If you render it in two places, each copy gets its own state.\n",
                                "Try out some challenges1. Complete the gallery 2. Fix stuck form inputs 3. Fix a crash 4. Remove unnecessary state Challenge 1 of 4: Complete the gallery When you press “Next” on the last sculpture, the code crashes. Fix the logic to prevent the crash. You may do this by adding extra logic to event handler or by disabling the button when the action is not possible.After fixing the crash, add a “Previous” button that shows the previous sculpture. It shouldn’t crash on the first sculpture.App.jsdata.jsApp.js ResetForkimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n    </>\n  );\n}\n\nShow more Show solutionNext Challenge"
                            ]
                        }
                    ]
                },
                {
                    "headers": "Render and Commit",
                    "url": "https://react.dev/learn/render-and-commit",
                    "content": [
                        "Before your components are displayed on screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.",
                        "You will learn\nWhat rendering means in React\nWhen and why React renders a component\nThe steps involved in displaying a component on screen\nWhy rendering does not always produce a DOM update\n",
                        "Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:",
                        "  1.Triggering a render (delivering the guest’s order to the kitchen)",
                        "  2.Rendering the component (preparing the order in the kitchen)",
                        "  3.Committing to the DOM (placing the order on the table)",
                        "  1.Trigger",
                        "  2.Render",
                        "  3.Commit",
                        "Illustrated by Rachel Lee Nabors",
                        {
                            "sub_header": "Step 1: Trigger a render ",
                            "content": [
                                "There are two reasons for a component to render:",
                                "  1.It’s the component’s initial render.",
                                "  2.The component’s (or one of its ancestors’) state has been updated.",
                                {
                                    "sub_header": "Initial render ",
                                    "content": [
                                        "When your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it’s done by calling createRoot with the target DOM node, and then calling its render method with your component:",
                                        {
                                            "code_sandbox": "Image.jsimport Image from './Image.js';import { createRoot } from 'react-dom/client';const root = createRoot(document.getElementById('root'))root.render(<Image />);"
                                        },
                                        "Try commenting out the root.render() call and see the component disappear!"
                                    ]
                                },
                                {
                                    "sub_header": "Re-renders when state updates ",
                                    "content": [
                                        "Once the component has been initially rendered, you can trigger further renders by updating its state with the set function. Updating your component’s state automatically queues a render. (You can imagine these as a restaurant guest ordering tea, dessert, and all sorts of things after putting in their first order, depending on the state of their thirst or hunger.)",
                                        "  1.State update...",
                                        "  2....triggers...",
                                        "  3....render!",
                                        "Illustrated by Rachel Lee Nabors"
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Step 2: React renders your components ",
                            "content": [
                                "After you trigger a render, React calls your components to figure out what to display on screen. “Rendering” is React calling your components.",
                                "  1.On initial render, React will call the root component.",
                                "  2.For subsequent renders, React will call the function component whose state update triggered the render.",
                                "This process is recursive: if the updated component returns some other component, React will render that component next, and if that component also returns something, it will render that component next, and so on. The process will continue until there are no more nested components and React knows exactly what should be displayed on screen.",
                                "In the following example, React will call Gallery() and  Image() several times:",
                                {
                                    "code_sandbox": "Gallery.jsGallery.jsexport default function Gallery() {  return (    <section>      <h1>Inspiring Sculptures</h1>      <Image />      <Image />      <Image />    </section>  );}function Image() {  return (    <img      src=\"https://i.imgur.com/ZF6s192.jpg\"      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"    />  );}"
                                },
                                "  1.During the initial render, React will create the DOM nodes for <section>, <h1>, and three <img> tags.",
                                "  2.During a re-render, React will calculate which of their properties, if any, have changed since the previous render. It won’t do anything with that information until the next step, the commit phase.",
                                "PitfallRendering must always be a pure calculation:\nSame inputs, same output. Given the same inputs, a component should always return the same JSX. (When someone orders a salad with tomatoes, they should not receive a salad with onions!)\nIt minds its own business. It should not change any objects or variables that existed before rendering. (One order should not change anyone else’s order.)\nOtherwise, you can encounter confusing bugs and unpredictable behavior as your codebase grows in complexity. When developing in “Strict Mode”, React calls each component’s function twice, which can help surface mistakes caused by impure functions.",
                                "Deep DiveOptimizing performance Show DetailsThe default behavior of rendering all components nested within the updated component is not optimal for performance if the updated component is very high in the tree. If you run into a performance issue, there are several opt-in ways to solve it described in the Performance section. Don’t optimize prematurely!"
                            ]
                        },
                        {
                            "sub_header": "Step 3: React commits changes to the DOM ",
                            "content": [
                                "After rendering (calling) your components, React will modify the DOM.",
                                "  1.For the initial render, React will use the appendChild() DOM API to put all the DOM nodes it has created on screen.",
                                "  2.For re-renders, React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.",
                                "React only changes the DOM nodes if there’s a difference between renders. For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the <input>, updating its value, but the text doesn’t disappear when the component re-renders:",
                                {
                                    "code_sandbox": "Clock.jsClock.jsexport default function Clock({ time }) {  return (    <>      <h1>{time}</h1>      <input />    </>  );}"
                                },
                                "This works because during this last step, React only updates the content of <h1> with the new time. It sees that the <input> appears in the JSX in the same place as last time, so React doesn’t touch the <input>—or its value!"
                            ]
                        },
                        {
                            "sub_header": "Epilogue: Browser paint ",
                            "content": [
                                "After rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as “browser rendering”, we’ll refer to it as “painting” to avoid confusion throughout the docs.",
                                "",
                                "Illustrated by Rachel Lee Nabors",
                                "Recap\nAny screen update in a React app happens in three steps:\n\nTrigger\nRender\nCommit\n\n\nYou can use Strict Mode to find mistakes in your components\nReact does not touch the DOM if the rendering result is the same as last time\n"
                            ]
                        }
                    ]
                },
                {
                    "headers": "State as a Snapshot",
                    "url": "https://react.dev/learn/state-as-a-snapshot",
                    "content": [
                        "State variables might look like regular JavaScript variables that you can read and write to. However, state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render.",
                        "You will learn\nHow setting state triggers re-renders\nWhen and how state updates\nWhy state does not update immediately after you set it\nHow event handlers access a “snapshot” of the state\n",
                        {
                            "sub_header": "Setting state triggers renders ",
                            "content": [
                                "You might think of your user interface as changing directly in response to the user event like a click. In React, it works a little differently from this mental model. On the previous page, you saw that setting state requests a re-render from React. This means that for an interface to react to the event, you need to update the state.",
                                "In this example, when you press “send”, setIsSent(true) tells React to re-render the UI:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Form() {  const [isSent, setIsSent] = useState(false);  const [message, setMessage] = useState('Hi!');  if (isSent) {    return <h1>Your message is on its way!</h1>  }  return (    <form onSubmit={(e) => {      e.preventDefault();      setIsSent(true);      sendMessage(message);    }}>      <textarea        placeholder=\"Message\"        value={message}        onChange={e => setMessage(e.target.value)}      />      <button type=\"submit\">Send</button>    </form>  );}function sendMessage(message) {  // ...}"
                                },
                                "Here’s what happens when you click the button:",
                                "  1.The onSubmit event handler executes.",
                                "  2.setIsSent(true) sets isSent to true and queues a new render.",
                                "  3.React re-renders the component according to the new isSent value.",
                                "Let’s take a closer look at the relationship between state and rendering."
                            ]
                        },
                        {
                            "sub_header": "Rendering takes a snapshot in time ",
                            "content": [
                                "“Rendering” means that React is calling your component, which is a function. The JSX you return from that function is like a snapshot of the UI in time. Its props, event handlers, and local variables were all calculated using its state at the time of the render.",
                                "Unlike a photograph or a movie frame, the UI “snapshot” you return is interactive. It includes logic like event handlers that specify what happens in response to inputs. React updates the screen to match this snapshot and connects the event handlers. As a result, pressing a button will trigger the click handler from your JSX.",
                                "When React re-renders a component:",
                                "  1.React calls your function again.",
                                "  2.Your function returns a new JSX snapshot.",
                                "  3.React then updates the screen to match the snapshot your function returned.",
                                "  1.React executing the function",
                                "  2.Calculating the snapshot",
                                "  3.Updating the DOM tree",
                                "Illustrated by Rachel Lee Nabors",
                                "As a component’s memory, state is not like a regular variable that disappears after your function returns. State actually “lives” in React itself—as if on a shelf!—outside of your function. When React calls your component, it gives you a snapshot of the state for that particular render. Your component returns a snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!",
                                "  1.You tell React to update the state",
                                "  2.React updates the state value",
                                "  3.React passes a snapshot of the state value into the component",
                                "Illustrated by Rachel Lee Nabors",
                                "Here’s a little experiment to show you how this works. In this example, you might expect that clicking the “+3” button would increment the counter three times because it calls setNumber(number + 1) three times.",
                                "See what happens when you click the “+3” button:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 1);        setNumber(number + 1);        setNumber(number + 1);      }}>+3</button>    </>  )}"
                                },
                                "Notice that number only increments once per click!",
                                "Setting state only changes it for the next render. During the first render, number was 0. This is why, in that render’s onClick handler, the value of number is still 0 even after setNumber(number + 1) was called:",
                                {
                                    "code_example": "<button onClick={() => {  setNumber(number + 1);  setNumber(number + 1);  setNumber(number + 1);}}>+3</button>"
                                },
                                "Here is what this button’s click handler tells React to do:",
                                "  1.setNumber(number + 1): number is 0 so setNumber(0 + 1).\n\nReact prepares to change number to 1 on the next render.\n\n",
                                "  2.React prepares to change number to 1 on the next render.",
                                "  3.setNumber(number + 1): number is 0 so setNumber(0 + 1).\n\nReact prepares to change number to 1 on the next render.\n\n",
                                "  4.React prepares to change number to 1 on the next render.",
                                "  5.setNumber(number + 1): number is 0 so setNumber(0 + 1).\n\nReact prepares to change number to 1 on the next render.\n\n",
                                "  6.React prepares to change number to 1 on the next render.",
                                "Even though you called setNumber(number + 1) three times, in this render’s event handler number is always 0, so you set the state to 1 three times. This is why, after your event handler finishes, React re-renders the component with number equal to 1 rather than 3.",
                                "You can also visualize this by mentally substituting state variables with their values in your code. Since the number state variable is 0 for this render, its event handler looks like this:",
                                {
                                    "code_example": "<button onClick={() => {  setNumber(0 + 1);  setNumber(0 + 1);  setNumber(0 + 1);}}>+3</button>"
                                },
                                "For the next render, number is 1, so that render’s click handler looks like this:",
                                {
                                    "code_example": "<button onClick={() => {  setNumber(1 + 1);  setNumber(1 + 1);  setNumber(1 + 1);}}>+3</button>"
                                },
                                "This is why clicking the button again will set the counter to 2, then to 3 on the next click, and so on."
                            ]
                        },
                        {
                            "sub_header": "State over time ",
                            "content": [
                                "Well, that was fun. Try to guess what clicking this button will alert:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 5);        alert(number);      }}>+5</button>    </>  )}"
                                },
                                "If you use the substitution method from before, you can guess that the alert shows “0”:",
                                {
                                    "code_example": "setNumber(0 + 5);alert(0);"
                                },
                                "But what if you put a timer on the alert, so it only fires after the component re-rendered? Would it say “0” or “5”? Have a guess!",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 5);        setTimeout(() => {          alert(number);        }, 3000);      }}>+5</button>    </>  )}"
                                },
                                "Surprised? If you use the substitution method, you can see the “snapshot” of the state passed to the alert.",
                                {
                                    "code_example": "setNumber(0 + 5);setTimeout(() => {  alert(0);}, 3000);"
                                },
                                "The state stored in React may have changed by the time the alert runs, but it was scheduled using a snapshot of the state at the time the user interacted with it!",
                                "A state variable’s value never changes within a render, even if its event handler’s code is asynchronous. Inside that render’s onClick, the value of number continues to be 0 even after setNumber(number + 5) was called. Its value was “fixed” when React “took the snapshot” of the UI by calling your component.",
                                "Here is an example of how that makes your event handlers less prone to timing mistakes. Below is a form that sends a message with a five-second delay. Imagine this scenario:",
                                "  1.You press the “Send” button, sending “Hello” to Alice.",
                                "  2.Before the five-second delay ends, you change the value of the “To” field to “Bob”.",
                                "What do you expect the alert to display? Would it display, “You said Hello to Alice”? Or would it display, “You said Hello to Bob”? Make a guess based on what you know, and then try it:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Form() {  const [to, setTo] = useState('Alice');  const [message, setMessage] = useState('Hello');  function handleSubmit(e) {    e.preventDefault();    setTimeout(() => {      alert(`You said ${message} to ${to}`);    }, 5000);  }  return (    <form onSubmit={handleSubmit}>      <label>        To:{' '}        <select          value={to}          onChange={e => setTo(e.target.value)}>          <option value=\"Alice\">Alice</option>          <option value=\"Bob\">Bob</option>        </select>      </label>      <textarea        placeholder=\"Message\"        value={message}        onChange={e => setMessage(e.target.value)}      />      <button type=\"submit\">Send</button>    </form>  );}"
                                },
                                "React keeps the state values “fixed” within one render’s event handlers. You don’t need to worry whether the state has changed while the code is running.",
                                "But what if you wanted to read the latest state before a re-render? You’ll want to use a state updater function, covered on the next page!",
                                "Recap\nSetting state requests a new render.\nReact stores state outside of your component, as if on a shelf.\nWhen you call useState, React gives you a snapshot of the state for that render.\nVariables and event handlers don’t “survive” re-renders. Every render has its own event handlers.\nEvery render (and functions inside it) will always “see” the snapshot of the state that React gave to that render.\nYou can mentally substitute state in event handlers, similarly to how you think about the rendered JSX.\nEvent handlers created in the past have the state values from the render in which they were created.\n",
                                {
                                    "code_example": "alert"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Queueing a Series of State Updates",
                    "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
                    "content": [
                        "Setting a state variable will queue another render. But sometimes you might want to perform multiple operations on the value before queueing the next render. To do this, it helps to understand how React batches state updates.",
                        "You will learn\nWhat “batching” is and how React uses it to process multiple state updates\nHow to apply several updates to the same state variable in a row\n",
                        {
                            "sub_header": "React batches state updates ",
                            "content": [
                                "You might expect that clicking the “+3” button will increment the counter three times because it calls setNumber(number + 1) three times:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 1);        setNumber(number + 1);        setNumber(number + 1);      }}>+3</button>    </>  )}"
                                },
                                "However, as you might recall from the previous section, each render’s state values are fixed, so the value of number inside the first render’s event handler is always 0, no matter how many times you call setNumber(1):",
                                {
                                    "code_example": "setNumber(0 + 1);setNumber(0 + 1);setNumber(0 + 1);"
                                },
                                "But there is one other factor at play here. React waits until all code in the event handlers has run before processing your state updates. This is why the re-render only happens after all these setNumber() calls.",
                                "This might remind you of a waiter taking an order at the restaurant. A waiter doesn’t run to the kitchen at the mention of your first dish! Instead, they let you finish your order, let you make changes to it, and even take orders from other people at the table.",
                                "",
                                "Illustrated by Rachel Lee Nabors",
                                "This lets you update multiple state variables—even from multiple components—without triggering too many re-renders. But this also means that the UI won’t be updated until after your event handler, and any code in it, completes. This behavior, also known as batching, makes your React app run much faster. It also avoids dealing with confusing “half-finished” renders where only some of the variables have been updated.",
                                "React does not batch across multiple intentional events like clicks—each click is handled separately. Rest assured that React only does batching when it’s generally safe to do. This ensures that, for example, if the first button click disables a form, the second click would not submit it again."
                            ]
                        },
                        {
                            "sub_header": "Updating the same state multiple times before the next render ",
                            "content": [
                                "It is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the next state value like setNumber(number + 1), you can pass a function that calculates the next state based on the previous one in the queue, like setNumber(n => n + 1). It is a way to tell React to “do something with the state value” instead of just replacing it.",
                                "Try incrementing the counter now:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(n => n + 1);        setNumber(n => n + 1);        setNumber(n => n + 1);      }}>+3</button>    </>  )}"
                                },
                                "Here, n => n + 1 is called an updater function. When you pass it to a state setter:",
                                "  1.React queues this function to be processed after all the other code in the event handler has run.",
                                "  2.During the next render, React goes through the queue and gives you the final updated state.",
                                {
                                    "code_example": "setNumber(n => n + 1);setNumber(n => n + 1);setNumber(n => n + 1);"
                                },
                                "Here’s how React works through these lines of code while executing the event handler:",
                                "  1.setNumber(n => n + 1): n => n + 1 is a function. React adds it to a queue.",
                                "  2.setNumber(n => n + 1): n => n + 1 is a function. React adds it to a queue.",
                                "  3.setNumber(n => n + 1): n => n + 1 is a function. React adds it to a queue.",
                                "When you call useState during the next render, React goes through the queue. The previous number state was 0, so that’s what React passes to the first updater function as the n argument. Then React takes the return value of your previous updater function and passes it to the next updater as n, and so on:",
                                "queued updatenreturnsn => n + 100 + 1 = 1n => n + 111 + 1 = 2n => n + 122 + 1 = 3",
                                "React stores 3 as the final result and returns it from useState.",
                                "This is why clicking “+3” in the above example correctly increments the value by 3.",
                                {
                                    "sub_header": "What happens if you update state after replacing it ",
                                    "content": [
                                        "What about this event handler? What do you think number will be in the next render?",
                                        {
                                            "code_example": "<button onClick={() => {  setNumber(number + 5);  setNumber(n => n + 1);}}>"
                                        },
                                        {
                                            "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 5);        setNumber(n => n + 1);      }}>Increase the number</button>    </>  )}"
                                        },
                                        "Here’s what this event handler tells React to do:",
                                        "  1.setNumber(number + 5): number is 0, so setNumber(0 + 5). React adds “replace with 5” to its queue.",
                                        "  2.setNumber(n => n + 1): n => n + 1 is an updater function. React adds that function to its queue.",
                                        "During the next render, React goes through the state queue:",
                                        "queued updatenreturns”replace with 5”0 (unused)5n => n + 155 + 1 = 6",
                                        "React stores 6 as the final result and returns it from useState.",
                                        {
                                            "code_example": "setState(5)"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "What happens if you replace state after updating it ",
                                    "content": [
                                        "Let’s try one more example. What do you think number will be in the next render?",
                                        {
                                            "code_example": "<button onClick={() => {  setNumber(number + 5);  setNumber(n => n + 1);  setNumber(42);}}>"
                                        },
                                        {
                                            "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 5);        setNumber(n => n + 1);        setNumber(42);      }}>Increase the number</button>    </>  )}"
                                        },
                                        "Here’s how React works through these lines of code while executing this event handler:",
                                        "  1.setNumber(number + 5): number is 0, so setNumber(0 + 5). React adds “replace with 5” to its queue.",
                                        "  2.setNumber(n => n + 1): n => n + 1 is an updater function. React adds that function to its queue.",
                                        "  3.setNumber(42): React adds “replace with 42” to its queue.",
                                        "During the next render, React goes through the state queue:",
                                        "queued updatenreturns”replace with 5”0 (unused)5n => n + 155 + 1 = 6”replace with 42”6 (unused)42",
                                        "Then React stores 42 as the final result and returns it from useState.",
                                        "To summarize, here’s how you can think of what you’re passing to the setNumber state setter:",
                                        "  1.An updater function (e.g. n => n + 1) gets added to the queue.",
                                        "  2.Any other value (e.g. number 5) adds “replace with 5” to the queue, ignoring what’s already queued.",
                                        "After the event handler completes, React will trigger a re-render. During the re-render, React will process the queue. Updater functions run during rendering, so updater functions must be pure and only return the result. Don’t try to set state from inside of them or run other side effects. In Strict Mode, React will run each updater function twice (but discard the second result) to help you find mistakes."
                                    ]
                                },
                                {
                                    "sub_header": "Naming conventions ",
                                    "content": [
                                        "It’s common to name the updater function argument by the first letters of the corresponding state variable:",
                                        {
                                            "code_example": "setEnabled(e => !e);setLastName(ln => ln.reverse());setFriendCount(fc => fc * 2);"
                                        },
                                        "If you prefer more verbose code, another common convention is to repeat the full state variable name, like setEnabled(enabled => !enabled), or to use a prefix like setEnabled(prevEnabled => !prevEnabled).",
                                        "Recap\nSetting state does not change the variable in the existing render, but it requests a new render.\nReact processes state updates after event handlers have finished running. This is called batching.\nTo update some state multiple times in one event, you can use setNumber(n => n + 1) updater function.\n",
                                        {
                                            "code_example": "-1"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Updating Objects in State",
                    "url": "https://react.dev/learn/updating-objects-in-state",
                    "content": [
                        "State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects that you hold in the React state directly. Instead, when you want to update an object, you need to create a new one (or make a copy of an existing one), and then set the state to use that copy.",
                        "You will learn\nHow to correctly update an object in React state\nHow to update a nested object without mutating it\nWhat immutability is, and how not to break it\nHow to make object copying less repetitive with Immer\n",
                        {
                            "sub_header": "What’s a mutation? ",
                            "content": [
                                "You can store any kind of JavaScript value in state.",
                                {
                                    "code_example": "const [x, setX] = useState(0);"
                                },
                                "So far you’ve been working with numbers, strings, and booleans. These kinds of JavaScript values are “immutable”, meaning unchangeable or “read-only”. You can trigger a re-render to replace a value:",
                                {
                                    "code_example": "setX(5);"
                                },
                                "The x state changed from 0 to 5, but the number 0 itself did not change. It’s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.",
                                "Now consider an object in state:",
                                {
                                    "code_example": "const [position, setPosition] = useState({ x: 0, y: 0 });"
                                },
                                "Technically, it is possible to change the contents of the object itself. This is called a mutation:",
                                {
                                    "code_example": "position.x = 5;"
                                },
                                "However, although objects in React state are technically mutable, you should treat them as if they were immutable—like numbers, booleans, and strings. Instead of mutating them, you should always replace them."
                            ]
                        },
                        {
                            "sub_header": "Treat state as read-only ",
                            "content": [
                                "In other words, you should treat any JavaScript object that you put into state as read-only.",
                                "This example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function MovingDot() {  const [position, setPosition] = useState({    x: 0,    y: 0  });  return (    <div      onPointerMove={e => {        position.x = e.clientX;        position.y = e.clientY;      }}      style={{        position: 'relative',        width: '100vw',        height: '100vh',      }}>      <div style={{        position: 'absolute',        backgroundColor: 'red',        borderRadius: '50%',        transform: `translate(${position.x}px, ${position.y}px)`,        left: -10,        top: -10,        width: 20,        height: 20,      }} />    </div>  );}"
                                },
                                "The problem is with this bit of code.",
                                {
                                    "code_example": "onPointerMove={e => {  position.x = e.clientX;  position.y = e.clientY;}}"
                                },
                                "This code modifies the object assigned to position from the previous render. But without using the state setting function, React has no idea that object has changed. So React does not do anything in response. It’s like trying to change the order after you’ve already eaten the meal. While mutating state can work in some cases, we don’t recommend it. You should treat the state value you have access to in a render as read-only.",
                                "To actually trigger a re-render in this case, create a new object and pass it to the state setting function:",
                                {
                                    "code_example": "onPointerMove={e => {  setPosition({    x: e.clientX,    y: e.clientY  });}}"
                                },
                                "With setPosition, you’re telling React:",
                                "  1.Replace position with this new object",
                                "  2.And render this component again",
                                "Notice how the red dot now follows your pointer when you touch or hover over the preview area:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function MovingDot() {  const [position, setPosition] = useState({    x: 0,    y: 0  });  return (    <div      onPointerMove={e => {        setPosition({          x: e.clientX,          y: e.clientY        });      }}      style={{        position: 'relative',        width: '100vw',        height: '100vh',      }}>      <div style={{        position: 'absolute',        backgroundColor: 'red',        borderRadius: '50%',        transform: `translate(${position.x}px, ${position.y}px)`,        left: -10,        top: -10,        width: 20,        height: 20,      }} />    </div>  );}"
                                },
                                "Deep DiveLocal mutation is fine Show DetailsCode like this is a problem because it modifies an existing object in state:position.x = e.clientX;position.y = e.clientY;But code like this is absolutely fine because you’re mutating a fresh object you have just created:const nextPosition = {};nextPosition.x = e.clientX;nextPosition.y = e.clientY;setPosition(nextPosition);In fact, it is completely equivalent to writing this:setPosition({  x: e.clientX,  y: e.clientY});Mutation is only a problem when you change existing objects that are already in state. Mutating an object you’ve just created is okay because no other code references it yet. Changing it isn’t going to accidentally impact something that depends on it. This is called a “local mutation”. You can even do local mutation while rendering. Very convenient and completely okay!"
                            ]
                        },
                        {
                            "sub_header": "Copying objects with the spread syntax ",
                            "content": [
                                "In the previous example, the position object is always created fresh from the current cursor position. But often, you will want to include existing data as a part of the new object you’re creating. For example, you may want to update only one field in a form, but keep the previous values for all other fields.",
                                "These input fields don’t work because the onChange handlers mutate the state:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Form() {  const [person, setPerson] = useState({    firstName: 'Barbara',    lastName: 'Hepworth',    email: 'bhepworth@sculpture.com'  });  function handleFirstNameChange(e) {    person.firstName = e.target.value;  }  function handleLastNameChange(e) {    person.lastName = e.target.value;  }  function handleEmailChange(e) {    person.email = e.target.value;  }  return (    <>      <label>        First name:        <input          value={person.firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:        <input          value={person.lastName}          onChange={handleLastNameChange}        />      </label>      <label>        Email:        <input          value={person.email}          onChange={handleEmailChange}        />      </label>      <p>        {person.firstName}{' '}        {person.lastName}{' '}        ({person.email})      </p>    </>  );}"
                                },
                                "For example, this line mutates the state from a past render:",
                                {
                                    "code_example": "person.firstName = e.target.value;"
                                },
                                "The reliable way to get the behavior you’re looking for is to create a new object and pass it to setPerson. But here, you want to also copy the existing data into it because only one of the fields has changed:",
                                {
                                    "code_example": "setPerson({  firstName: e.target.value, // New first name from the input  lastName: person.lastName,  email: person.email});"
                                },
                                "You can use the ... object spread syntax so that you don’t need to copy every property separately.",
                                {
                                    "code_example": "setPerson({  ...person, // Copy the old fields  firstName: e.target.value // But override this one});"
                                },
                                "Now the form works!",
                                "Notice how you didn’t declare a separate state variable for each input field. For large forms, keeping all data grouped in an object is very convenient—as long as you update it correctly!",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Form() {  const [person, setPerson] = useState({    firstName: 'Barbara',    lastName: 'Hepworth',    email: 'bhepworth@sculpture.com'  });  function handleFirstNameChange(e) {    setPerson({      ...person,      firstName: e.target.value    });  }  function handleLastNameChange(e) {    setPerson({      ...person,      lastName: e.target.value    });  }  function handleEmailChange(e) {    setPerson({      ...person,      email: e.target.value    });  }  return (    <>      <label>        First name:        <input          value={person.firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:        <input          value={person.lastName}          onChange={handleLastNameChange}        />      </label>      <label>        Email:        <input          value={person.email}          onChange={handleEmailChange}        />      </label>      <p>        {person.firstName}{' '}        {person.lastName}{' '}        ({person.email})      </p>    </>  );}"
                                },
                                "Note that the ... spread syntax is “shallow”—it only copies things one level deep. This makes it fast, but it also means that if you want to update a nested property, you’ll have to use it more than once.",
                                "Deep DiveUsing a single event handler for multiple fields Show DetailsYou can also use the [ and ] braces inside your object definition to specify a property with a dynamic name. Here is the same example, but with a single event handler instead of three different ones:App.jsApp.js ResetForkimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleChange(e) {\n    setPerson({\n      ...person,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          name=\"firstName\"\n          value={person.firstName}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          name=\"lastName\"\n          value={person.lastName}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          name=\"email\"\n          value={person.email}\n          onChange={handleChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}\n\nShow moreHere, e.target.name refers to the name property given to the <input> DOM element."
                            ]
                        },
                        {
                            "sub_header": "Updating a nested object ",
                            "content": [
                                "Consider a nested object structure like this:",
                                {
                                    "code_example": "const [person, setPerson] = useState({  name: 'Niki de Saint Phalle',  artwork: {    title: 'Blue Nana',    city: 'Hamburg',    image: 'https://i.imgur.com/Sd1AgUOm.jpg',  }});"
                                },
                                "If you wanted to update person.artwork.city, it’s clear how to do it with mutation:",
                                {
                                    "code_example": "person.artwork.city = 'New Delhi';"
                                },
                                "But in React, you treat state as immutable! In order to change city, you would first need to produce the new artwork object (pre-populated with data from the previous one), and then produce the new person object which points at the new artwork:",
                                {
                                    "code_example": "const nextArtwork = { ...person.artwork, city: 'New Delhi' };const nextPerson = { ...person, artwork: nextArtwork };setPerson(nextPerson);"
                                },
                                "Or, written as a single function call:",
                                {
                                    "code_example": "setPerson({  ...person, // Copy other fields  artwork: { // but replace the artwork    ...person.artwork, // with the same one    city: 'New Delhi' // but in New Delhi!  }});"
                                },
                                "This gets a bit wordy, but it works fine for many cases:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Form() {  const [person, setPerson] = useState({    name: 'Niki de Saint Phalle',    artwork: {      title: 'Blue Nana',      city: 'Hamburg',      image: 'https://i.imgur.com/Sd1AgUOm.jpg',    }  });  function handleNameChange(e) {    setPerson({      ...person,      name: e.target.value    });  }  function handleTitleChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        title: e.target.value      }    });  }  function handleCityChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        city: e.target.value      }    });  }  function handleImageChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        image: e.target.value      }    });  }  return (    <>      <label>        Name:        <input          value={person.name}          onChange={handleNameChange}        />      </label>      <label>        Title:        <input          value={person.artwork.title}          onChange={handleTitleChange}        />      </label>      <label>        City:        <input          value={person.artwork.city}          onChange={handleCityChange}        />      </label>      <label>        Image:        <input          value={person.artwork.image}          onChange={handleImageChange}        />      </label>      <p>        <i>{person.artwork.title}</i>        {' by '}        {person.name}        <br />        (located in {person.artwork.city})      </p>      <img         src={person.artwork.image}         alt={person.artwork.title}      />    </>  );}"
                                },
                                "Deep DiveObjects are not really nested Show DetailsAn object like this appears “nested” in code:let obj = {  name: 'Niki de Saint Phalle',  artwork: {    title: 'Blue Nana',    city: 'Hamburg',    image: 'https://i.imgur.com/Sd1AgUOm.jpg',  }};However, “nesting” is an inaccurate way to think about how objects behave. When the code executes, there is no such thing as a “nested” object. You are really looking at two different objects:let obj1 = {  title: 'Blue Nana',  city: 'Hamburg',  image: 'https://i.imgur.com/Sd1AgUOm.jpg',};let obj2 = {  name: 'Niki de Saint Phalle',  artwork: obj1};The obj1 object is not “inside” obj2. For example, obj3 could “point” at obj1 too:let obj1 = {  title: 'Blue Nana',  city: 'Hamburg',  image: 'https://i.imgur.com/Sd1AgUOm.jpg',};let obj2 = {  name: 'Niki de Saint Phalle',  artwork: obj1};let obj3 = {  name: 'Copycat',  artwork: obj1};If you were to mutate obj3.artwork.city, it would affect both obj2.artwork.city and obj1.city. This is because obj3.artwork, obj2.artwork, and obj1 are the same object. This is difficult to see when you think of objects as “nested”. Instead, they are separate objects “pointing” at each other with properties.",
                                {
                                    "sub_header": "Write concise update logic with Immer ",
                                    "content": [
                                        "If your state is deeply nested, you might want to consider flattening it. But, if you don’t want to change your state structure, you might prefer a shortcut to nested spreads. Immer is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you. With Immer, the code you write looks like you are “breaking the rules” and mutating an object:",
                                        {
                                            "code_example": "updatePerson(draft => {  draft.artwork.city = 'Lagos';});"
                                        },
                                        "But unlike a regular mutation, it doesn’t overwrite the past state!",
                                        "Deep DiveHow does Immer work? Show DetailsThe draft provided by Immer is a special type of object, called a Proxy, that “records” what you do with it. This is why you can mutate it freely as much as you like! Under the hood, Immer figures out which parts of the draft have been changed, and produces a completely new object that contains your edits.",
                                        "To try Immer:",
                                        "  1.Run npm install use-immer to add Immer as a dependency",
                                        "  2.Then replace import { useState } from 'react' with import { useImmer } from 'use-immer'",
                                        "Here is the above example converted to Immer:",
                                        {
                                            "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                                        },
                                        "Notice how much more concise the event handlers have become. You can mix and match useState and useImmer in a single component as much as you like. Immer is a great way to keep the update handlers concise, especially if there’s nesting in your state, and copying objects leads to repetitive code.",
                                        "Deep DiveWhy is mutating state not recommended in React? Show DetailsThere are a few reasons:\nDebugging: If you use console.log and don’t mutate state, your past logs won’t get clobbered by the more recent state changes. So you can clearly see how state has changed between renders.\nOptimizations: Common React optimization strategies rely on skipping work if previous props or state are the same as the next ones. If you never mutate state, it is very fast to check whether there were any changes. If prevObj === obj, you can be sure that nothing could have changed inside of it.\nNew Features: The new React features we’re building rely on state being treated like a snapshot. If you’re mutating past versions of state, that may prevent you from using the new features.\nRequirement Changes: Some application features, like implementing Undo/Redo, showing a history of changes, or letting the user reset a form to earlier values, are easier to do when nothing is mutated. This is because you can keep past copies of state in memory, and reuse them when appropriate. If you start with a mutative approach, features like this can be difficult to add later on.\nSimpler Implementation: Because React does not rely on mutation, it does not need to do anything special with your objects. It does not need to hijack their properties, always wrap them into Proxies, or do other work at initialization as many “reactive” solutions do. This is also why React lets you put any object into state—no matter how large—without additional performance or correctness pitfalls.\nIn practice, you can often “get away” with mutating state in React, but we strongly advise you not to do that so that you can use new React features developed with this approach in mind. Future contributors and perhaps even your future self will thank you!",
                                        "Recap\nTreat all state in React as immutable.\nWhen you store objects in state, mutating them will not trigger renders and will change the state in previous render “snapshots”.\nInstead of mutating an object, create a new version of it, and trigger a re-render by setting state to it.\nYou can use the {...obj, something: 'newValue'} object spread syntax to create copies of objects.\nSpread syntax is shallow: it only copies one level deep.\nTo update a nested object, you need to create copies all the way up from the place you’re updating.\nTo reduce repetitive copying code, use Immer.\n",
                                        "Try out some challenges1. Fix incorrect state updates 2. Find and fix the mutation 3. Update an object with Immer Challenge 1 of 3: Fix incorrect state updates This form has a few bugs. Click the button that increases the score a few times. Notice that it does not increase. Then edit the first name, and notice that the score has suddenly “caught up” with your changes. Finally, edit the last name, and notice that the score has disappeared completely.Your task is to fix all of these bugs. As you fix them, explain why each of them happens.App.jsApp.js ResetForkimport { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [player, setPlayer] = useState({\n    firstName: 'Ranjani',\n    lastName: 'Shettar',\n    score: 10,\n  });\n\n  function handlePlusClick() {\n    player.score++;\n  }\n\n  function handleFirstNameChange(e) {\n    setPlayer({\n      ...player,\n      firstName: e.target.value,\n    });\n  }\n\n  function handleLastNameChange(e) {\n    setPlayer({\n      lastName: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Score: <b>{player.score}</b>\n        {' '}\n        <button onClick={handlePlusClick}>\n          +1\n        </button>\n      </label>\n      <label>\n        First name:\n        <input\n          value={player.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={player.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n    </>\n  );\n}\n\nShow more Show solutionNext Challenge"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Updating Arrays in State",
                    "url": "https://react.dev/learn/updating-arrays-in-state",
                    "content": [
                        "Arrays are mutable in JavaScript, but you should treat them as immutable when you store them in state. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array.",
                        "You will learn\nHow to add, remove, or change items in an array in React state\nHow to update an object inside of an array\nHow to make array copying less repetitive with Immer\n",
                        {
                            "sub_header": "Updating arrays without mutation ",
                            "content": [
                                "In JavaScript, arrays are just another kind of object. Like with objects, you should treat arrays in React state as read-only. This means that you shouldn’t reassign items inside an array like arr[0] = 'bird', and you also shouldn’t use methods that mutate the array, such as push() and pop().",
                                "Instead, every time you want to update an array, you’ll want to pass a new array to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods like filter() and map(). Then you can set your state to the resulting new array.",
                                "Here is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:",
                                "avoid (mutates the array)prefer (returns a new array)addingpush, unshiftconcat, [...arr] spread syntax (example)removingpop, shift, splicefilter, slice (example)replacingsplice, arr[i] = ... assignmentmap (example)sortingreverse, sortcopy the array first (example)",
                                "Alternatively, you can use Immer which lets you use methods from both columns.",
                                {
                                    "code_example": "slice"
                                },
                                {
                                    "sub_header": "Adding to an array ",
                                    "content": [
                                        "push() will mutate an array, which you don’t want:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';let nextId = 0;export default function List() {  const [name, setName] = useState('');  const [artists, setArtists] = useState([]);  return (    <>      <h1>Inspiring sculptors:</h1>      <input        value={name}        onChange={e => setName(e.target.value)}      />      <button onClick={() => {        artists.push({          id: nextId++,          name: name,        });      }}>Add</button>      <ul>        {artists.map(artist => (          <li key={artist.id}>{artist.name}</li>        ))}      </ul>    </>  );}"
                                        },
                                        "Instead, create a new array which contains the existing items and a new item at the end. There are multiple ways to do this, but the easiest one is to use the ... array spread syntax:",
                                        {
                                            "code_example": "setArtists( // Replace the state  [ // with a new array    ...artists, // that contains all the old items    { id: nextId++, name: name } // and one new item at the end  ]);"
                                        },
                                        "Now it works correctly:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';let nextId = 0;export default function List() {  const [name, setName] = useState('');  const [artists, setArtists] = useState([]);  return (    <>      <h1>Inspiring sculptors:</h1>      <input        value={name}        onChange={e => setName(e.target.value)}      />      <button onClick={() => {        setArtists([          ...artists,          { id: nextId++, name: name }        ]);      }}>Add</button>      <ul>        {artists.map(artist => (          <li key={artist.id}>{artist.name}</li>        ))}      </ul>    </>  );}"
                                        },
                                        "The array spread syntax also lets you prepend an item by placing it before the original ...artists:",
                                        {
                                            "code_example": "setArtists([  { id: nextId++, name: name },  ...artists // Put old items at the end]);"
                                        },
                                        "In this way, spread can do the job of both push() by adding to the end of an array and unshift() by adding to the beginning of an array. Try it in the sandbox above!"
                                    ]
                                },
                                {
                                    "sub_header": "Removing from an array ",
                                    "content": [
                                        "The easiest way to remove an item from an array is to filter it out. In other words, you will produce a new array that will not contain that item. To do this, use the filter method, for example:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';let initialArtists = [  { id: 0, name: 'Marta Colvin Andrade' },  { id: 1, name: 'Lamidi Olonade Fakeye'},  { id: 2, name: 'Louise Nevelson'},];export default function List() {  const [artists, setArtists] = useState(    initialArtists  );  return (    <>      <h1>Inspiring sculptors:</h1>      <ul>        {artists.map(artist => (          <li key={artist.id}>            {artist.name}{' '}            <button onClick={() => {              setArtists(                artists.filter(a =>                  a.id !== artist.id                )              );            }}>              Delete            </button>          </li>        ))}      </ul>    </>  );}"
                                        },
                                        "Click the “Delete” button a few times, and look at its click handler.",
                                        {
                                            "code_example": "setArtists(  artists.filter(a => a.id !== artist.id));"
                                        },
                                        "Here, artists.filter(a => a.id !== artist.id) means “create an array that consists of those artists whose IDs are different from artist.id”. In other words, each artist’s “Delete” button will filter that artist out of the array, and then request a re-render with the resulting array. Note that filter does not modify the original array."
                                    ]
                                },
                                {
                                    "sub_header": "Transforming an array ",
                                    "content": [
                                        "If you want to change some or all items of the array, you can use map() to create a new array. The function you will pass to map can decide what to do with each item, based on its data or its index (or both).",
                                        "In this example, an array holds coordinates of two circles and a square. When you press the button, it moves only the circles down by 50 pixels. It does this by producing a new array of data using map():",
                                        {
                                            "code_sandbox": "import { useState } from 'react';let initialShapes = [  { id: 0, type: 'circle', x: 50, y: 100 },  { id: 1, type: 'square', x: 150, y: 100 },  { id: 2, type: 'circle', x: 250, y: 100 },];export default function ShapeEditor() {  const [shapes, setShapes] = useState(    initialShapes  );  function handleClick() {    const nextShapes = shapes.map(shape => {      if (shape.type === 'square') {        // No change        return shape;      } else {        // Return a new circle 50px below        return {          ...shape,          y: shape.y + 50,        };      }    });    // Re-render with the new array    setShapes(nextShapes);  }  return (    <>      <button onClick={handleClick}>        Move circles down!      </button>      {shapes.map(shape => (        <div          key={shape.id}          style={{          background: 'purple',          position: 'absolute',          left: shape.x,          top: shape.y,          borderRadius:            shape.type === 'circle'              ? '50%' : '',          width: 20,          height: 20,        }} />      ))}    </>  );}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Replacing items in an array ",
                                    "content": [
                                        "It is particularly common to want to replace one or more items in an array. Assignments like arr[0] = 'bird' are mutating the original array, so instead you’ll want to use map for this as well.",
                                        "To replace an item, create a new array with map. Inside your map call, you will receive the item index as the second argument. Use it to decide whether to return the original item (the first argument) or something else:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';let initialCounters = [  0, 0, 0];export default function CounterList() {  const [counters, setCounters] = useState(    initialCounters  );  function handleIncrementClick(index) {    const nextCounters = counters.map((c, i) => {      if (i === index) {        // Increment the clicked counter        return c + 1;      } else {        // The rest haven't changed        return c;      }    });    setCounters(nextCounters);  }  return (    <ul>      {counters.map((counter, i) => (        <li key={i}>          {counter}          <button onClick={() => {            handleIncrementClick(i);          }}>+1</button>        </li>      ))}    </ul>  );}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Inserting into an array ",
                                    "content": [
                                        "Sometimes, you may want to insert an item at a particular position that’s neither at the beginning nor at the end. To do this, you can use the ... array spread syntax together with the slice() method. The slice() method lets you cut a “slice” of the array. To insert an item, you will create an array that spreads the slice before the insertion point, then the new item, and then the rest of the original array.",
                                        "In this example, the Insert button always inserts at the index 1:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';let nextId = 3;const initialArtists = [  { id: 0, name: 'Marta Colvin Andrade' },  { id: 1, name: 'Lamidi Olonade Fakeye'},  { id: 2, name: 'Louise Nevelson'},];export default function List() {  const [name, setName] = useState('');  const [artists, setArtists] = useState(    initialArtists  );  function handleClick() {    const insertAt = 1; // Could be any index    const nextArtists = [      // Items before the insertion point:      ...artists.slice(0, insertAt),      // New item:      { id: nextId++, name: name },      // Items after the insertion point:      ...artists.slice(insertAt)    ];    setArtists(nextArtists);    setName('');  }  return (    <>      <h1>Inspiring sculptors:</h1>      <input        value={name}        onChange={e => setName(e.target.value)}      />      <button onClick={handleClick}>        Insert      </button>      <ul>        {artists.map(artist => (          <li key={artist.id}>{artist.name}</li>        ))}      </ul>    </>  );}"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Making other changes to an array ",
                                    "content": [
                                        "There are some things you can’t do with the spread syntax and non-mutating methods like map() and filter() alone. For example, you may want to reverse or sort an array. The JavaScript reverse() and sort() methods are mutating the original array, so you can’t use them directly.",
                                        "However, you can copy the array first, and then make changes to it.",
                                        "For example:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';const initialList = [  { id: 0, title: 'Big Bellies' },  { id: 1, title: 'Lunar Landscape' },  { id: 2, title: 'Terracotta Army' },];export default function List() {  const [list, setList] = useState(initialList);  function handleClick() {    const nextList = [...list];    nextList.reverse();    setList(nextList);  }  return (    <>      <button onClick={handleClick}>        Reverse      </button>      <ul>        {list.map(artwork => (          <li key={artwork.id}>{artwork.title}</li>        ))}      </ul>    </>  );}"
                                        },
                                        "Here, you use the [...list] spread syntax to create a copy of the original array first. Now that you have a copy, you can use mutating methods like nextList.reverse() or nextList.sort(), or even assign individual items with nextList[0] = \"something\".",
                                        "However, even if you copy an array, you can’t mutate existing items inside of it directly. This is because copying is shallow—the new array will contain the same items as the original one. So if you modify an object inside the copied array, you are mutating the existing state. For example, code like this is a problem.",
                                        {
                                            "code_example": "const nextList = [...list];nextList[0].seen = true; // Problem: mutates list[0]setList(nextList);"
                                        },
                                        "Although nextList and list are two different arrays, nextList[0] and list[0] point to the same object. So by changing nextList[0].seen, you are also changing list[0].seen. This is a state mutation, which you should avoid! You can solve this issue in a similar way to updating nested JavaScript objects—by copying individual items you want to change instead of mutating them. Here’s how."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Updating objects inside arrays ",
                            "content": [
                                "Objects are not really located “inside” arrays. They might appear to be “inside” in code, but each object in an array is a separate value, to which the array “points”. This is why you need to be careful when changing nested fields like list[0]. Another person’s artwork list may point to the same element of the array!",
                                "When updating nested state, you need to create copies from the point where you want to update, and all the way up to the top level. Let’s see how this works.",
                                "In this example, two separate artwork lists have the same initial state. They are supposed to be isolated, but because of a mutation, their state is accidentally shared, and checking a box in one list affects the other list:",
                                {
                                    "code_sandbox": "import { useState } from 'react';let nextId = 3;const initialList = [  { id: 0, title: 'Big Bellies', seen: false },  { id: 1, title: 'Lunar Landscape', seen: false },  { id: 2, title: 'Terracotta Army', seen: true },];export default function BucketList() {  const [myList, setMyList] = useState(initialList);  const [yourList, setYourList] = useState(    initialList  );  function handleToggleMyList(artworkId, nextSeen) {    const myNextList = [...myList];    const artwork = myNextList.find(      a => a.id === artworkId    );    artwork.seen = nextSeen;    setMyList(myNextList);  }  function handleToggleYourList(artworkId, nextSeen) {    const yourNextList = [...yourList];    const artwork = yourNextList.find(      a => a.id === artworkId    );    artwork.seen = nextSeen;    setYourList(yourNextList);  }  return (    <>      <h1>Art Bucket List</h1>      <h2>My list of art to see:</h2>      <ItemList        artworks={myList}        onToggle={handleToggleMyList} />      <h2>Your list of art to see:</h2>      <ItemList        artworks={yourList}        onToggle={handleToggleYourList} />    </>  );}function ItemList({ artworks, onToggle }) {  return (    <ul>      {artworks.map(artwork => (        <li key={artwork.id}>          <label>            <input              type=\"checkbox\"              checked={artwork.seen}              onChange={e => {                onToggle(                  artwork.id,                  e.target.checked                );              }}            />            {artwork.title}          </label>        </li>      ))}    </ul>  );}"
                                },
                                "The problem is in code like this:",
                                {
                                    "code_example": "const myNextList = [...myList];const artwork = myNextList.find(a => a.id === artworkId);artwork.seen = nextSeen; // Problem: mutates an existing itemsetMyList(myNextList);"
                                },
                                "Although the myNextList array itself is new, the items themselves are the same as in the original myList array. So changing artwork.seen changes the original artwork item. That artwork item is also in yourList, which causes the bug. Bugs like this can be difficult to think about, but thankfully they disappear if you avoid mutating state.",
                                "You can use map to substitute an old item with its updated version without mutation.",
                                {
                                    "code_example": "setMyList(myList.map(artwork => {  if (artwork.id === artworkId) {    // Create a *new* object with changes    return { ...artwork, seen: nextSeen };  } else {    // No changes    return artwork;  }}));"
                                },
                                "Here, ... is the object spread syntax used to create a copy of an object.",
                                "With this approach, none of the existing state items are being mutated, and the bug is fixed:",
                                {
                                    "code_sandbox": "import { useState } from 'react';let nextId = 3;const initialList = [  { id: 0, title: 'Big Bellies', seen: false },  { id: 1, title: 'Lunar Landscape', seen: false },  { id: 2, title: 'Terracotta Army', seen: true },];export default function BucketList() {  const [myList, setMyList] = useState(initialList);  const [yourList, setYourList] = useState(    initialList  );  function handleToggleMyList(artworkId, nextSeen) {    setMyList(myList.map(artwork => {      if (artwork.id === artworkId) {        // Create a *new* object with changes        return { ...artwork, seen: nextSeen };      } else {        // No changes        return artwork;      }    }));  }  function handleToggleYourList(artworkId, nextSeen) {    setYourList(yourList.map(artwork => {      if (artwork.id === artworkId) {        // Create a *new* object with changes        return { ...artwork, seen: nextSeen };      } else {        // No changes        return artwork;      }    }));  }  return (    <>      <h1>Art Bucket List</h1>      <h2>My list of art to see:</h2>      <ItemList        artworks={myList}        onToggle={handleToggleMyList} />      <h2>Your list of art to see:</h2>      <ItemList        artworks={yourList}        onToggle={handleToggleYourList} />    </>  );}function ItemList({ artworks, onToggle }) {  return (    <ul>      {artworks.map(artwork => (        <li key={artwork.id}>          <label>            <input              type=\"checkbox\"              checked={artwork.seen}              onChange={e => {                onToggle(                  artwork.id,                  e.target.checked                );              }}            />            {artwork.title}          </label>        </li>      ))}    </ul>  );}"
                                },
                                "In general, you should only mutate objects that you have just created. If you were inserting a new artwork, you could mutate it, but if you’re dealing with something that’s already in state, you need to make a copy.",
                                {
                                    "sub_header": "Write concise update logic with Immer ",
                                    "content": [
                                        "Updating nested arrays without mutation can get a little bit repetitive. Just as with objects:",
                                        "  1.Generally, you shouldn’t need to update state more than a couple of levels deep. If your state objects are very deep, you might want to restructure them differently so that they are flat.",
                                        "  2.If you don’t want to change your state structure, you might prefer to use Immer, which lets you write using the convenient but mutating syntax and takes care of producing the copies for you.",
                                        "Here is the Art Bucket List example rewritten with Immer:",
                                        {
                                            "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                                        },
                                        "Note how with Immer, mutation like artwork.seen = nextSeen is now okay:",
                                        {
                                            "code_example": "updateMyTodos(draft => {  const artwork = draft.find(a => a.id === artworkId);  artwork.seen = nextSeen;});"
                                        },
                                        "This is because you’re not mutating the original state, but you’re mutating a special draft object provided by Immer. Similarly, you can apply mutating methods like push() and pop() to the content of the draft.",
                                        "Behind the scenes, Immer always constructs the next state from scratch according to the changes that you’ve done to the draft. This keeps your event handlers very concise without ever mutating state.",
                                        "Recap\nYou can put arrays into state, but you can’t change them.\nInstead of mutating an array, create a new version of it, and update the state to it.\nYou can use the [...arr, newItem] array spread syntax to create arrays with new items.\nYou can use filter() and map() to create new arrays with filtered or transformed items.\nYou can use Immer to keep your code concise.\n",
                                        {
                                            "code_example": "handleIncreaseClick"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "Managing State",
            "source": "react",
            "url": "https://react.dev/learn/managing-state",
            "sections": [
                "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.",
                "In this chapter\nHow to think about UI changes as state changes\nHow to structure state well\nHow to “lift state up” to share it between components\nHow to control whether the state gets preserved or reset\nHow to consolidate complex state logic in a function\nHow to pass information without “prop drilling”\nHow to scale state management as your app grows\n",
                {
                    "subHeader": "Reacting to input with state ",
                    "url": "https://react.dev/learn/managing-state/#reacting-to-input-with-state",
                    "sections": [
                        "With React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.",
                        "Here is a quiz form built using React. Note how it uses the status state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function Form() {  const [answer, setAnswer] = useState('');  const [error, setError] = useState(null);  const [status, setStatus] = useState('typing');  if (status === 'success') {    return <h1>That's right!</h1>  }  async function handleSubmit(e) {    e.preventDefault();    setStatus('submitting');    try {      await submitForm(answer);      setStatus('success');    } catch (err) {      setStatus('typing');      setError(err);    }  }  function handleTextareaChange(e) {    setAnswer(e.target.value);  }  return (    <>      <h2>City quiz</h2>      <p>        In which city is there a billboard that turns air into drinkable water?      </p>      <form onSubmit={handleSubmit}>        <textarea          value={answer}          onChange={handleTextareaChange}          disabled={status === 'submitting'}        />        <br />        <button disabled={          answer.length === 0 ||          status === 'submitting'        }>          Submit        </button>        {error !== null &&          <p className=\"Error\">            {error.message}          </p>        }      </form>    </>  );}function submitForm(answer) {  // Pretend it's hitting the network.  return new Promise((resolve, reject) => {    setTimeout(() => {      let shouldError = answer.toLowerCase() !== 'lima'      if (shouldError) {        reject(new Error('Good guess but a wrong answer. Try again!'));      } else {        resolve();      }    }, 1500);  });}"
                        },
                        "Ready to learn this topic?Read Reacting to Input with State to learn how to approach interactions with a state-driven mindset.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Choosing the state structure ",
                    "url": "https://react.dev/learn/managing-state/#choosing-the-state-structure",
                    "sections": [
                        "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!",
                        "For example, this form has a redundant fullName state variable:",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  const [fullName, setFullName] = useState('');  function handleFirstNameChange(e) {    setFirstName(e.target.value);    setFullName(e.target.value + ' ' + lastName);  }  function handleLastNameChange(e) {    setLastName(e.target.value);    setFullName(firstName + ' ' + e.target.value);  }  return (    <>      <h2>Let’s check you in</h2>      <label>        First name:{' '}        <input          value={firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:{' '}        <input          value={lastName}          onChange={handleLastNameChange}        />      </label>      <p>        Your ticket will be issued to: <b>{fullName}</b>      </p>    </>  );}"
                        },
                        "You can remove it and simplify the code by calculating fullName while the component is rendering:",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  const fullName = firstName + ' ' + lastName;  function handleFirstNameChange(e) {    setFirstName(e.target.value);  }  function handleLastNameChange(e) {    setLastName(e.target.value);  }  return (    <>      <h2>Let’s check you in</h2>      <label>        First name:{' '}        <input          value={firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:{' '}        <input          value={lastName}          onChange={handleLastNameChange}        />      </label>      <p>        Your ticket will be issued to: <b>{fullName}</b>      </p>    </>  );}"
                        },
                        "This might seem like a small change, but many bugs in React apps are fixed this way.",
                        "Ready to learn this topic?Read Choosing the State Structure to learn how to design the state shape to avoid bugs.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Sharing state between components ",
                    "url": "https://react.dev/learn/managing-state/#sharing-state-between-components",
                    "sections": [
                        "Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.",
                        "In this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.",
                        {
                            "code_sandbox": "import { useState } from 'react';export default function Accordion() {  const [activeIndex, setActiveIndex] = useState(0);  return (    <>      <h2>Almaty, Kazakhstan</h2>      <Panel        title=\"About\"        isActive={activeIndex === 0}        onShow={() => setActiveIndex(0)}      >        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.      </Panel>      <Panel        title=\"Etymology\"        isActive={activeIndex === 1}        onShow={() => setActiveIndex(1)}      >        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.      </Panel>    </>  );}function Panel({  title,  children,  isActive,  onShow}) {  return (    <section className=\"panel\">      <h3>{title}</h3>      {isActive ? (        <p>{children}</p>      ) : (        <button onClick={onShow}>          Show        </button>      )}    </section>  );}"
                        },
                        "Ready to learn this topic?Read Sharing State Between Components to learn how to lift state up and keep components in sync.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Preserving and resetting state ",
                    "url": "https://react.dev/learn/managing-state/#preserving-and-resetting-state",
                    "sections": [
                        "When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.",
                        "However, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:",
                        {
                            "code_sandbox": "ContactList.jsChat.jsimport { useState } from 'react';import Chat from './Chat.js';import ContactList from './ContactList.js';export default function Messenger() {  const [to, setTo] = useState(contacts[0]);  return (    <div>      <ContactList        contacts={contacts}        selectedContact={to}        onSelect={contact => setTo(contact)}      />      <Chat contact={to} />    </div>  )}const contacts = [  { name: 'Taylor', email: 'taylor@mail.com' },  { name: 'Alice', email: 'alice@mail.com' },  { name: 'Bob', email: 'bob@mail.com' }];"
                        },
                        "React lets you override the default behavior, and force a component to reset its state by passing it a different key, like <Chat key={email} />. This tells React that if the recipient is different, it should be considered a different Chat component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field—even though you render the same component.",
                        {
                            "code_sandbox": "ContactList.jsChat.jsimport { useState } from 'react';import Chat from './Chat.js';import ContactList from './ContactList.js';export default function Messenger() {  const [to, setTo] = useState(contacts[0]);  return (    <div>      <ContactList        contacts={contacts}        selectedContact={to}        onSelect={contact => setTo(contact)}      />      <Chat key={to.email} contact={to} />    </div>  )}const contacts = [  { name: 'Taylor', email: 'taylor@mail.com' },  { name: 'Alice', email: 'alice@mail.com' },  { name: 'Bob', email: 'bob@mail.com' }];"
                        },
                        "Ready to learn this topic?Read Preserving and Resetting State to learn the lifetime of state and how to control it.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Extracting state logic into a reducer ",
                    "url": "https://react.dev/learn/managing-state/#extracting-state-logic-into-a-reducer",
                    "sections": [
                        "Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!",
                        {
                            "code_sandbox": "import { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(    tasksReducer,    initialTasks  );  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId    });  }  return (    <>      <h1>Prague itinerary</h1>      <AddTask        onAddTask={handleAddTask}      />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [...tasks, {        id: action.id,        text: action.text,        done: false      }];    }    case 'changed': {      return tasks.map(t => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter(t => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}let nextId = 3;const initialTasks = [  { id: 0, text: 'Visit Kafka Museum', done: true },  { id: 1, text: 'Watch a puppet show', done: false },  { id: 2, text: 'Lennon Wall pic', done: false }];"
                        },
                        "Ready to learn this topic?Read Extracting State Logic into a Reducer to learn how to consolidate logic in the reducer function.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Passing data deeply with context ",
                    "url": "https://react.dev/learn/managing-state/#passing-data-deeply-with-context",
                    "sections": [
                        "Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.",
                        "Here, the Heading component determines its heading level by “asking” the closest Section for its level. Each Section tracks its own level by asking the parent Section and adding one to it. Every Section provides information to all components below it without passing props—it does that through context.",
                        {
                            "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section>      <Heading>Title</Heading>      <Section>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Section>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Section>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                        },
                        "Ready to learn this topic?Read Passing Data Deeply with Context to learn about using context as an alternative to passing props.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Scaling up with reducer and context ",
                    "url": "https://react.dev/learn/managing-state/#scaling-up-with-reducer-and-context",
                    "sections": [
                        "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.",
                        "With this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.",
                        {
                            "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsimport AddTask from './AddTask.js';import TaskList from './TaskList.js';import { TasksProvider } from './TasksContext.js';export default function TaskApp() {  return (    <TasksProvider>      <h1>Day off in Kyoto</h1>      <AddTask />      <TaskList />    </TasksProvider>  );}"
                        },
                        "Ready to learn this topic?Read Scaling Up with Reducer and Context to learn how state management scales in a growing app.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "What’s next? ",
                    "url": "https://react.dev/learn/managing-state/#whats-next",
                    "sections": [
                        "Head over to Reacting to Input with State to start reading this chapter page by page!",
                        "Or, if you’re already familiar with these topics, why not read about Escape Hatches?"
                    ]
                }
            ],
            "subTopics": [
                {
                    "headers": "Reacting to Input with State",
                    "url": "https://react.dev/learn/reacting-to-input-with-state",
                    "content": [
                        "React provides a declarative way to manipulate the UI. Instead of manipulating individual pieces of the UI directly, you describe the different states that your component can be in, and switch between them in response to the user input. This is similar to how designers think about the UI.",
                        "You will learn\nHow declarative UI programming differs from imperative UI programming\nHow to enumerate the different visual states your component can be in\nHow to trigger the changes between the different visual states from code\n",
                        {
                            "sub_header": "How declarative UI compares to imperative ",
                            "content": [
                                "When you design UI interactions, you probably think about how the UI changes in response to user actions. Consider a form that lets the user submit an answer:",
                                "  1.When you type something into the form, the “Submit” button becomes enabled.",
                                "  2.When you press “Submit”, both the form and the button become disabled, and a spinner appears.",
                                "  3.If the network request succeeds, the form gets hidden, and the “Thank you” message appears.",
                                "  4.If the network request fails, an error message appears, and the form becomes enabled again.",
                                "In imperative programming, the above corresponds directly to how you implement interaction. You have to write the exact instructions to manipulate the UI depending on what just happened. Here’s another way to think about this: imagine riding next to someone in a car and telling them turn by turn where to go.",
                                "",
                                "Illustrated by Rachel Lee Nabors",
                                "They don’t know where you want to go, they just follow your commands. (And if you get the directions wrong, you end up in the wrong place!) It’s called imperative because you have to “command” each element, from the spinner to the button, telling the computer how to update the UI.",
                                "In this example of imperative UI programming, the form is built without React. It only uses the browser DOM:",
                                {
                                    "code_sandbox": "async function handleFormSubmit(e) {  e.preventDefault();  disable(textarea);  disable(button);  show(loadingMessage);  hide(errorMessage);  try {    await submitForm(textarea.value);    show(successMessage);    hide(form);  } catch (err) {    show(errorMessage);    errorMessage.textContent = err.message;  } finally {    hide(loadingMessage);    enable(textarea);    enable(button);  }}function handleTextareaChange() {  if (textarea.value.length === 0) {    disable(button);  } else {    enable(button);  }}function hide(el) {  el.style.display = 'none';}function show(el) {  el.style.display = '';}function enable(el) {  el.disabled = false;}function disable(el) {  el.disabled = true;}function submitForm(answer) {  // Pretend it's hitting the network.  return new Promise((resolve, reject) => {    setTimeout(() => {      if (answer.toLowerCase() === 'istanbul') {        resolve();      } else {        reject(new Error('Good guess but a wrong answer. Try again!'));      }    }, 1500);  });}let form = document.getElementById('form');let textarea = document.getElementById('textarea');let button = document.getElementById('button');let loadingMessage = document.getElementById('loading');let errorMessage = document.getElementById('error');let successMessage = document.getElementById('success');form.onsubmit = handleFormSubmit;textarea.oninput = handleTextareaChange;"
                                },
                                "Manipulating the UI imperatively works well enough for isolated examples, but it gets exponentially more difficult to manage in more complex systems. Imagine updating a page full of different forms like this one. Adding a new UI element or a new interaction would require carefully checking all existing code to make sure you haven’t introduced a bug (for example, forgetting to show or hide something).",
                                "React was built to solve this problem.",
                                "In React, you don’t directly manipulate the UI—meaning you don’t enable, disable, show, or hide components directly. Instead, you declare what you want to show, and React figures out how to update the UI. Think of getting into a taxi and telling the driver where you want to go instead of telling them exactly where to turn. It’s the driver’s job to get you there, and they might even know some shortcuts you haven’t considered!",
                                "",
                                "Illustrated by Rachel Lee Nabors"
                            ]
                        },
                        {
                            "sub_header": "Thinking about UI declaratively ",
                            "content": [
                                "You’ve seen how to implement a form imperatively above. To better understand how to think in React, you’ll walk through reimplementing this UI in React below:",
                                "  1.Identify your component’s different visual states",
                                "  2.Determine what triggers those state changes",
                                "  3.Represent the state in memory using useState",
                                "  4.Remove any non-essential state variables",
                                "  5.Connect the event handlers to set the state",
                                {
                                    "sub_header": "Step 1: Identify your component’s different visual states ",
                                    "content": [
                                        "In computer science, you may hear about a “state machine” being in one of several “states”. If you work with a designer, you may have seen mockups for different “visual states”. React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.",
                                        "First, you need to visualize all the different “states” of the UI the user might see:",
                                        "  1.Empty: Form has a disabled “Submit” button.",
                                        "  2.Typing: Form has an enabled “Submit” button.",
                                        "  3.Submitting: Form is completely disabled. Spinner is shown.",
                                        "  4.Success: “Thank you” message is shown instead of a form.",
                                        "  5.Error: Same as Typing state, but with an extra error message.",
                                        "Just like a designer, you’ll want to “mock up” or create “mocks” for the different states before you add logic. For example, here is a mock for just the visual part of the form. This mock is controlled by a prop called status with a default value of 'empty':",
                                        {
                                            "code_sandbox": "export default function Form({  status = 'empty'}) {  if (status === 'success') {    return <h1>That's right!</h1>  }  return (    <>      <h2>City quiz</h2>      <p>        In which city is there a billboard that turns air into drinkable water?      </p>      <form>        <textarea />        <br />        <button>          Submit        </button>      </form>    </>  )}"
                                        },
                                        "You could call that prop anything you like, the naming is not important. Try editing status = 'empty' to status = 'success' to see the success message appear. Mocking lets you quickly iterate on the UI before you wire up any logic. Here is a more fleshed out prototype of the same component, still “controlled” by the status prop:",
                                        {
                                            "code_sandbox": "export default function Form({  // Try 'submitting', 'error', 'success':  status = 'empty'}) {  if (status === 'success') {    return <h1>That's right!</h1>  }  return (    <>      <h2>City quiz</h2>      <p>        In which city is there a billboard that turns air into drinkable water?      </p>      <form>        <textarea disabled={          status === 'submitting'        } />        <br />        <button disabled={          status === 'empty' ||          status === 'submitting'        }>          Submit        </button>        {status === 'error' &&          <p className=\"Error\">            Good guess but a wrong answer. Try again!          </p>        }      </form>      </>  );}"
                                        },
                                        "Deep DiveDisplaying many visual states at once Show DetailsIf a component has a lot of visual states, it can be convenient to show them all on one page:App.jsForm.jsApp.js ResetForkimport Form from './Form.js';\n\nlet statuses = [\n  'empty',\n  'typing',\n  'submitting',\n  'success',\n  'error',\n];\n\nexport default function App() {\n  return (\n    <>\n      {statuses.map(status => (\n        <section key={status}>\n          <h4>Form ({status}):</h4>\n          <Form status={status} />\n        </section>\n      ))}\n    </>\n  );\n}\n\nShow morePages like this are often called “living styleguides” or “storybooks”."
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Determine what triggers those state changes ",
                                    "content": [
                                        "You can trigger state updates in response to two kinds of inputs:",
                                        "  1.Human inputs, like clicking a button, typing in a field, navigating a link.",
                                        "  2.Computer inputs, like a network response arriving, a timeout completing, an image loading.",
                                        "Illustrated by Rachel Lee Nabors",
                                        "In both cases, you must set state variables to update the UI. For the form you’re developing, you will need to change state in response to a few different inputs:",
                                        "  1.Changing the text input (human) should switch it from the Empty state to the Typing state or back, depending on whether the text box is empty or not.",
                                        "  2.Clicking the Submit button (human) should switch it to the Submitting state.",
                                        "  3.Successful network response (computer) should switch it to the Success state.",
                                        "  4.Failed network response (computer) should switch it to the Error state with the matching error message.",
                                        "NoteNotice that human inputs often require event handlers!",
                                        "To help visualize this flow, try drawing each state on paper as a labeled circle, and each change between two states as an arrow. You can sketch out many flows this way and sort out bugs long before implementation.",
                                        "Form states"
                                    ]
                                },
                                {
                                    "sub_header": "Step 3: Represent the state in memory with useState ",
                                    "content": [
                                        "Next you’ll need to represent the visual states of your component in memory with useState. Simplicity is key: each piece of state is a “moving piece”, and you want as few “moving pieces” as possible. More complexity leads to more bugs!",
                                        "Start with the state that absolutely must be there. For example, you’ll need to store the answer for the input, and the error (if it exists) to store the last error:",
                                        {
                                            "code_example": "const [answer, setAnswer] = useState('');const [error, setError] = useState(null);"
                                        },
                                        "Then, you’ll need a state variable representing which one of the visual states that you want to display. There’s usually more than a single way to represent that in memory, so you’ll need to experiment with it.",
                                        "If you struggle to think of the best way immediately, start by adding enough state that you’re definitely sure that all the possible visual states are covered:",
                                        {
                                            "code_example": "const [isEmpty, setIsEmpty] = useState(true);const [isTyping, setIsTyping] = useState(false);const [isSubmitting, setIsSubmitting] = useState(false);const [isSuccess, setIsSuccess] = useState(false);const [isError, setIsError] = useState(false);"
                                        },
                                        "Your first idea likely won’t be the best, but that’s ok—refactoring state is a part of the process!"
                                    ]
                                },
                                {
                                    "sub_header": "Step 4: Remove any non-essential state variables ",
                                    "content": [
                                        "You want to avoid duplication in the state content so you’re only tracking what is essential. Spending a little time on refactoring your state structure will make your components easier to understand, reduce duplication, and avoid unintended meanings. Your goal is to prevent the cases where the state in memory doesn’t represent any valid UI that you’d want a user to see. (For example, you never want to show an error message and disable the input at the same time, or the user won’t be able to correct the error!)",
                                        "Here are some questions you can ask about your state variables:",
                                        "  1.Does this state cause a paradox? For example, isTyping and isSubmitting can’t both be true. A paradox usually means that the state is not constrained enough. There are four possible combinations of two booleans, but only three correspond to valid states. To remove the “impossible” state, you can combine these into a status that must be one of three values: 'typing', 'submitting', or 'success'.",
                                        "  2.Is the same information available in another state variable already? Another paradox: isEmpty and isTyping can’t be true at the same time. By making them separate state variables, you risk them going out of sync and causing bugs. Fortunately, you can remove isEmpty and instead check answer.length === 0.",
                                        "  3.Can you get the same information from the inverse of another state variable? isError is not needed because you can check error !== null instead.",
                                        "After this clean-up, you’re left with 3 (down from 7!) essential state variables:",
                                        {
                                            "code_example": "const [answer, setAnswer] = useState('');const [error, setError] = useState(null);const [status, setStatus] = useState('typing'); // 'typing', 'submitting', or 'success'"
                                        },
                                        "You know they are essential, because you can’t remove any of them without breaking the functionality.",
                                        "Deep DiveEliminating “impossible” states with a reducer Show DetailsThese three variables are a good enough representation of this form’s state. However, there are still some intermediate states that don’t fully make sense. For example, a non-null error doesn’t make sense when status is 'success'. To model the state more precisely, you can extract it into a reducer. Reducers let you unify multiple state variables into a single object and consolidate all the related logic!"
                                    ]
                                },
                                {
                                    "sub_header": "Step 5: Connect the event handlers to set state ",
                                    "content": [
                                        "Lastly, create event handlers that update the state. Below is the final form, with all event handlers wired up:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';export default function Form() {  const [answer, setAnswer] = useState('');  const [error, setError] = useState(null);  const [status, setStatus] = useState('typing');  if (status === 'success') {    return <h1>That's right!</h1>  }  async function handleSubmit(e) {    e.preventDefault();    setStatus('submitting');    try {      await submitForm(answer);      setStatus('success');    } catch (err) {      setStatus('typing');      setError(err);    }  }  function handleTextareaChange(e) {    setAnswer(e.target.value);  }  return (    <>      <h2>City quiz</h2>      <p>        In which city is there a billboard that turns air into drinkable water?      </p>      <form onSubmit={handleSubmit}>        <textarea          value={answer}          onChange={handleTextareaChange}          disabled={status === 'submitting'}        />        <br />        <button disabled={          answer.length === 0 ||          status === 'submitting'        }>          Submit        </button>        {error !== null &&          <p className=\"Error\">            {error.message}          </p>        }      </form>    </>  );}function submitForm(answer) {  // Pretend it's hitting the network.  return new Promise((resolve, reject) => {    setTimeout(() => {      let shouldError = answer.toLowerCase() !== 'lima'      if (shouldError) {        reject(new Error('Good guess but a wrong answer. Try again!'));      } else {        resolve();      }    }, 1500);  });}"
                                        },
                                        "Although this code is longer than the original imperative example, it is much less fragile. Expressing all interactions as state changes lets you later introduce new visual states without breaking existing ones. It also lets you change what should be displayed in each state without changing the logic of the interaction itself.",
                                        "Recap\nDeclarative programming means describing the UI for each visual state rather than micromanaging the UI (imperative).\nWhen developing a component:\n\nIdentify all its visual states.\nDetermine the human and computer triggers for state changes.\nModel the state with useState.\nRemove non-essential state to avoid bugs and paradoxes.\nConnect the event handlers to set state.\n\n\n",
                                        {
                                            "code_example": "background--active"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Choosing the State Structure",
                    "url": "https://react.dev/learn/choosing-the-state-structure",
                    "content": [
                        "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.",
                        "You will learn\nWhen to use a single vs multiple state variables\nWhat to avoid when organizing state\nHow to fix common issues with the state structure\n",
                        {
                            "sub_header": "Principles for structuring state ",
                            "content": [
                                "When you write a component that holds some state, you’ll have to make choices about how many state variables to use and what the shape of their data should be. While it’s possible to write correct programs even with a suboptimal state structure, there are a few principles that can guide you to make better choices:",
                                "  1.Group related state. If you always update two or more state variables at the same time, consider merging them into a single state variable.",
                                "  2.Avoid contradictions in state. When the state is structured in a way that several pieces of state may contradict and “disagree” with each other, you leave room for mistakes. Try to avoid this.",
                                "  3.Avoid redundant state. If you can calculate some information from the component’s props or its existing state variables during rendering, you should not put that information into that component’s state.",
                                "  4.Avoid duplication in state. When the same data is duplicated between multiple state variables, or within nested objects, it is difficult to keep them in sync. Reduce duplication when you can.",
                                "  5.Avoid deeply nested state. Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.",
                                "The goal behind these principles is to make state easy to update without introducing mistakes. Removing redundant and duplicate data from state helps ensure that all its pieces stay in sync. This is similar to how a database engineer might want to “normalize” the database structure to reduce the chance of bugs. To paraphrase Albert Einstein, “Make your state as simple as it can be—but no simpler.”",
                                "Now let’s see how these principles apply in action."
                            ]
                        },
                        {
                            "sub_header": "Group related state ",
                            "content": [
                                "You might sometimes be unsure between using a single or multiple state variables.",
                                "Should you do this?",
                                {
                                    "code_example": "const [x, setX] = useState(0);const [y, setY] = useState(0);"
                                },
                                "Or this?",
                                {
                                    "code_example": "const [position, setPosition] = useState({ x: 0, y: 0 });"
                                },
                                "Technically, you can use either of these approaches. But if some two state variables always change together, it might be a good idea to unify them into a single state variable. Then you won’t forget to always keep them in sync, like in this example where moving the cursor updates both coordinates of the red dot:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function MovingDot() {  const [position, setPosition] = useState({    x: 0,    y: 0  });  return (    <div      onPointerMove={e => {        setPosition({          x: e.clientX,          y: e.clientY        });      }}      style={{        position: 'relative',        width: '100vw',        height: '100vh',      }}>      <div style={{        position: 'absolute',        backgroundColor: 'red',        borderRadius: '50%',        transform: `translate(${position.x}px, ${position.y}px)`,        left: -10,        top: -10,        width: 20,        height: 20,      }} />    </div>  )}"
                                },
                                "Another case where you’ll group data into an object or an array is when you don’t know how many pieces of state you’ll need. For example, it’s helpful when you have a form where the user can add custom fields.",
                                {
                                    "code_example": "setPosition({ x: 100 })"
                                }
                            ]
                        },
                        {
                            "sub_header": "Avoid contradictions in state ",
                            "content": [
                                "Here is a hotel feedback form with isSending and isSent state variables:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function FeedbackForm() {  const [text, setText] = useState('');  const [isSending, setIsSending] = useState(false);  const [isSent, setIsSent] = useState(false);  async function handleSubmit(e) {    e.preventDefault();    setIsSending(true);    await sendMessage(text);    setIsSending(false);    setIsSent(true);  }  if (isSent) {    return <h1>Thanks for feedback!</h1>  }  return (    <form onSubmit={handleSubmit}>      <p>How was your stay at The Prancing Pony?</p>      <textarea        disabled={isSending}        value={text}        onChange={e => setText(e.target.value)}      />      <br />      <button        disabled={isSending}        type=\"submit\"      >        Send      </button>      {isSending && <p>Sending...</p>}    </form>  );}// Pretend to send a message.function sendMessage(text) {  return new Promise(resolve => {    setTimeout(resolve, 2000);  });}"
                                },
                                "While this code works, it leaves the door open for “impossible” states. For example, if you forget to call setIsSent and setIsSending together, you may end up in a situation where both isSending and isSent are true at the same time. The more complex your component is, the harder it is to understand what happened.",
                                "Since isSending and isSent should never be true at the same time, it is better to replace them with one status state variable that may take one of three valid states: 'typing' (initial), 'sending', and 'sent':",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function FeedbackForm() {  const [text, setText] = useState('');  const [status, setStatus] = useState('typing');  async function handleSubmit(e) {    e.preventDefault();    setStatus('sending');    await sendMessage(text);    setStatus('sent');  }  const isSending = status === 'sending';  const isSent = status === 'sent';  if (isSent) {    return <h1>Thanks for feedback!</h1>  }  return (    <form onSubmit={handleSubmit}>      <p>How was your stay at The Prancing Pony?</p>      <textarea        disabled={isSending}        value={text}        onChange={e => setText(e.target.value)}      />      <br />      <button        disabled={isSending}        type=\"submit\"      >        Send      </button>      {isSending && <p>Sending...</p>}    </form>  );}// Pretend to send a message.function sendMessage(text) {  return new Promise(resolve => {    setTimeout(resolve, 2000);  });}"
                                },
                                "You can still declare some constants for readability:",
                                {
                                    "code_example": "const isSending = status === 'sending';const isSent = status === 'sent';"
                                },
                                "But they’re not state variables, so you don’t need to worry about them getting out of sync with each other."
                            ]
                        },
                        {
                            "sub_header": "Avoid redundant state ",
                            "content": [
                                "If you can calculate some information from the component’s props or its existing state variables during rendering, you should not put that information into that component’s state.",
                                "For example, take this form. It works, but can you find any redundant state in it?",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  const [fullName, setFullName] = useState('');  function handleFirstNameChange(e) {    setFirstName(e.target.value);    setFullName(e.target.value + ' ' + lastName);  }  function handleLastNameChange(e) {    setLastName(e.target.value);    setFullName(firstName + ' ' + e.target.value);  }  return (    <>      <h2>Let’s check you in</h2>      <label>        First name:{' '}        <input          value={firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:{' '}        <input          value={lastName}          onChange={handleLastNameChange}        />      </label>      <p>        Your ticket will be issued to: <b>{fullName}</b>      </p>    </>  );}"
                                },
                                "This form has three state variables: firstName, lastName, and fullName. However, fullName is redundant. You can always calculate fullName from firstName and lastName during render, so remove it from state.",
                                "This is how you can do it:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  const fullName = firstName + ' ' + lastName;  function handleFirstNameChange(e) {    setFirstName(e.target.value);  }  function handleLastNameChange(e) {    setLastName(e.target.value);  }  return (    <>      <h2>Let’s check you in</h2>      <label>        First name:{' '}        <input          value={firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:{' '}        <input          value={lastName}          onChange={handleLastNameChange}        />      </label>      <p>        Your ticket will be issued to: <b>{fullName}</b>      </p>    </>  );}"
                                },
                                "Here, fullName is not a state variable. Instead, it’s calculated during render:",
                                {
                                    "code_example": "const fullName = firstName + ' ' + lastName;"
                                },
                                "As a result, the change handlers don’t need to do anything special to update it. When you call setFirstName or setLastName, you trigger a re-render, and then the next fullName will be calculated from the fresh data.",
                                "Deep DiveDon’t mirror props in state Show DetailsA common example of redundant state is code like this:function Message({ messageColor }) {  const [color, setColor] = useState(messageColor);Here, a color state variable is initialized to the messageColor prop. The problem is that if the parent component passes a different value of messageColor later (for example, 'red' instead of 'blue'), the color state variable would not be updated! The state is only initialized during the first render.This is why “mirroring” some prop in a state variable can lead to confusion. Instead, use the messageColor prop directly in your code. If you want to give it a shorter name, use a constant:function Message({ messageColor }) {  const color = messageColor;This way it won’t get out of sync with the prop passed from the parent component.”Mirroring” props into state only makes sense when you want to ignore all updates for a specific prop. By convention, start the prop name with initial or default to clarify that its new values are ignored:function Message({ initialColor }) {  // The `color` state variable holds the *first* value of `initialColor`.  // Further changes to the `initialColor` prop are ignored.  const [color, setColor] = useState(initialColor);"
                            ]
                        },
                        {
                            "sub_header": "Avoid duplication in state ",
                            "content": [
                                "This menu list component lets you choose a single travel snack out of several:",
                                {
                                    "code_sandbox": "import { useState } from 'react';const initialItems = [  { title: 'pretzels', id: 0 },  { title: 'crispy seaweed', id: 1 },  { title: 'granola bar', id: 2 },];export default function Menu() {  const [items, setItems] = useState(initialItems);  const [selectedItem, setSelectedItem] = useState(    items[0]  );  return (    <>      <h2>What's your travel snack?</h2>      <ul>        {items.map(item => (          <li key={item.id}>            {item.title}            {' '}            <button onClick={() => {              setSelectedItem(item);            }}>Choose</button>          </li>        ))}      </ul>      <p>You picked {selectedItem.title}.</p>    </>  );}"
                                },
                                "Currently, it stores the selected item as an object in the selectedItem state variable. However, this is not great: the contents of the selectedItem is the same object as one of the items inside the items list. This means that the information about the item itself is duplicated in two places.",
                                "Why is this a problem? Let’s make each item editable:",
                                {
                                    "code_sandbox": "import { useState } from 'react';const initialItems = [  { title: 'pretzels', id: 0 },  { title: 'crispy seaweed', id: 1 },  { title: 'granola bar', id: 2 },];export default function Menu() {  const [items, setItems] = useState(initialItems);  const [selectedItem, setSelectedItem] = useState(    items[0]  );  function handleItemChange(id, e) {    setItems(items.map(item => {      if (item.id === id) {        return {          ...item,          title: e.target.value,        };      } else {        return item;      }    }));  }  return (    <>      <h2>What's your travel snack?</h2>       <ul>        {items.map((item, index) => (          <li key={item.id}>            <input              value={item.title}              onChange={e => {                handleItemChange(item.id, e)              }}            />            {' '}            <button onClick={() => {              setSelectedItem(item);            }}>Choose</button>          </li>        ))}      </ul>      <p>You picked {selectedItem.title}.</p>    </>  );}"
                                },
                                "Notice how if you first click “Choose” on an item and then edit it, the input updates but the label at the bottom does not reflect the edits. This is because you have duplicated state, and you forgot to update selectedItem.",
                                "Although you could update selectedItem too, an easier fix is to remove duplication. In this example, instead of a selectedItem object (which creates a duplication with objects inside items), you hold the selectedId in state, and then get the selectedItem by searching the items array for an item with that ID:",
                                {
                                    "code_sandbox": "import { useState } from 'react';const initialItems = [  { title: 'pretzels', id: 0 },  { title: 'crispy seaweed', id: 1 },  { title: 'granola bar', id: 2 },];export default function Menu() {  const [items, setItems] = useState(initialItems);  const [selectedId, setSelectedId] = useState(0);  const selectedItem = items.find(item =>    item.id === selectedId  );  function handleItemChange(id, e) {    setItems(items.map(item => {      if (item.id === id) {        return {          ...item,          title: e.target.value,        };      } else {        return item;      }    }));  }  return (    <>      <h2>What's your travel snack?</h2>      <ul>        {items.map((item, index) => (          <li key={item.id}>            <input              value={item.title}              onChange={e => {                handleItemChange(item.id, e)              }}            />            {' '}            <button onClick={() => {              setSelectedId(item.id);            }}>Choose</button>          </li>        ))}      </ul>      <p>You picked {selectedItem.title}.</p>    </>  );}"
                                },
                                "The state used to be duplicated like this:",
                                "  1.items = [{ id: 0, title: 'pretzels'}, ...]",
                                "  2.selectedItem = {id: 0, title: 'pretzels'}",
                                "But after the change it’s like this:",
                                "  1.items = [{ id: 0, title: 'pretzels'}, ...]",
                                "  2.selectedId = 0",
                                "The duplication is gone, and you only keep the essential state!",
                                "Now if you edit the selected item, the message below will update immediately. This is because setItems triggers a re-render, and items.find(...) would find the item with the updated title. You didn’t need to hold the selected item in state, because only the selected ID is essential. The rest could be calculated during render."
                            ]
                        },
                        {
                            "sub_header": "Avoid deeply nested state ",
                            "content": [
                                "Imagine a travel plan consisting of planets, continents, and countries. You might be tempted to structure its state using nested objects and arrays, like in this example:",
                                {
                                    "code_sandbox": "places.jsplaces.jsexport const initialTravelPlan = {  id: 0,  title: '(Root)',  childPlaces: [{    id: 1,    title: 'Earth',    childPlaces: [{      id: 2,      title: 'Africa',      childPlaces: [{        id: 3,        title: 'Botswana',        childPlaces: []      }, {        id: 4,        title: 'Egypt',        childPlaces: []      }, {        id: 5,        title: 'Kenya',        childPlaces: []      }, {        id: 6,        title: 'Madagascar',        childPlaces: []      }, {        id: 7,        title: 'Morocco',        childPlaces: []      }, {        id: 8,        title: 'Nigeria',        childPlaces: []      }, {        id: 9,        title: 'South Africa',        childPlaces: []      }]    }, {      id: 10,      title: 'Americas',      childPlaces: [{        id: 11,        title: 'Argentina',        childPlaces: []      }, {        id: 12,        title: 'Brazil',        childPlaces: []      }, {        id: 13,        title: 'Barbados',        childPlaces: []      }, {        id: 14,        title: 'Canada',        childPlaces: []      }, {        id: 15,        title: 'Jamaica',        childPlaces: []      }, {        id: 16,        title: 'Mexico',        childPlaces: []      }, {        id: 17,        title: 'Trinidad and Tobago',        childPlaces: []      }, {        id: 18,        title: 'Venezuela',        childPlaces: []      }]    }, {      id: 19,      title: 'Asia',      childPlaces: [{        id: 20,        title: 'China',        childPlaces: []      }, {        id: 21,        title: 'India',        childPlaces: []      }, {        id: 22,        title: 'Singapore',        childPlaces: []      }, {        id: 23,        title: 'South Korea',        childPlaces: []      }, {        id: 24,        title: 'Thailand',        childPlaces: []      }, {        id: 25,        title: 'Vietnam',        childPlaces: []      }]    }, {      id: 26,      title: 'Europe',      childPlaces: [{        id: 27,        title: 'Croatia',        childPlaces: [],      }, {        id: 28,        title: 'France',        childPlaces: [],      }, {        id: 29,        title: 'Germany',        childPlaces: [],      }, {        id: 30,        title: 'Italy',        childPlaces: [],      }, {        id: 31,        title: 'Portugal',        childPlaces: [],      }, {        id: 32,        title: 'Spain',        childPlaces: [],      }, {        id: 33,        title: 'Turkey',        childPlaces: [],      }]    }, {      id: 34,      title: 'Oceania',      childPlaces: [{        id: 35,        title: 'Australia',        childPlaces: [],      }, {        id: 36,        title: 'Bora Bora (French Polynesia)',        childPlaces: [],      }, {        id: 37,        title: 'Easter Island (Chile)',        childPlaces: [],      }, {        id: 38,        title: 'Fiji',        childPlaces: [],      }, {        id: 39,        title: 'Hawaii (the USA)',        childPlaces: [],      }, {        id: 40,        title: 'New Zealand',        childPlaces: [],      }, {        id: 41,        title: 'Vanuatu',        childPlaces: [],      }]    }]  }, {    id: 42,    title: 'Moon',    childPlaces: [{      id: 43,      title: 'Rheita',      childPlaces: []    }, {      id: 44,      title: 'Piccolomini',      childPlaces: []    }, {      id: 45,      title: 'Tycho',      childPlaces: []    }]  }, {    id: 46,    title: 'Mars',    childPlaces: [{      id: 47,      title: 'Corn Town',      childPlaces: []    }, {      id: 48,      title: 'Green Hill',      childPlaces: []          }]  }]};"
                                },
                                "Now let’s say you want to add a button to delete a place you’ve already visited. How would you go about it? Updating nested state involves making copies of objects all the way up from the part that changed. Deleting a deeply nested place would involve copying its entire parent place chain. Such code can be very verbose.",
                                "If the state is too nested to update easily, consider making it “flat”. Here is one way you can restructure this data. Instead of a tree-like structure where each place has an array of its child places, you can have each place hold an array of its child place IDs. Then store a mapping from each place ID to the corresponding place.",
                                "This data restructuring might remind you of seeing a database table:",
                                {
                                    "code_sandbox": "places.jsplaces.jsexport const initialTravelPlan = {  0: {    id: 0,    title: '(Root)',    childIds: [1, 42, 46],  },  1: {    id: 1,    title: 'Earth',    childIds: [2, 10, 19, 26, 34]  },  2: {    id: 2,    title: 'Africa',    childIds: [3, 4, 5, 6 , 7, 8, 9]  },   3: {    id: 3,    title: 'Botswana',    childIds: []  },  4: {    id: 4,    title: 'Egypt',    childIds: []  },  5: {    id: 5,    title: 'Kenya',    childIds: []  },  6: {    id: 6,    title: 'Madagascar',    childIds: []  },   7: {    id: 7,    title: 'Morocco',    childIds: []  },  8: {    id: 8,    title: 'Nigeria',    childIds: []  },  9: {    id: 9,    title: 'South Africa',    childIds: []  },  10: {    id: 10,    title: 'Americas',    childIds: [11, 12, 13, 14, 15, 16, 17, 18],     },  11: {    id: 11,    title: 'Argentina',    childIds: []  },  12: {    id: 12,    title: 'Brazil',    childIds: []  },  13: {    id: 13,    title: 'Barbados',    childIds: []  },   14: {    id: 14,    title: 'Canada',    childIds: []  },  15: {    id: 15,    title: 'Jamaica',    childIds: []  },  16: {    id: 16,    title: 'Mexico',    childIds: []  },  17: {    id: 17,    title: 'Trinidad and Tobago',    childIds: []  },  18: {    id: 18,    title: 'Venezuela',    childIds: []  },  19: {    id: 19,    title: 'Asia',    childIds: [20, 21, 22, 23, 24, 25],     },  20: {    id: 20,    title: 'China',    childIds: []  },  21: {    id: 21,    title: 'India',    childIds: []  },  22: {    id: 22,    title: 'Singapore',    childIds: []  },  23: {    id: 23,    title: 'South Korea',    childIds: []  },  24: {    id: 24,    title: 'Thailand',    childIds: []  },  25: {    id: 25,    title: 'Vietnam',    childIds: []  },  26: {    id: 26,    title: 'Europe',    childIds: [27, 28, 29, 30, 31, 32, 33],     },  27: {    id: 27,    title: 'Croatia',    childIds: []  },  28: {    id: 28,    title: 'France',    childIds: []  },  29: {    id: 29,    title: 'Germany',    childIds: []  },  30: {    id: 30,    title: 'Italy',    childIds: []  },  31: {    id: 31,    title: 'Portugal',    childIds: []  },  32: {    id: 32,    title: 'Spain',    childIds: []  },  33: {    id: 33,    title: 'Turkey',    childIds: []  },  34: {    id: 34,    title: 'Oceania',    childIds: [35, 36, 37, 38, 39, 40, 41],     },  35: {    id: 35,    title: 'Australia',    childIds: []  },  36: {    id: 36,    title: 'Bora Bora (French Polynesia)',    childIds: []  },  37: {    id: 37,    title: 'Easter Island (Chile)',    childIds: []  },  38: {    id: 38,    title: 'Fiji',    childIds: []  },  39: {    id: 40,    title: 'Hawaii (the USA)',    childIds: []  },  40: {    id: 40,    title: 'New Zealand',    childIds: []  },  41: {    id: 41,    title: 'Vanuatu',    childIds: []  },  42: {    id: 42,    title: 'Moon',    childIds: [43, 44, 45]  },  43: {    id: 43,    title: 'Rheita',    childIds: []  },  44: {    id: 44,    title: 'Piccolomini',    childIds: []  },  45: {    id: 45,    title: 'Tycho',    childIds: []  },  46: {    id: 46,    title: 'Mars',    childIds: [47, 48]  },  47: {    id: 47,    title: 'Corn Town',    childIds: []  },  48: {    id: 48,    title: 'Green Hill',    childIds: []  }};"
                                },
                                "Now that the state is “flat” (also known as “normalized”), updating nested items becomes easier.",
                                "In order to remove a place now, you only need to update two levels of state:",
                                "  1.The updated version of its parent place should exclude the removed ID from its childIds array.",
                                "  2.The updated version of the root “table” object should include the updated version of the parent place.",
                                "Here is an example of how you could go about it:",
                                {
                                    "code_sandbox": "places.jsimport { useState } from 'react';import { initialTravelPlan } from './places.js';export default function TravelPlan() {  const [plan, setPlan] = useState(initialTravelPlan);  function handleComplete(parentId, childId) {    const parent = plan[parentId];    // Create a new version of the parent place    // that doesn't include this child ID.    const nextParent = {      ...parent,      childIds: parent.childIds        .filter(id => id !== childId)    };    // Update the root state object...    setPlan({      ...plan,      // ...so that it has the updated parent.      [parentId]: nextParent    });  }  const root = plan[0];  const planetIds = root.childIds;  return (    <>      <h2>Places to visit</h2>      <ol>        {planetIds.map(id => (          <PlaceTree            key={id}            id={id}            parentId={0}            placesById={plan}            onComplete={handleComplete}          />        ))}      </ol>    </>  );}function PlaceTree({ id, parentId, placesById, onComplete }) {  const place = placesById[id];  const childIds = place.childIds;  return (    <li>      {place.title}      <button onClick={() => {        onComplete(parentId, id);      }}>        Complete      </button>      {childIds.length > 0 &&        <ol>          {childIds.map(childId => (            <PlaceTree              key={childId}              id={childId}              parentId={id}              placesById={placesById}              onComplete={onComplete}            />          ))}        </ol>      }    </li>  );}"
                                },
                                "You can nest state as much as you like, but making it “flat” can solve numerous problems. It makes state easier to update, and it helps ensure you don’t have duplication in different parts of a nested object.",
                                "Deep DiveImproving memory usage Show DetailsIdeally, you would also remove the deleted items (and their children!) from the “table” object to improve memory usage. This version does that. It also uses Immer to make the update logic more concise.package.jsonApp.jsplaces.jspackage.json ResetFork{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}",
                                "Sometimes, you can also reduce state nesting by moving some of the nested state into the child components. This works well for ephemeral UI state that doesn’t need to be stored, like whether an item is hovered.",
                                "Recap\nIf two state variables always update together, consider merging them into one.\nChoose your state variables carefully to avoid creating “impossible” states.\nStructure your state in a way that reduces the chances that you’ll make a mistake updating it.\nAvoid redundant and duplicate state so that you don’t need to keep it in sync.\nDon’t put props into state unless you specifically want to prevent updates.\nFor UI patterns like selection, keep ID or index in state instead of the object itself.\nIf updating deeply nested state is complicated, try flattening it.\n",
                                {
                                    "code_example": "Clock"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Sharing State Between Components",
                    "url": "https://react.dev/learn/sharing-state-between-components",
                    "content": [
                        "Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as lifting state up, and it’s one of the most common things you will do writing React code.",
                        "You will learn\nHow to share state between components by lifting it up\nWhat are controlled and uncontrolled components\n",
                        {
                            "sub_header": "Lifting state up by example ",
                            "content": [
                                "In this example, a parent Accordion component renders two separate Panels:",
                                "  1.Accordion\n\nPanel\nPanel\n\n",
                                "  2.Panel",
                                "  3.Panel",
                                "Each Panel component has a boolean isActive state that determines whether its content is visible.",
                                "Press the Show button for both panels:",
                                {
                                    "code_sandbox": "import { useState } from 'react';function Panel({ title, children }) {  const [isActive, setIsActive] = useState(false);  return (    <section className=\"panel\">      <h3>{title}</h3>      {isActive ? (        <p>{children}</p>      ) : (        <button onClick={() => setIsActive(true)}>          Show        </button>      )}    </section>  );}export default function Accordion() {  return (    <>      <h2>Almaty, Kazakhstan</h2>      <Panel title=\"About\">        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.      </Panel>      <Panel title=\"Etymology\">        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.      </Panel>    </>  );}"
                                },
                                "Notice how pressing one panel’s button does not affect the other panel—they are independent.",
                                {
                                    "code_example": "Panel"
                                },
                                "But now let’s say you want to change it so that only one panel is expanded at any given time. With that design, expanding the second panel should collapse the first one. How would you do that?",
                                "To coordinate these two panels, you need to “lift their state up” to a parent component in three steps:",
                                "  1.Remove state from the child components.",
                                "  2.Pass hardcoded data from the common parent.",
                                "  3.Add state to the common parent and pass it down together with the event handlers.",
                                "This will allow the Accordion component to coordinate both Panels and only expand one at a time.",
                                {
                                    "sub_header": "Step 1: Remove state from the child components ",
                                    "content": [
                                        "You will give control of the Panel’s isActive to its parent component. This means that the parent component will pass isActive to Panel as a prop instead. Start by removing this line from the Panel component:",
                                        {
                                            "code_example": "const [isActive, setIsActive] = useState(false);"
                                        },
                                        "And instead, add isActive to the Panel’s list of props:",
                                        {
                                            "code_example": "function Panel({ title, children, isActive }) {"
                                        },
                                        "Now the Panel’s parent component can control isActive by passing it down as a prop. Conversely, the Panel component now has no control over the value of isActive—it’s now up to the parent component!"
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Pass hardcoded data from the common parent ",
                                    "content": [
                                        "To lift state up, you must locate the closest common parent component of both of the child components that you want to coordinate:",
                                        "  1.Accordion (closest common parent)\n\nPanel\nPanel\n\n",
                                        "  2.Panel",
                                        "  3.Panel",
                                        "In this example, it’s the Accordion component. Since it’s above both panels and can control their props, it will become the “source of truth” for which panel is currently active. Make the Accordion component pass a hardcoded value of isActive (for example, true) to both panels:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';export default function Accordion() {  return (    <>      <h2>Almaty, Kazakhstan</h2>      <Panel title=\"About\" isActive={true}>        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.      </Panel>      <Panel title=\"Etymology\" isActive={true}>        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.      </Panel>    </>  );}function Panel({ title, children, isActive }) {  return (    <section className=\"panel\">      <h3>{title}</h3>      {isActive ? (        <p>{children}</p>      ) : (        <button onClick={() => setIsActive(true)}>          Show        </button>      )}    </section>  );}"
                                        },
                                        "Try editing the hardcoded isActive values in the Accordion component and see the result on the screen."
                                    ]
                                },
                                {
                                    "sub_header": "Step 3: Add state to the common parent ",
                                    "content": [
                                        "Lifting state up often changes the nature of what you’re storing as state.",
                                        "In this case, only one panel should be active at a time. This means that the Accordion common parent component needs to keep track of which panel is the active one. Instead of a boolean value, it could use a number as the index of the active Panel for the state variable:",
                                        {
                                            "code_example": "const [activeIndex, setActiveIndex] = useState(0);"
                                        },
                                        "When the activeIndex is 0, the first panel is active, and when it’s 1, it’s the second one.",
                                        "Clicking the “Show” button in either Panel needs to change the active index in Accordion. A Panel can’t set the activeIndex state directly because it’s defined inside the Accordion. The Accordion component needs to explicitly allow the Panel component to change its state by passing an event handler down as a prop:",
                                        {
                                            "code_example": "<>  <Panel    isActive={activeIndex === 0}    onShow={() => setActiveIndex(0)}  >    ...  </Panel>  <Panel    isActive={activeIndex === 1}    onShow={() => setActiveIndex(1)}  >    ...  </Panel></>"
                                        },
                                        "The <button> inside the Panel will now use the onShow prop as its click event handler:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';export default function Accordion() {  const [activeIndex, setActiveIndex] = useState(0);  return (    <>      <h2>Almaty, Kazakhstan</h2>      <Panel        title=\"About\"        isActive={activeIndex === 0}        onShow={() => setActiveIndex(0)}      >        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.      </Panel>      <Panel        title=\"Etymology\"        isActive={activeIndex === 1}        onShow={() => setActiveIndex(1)}      >        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.      </Panel>    </>  );}function Panel({  title,  children,  isActive,  onShow}) {  return (    <section className=\"panel\">      <h3>{title}</h3>      {isActive ? (        <p>{children}</p>      ) : (        <button onClick={onShow}>          Show        </button>      )}    </section>  );}"
                                        },
                                        "This completes lifting state up! Moving state into the common parent component allowed you to coordinate the two panels. Using the active index instead of two “is shown” flags ensured that only one panel is active at a given time. And passing down the event handler to the child allowed the child to change the parent’s state.",
                                        {
                                            "code_example": "Accordion"
                                        },
                                        "Deep DiveControlled and uncontrolled components Show DetailsIt is common to call a component with some local state “uncontrolled”. For example, the original Panel component with an isActive state variable is uncontrolled because its parent cannot influence whether the panel is active or not.In contrast, you might say a component is “controlled” when the important information in it is driven by props rather than its own local state. This lets the parent component fully specify its behavior. The final Panel component with the isActive prop is controlled by the Accordion component.Uncontrolled components are easier to use within their parents because they require less configuration. But they’re less flexible when you want to coordinate them together. Controlled components are maximally flexible, but they require the parent components to fully configure them with props.In practice, “controlled” and “uncontrolled” aren’t strict technical terms—each component usually has some mix of both local state and props. However, this is a useful way to talk about how components are designed and what capabilities they offer.When writing a component, consider which information in it should be controlled (via props), and which information should be uncontrolled (via state). But you can always change your mind and refactor later."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "A single source of truth for each state ",
                            "content": [
                                "In a React application, many components will have their own state. Some state may “live” close to the leaf components (components at the bottom of the tree) like inputs. Other state may “live” closer to the top of the app. For example, even client-side routing libraries are usually implemented by storing the current route in the React state, and passing it down by props!",
                                "For each unique piece of state, you will choose the component that “owns” it. This principle is also known as having a “single source of truth”. It doesn’t mean that all state lives in one place—but that for each piece of state, there is a specific component that holds that piece of information. Instead of duplicating shared state between components, lift it up to their common shared parent, and pass it down to the children that need it.",
                                "Your app will change as you work on it. It is common that you will move state down or back up while you’re still figuring out where each piece of the state “lives”. This is all part of the process!",
                                "To see what this feels like in practice with a few more components, read Thinking in React.",
                                "Recap\nWhen you want to coordinate two components, move their state to their common parent.\nThen pass the information down through props from their common parent.\nFinally, pass the event handlers down so that the children can change the parent’s state.\nIt’s useful to consider components as “controlled” (driven by props) or “uncontrolled” (driven by state).\n",
                                "Try out some challenges1. Synced inputs 2. Filtering a list Challenge 1 of 2: Synced inputs These two inputs are independent. Make them stay in sync: editing one input should update the other input with the same text, and vice versa.App.jsApp.js ResetForkimport { useState } from 'react';\n\nexport default function SyncedInputs() {\n  return (\n    <>\n      <Input label=\"First input\" />\n      <Input label=\"Second input\" />\n    </>\n  );\n}\n\nfunction Input({ label }) {\n  const [text, setText] = useState('');\n\n  function handleChange(e) {\n    setText(e.target.value);\n  }\n\n  return (\n    <label>\n      {label}\n      {' '}\n      <input\n        value={text}\n        onChange={handleChange}\n      />\n    </label>\n  );\n}\n\nShow more Show hint Show solutionNext Challenge"
                            ]
                        }
                    ]
                },
                {
                    "headers": "Preserving and Resetting State",
                    "url": "https://react.dev/learn/preserving-and-resetting-state",
                    "content": [
                        "State is isolated between components. React keeps track of which state belongs to which component based on their place in the UI tree. You can control when to preserve state and when to reset it between re-renders.",
                        "You will learn\nWhen React chooses to preserve or reset the state\nHow to force React to reset component’s state\nHow keys and types affect whether the state is preserved\n",
                        {
                            "sub_header": "State is tied to a position in the render tree ",
                            "content": [
                                "React builds render trees for the component structure in your UI.",
                                "When you give a component state, you might think the state “lives” inside the component. But the state is actually held inside React. React associates each piece of state it’s holding with the correct component by where that component sits in the render tree.",
                                "Here, there is only one <Counter /> JSX tag, but it’s rendered at two different positions:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function App() {  const counter = <Counter />;  return (    <div>      {counter}      {counter}    </div>  );}function Counter() {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                },
                                "Here’s how these look as a tree:",
                                "React tree",
                                "These are two separate counters because each is rendered at its own position in the tree. You don’t usually have to think about these positions to use React, but it can be useful to understand how it works.",
                                "In React, each component on the screen has fully isolated state. For example, if you render two Counter components side by side, each of them will get its own, independent, score and hover states.",
                                "Try clicking both counters and notice they don’t affect each other:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function App() {  return (    <div>      <Counter />      <Counter />    </div>  );}function Counter() {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                },
                                "As you can see, when one counter is updated, only the state for that component is updated:",
                                "Updating state",
                                "React will keep the state around for as long as you render the same component at the same position in the tree. To see this, increment both counters, then remove the second component by unchecking “Render the second counter” checkbox, and then add it back by ticking it again:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function App() {  const [showB, setShowB] = useState(true);  return (    <div>      <Counter />      {showB && <Counter />}       <label>        <input          type=\"checkbox\"          checked={showB}          onChange={e => {            setShowB(e.target.checked)          }}        />        Render the second counter      </label>    </div>  );}function Counter() {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                },
                                "Notice how the moment you stop rendering the second counter, its state disappears completely. That’s because when React removes a component, it destroys its state.",
                                "Deleting a component",
                                "When you tick “Render the second counter”, a second Counter and its state are initialized from scratch (score = 0) and added to the DOM.",
                                "Adding a component",
                                "React preserves a component’s state for as long as it’s being rendered at its position in the UI tree. If it gets removed, or a different component gets rendered at the same position, React discards its state."
                            ]
                        },
                        {
                            "sub_header": "Same component at the same position preserves state ",
                            "content": [
                                "In this example, there are two different <Counter /> tags:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function App() {  const [isFancy, setIsFancy] = useState(false);  return (    <div>      {isFancy ? (        <Counter isFancy={true} />       ) : (        <Counter isFancy={false} />       )}      <label>        <input          type=\"checkbox\"          checked={isFancy}          onChange={e => {            setIsFancy(e.target.checked)          }}        />        Use fancy styling      </label>    </div>  );}function Counter({ isFancy }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  if (isFancy) {    className += ' fancy';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                },
                                "When you tick or clear the checkbox, the counter state does not get reset. Whether isFancy is true or false, you always have a <Counter /> as the first child of the div returned from the root App component:",
                                {
                                    "code_example": "App"
                                },
                                "It’s the same component at the same position, so from React’s perspective, it’s the same counter.",
                                {
                                    "code_example": "return"
                                }
                            ]
                        },
                        {
                            "sub_header": "Different components at the same position reset state ",
                            "content": [
                                "In this example, ticking the checkbox will replace <Counter> with a <p>:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function App() {  const [isPaused, setIsPaused] = useState(false);  return (    <div>      {isPaused ? (        <p>See you later!</p>       ) : (        <Counter />       )}      <label>        <input          type=\"checkbox\"          checked={isPaused}          onChange={e => {            setIsPaused(e.target.checked)          }}        />        Take a break      </label>    </div>  );}function Counter() {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                },
                                "Here, you switch between different component types at the same position. Initially, the first child of the <div> contained a Counter. But when you swapped in a p, React removed the Counter from the UI tree and destroyed its state.",
                                {
                                    "code_example": "Counter"
                                },
                                {
                                    "code_example": "p"
                                },
                                "Also, when you render a different component in the same position, it resets the state of its entire subtree. To see how this works, increment the counter and then tick the checkbox:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function App() {  const [isFancy, setIsFancy] = useState(false);  return (    <div>      {isFancy ? (        <div>          <Counter isFancy={true} />         </div>      ) : (        <section>          <Counter isFancy={false} />        </section>      )}      <label>        <input          type=\"checkbox\"          checked={isFancy}          onChange={e => {            setIsFancy(e.target.checked)          }}        />        Use fancy styling      </label>    </div>  );}function Counter({ isFancy }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  if (isFancy) {    className += ' fancy';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                },
                                "The counter state gets reset when you click the checkbox. Although you render a Counter, the first child of the div changes from a div to a section. When the child div was removed from the DOM, the whole tree below it (including the Counter and its state) was destroyed as well.",
                                {
                                    "code_example": "section"
                                },
                                {
                                    "code_example": "div"
                                },
                                "As a rule of thumb, if you want to preserve the state between re-renders, the structure of your tree needs to “match up” from one render to another. If the structure is different, the state gets destroyed because React destroys state when it removes a component from the tree.",
                                {
                                    "code_example": "MyTextField"
                                }
                            ]
                        },
                        {
                            "sub_header": "Resetting state at the same position ",
                            "content": [
                                "By default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component’s state. Consider this app that lets two players keep track of their scores during each turn:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Scoreboard() {  const [isPlayerA, setIsPlayerA] = useState(true);  return (    <div>      {isPlayerA ? (        <Counter person=\"Taylor\" />      ) : (        <Counter person=\"Sarah\" />      )}      <button onClick={() => {        setIsPlayerA(!isPlayerA);      }}>        Next player!      </button>    </div>  );}function Counter({ person }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{person}'s score: {score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                },
                                "Currently, when you change the player, the score is preserved. The two Counters appear in the same position, so React sees them as the same Counter whose person prop has changed.",
                                "But conceptually, in this app they should be two separate counters. They might appear in the same place in the UI, but one is a counter for Taylor, and another is a counter for Sarah.",
                                "There are two ways to reset state when switching between them:",
                                "  1.Render components in different positions",
                                "  2.Give each component an explicit identity with key",
                                {
                                    "sub_header": "Option 1: Rendering a component in different positions ",
                                    "content": [
                                        "If you want these two Counters to be independent, you can render them in two different positions:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';export default function Scoreboard() {  const [isPlayerA, setIsPlayerA] = useState(true);  return (    <div>      {isPlayerA &&        <Counter person=\"Taylor\" />      }      {!isPlayerA &&        <Counter person=\"Sarah\" />      }      <button onClick={() => {        setIsPlayerA(!isPlayerA);      }}>        Next player!      </button>    </div>  );}function Counter({ person }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{person}'s score: {score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                        },
                                        "  1.Initially, isPlayerA is true. So the first position contains Counter state, and the second one is empty.",
                                        "  2.When you click the “Next player” button the first position clears but the second one now contains a Counter.",
                                        "Initial stateClicking “next”Clicking “next” again",
                                        "Each Counter’s state gets destroyed each time it’s removed from the DOM. This is why they reset every time you click the button.",
                                        "This solution is convenient when you only have a few independent components rendered in the same place. In this example, you only have two, so it’s not a hassle to render both separately in the JSX."
                                    ]
                                },
                                {
                                    "sub_header": "Option 2: Resetting state with a key ",
                                    "content": [
                                        "There is also another, more generic, way to reset a component’s state.",
                                        "You might have seen keys when rendering lists. Keys aren’t just for lists! You can use keys to make React distinguish between any components. By default, React uses order within the parent (“first counter”, “second counter”) to discern between components. But keys let you tell React that this is not just a first counter, or a second counter, but a specific counter—for example, Taylor’s counter. This way, React will know Taylor’s counter wherever it appears in the tree!",
                                        "In this example, the two <Counter />s don’t share state even though they appear in the same place in JSX:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';export default function Scoreboard() {  const [isPlayerA, setIsPlayerA] = useState(true);  return (    <div>      {isPlayerA ? (        <Counter key=\"Taylor\" person=\"Taylor\" />      ) : (        <Counter key=\"Sarah\" person=\"Sarah\" />      )}      <button onClick={() => {        setIsPlayerA(!isPlayerA);      }}>        Next player!      </button>    </div>  );}function Counter({ person }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{person}'s score: {score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                        },
                                        "Switching between Taylor and Sarah does not preserve the state. This is because you gave them different keys:",
                                        {
                                            "code_example": "{isPlayerA ? (  <Counter key=\"Taylor\" person=\"Taylor\" />) : (  <Counter key=\"Sarah\" person=\"Sarah\" />)}"
                                        },
                                        "Specifying a key tells React to use the key itself as part of the position, instead of their order within the parent. This is why, even though you render them in the same place in JSX, React sees them as two different counters, and so they will never share state. Every time a counter appears on the screen, its state is created. Every time it is removed, its state is destroyed. Toggling between them resets their state over and over.",
                                        "NoteRemember that keys are not globally unique. They only specify the position within the parent."
                                    ]
                                },
                                {
                                    "sub_header": "Resetting a form with a key ",
                                    "content": [
                                        "Resetting state with a key is particularly useful when dealing with forms.",
                                        "In this chat app, the <Chat> component contains the text input state:",
                                        {
                                            "code_sandbox": "ContactList.jsChat.jsimport { useState } from 'react';import Chat from './Chat.js';import ContactList from './ContactList.js';export default function Messenger() {  const [to, setTo] = useState(contacts[0]);  return (    <div>      <ContactList        contacts={contacts}        selectedContact={to}        onSelect={contact => setTo(contact)}      />      <Chat contact={to} />    </div>  )}const contacts = [  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },  { id: 1, name: 'Alice', email: 'alice@mail.com' },  { id: 2, name: 'Bob', email: 'bob@mail.com' }];"
                                        },
                                        "Try entering something into the input, and then press “Alice” or “Bob” to choose a different recipient. You will notice that the input state is preserved because the <Chat> is rendered at the same position in the tree.",
                                        "In many apps, this may be the desired behavior, but not in a chat app! You don’t want to let the user send a message they already typed to a wrong person due to an accidental click. To fix it, add a key:",
                                        {
                                            "code_example": "<Chat key={to.id} contact={to} />"
                                        },
                                        "This ensures that when you select a different recipient, the Chat component will be recreated from scratch, including any state in the tree below it. React will also re-create the DOM elements instead of reusing them.",
                                        "Now switching the recipient always clears the text field:",
                                        {
                                            "code_sandbox": "ContactList.jsChat.jsimport { useState } from 'react';import Chat from './Chat.js';import ContactList from './ContactList.js';export default function Messenger() {  const [to, setTo] = useState(contacts[0]);  return (    <div>      <ContactList        contacts={contacts}        selectedContact={to}        onSelect={contact => setTo(contact)}      />      <Chat key={to.id} contact={to} />    </div>  )}const contacts = [  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },  { id: 1, name: 'Alice', email: 'alice@mail.com' },  { id: 2, name: 'Bob', email: 'bob@mail.com' }];"
                                        },
                                        "Deep DivePreserving state for removed components Show DetailsIn a real chat app, you’d probably want to recover the input state when the user selects the previous recipient again. There are a few ways to keep the state “alive” for a component that’s no longer visible:\nYou could render all chats instead of just the current one, but hide all the others with CSS. The chats would not get removed from the tree, so their local state would be preserved. This solution works great for simple UIs. But it can get very slow if the hidden trees are large and contain a lot of DOM nodes.\nYou could lift the state up and hold the pending message for each recipient in the parent component. This way, when the child components get removed, it doesn’t matter, because it’s the parent that keeps the important information. This is the most common solution.\nYou might also use a different source in addition to React state. For example, you probably want a message draft to persist even if the user accidentally closes the page. To implement this, you could have the Chat component initialize its state by reading from the localStorage, and save the drafts there too.\nNo matter which strategy you pick, a chat with Alice is conceptually distinct from a chat with Bob, so it makes sense to give a key to the <Chat> tree based on the current recipient.",
                                        "Recap\nReact keeps state for as long as the same component is rendered at the same position.\nState is not kept in JSX tags. It’s associated with the tree position in which you put that JSX.\nYou can force a subtree to reset its state by giving it a different key.\nDon’t nest component definitions, or you’ll reset state by accident.\n",
                                        "Try out some challenges1. Fix disappearing input text 2. Swap two form fields 3. Reset a detail form 4. Clear an image while it’s loading 5. Fix misplaced state in the list Challenge 1 of 5: Fix disappearing input text This example shows a message when you press the button. However, pressing the button also accidentally resets the input. Why does this happen? Fix it so that pressing the button does not reset the input text.App.jsApp.js ResetForkimport { useState } from 'react';\n\nexport default function App() {\n  const [showHint, setShowHint] = useState(false);\n  if (showHint) {\n    return (\n      <div>\n        <p><i>Hint: Your favorite city?</i></p>\n        <Form />\n        <button onClick={() => {\n          setShowHint(false);\n        }}>Hide hint</button>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <Form />\n      <button onClick={() => {\n        setShowHint(true);\n      }}>Show hint</button>\n    </div>\n  );\n}\n\nfunction Form() {\n  const [text, setText] = useState('');\n  return (\n    <textarea\n      value={text}\n      onChange={e => setText(e.target.value)}\n    />\n  );\n}\n\nShow more Show solutionNext Challenge"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Extracting State Logic into a Reducer",
                    "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
                    "content": [
                        "Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called a reducer.",
                        {
                            "code_example": "useState"
                        },
                        {
                            "sub_header": "Consolidate state logic with a reducer ",
                            "content": [
                                "As your components grow in complexity, it can get harder to see at a glance all the different ways in which a component’s state gets updated. For example, the TaskApp component below holds an array of tasks in state and uses three different event handlers to add, remove, and edit tasks:",
                                {
                                    "code_sandbox": "import { useState } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';export default function TaskApp() {  const [tasks, setTasks] = useState(initialTasks);  function handleAddTask(text) {    setTasks([      ...tasks,      {        id: nextId++,        text: text,        done: false,      },    ]);  }  function handleChangeTask(task) {    setTasks(      tasks.map((t) => {        if (t.id === task.id) {          return task;        } else {          return t;        }      })    );  }  function handleDeleteTask(taskId) {    setTasks(tasks.filter((t) => t.id !== taskId));  }  return (    <>      <h1>Prague itinerary</h1>      <AddTask onAddTask={handleAddTask} />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}let nextId = 3;const initialTasks = [  {id: 0, text: 'Visit Kafka Museum', done: true},  {id: 1, text: 'Watch a puppet show', done: false},  {id: 2, text: 'Lennon Wall pic', done: false},];"
                                },
                                "Each of its event handlers calls setTasks in order to update the state. As this component grows, so does the amount of state logic sprinkled throughout it. To reduce this complexity and keep all your logic in one easy-to-access place, you can move that state logic into a single function outside your component, called a “reducer”.",
                                "Reducers are a different way to handle state. You can migrate from useState to useReducer in three steps:",
                                "  1.Move from setting state to dispatching actions.",
                                "  2.Write a reducer function.",
                                "  3.Use the reducer from your component.",
                                {
                                    "sub_header": "Step 1: Move from setting state to dispatching actions ",
                                    "content": [
                                        "Your event handlers currently specify what to do by setting state:",
                                        {
                                            "code_example": "function handleAddTask(text) {  setTasks([    ...tasks,    {      id: nextId++,      text: text,      done: false,    },  ]);}function handleChangeTask(task) {  setTasks(    tasks.map((t) => {      if (t.id === task.id) {        return task;      } else {        return t;      }    })  );}function handleDeleteTask(taskId) {  setTasks(tasks.filter((t) => t.id !== taskId));}"
                                        },
                                        "Remove all the state setting logic. What you are left with are three event handlers:",
                                        "  1.handleAddTask(text) is called when the user presses “Add”.",
                                        "  2.handleChangeTask(task) is called when the user toggles a task or presses “Save”.",
                                        "  3.handleDeleteTask(taskId) is called when the user presses “Delete”.",
                                        "Managing state with reducers is slightly different from directly setting state. Instead of telling React “what to do” by setting state, you specify “what the user just did” by dispatching “actions” from your event handlers. (The state update logic will live elsewhere!) So instead of “setting tasks” via an event handler, you’re dispatching an “added/changed/deleted a task” action. This is more descriptive of the user’s intent.",
                                        {
                                            "code_example": "function handleAddTask(text) {  dispatch({    type: 'added',    id: nextId++,    text: text,  });}function handleChangeTask(task) {  dispatch({    type: 'changed',    task: task,  });}function handleDeleteTask(taskId) {  dispatch({    type: 'deleted',    id: taskId,  });}"
                                        },
                                        "The object you pass to dispatch is called an “action”:",
                                        {
                                            "code_example": "function handleDeleteTask(taskId) {  dispatch(    // \"action\" object:    {      type: 'deleted',      id: taskId,    }  );}"
                                        },
                                        "It is a regular JavaScript object. You decide what to put in it, but generally it should contain the minimal information about what happened. (You will add the dispatch function itself in a later step.)",
                                        {
                                            "code_example": "type"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Write a reducer function ",
                                    "content": [
                                        "A reducer function is where you will put your state logic. It takes two arguments, the current state and the action object, and it returns the next state:",
                                        {
                                            "code_example": "function yourReducer(state, action) {  // return next state for React to set}"
                                        },
                                        "React will set the state to what you return from the reducer.",
                                        "To move your state setting logic from your event handlers to a reducer function in this example, you will:",
                                        "  1.Declare the current state (tasks) as the first argument.",
                                        "  2.Declare the action object as the second argument.",
                                        "  3.Return the next state from the reducer (which React will set the state to).",
                                        "Here is all the state setting logic migrated to a reducer function:",
                                        {
                                            "code_example": "function tasksReducer(tasks, action) {  if (action.type === 'added') {    return [      ...tasks,      {        id: action.id,        text: action.text,        done: false,      },    ];  } else if (action.type === 'changed') {    return tasks.map((t) => {      if (t.id === action.task.id) {        return action.task;      } else {        return t;      }    });  } else if (action.type === 'deleted') {    return tasks.filter((t) => t.id !== action.id);  } else {    throw Error('Unknown action: ' + action.type);  }}"
                                        },
                                        "Because the reducer function takes state (tasks) as an argument, you can declare it outside of your component. This decreases the indentation level and can make your code easier to read.",
                                        {
                                            "code_example": "function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [        ...tasks,        {          id: action.id,          text: action.text,          done: false,        },      ];    }    case 'changed': {      return tasks.map((t) => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter((t) => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}"
                                        },
                                        "Deep DiveWhy are reducers called this way? Show DetailsAlthough reducers can “reduce” the amount of code inside your component, they are actually named after the reduce() operation that you can perform on arrays.The reduce() operation lets you take an array and “accumulate” a single value out of many:const arr = [1, 2, 3, 4, 5];const sum = arr.reduce(  (result, number) => result + number); // 1 + 2 + 3 + 4 + 5The function you pass to reduce is known as a “reducer”. It takes the result so far and the current item, then it returns the next result. React reducers are an example of the same idea: they take the state so far and the action, and return the next state. In this way, they accumulate actions over time into state.You could even use the reduce() method with an initialState and an array of actions to calculate the final state by passing your reducer function to it:index.jsindex.htmltasksReducer.jsindex.js ResetForkimport tasksReducer from './tasksReducer.js';\n\nlet initialState = [];\nlet actions = [\n  {type: 'added', id: 1, text: 'Visit Kafka Museum'},\n  {type: 'added', id: 2, text: 'Watch a puppet show'},\n  {type: 'deleted', id: 1},\n  {type: 'added', id: 3, text: 'Lennon Wall pic'},\n];\n\nlet finalState = actions.reduce(tasksReducer, initialState);\n\nconst output = document.getElementById('output');\noutput.textContent = JSON.stringify(finalState, null, 2);\n\nYou probably won’t need to do this yourself, but this is similar to what React does!"
                                    ]
                                },
                                {
                                    "sub_header": "Step 3: Use the reducer from your component ",
                                    "content": [
                                        "Finally, you need to hook up the tasksReducer to your component. Import the useReducer Hook from React:",
                                        {
                                            "code_example": "import { useReducer } from 'react';"
                                        },
                                        "Then you can replace useState:",
                                        {
                                            "code_example": "const [tasks, setTasks] = useState(initialTasks);"
                                        },
                                        "with useReducer like so:",
                                        {
                                            "code_example": "const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);"
                                        },
                                        "The useReducer Hook is similar to useState—you must pass it an initial state and it returns a stateful value and a way to set state (in this case, the dispatch function). But it’s a little different.",
                                        "The useReducer Hook takes two arguments:",
                                        "  1.A reducer function",
                                        "  2.An initial state",
                                        "And it returns:",
                                        "  1.A stateful value",
                                        "  2.A dispatch function (to “dispatch” user actions to the reducer)",
                                        "Now it’s fully wired up! Here, the reducer is declared at the bottom of the component file:",
                                        {
                                            "code_sandbox": "import { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task,    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId,    });  }  return (    <>      <h1>Prague itinerary</h1>      <AddTask onAddTask={handleAddTask} />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [        ...tasks,        {          id: action.id,          text: action.text,          done: false,        },      ];    }    case 'changed': {      return tasks.map((t) => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter((t) => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}let nextId = 3;const initialTasks = [  {id: 0, text: 'Visit Kafka Museum', done: true},  {id: 1, text: 'Watch a puppet show', done: false},  {id: 2, text: 'Lennon Wall pic', done: false},];"
                                        },
                                        "If you want, you can even move the reducer to a different file:",
                                        {
                                            "code_sandbox": "tasksReducer.jsimport { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';import tasksReducer from './tasksReducer.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task,    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId,    });  }  return (    <>      <h1>Prague itinerary</h1>      <AddTask onAddTask={handleAddTask} />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}let nextId = 3;const initialTasks = [  {id: 0, text: 'Visit Kafka Museum', done: true},  {id: 1, text: 'Watch a puppet show', done: false},  {id: 2, text: 'Lennon Wall pic', done: false},];"
                                        },
                                        "Component logic can be easier to read when you separate concerns like this. Now the event handlers only specify what happened by dispatching actions, and the reducer function determines how the state updates in response to them."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Comparing useState and useReducer ",
                            "content": [
                                "Reducers are not without downsides! Here’s a few ways you can compare them:",
                                "  1.Code size: Generally, with useState you have to write less code upfront. With useReducer, you have to write both a reducer function and dispatch actions. However, useReducer can help cut down on the code if many event handlers modify state in a similar way.",
                                "  2.Readability: useState is very easy to read when the state updates are simple. When they get more complex, they can bloat your component’s code and make it difficult to scan. In this case, useReducer lets you cleanly separate the how of update logic from the what happened of event handlers.",
                                "  3.Debugging: When you have a bug with useState, it can be difficult to tell where the state was set incorrectly, and why. With useReducer, you can add a console log into your reducer to see every state update, and why it happened (due to which action). If each action is correct, you’ll know that the mistake is in the reducer logic itself. However, you have to step through more code than with useState.",
                                "  4.Testing: A reducer is a pure function that doesn’t depend on your component. This means that you can export and test it separately in isolation. While generally it’s best to test components in a more realistic environment, for complex state update logic it can be useful to assert that your reducer returns a particular state for a particular initial state and action.",
                                "  5.Personal preference: Some people like reducers, others don’t. That’s okay. It’s a matter of preference. You can always convert between useState and useReducer back and forth: they are equivalent!",
                                "We recommend using a reducer if you often encounter bugs due to incorrect state updates in some component, and want to introduce more structure to its code. You don’t have to use reducers for everything: feel free to mix and match! You can even useState and useReducer in the same component."
                            ]
                        },
                        {
                            "sub_header": "Writing reducers well ",
                            "content": [
                                "Keep these two tips in mind when writing reducers:",
                                "  1.Reducers must be pure. Similar to state updater functions, reducers run during rendering! (Actions are queued until the next render.) This means that reducers must be pure—same inputs always result in the same output. They should not send requests, schedule timeouts, or perform any side effects (operations that impact things outside the component). They should update objects and arrays without mutations.",
                                "  2.Each action describes a single user interaction, even if that leads to multiple changes in the data. For example, if a user presses “Reset” on a form with five fields managed by a reducer, it makes more sense to dispatch one reset_form action rather than five separate set_field actions. If you log every action in a reducer, that log should be clear enough for you to reconstruct what interactions or responses happened in what order. This helps with debugging!"
                            ]
                        },
                        {
                            "sub_header": "Writing concise reducers with Immer ",
                            "content": [
                                "Just like with updating objects and arrays in regular state, you can use the Immer library to make reducers more concise. Here, useImmerReducer lets you mutate the state with push or arr[i] = assignment:",
                                {
                                    "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                                },
                                "Reducers must be pure, so they shouldn’t mutate state. But Immer provides you with a special draft object which is safe to mutate. Under the hood, Immer will create a copy of your state with the changes you made to the draft. This is why reducers managed by useImmerReducer can mutate their first argument and don’t need to return state.",
                                "Recap\nTo convert from useState to useReducer:\n\nDispatch actions from event handlers.\nWrite a reducer function that returns the next state for a given state and action.\nReplace useState with useReducer.\n\n\nReducers require you to write a bit more code, but they help with debugging and testing.\nReducers must be pure.\nEach action describes a single user interaction.\nUse Immer if you want to write reducers in a mutating style.\n",
                                {
                                    "code_example": "useReducer"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Passing Data Deeply with Context",
                    "url": "https://react.dev/learn/passing-data-deeply-with-context",
                    "content": [
                        "Usually, you will pass information from a parent component to a child component via props. But passing props can become verbose and inconvenient if you have to pass them through many components in the middle, or if many components in your app need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep—without passing it explicitly through props.",
                        "You will learn\nWhat “prop drilling” is\nHow to replace repetitive prop passing with context\nCommon use cases for context\nCommon alternatives to context\n",
                        {
                            "sub_header": "The problem with passing props ",
                            "content": [
                                "Passing props is a great way to explicitly pipe data through your UI tree to the components that use it.",
                                "But passing props can become verbose and inconvenient when you need to pass some prop deeply through the tree, or if many components need the same prop. The nearest common ancestor could be far removed from the components that need data, and lifting state up that high can lead to a situation called “prop drilling”.",
                                "Lifting state upProp drilling",
                                "Wouldn’t it be great if there were a way to “teleport” data to the components in the tree that need it without passing props? With React’s context feature, there is!"
                            ]
                        },
                        {
                            "sub_header": "Context: an alternative to passing props ",
                            "content": [
                                "Context lets a parent component provide data to the entire tree below it. There are many uses for context. Here is one example. Consider this Heading component that accepts a level for its size:",
                                {
                                    "code_sandbox": "Section.jsHeading.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section>      <Heading level={1}>Title</Heading>      <Heading level={2}>Heading</Heading>      <Heading level={3}>Sub-heading</Heading>      <Heading level={4}>Sub-sub-heading</Heading>      <Heading level={5}>Sub-sub-sub-heading</Heading>      <Heading level={6}>Sub-sub-sub-sub-heading</Heading>    </Section>  );}"
                                },
                                "Let’s say you want multiple headings within the same Section to always have the same size:",
                                {
                                    "code_sandbox": "Section.jsHeading.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section>      <Heading level={1}>Title</Heading>      <Section>        <Heading level={2}>Heading</Heading>        <Heading level={2}>Heading</Heading>        <Heading level={2}>Heading</Heading>        <Section>          <Heading level={3}>Sub-heading</Heading>          <Heading level={3}>Sub-heading</Heading>          <Heading level={3}>Sub-heading</Heading>          <Section>            <Heading level={4}>Sub-sub-heading</Heading>            <Heading level={4}>Sub-sub-heading</Heading>            <Heading level={4}>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                                },
                                "Currently, you pass the level prop to each <Heading> separately:",
                                {
                                    "code_example": "<Section>  <Heading level={3}>About</Heading>  <Heading level={3}>Photos</Heading>  <Heading level={3}>Videos</Heading></Section>"
                                },
                                "It would be nice if you could pass the level prop to the <Section> component instead and remove it from the <Heading>. This way you could enforce that all headings in the same section have the same size:",
                                {
                                    "code_example": "<Section level={3}>  <Heading>About</Heading>  <Heading>Photos</Heading>  <Heading>Videos</Heading></Section>"
                                },
                                "But how can the <Heading> component know the level of its closest <Section>? That would require some way for a child to “ask” for data from somewhere above in the tree.",
                                "You can’t do it with props alone. This is where context comes into play. You will do it in three steps:",
                                "  1.Create a context. (You can call it LevelContext, since it’s for the heading level.)",
                                "  2.Use that context from the component that needs the data. (Heading will use LevelContext.)",
                                "  3.Provide that context from the component that specifies the data. (Section will provide LevelContext.)",
                                "Context lets a parent—even a distant one!—provide some data to the entire tree inside of it.",
                                "Using context in close childrenUsing context in distant children",
                                {
                                    "sub_header": "Step 1: Create the context ",
                                    "content": [
                                        "First, you need to create the context. You’ll need to export it from a file so that your components can use it:",
                                        {
                                            "code_sandbox": "Section.jsHeading.jsLevelContext.jsLevelContext.jsimport { createContext } from 'react';export const LevelContext = createContext(1);"
                                        },
                                        "The only argument to createContext is the default value. Here, 1 refers to the biggest heading level, but you could pass any kind of value (even an object). You will see the significance of the default value in the next step."
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Use the context ",
                                    "content": [
                                        "Import the useContext Hook from React and your context:",
                                        {
                                            "code_example": "import { useContext } from 'react';import { LevelContext } from './LevelContext.js';"
                                        },
                                        "Currently, the Heading component reads level from props:",
                                        {
                                            "code_example": "export default function Heading({ level, children }) {  // ...}"
                                        },
                                        "Instead, remove the level prop and read the value from the context you just imported, LevelContext:",
                                        {
                                            "code_example": "export default function Heading({ children }) {  const level = useContext(LevelContext);  // ...}"
                                        },
                                        "useContext is a Hook. Just like useState and useReducer, you can only call a Hook immediately inside a React component (not inside loops or conditions). useContext tells React that the Heading component wants to read the LevelContext.",
                                        "Now that the Heading component doesn’t have a level prop, you don’t need to pass the level prop to Heading in your JSX like this anymore:",
                                        {
                                            "code_example": "<Section>  <Heading level={4}>Sub-sub-heading</Heading>  <Heading level={4}>Sub-sub-heading</Heading>  <Heading level={4}>Sub-sub-heading</Heading></Section>"
                                        },
                                        "Update the JSX so that it’s the Section that receives it instead:",
                                        {
                                            "code_example": "<Section level={4}>  <Heading>Sub-sub-heading</Heading>  <Heading>Sub-sub-heading</Heading>  <Heading>Sub-sub-heading</Heading></Section>"
                                        },
                                        "As a reminder, this is the markup that you were trying to get working:",
                                        {
                                            "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section level={1}>      <Heading>Title</Heading>      <Section level={2}>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Section level={3}>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Section level={4}>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                                        },
                                        "Notice this example doesn’t quite work, yet! All the headings have the same size because even though you’re using the context, you have not provided it yet. React doesn’t know where to get it!",
                                        "If you don’t provide the context, React will use the default value you’ve specified in the previous step. In this example, you specified 1 as the argument to createContext, so useContext(LevelContext) returns 1, setting all those headings to <h1>. Let’s fix this problem by having each Section provide its own context."
                                    ]
                                },
                                {
                                    "sub_header": "Step 3: Provide the context ",
                                    "content": [
                                        "The Section component currently renders its children:",
                                        {
                                            "code_example": "export default function Section({ children }) {  return (    <section className=\"section\">      {children}    </section>  );}"
                                        },
                                        "Wrap them with a context provider to provide the LevelContext to them:",
                                        {
                                            "code_example": "import { LevelContext } from './LevelContext.js';export default function Section({ level, children }) {  return (    <section className=\"section\">      <LevelContext.Provider value={level}>        {children}      </LevelContext.Provider>    </section>  );}"
                                        },
                                        "This tells React: “if any component inside this <Section> asks for LevelContext, give them this level.” The component will use the value of the nearest <LevelContext.Provider> in the UI tree above it.",
                                        {
                                            "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section level={1}>      <Heading>Title</Heading>      <Section level={2}>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Section level={3}>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Section level={4}>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                                        },
                                        "It’s the same result as the original code, but you did not need to pass the level prop to each Heading component! Instead, it “figures out” its heading level by asking the closest Section above:",
                                        "  1.You pass a level prop to the <Section>.",
                                        "  2.Section wraps its children into <LevelContext.Provider value={level}>.",
                                        "  3.Heading asks the closest value of LevelContext above with useContext(LevelContext)."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Using and providing context from the same component ",
                            "content": [
                                "Currently, you still have to specify each section’s level manually:",
                                {
                                    "code_example": "export default function Page() {  return (    <Section level={1}>      ...      <Section level={2}>        ...        <Section level={3}>          ..."
                                },
                                "Since context lets you read information from a component above, each Section could read the level from the Section above, and pass level + 1 down automatically. Here is how you could do it:",
                                {
                                    "code_example": "import { useContext } from 'react';import { LevelContext } from './LevelContext.js';export default function Section({ children }) {  const level = useContext(LevelContext);  return (    <section className=\"section\">      <LevelContext.Provider value={level + 1}>        {children}      </LevelContext.Provider>    </section>  );}"
                                },
                                "With this change, you don’t need to pass the level prop either to the <Section> or to the <Heading>:",
                                {
                                    "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section>      <Heading>Title</Heading>      <Section>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Section>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Section>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                                },
                                "Now both Heading and Section read the LevelContext to figure out how “deep” they are. And the Section wraps its children into the LevelContext to specify that anything inside of it is at a “deeper” level.",
                                "NoteThis example uses heading levels because they show visually how nested components can override context. But context is useful for many other use cases too. You can pass down any information needed by the entire subtree: the current color theme, the currently logged in user, and so on."
                            ]
                        },
                        {
                            "sub_header": "Context passes through intermediate components ",
                            "content": [
                                "You can insert as many components as you like between the component that provides context and the one that uses it. This includes both built-in components like <div> and components you might build yourself.",
                                "In this example, the same Post component (with a dashed border) is rendered at two different nesting levels. Notice that the <Heading> inside of it gets its level automatically from the closest <Section>:",
                                {
                                    "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function ProfilePage() {  return (    <Section>      <Heading>My Profile</Heading>      <Post        title=\"Hello traveller!\"        body=\"Read about my adventures.\"      />      <AllPosts />    </Section>  );}function AllPosts() {  return (    <Section>      <Heading>Posts</Heading>      <RecentPosts />    </Section>  );}function RecentPosts() {  return (    <Section>      <Heading>Recent Posts</Heading>      <Post        title=\"Flavors of Lisbon\"        body=\"...those pastéis de nata!\"      />      <Post        title=\"Buenos Aires in the rhythm of tango\"        body=\"I loved it!\"      />    </Section>  );}function Post({ title, body }) {  return (    <Section isFancy={true}>      <Heading>        {title}      </Heading>      <p><i>{body}</i></p>    </Section>  );}"
                                },
                                "You didn’t do anything special for this to work. A Section specifies the context for the tree inside it, so you can insert a <Heading> anywhere, and it will have the correct size. Try it in the sandbox above!",
                                "Context lets you write components that “adapt to their surroundings” and display themselves differently depending on where (or, in other words, in which context) they are being rendered.",
                                "How context works might remind you of CSS property inheritance. In CSS, you can specify color: blue for a <div>, and any DOM node inside of it, no matter how deep, will inherit that color unless some other DOM node in the middle overrides it with color: green. Similarly, in React, the only way to override some context coming from above is to wrap children into a context provider with a different value.",
                                "In CSS, different properties like color and background-color don’t override each other. You can set all  <div>’s color to red without impacting background-color. Similarly, different React contexts don’t override each other. Each context that you make with createContext() is completely separate from other ones, and ties together components using and providing that particular context. One component may use or provide many different contexts without a problem."
                            ]
                        },
                        {
                            "sub_header": "Before you use context ",
                            "content": [
                                "Context is very tempting to use! However, this also means it’s too easy to overuse it. Just because you need to pass some props several levels deep doesn’t mean you should put that information into context.",
                                "Here’s a few alternatives you should consider before using context:",
                                "  1.Start by passing props. If your components are not trivial, it’s not unusual to pass a dozen props down through a dozen components. It may feel like a slog, but it makes it very clear which components use which data! The person maintaining your code will be glad you’ve made the data flow explicit with props.",
                                "  2.Extract components and pass JSX as children to them. If you pass some data through many layers of intermediate components that don’t use that data (and only pass it further down), this often means that you forgot to extract some components along the way. For example, maybe you pass data props like posts to visual components that don’t use them directly, like <Layout posts={posts} />. Instead, make Layout take children as a prop, and render <Layout><Posts posts={posts} /></Layout>. This reduces the number of layers between the component specifying the data and the one that needs it.",
                                "If neither of these approaches works well for you, consider context."
                            ]
                        },
                        {
                            "sub_header": "Use cases for context ",
                            "content": [
                                "  1.Theming: If your app lets the user change its appearance (e.g. dark mode), you can put a context provider at the top of your app, and use that context in components that need to adjust their visual look.",
                                "  2.Current account: Many components might need to know the currently logged in user. Putting it in context makes it convenient to read it anywhere in the tree. Some apps also let you operate multiple accounts at the same time (e.g. to leave a comment as a different user). In those cases, it can be convenient to wrap a part of the UI into a nested provider with a different current account value.",
                                "  3.Routing: Most routing solutions use context internally to hold the current route. This is how every link “knows” whether it’s active or not. If you build your own router, you might want to do it too.",
                                "  4.Managing state: As your app grows, you might end up with a lot of state closer to the top of your app. Many distant components below may want to change it. It is common to use a reducer together with context to manage complex state and pass it down to distant components without too much hassle.",
                                "Context is not limited to static values. If you pass a different value on the next render, React will update all the components reading it below! This is why context is often used in combination with state.",
                                "In general, if some information is needed by distant components in different parts of the tree, it’s a good indication that context will help you.",
                                "Recap\nContext lets a component provide some information to the entire tree below it.\nTo pass context:\n\nCreate and export it with export const MyContext = createContext(defaultValue).\nPass it to the useContext(MyContext) Hook to read it in any child component, no matter how deep.\nWrap children into <MyContext.Provider value={...}> to provide it from a parent.\n\n\nContext passes through any components in the middle.\nContext lets you write components that “adapt to their surroundings”.\nBefore you use context, try passing props or passing JSX as children.\n",
                                {
                                    "code_example": "imageSize"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Scaling Up with Reducer and Context",
                    "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
                    "content": [
                        "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.",
                        "You will learn\nHow to combine a reducer with context\nHow to avoid passing state and dispatch through props\nHow to keep context and state logic in a separate file\n",
                        {
                            "sub_header": "Combining a reducer with context ",
                            "content": [
                                "In this example from the introduction to reducers, the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file:",
                                {
                                    "code_sandbox": "AddTask.jsTaskList.jsimport { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(    tasksReducer,    initialTasks  );  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId    });  }  return (    <>      <h1>Day off in Kyoto</h1>      <AddTask        onAddTask={handleAddTask}      />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [...tasks, {        id: action.id,        text: action.text,        done: false      }];    }    case 'changed': {      return tasks.map(t => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter(t => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}let nextId = 3;const initialTasks = [  { id: 0, text: 'Philosopher’s Path', done: true },  { id: 1, text: 'Visit the temple', done: false },  { id: 2, text: 'Drink matcha', done: false }];"
                                },
                                "A reducer helps keep the event handlers short and concise. However, as your app grows, you might run into another difficulty. Currently, the tasks state and the dispatch function are only available in the top-level TaskApp component. To let other components read the list of tasks or change it, you have to explicitly pass down the current state and the event handlers that change it as props.",
                                "For example, TaskApp passes a list of tasks and the event handlers to TaskList:",
                                {
                                    "code_example": "<TaskList  tasks={tasks}  onChangeTask={handleChangeTask}  onDeleteTask={handleDeleteTask}/>"
                                },
                                "And TaskList passes the event handlers to Task:",
                                {
                                    "code_example": "<Task  task={task}  onChange={onChangeTask}  onDelete={onDeleteTask}/>"
                                },
                                "In a small example like this, this works well, but if you have tens or hundreds of components in the middle, passing down all state and functions can be quite frustrating!",
                                "This is why, as an alternative to passing them through props, you might want to put both the tasks state and the dispatch function into context. This way, any component below TaskApp in the tree can read the tasks and dispatch actions without the repetitive “prop drilling”.",
                                "Here is how you can combine a reducer with context:",
                                "  1.Create the context.",
                                "  2.Put state and dispatch into context.",
                                "  3.Use context anywhere in the tree.",
                                {
                                    "sub_header": "Step 1: Create the context ",
                                    "content": [
                                        "The useReducer Hook returns the current tasks and the dispatch function that lets you update them:",
                                        {
                                            "code_example": "const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);"
                                        },
                                        "To pass them down the tree, you will create two separate contexts:",
                                        "  1.TasksContext provides the current list of tasks.",
                                        "  2.TasksDispatchContext provides the function that lets components dispatch actions.",
                                        "Export them from a separate file so that you can later import them from other files:",
                                        {
                                            "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsTasksContext.jsimport { createContext } from 'react';export const TasksContext = createContext(null);export const TasksDispatchContext = createContext(null);"
                                        },
                                        "Here, you’re passing null as the default value to both contexts. The actual values will be provided by the TaskApp component."
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Put state and dispatch into context ",
                                    "content": [
                                        "Now you can import both contexts in your TaskApp component. Take the tasks and dispatch returned by useReducer() and provide them to the entire tree below:",
                                        {
                                            "code_example": "import { TasksContext, TasksDispatchContext } from './TasksContext.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);  // ...  return (    <TasksContext.Provider value={tasks}>      <TasksDispatchContext.Provider value={dispatch}>        ...      </TasksDispatchContext.Provider>    </TasksContext.Provider>  );}"
                                        },
                                        "For now, you pass the information both via props and in context:",
                                        {
                                            "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsimport { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';import { TasksContext, TasksDispatchContext } from './TasksContext.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(    tasksReducer,    initialTasks  );  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId    });  }  return (    <TasksContext.Provider value={tasks}>      <TasksDispatchContext.Provider value={dispatch}>        <h1>Day off in Kyoto</h1>        <AddTask          onAddTask={handleAddTask}        />        <TaskList          tasks={tasks}          onChangeTask={handleChangeTask}          onDeleteTask={handleDeleteTask}        />      </TasksDispatchContext.Provider>    </TasksContext.Provider>  );}function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [...tasks, {        id: action.id,        text: action.text,        done: false      }];    }    case 'changed': {      return tasks.map(t => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter(t => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}let nextId = 3;const initialTasks = [  { id: 0, text: 'Philosopher’s Path', done: true },  { id: 1, text: 'Visit the temple', done: false },  { id: 2, text: 'Drink matcha', done: false }];"
                                        },
                                        "In the next step, you will remove prop passing."
                                    ]
                                },
                                {
                                    "sub_header": "Step 3: Use context anywhere in the tree ",
                                    "content": [
                                        "Now you don’t need to pass the list of tasks or the event handlers down the tree:",
                                        {
                                            "code_example": "<TasksContext.Provider value={tasks}>  <TasksDispatchContext.Provider value={dispatch}>    <h1>Day off in Kyoto</h1>    <AddTask />    <TaskList />  </TasksDispatchContext.Provider></TasksContext.Provider>"
                                        },
                                        "Instead, any component that needs the task list can read it from the TaskContext:",
                                        {
                                            "code_example": "export default function TaskList() {  const tasks = useContext(TasksContext);  // ..."
                                        },
                                        "To update the task list, any component can read the dispatch function from context and call it:",
                                        {
                                            "code_example": "export default function AddTask() {  const [text, setText] = useState('');  const dispatch = useContext(TasksDispatchContext);  // ...  return (    // ...    <button onClick={() => {      setText('');      dispatch({        type: 'added',        id: nextId++,        text: text,      });    }}>Add</button>    // ..."
                                        },
                                        "The TaskApp component does not pass any event handlers down, and the TaskList does not pass any event handlers to the Task component either. Each component reads the context that it needs:",
                                        {
                                            "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsTaskList.jsimport { useState, useContext } from 'react';import { TasksContext, TasksDispatchContext } from './TasksContext.js';export default function TaskList() {  const tasks = useContext(TasksContext);  return (    <ul>      {tasks.map(task => (        <li key={task.id}>          <Task task={task} />        </li>      ))}    </ul>  );}function Task({ task }) {  const [isEditing, setIsEditing] = useState(false);  const dispatch = useContext(TasksDispatchContext);  let taskContent;  if (isEditing) {    taskContent = (      <>        <input          value={task.text}          onChange={e => {            dispatch({              type: 'changed',              task: {                ...task,                text: e.target.value              }            });          }} />        <button onClick={() => setIsEditing(false)}>          Save        </button>      </>    );  } else {    taskContent = (      <>        {task.text}        <button onClick={() => setIsEditing(true)}>          Edit        </button>      </>    );  }  return (    <label>      <input        type=\"checkbox\"        checked={task.done}        onChange={e => {          dispatch({            type: 'changed',            task: {              ...task,              done: e.target.checked            }          });        }}      />      {taskContent}      <button onClick={() => {        dispatch({          type: 'deleted',          id: task.id        });      }}>        Delete      </button>    </label>  );}"
                                        },
                                        "The state still “lives” in the top-level TaskApp component, managed with useReducer. But its tasks and dispatch are now available to every component below in the tree by importing and using these contexts."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Moving all wiring into a single file ",
                            "content": [
                                "You don’t have to do this, but you could further declutter the components by moving both reducer and context into a single file. Currently, TasksContext.js contains only two context declarations:",
                                {
                                    "code_example": "import { createContext } from 'react';export const TasksContext = createContext(null);export const TasksDispatchContext = createContext(null);"
                                },
                                "This file is about to get crowded! You’ll move the reducer into that same file. Then you’ll declare a new TasksProvider component in the same file. This component will tie all the pieces together:",
                                "  1.It will manage the state with a reducer.",
                                "  2.It will provide both contexts to components below.",
                                "  3.It will take children as a prop so you can pass JSX to it.",
                                {
                                    "code_example": "export function TasksProvider({ children }) {  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);  return (    <TasksContext.Provider value={tasks}>      <TasksDispatchContext.Provider value={dispatch}>        {children}      </TasksDispatchContext.Provider>    </TasksContext.Provider>  );}"
                                },
                                "This removes all the complexity and wiring from your TaskApp component:",
                                {
                                    "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsimport AddTask from './AddTask.js';import TaskList from './TaskList.js';import { TasksProvider } from './TasksContext.js';export default function TaskApp() {  return (    <TasksProvider>      <h1>Day off in Kyoto</h1>      <AddTask />      <TaskList />    </TasksProvider>  );}"
                                },
                                "You can also export functions that use the context from TasksContext.js:",
                                {
                                    "code_example": "export function useTasks() {  return useContext(TasksContext);}export function useTasksDispatch() {  return useContext(TasksDispatchContext);}"
                                },
                                "When a component needs to read context, it can do it through these functions:",
                                {
                                    "code_example": "const tasks = useTasks();const dispatch = useTasksDispatch();"
                                },
                                "This doesn’t change the behavior in any way, but it lets you later split these contexts further or add some logic to these functions. Now all of the context and reducer wiring is in TasksContext.js. This keeps the components clean and uncluttered, focused on what they display rather than where they get the data:",
                                {
                                    "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsTaskList.jsimport { useState } from 'react';import { useTasks, useTasksDispatch } from './TasksContext.js';export default function TaskList() {  const tasks = useTasks();  return (    <ul>      {tasks.map(task => (        <li key={task.id}>          <Task task={task} />        </li>      ))}    </ul>  );}function Task({ task }) {  const [isEditing, setIsEditing] = useState(false);  const dispatch = useTasksDispatch();  let taskContent;  if (isEditing) {    taskContent = (      <>        <input          value={task.text}          onChange={e => {            dispatch({              type: 'changed',              task: {                ...task,                text: e.target.value              }            });          }} />        <button onClick={() => setIsEditing(false)}>          Save        </button>      </>    );  } else {    taskContent = (      <>        {task.text}        <button onClick={() => setIsEditing(true)}>          Edit        </button>      </>    );  }  return (    <label>      <input        type=\"checkbox\"        checked={task.done}        onChange={e => {          dispatch({            type: 'changed',            task: {              ...task,              done: e.target.checked            }          });        }}      />      {taskContent}      <button onClick={() => {        dispatch({          type: 'deleted',          id: task.id        });      }}>        Delete      </button>    </label>  );}"
                                },
                                "You can think of TasksProvider as a part of the screen that knows how to deal with tasks, useTasks as a way to read them, and useTasksDispatch as a way to update them from any component below in the tree.",
                                {
                                    "code_example": "useTasks"
                                },
                                "As your app grows, you may have many context-reducer pairs like this. This is a powerful way to scale your app and lift state up without too much work whenever you want to access the data deep in the tree.",
                                "Recap\nYou can combine reducer with context to let any component read and update state above it.\nTo provide state and the dispatch function to components below:\n\nCreate two contexts (for state and for dispatch functions).\nProvide both contexts from the component that uses the reducer.\nUse either context from components that need to read them.\n\n\nYou can further declutter the components by moving all wiring into one file.\n\nYou can export a component like TasksProvider that provides context.\nYou can also export custom Hooks like useTasks and useTasksDispatch to read it.\n\n\nYou can have many context-reducer pairs like this in your app.\n"
                            ]
                        }
                    ]
                }
            ]
        },
        {
            "title": "Escape Hatches",
            "source": "react",
            "url": "https://react.dev/learn/escape-hatches",
            "sections": [
                "Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.",
                "In this chapter\nHow to “remember” information without re-rendering\nHow to access DOM elements managed by React\nHow to synchronize components with external systems\nHow to remove unnecessary Effects from your components\nHow an Effect’s lifecycle is different from a component’s\nHow to prevent some values from re-triggering Effects\nHow to make your Effect re-run less often\nHow to share logic between components\n",
                {
                    "subHeader": "Referencing values with refs ",
                    "url": "https://react.dev/learn/escape-hatches/#referencing-values-with-refs",
                    "sections": [
                        "When you want a component to “remember” some information, but you don’t want that information to trigger new renders, you can use a ref:",
                        {
                            "code_example": "const ref = useRef(0);"
                        },
                        "Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the ref.current property.",
                        {
                            "code_sandbox": "import { useRef } from 'react';export default function Counter() {  let ref = useRef(0);  function handleClick() {    ref.current = ref.current + 1;    alert('You clicked ' + ref.current + ' times!');  }  return (    <button onClick={handleClick}>      Click me!    </button>  );}"
                        },
                        "A ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store timeout IDs, DOM elements, and other objects that don’t impact the component’s rendering output.",
                        "Ready to learn this topic?Read Referencing Values with Refs to learn how to use refs to remember information.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Manipulating the DOM with refs ",
                    "url": "https://react.dev/learn/escape-hatches/#manipulating-the-dom-with-refs",
                    "sections": [
                        "React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:",
                        {
                            "code_sandbox": "import { useRef } from 'react';export default function Form() {  const inputRef = useRef(null);  function handleClick() {    inputRef.current.focus();  }  return (    <>      <input ref={inputRef} />      <button onClick={handleClick}>        Focus the input      </button>    </>  );}"
                        },
                        "Ready to learn this topic?Read Manipulating the DOM with Refs to learn how to access DOM elements managed by React.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Synchronizing with Effects ",
                    "url": "https://react.dev/learn/escape-hatches/#synchronizing-with-effects",
                    "sections": [
                        "Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, Effects let you run some code after rendering. Use them to synchronize your component with a system outside of React.",
                        "Press Play/Pause a few times and see how the video player stays synchronized to the isPlaying prop value:",
                        {
                            "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  }, [isPlaying]);  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  return (    <>      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                        },
                        "Many Effects also “clean up” after themselves. For example, an Effect that sets up a connection to a chat server should return a cleanup function that tells React how to disconnect your component from that server:",
                        {
                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';export default function ChatRoom() {  useEffect(() => {    const connection = createConnection();    connection.connect();    return () => connection.disconnect();  }, []);  return <h1>Welcome to the chat!</h1>;}"
                        },
                        "In development, React will immediately run and clean up your Effect one extra time. This is why you see \"✅ Connecting...\" printed twice. This ensures that you don’t forget to implement the cleanup function.",
                        "Ready to learn this topic?Read Synchronizing with Effects to learn how to synchronize components with external systems.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "You Might Not Need An Effect ",
                    "url": "https://react.dev/learn/escape-hatches/#you-might-not-need-an-effect",
                    "sections": [
                        "Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.",
                        "There are two common cases in which you don’t need Effects:",
                        "  1.You don’t need Effects to transform data for rendering.",
                        "  2.You don’t need Effects to handle user events.",
                        "For example, you don’t need an Effect to adjust some state based on other state:",
                        {
                            "code_example": "function Form() {  const [firstName, setFirstName] = useState('Taylor');  const [lastName, setLastName] = useState('Swift');  // 🔴 Avoid: redundant state and unnecessary Effect  const [fullName, setFullName] = useState('');  useEffect(() => {    setFullName(firstName + ' ' + lastName);  }, [firstName, lastName]);  // ...}"
                        },
                        "Instead, calculate as much as you can while rendering:",
                        {
                            "code_example": "function Form() {  const [firstName, setFirstName] = useState('Taylor');  const [lastName, setLastName] = useState('Swift');  // ✅ Good: calculated during rendering  const fullName = firstName + ' ' + lastName;  // ...}"
                        },
                        "However, you do need Effects to synchronize with external systems.",
                        "Ready to learn this topic?Read You Might Not Need an Effect to learn how to remove unnecessary Effects.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Lifecycle of reactive effects ",
                    "url": "https://react.dev/learn/escape-hatches/#lifecycle-of-reactive-effects",
                    "sections": [
                        "Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.",
                        "This Effect depends on the value of the roomId prop. Props are reactive values, which means they can change on a re-render. Notice that the Effect re-synchronizes (and re-connects to the server) if roomId changes:",
                        {
                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                        },
                        "React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. If you forget to specify roomId in the list of dependencies in the above example, the linter will find that bug automatically.",
                        "Ready to learn this topic?Read Lifecycle of Reactive Events to learn how an Effect’s lifecycle is different from a component’s.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Separating events from Effects ",
                    "url": "https://react.dev/learn/escape-hatches/#separating-events-from-effects",
                    "sections": [
                        "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                        "Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.",
                        "All code inside Effects is reactive. It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either roomId or theme have changed:",
                        {
                            "code_sandbox": "chat.jsnotifications.jsimport { useState, useEffect } from 'react';import { createConnection, sendMessage } from './chat.js';import { showNotification } from './notifications.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId, theme }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      showNotification('Connected!', theme);    });    connection.connect();    return () => connection.disconnect();  }, [roomId, theme]);  return <h1>Welcome to the {roomId} room!</h1>}export default function App() {  const [roomId, setRoomId] = useState('general');  const [isDark, setIsDark] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <label>        <input          type=\"checkbox\"          checked={isDark}          onChange={e => setIsDark(e.target.checked)}        />        Use dark theme      </label>      <hr />      <ChatRoom        roomId={roomId}        theme={isDark ? 'dark' : 'light'}       />    </>  );}"
                        },
                        "This is not ideal. You want to re-connect to the chat only if the roomId has changed. Switching the theme shouldn’t re-connect to the chat! Move the code reading theme out of your Effect into an Effect Event:",
                        {
                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { experimental_useEffectEvent as useEffectEvent } from 'react';import { createConnection, sendMessage } from './chat.js';import { showNotification } from './notifications.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId, theme }) {  const onConnected = useEffectEvent(() => {    showNotification('Connected!', theme);  });  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      onConnected();    });    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>}export default function App() {  const [roomId, setRoomId] = useState('general');  const [isDark, setIsDark] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <label>        <input          type=\"checkbox\"          checked={isDark}          onChange={e => setIsDark(e.target.checked)}        />        Use dark theme      </label>      <hr />      <ChatRoom        roomId={roomId}        theme={isDark ? 'dark' : 'light'}       />    </>  );}"
                        },
                        "Code inside Effect Events isn’t reactive, so changing the theme no longer makes your Effect re-connect.",
                        "Ready to learn this topic?Read Separating Events from Effects to learn how to prevent some values from re-triggering Effects.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Removing Effect dependencies ",
                    "url": "https://react.dev/learn/escape-hatches/#removing-effect-dependencies",
                    "sections": [
                        "When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.",
                        "For example, this Effect depends on the options object which gets re-created every time you edit the input:",
                        {
                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  const options = {    serverUrl: serverUrl,    roomId: roomId  };  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [options]);  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                        },
                        "You don’t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the options object inside the Effect so that the Effect only depends on the roomId string:",
                        {
                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                        },
                        "Notice that you didn’t start by editing the dependency list to remove the options dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became unnecessary. Think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.",
                        "Ready to learn this topic?Read Removing Effect Dependencies to learn how to make your Effect re-run less often.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "Reusing logic with custom Hooks ",
                    "url": "https://react.dev/learn/escape-hatches/#reusing-logic-with-custom-hooks",
                    "sections": [
                        "React comes with built-in Hooks like useState, useContext, and useEffect. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.",
                        "In this example, the usePointerPosition custom Hook tracks the cursor position, while useDelayedValue custom Hook returns a value that’s “lagging behind” the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:",
                        {
                            "code_sandbox": "usePointerPosition.jsuseDelayedValue.jsimport { usePointerPosition } from './usePointerPosition.js';import { useDelayedValue } from './useDelayedValue.js';export default function Canvas() {  const pos1 = usePointerPosition();  const pos2 = useDelayedValue(pos1, 100);  const pos3 = useDelayedValue(pos2, 200);  const pos4 = useDelayedValue(pos3, 100);  const pos5 = useDelayedValue(pos4, 50);  return (    <>      <Dot position={pos1} opacity={1} />      <Dot position={pos2} opacity={0.8} />      <Dot position={pos3} opacity={0.6} />      <Dot position={pos4} opacity={0.4} />      <Dot position={pos5} opacity={0.2} />    </>  );}function Dot({ position, opacity }) {  return (    <div style={{      position: 'absolute',      backgroundColor: 'pink',      borderRadius: '50%',      opacity,      transform: `translate(${position.x}px, ${position.y}px)`,      pointerEvents: 'none',      left: -20,      top: -20,      width: 40,      height: 40,    }} />  );}"
                        },
                        "You can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you’ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.",
                        "Ready to learn this topic?Read Reusing Logic with Custom Hooks to learn how to share logic between components.Read More",
                        ""
                    ]
                },
                {
                    "subHeader": "What’s next? ",
                    "url": "https://react.dev/learn/escape-hatches/#whats-next",
                    "sections": [
                        "Head over to Referencing Values with Refs to start reading this chapter page by page!"
                    ]
                }
            ],
            "subTopics": [
                {
                    "headers": "Referencing Values with Refs",
                    "url": "https://react.dev/learn/referencing-values-with-refs",
                    "content": [
                        "When you want a component to “remember” some information, but you don’t want that information to trigger new renders, you can use a ref.",
                        "You will learn\nHow to add a ref to your component\nHow to update a ref’s value\nHow refs are different from state\nHow to use refs safely\n",
                        {
                            "sub_header": "Adding a ref to your component ",
                            "content": [
                                "You can add a ref to your component by importing the useRef Hook from React:",
                                {
                                    "code_example": "import { useRef } from 'react';"
                                },
                                "Inside your component, call the useRef Hook and pass the initial value that you want to reference as the only argument. For example, here is a ref to the value 0:",
                                {
                                    "code_example": "const ref = useRef(0);"
                                },
                                "useRef returns an object like this:",
                                {
                                    "code_example": "{   current: 0 // The value you passed to useRef}"
                                },
                                "",
                                "Illustrated by Rachel Lee Nabors",
                                "You can access the current value of that ref through the ref.current property. This value is intentionally mutable, meaning you can both read and write to it. It’s like a secret pocket of your component that React doesn’t track. (This is what makes it an “escape hatch” from React’s one-way data flow—more on that below!)",
                                "Here, a button will increment ref.current on every click:",
                                {
                                    "code_sandbox": "import { useRef } from 'react';export default function Counter() {  let ref = useRef(0);  function handleClick() {    ref.current = ref.current + 1;    alert('You clicked ' + ref.current + ' times!');  }  return (    <button onClick={handleClick}>      Click me!    </button>  );}"
                                },
                                "The ref points to a number, but, like state, you could point to anything: a string, an object, or even a function. Unlike state, ref is a plain JavaScript object with the current property that you can read and modify.",
                                "Note that the component doesn’t re-render with every increment. Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not!"
                            ]
                        },
                        {
                            "sub_header": "Example: building a stopwatch ",
                            "content": [
                                "You can combine refs and state in a single component. For example, let’s make a stopwatch that the user can start or stop by pressing a button. In order to display how much time has passed since the user pressed “Start”, you will need to keep track of when the Start button was pressed and what the current time is. This information is used for rendering, so you’ll keep it in state:",
                                {
                                    "code_example": "const [startTime, setStartTime] = useState(null);const [now, setNow] = useState(null);"
                                },
                                "When the user presses “Start”, you’ll use setInterval in order to update the time every 10 milliseconds:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Stopwatch() {  const [startTime, setStartTime] = useState(null);  const [now, setNow] = useState(null);  function handleStart() {    // Start counting.    setStartTime(Date.now());    setNow(Date.now());    setInterval(() => {      // Update the current time every 10ms.      setNow(Date.now());    }, 10);  }  let secondsPassed = 0;  if (startTime != null && now != null) {    secondsPassed = (now - startTime) / 1000;  }  return (    <>      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>      <button onClick={handleStart}>        Start      </button>    </>  );}"
                                },
                                "When the “Stop” button is pressed, you need to cancel the existing interval so that it stops updating the now state variable. You can do this by calling clearInterval, but you need to give it the interval ID that was previously returned by the setInterval call when the user pressed Start. You need to keep the interval ID somewhere. Since the interval ID is not used for rendering, you can keep it in a ref:",
                                {
                                    "code_sandbox": "import { useState, useRef } from 'react';export default function Stopwatch() {  const [startTime, setStartTime] = useState(null);  const [now, setNow] = useState(null);  const intervalRef = useRef(null);  function handleStart() {    setStartTime(Date.now());    setNow(Date.now());    clearInterval(intervalRef.current);    intervalRef.current = setInterval(() => {      setNow(Date.now());    }, 10);  }  function handleStop() {    clearInterval(intervalRef.current);  }  let secondsPassed = 0;  if (startTime != null && now != null) {    secondsPassed = (now - startTime) / 1000;  }  return (    <>      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>      <button onClick={handleStart}>        Start      </button>      <button onClick={handleStop}>        Stop      </button>    </>  );}"
                                },
                                "When a piece of information is used for rendering, keep it in state. When a piece of information is only needed by event handlers and changing it doesn’t require a re-render, using a ref may be more efficient."
                            ]
                        },
                        {
                            "sub_header": "Differences between refs and state ",
                            "content": [
                                "Perhaps you’re thinking refs seem less “strict” than state—you can mutate them instead of always having to use a state setting function, for instance. But in most cases, you’ll want to use state. Refs are an “escape hatch” you won’t need often. Here’s how state and refs compare:",
                                "refsstateuseRef(initialValue) returns { current: initialValue }useState(initialValue) returns the current value of a state variable and a state setter function ( [value, setValue])Doesn’t trigger re-render when you change it.Triggers re-render when you change it.Mutable—you can modify and update current’s value outside of the rendering process.”Immutable”—you must use the state setting function to modify state variables to queue a re-render.You shouldn’t read (or write) the current value during rendering.You can read state at any time. However, each render has its own snapshot of state which does not change.",
                                "Here is a counter button that’s implemented with state:",
                                {
                                    "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <button onClick={handleClick}>      You clicked {count} times    </button>  );}"
                                },
                                "Because the count value is displayed, it makes sense to use a state value for it. When the counter’s value is set with setCount(), React re-renders the component and the screen updates to reflect the new count.",
                                "If you tried to implement this with a ref, React would never re-render the component, so you’d never see the count change! See how clicking this button does not update its text:",
                                {
                                    "code_sandbox": "import { useRef } from 'react';export default function Counter() {  let countRef = useRef(0);  function handleClick() {    // This doesn't re-render the component!    countRef.current = countRef.current + 1;  }  return (    <button onClick={handleClick}>      You clicked {countRef.current} times    </button>  );}"
                                },
                                "This is why reading ref.current during render leads to unreliable code. If you need that, use state instead.",
                                "Deep DiveHow does useRef work inside? Show DetailsAlthough both useState and useRef are provided by React, in principle useRef could be implemented on top of useState. You can imagine that inside of React, useRef is implemented like this:// Inside of Reactfunction useRef(initialValue) {  const [ref, unused] = useState({ current: initialValue });  return ref;}During the first render, useRef returns { current: initialValue }. This object is stored by React, so during the next render the same object will be returned. Note how the state setter is unused in this example. It is unnecessary because useRef always needs to return the same object!React provides a built-in version of useRef because it is common enough in practice. But you can think of it as a regular state variable without a setter. If you’re familiar with object-oriented programming, refs might remind you of instance fields—but instead of this.something you write somethingRef.current."
                            ]
                        },
                        {
                            "sub_header": "When to use refs ",
                            "content": [
                                "Typically, you will use a ref when your component needs to “step outside” React and communicate with external APIs—often a browser API that won’t impact the appearance of the component. Here are a few of these rare situations:",
                                "  1.Storing timeout IDs",
                                "  2.Storing and manipulating DOM elements, which we cover on the next page",
                                "  3.Storing other objects that aren’t necessary to calculate the JSX.",
                                "If your component needs to store some value, but it doesn’t impact the rendering logic, choose refs."
                            ]
                        },
                        {
                            "sub_header": "Best practices for refs ",
                            "content": [
                                "Following these principles will make your components more predictable:",
                                "  1.Treat refs as an escape hatch. Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.",
                                "  2.Don’t read or write ref.current during rendering. If some information is needed during rendering, use state instead. Since React doesn’t know when ref.current changes, even reading it while rendering makes your component’s behavior difficult to predict. (The only exception to this is code like if (!ref.current) ref.current = new Thing() which only sets the ref once during the first render.)",
                                "Limitations of React state don’t apply to refs. For example, state acts like a snapshot for every render and doesn’t update synchronously. But when you mutate the current value of a ref, it changes immediately:",
                                {
                                    "code_example": "ref.current = 5;console.log(ref.current); // 5"
                                },
                                "This is because the ref itself is a regular JavaScript object, and so it behaves like one.",
                                "You also don’t need to worry about avoiding mutation when you work with a ref. As long as the object you’re mutating isn’t used for rendering, React doesn’t care what you do with the ref or its contents."
                            ]
                        },
                        {
                            "sub_header": "Refs and the DOM ",
                            "content": [
                                "You can point a ref to any value. However, the most common use case for a ref is to access a DOM element. For example, this is handy if you want to focus an input programmatically. When you pass a ref to a ref attribute in JSX, like <div ref={myRef}>, React will put the corresponding DOM element into myRef.current. Once the element is removed from the DOM, React will update myRef.current to be null. You can read more about this in Manipulating the DOM with Refs.",
                                "Recap\nRefs are an escape hatch to hold onto values that aren’t used for rendering. You won’t need them often.\nA ref is a plain JavaScript object with a single property called current, which you can read or set.\nYou can ask React to give you a ref by calling the useRef Hook.\nLike state, refs let you retain information between re-renders of a component.\nUnlike state, setting the ref’s current value does not trigger a re-render.\nDon’t read or write ref.current during rendering. This makes your component hard to predict.\n",
                                {
                                    "code_example": "clearTimeout"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Manipulating the DOM with Refs",
                    "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
                    "content": [
                        "React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node.",
                        {
                            "code_example": "ref"
                        },
                        {
                            "sub_header": "Getting a ref to the node ",
                            "content": [
                                "To access a DOM node managed by React, first, import the useRef Hook:",
                                {
                                    "code_example": "import { useRef } from 'react';"
                                },
                                "Then, use it to declare a ref inside your component:",
                                {
                                    "code_example": "const myRef = useRef(null);"
                                },
                                "Finally, pass your ref as the ref attribute to the JSX tag for which you want to get the DOM node:",
                                {
                                    "code_example": "<div ref={myRef}>"
                                },
                                "The useRef Hook returns an object with a single property called current. Initially, myRef.current will be null. When React creates a DOM node for this <div>, React will put a reference to this node into myRef.current. You can then access this DOM node from your event handlers and use the built-in browser APIs defined on it.",
                                {
                                    "code_example": "// You can use any browser APIs, for example:myRef.current.scrollIntoView();"
                                },
                                {
                                    "sub_header": "Example: Focusing a text input ",
                                    "content": [
                                        "In this example, clicking the button will focus the input:",
                                        {
                                            "code_sandbox": "import { useRef } from 'react';export default function Form() {  const inputRef = useRef(null);  function handleClick() {    inputRef.current.focus();  }  return (    <>      <input ref={inputRef} />      <button onClick={handleClick}>        Focus the input      </button>    </>  );}"
                                        },
                                        "To implement this:",
                                        "  1.Declare inputRef with the useRef Hook.",
                                        "  2.Pass it as <input ref={inputRef}>. This tells React to put this <input>’s DOM node into inputRef.current.",
                                        "  3.In the handleClick function, read the input DOM node from inputRef.current and call focus() on it with inputRef.current.focus().",
                                        "  4.Pass the handleClick event handler to <button> with onClick.",
                                        "While DOM manipulation is the most common use case for refs, the useRef Hook can be used for storing other things outside React, like timer IDs. Similarly to state, refs remain between renders. Refs are like state variables that don’t trigger re-renders when you set them. Read about refs in Referencing Values with Refs."
                                    ]
                                },
                                {
                                    "sub_header": "Example: Scrolling to an element ",
                                    "content": [
                                        "You can have more than a single ref in a component. In this example, there is a carousel of three images. Each button centers an image by calling the browser scrollIntoView() method on the corresponding DOM node:",
                                        {
                                            "code_sandbox": "import { useRef } from 'react';export default function CatFriends() {  const firstCatRef = useRef(null);  const secondCatRef = useRef(null);  const thirdCatRef = useRef(null);  function handleScrollToFirstCat() {    firstCatRef.current.scrollIntoView({      behavior: 'smooth',      block: 'nearest',      inline: 'center'    });  }  function handleScrollToSecondCat() {    secondCatRef.current.scrollIntoView({      behavior: 'smooth',      block: 'nearest',      inline: 'center'    });  }  function handleScrollToThirdCat() {    thirdCatRef.current.scrollIntoView({      behavior: 'smooth',      block: 'nearest',      inline: 'center'    });  }  return (    <>      <nav>        <button onClick={handleScrollToFirstCat}>          Neo        </button>        <button onClick={handleScrollToSecondCat}>          Millie        </button>        <button onClick={handleScrollToThirdCat}>          Bella        </button>      </nav>      <div>        <ul>          <li>            <img              src=\"https://placecats.com/neo/300/200\"              alt=\"Neo\"              ref={firstCatRef}            />          </li>          <li>            <img              src=\"https://placecats.com/millie/200/200\"              alt=\"Millie\"              ref={secondCatRef}            />          </li>          <li>            <img              src=\"https://placecats.com/bella/199/200\"              alt=\"Bella\"              ref={thirdCatRef}            />          </li>        </ul>      </div>    </>  );}"
                                        },
                                        "Deep DiveHow to manage a list of refs using a ref callback Show DetailsIn the above examples, there is a predefined number of refs. However, sometimes you might need a ref to each item in the list, and you don’t know how many you will have. Something like this wouldn’t work:<ul>  {items.map((item) => {    // Doesn't work!    const ref = useRef(null);    return <li ref={ref} />;  })}</ul>This is because Hooks must only be called at the top-level of your component. You can’t call useRef in a loop, in a condition, or inside a map() call.One possible way around this is to get a single ref to their parent element, and then use DOM manipulation methods like querySelectorAll to “find” the individual child nodes from it. However, this is brittle and can break if your DOM structure changes.Another solution is to pass a function to the ref attribute. This is called a ref callback. React will call your ref callback with the DOM node when it’s time to set the ref, and with null when it’s time to clear it. This lets you maintain your own array or a Map, and access any ref by its index or some kind of ID.This example shows how you can use this approach to scroll to an arbitrary node in a long list:App.jsApp.js ResetForkimport { useRef, useState } from \"react\";\n\nexport default function CatFriends() {\n  const itemsRef = useRef(null);\n  const [catList, setCatList] = useState(setupCatList);\n\n  function scrollToCat(cat) {\n    const map = getMap();\n    const node = map.get(cat);\n    node.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"center\",\n    });\n  }\n\n  function getMap() {\n    if (!itemsRef.current) {\n      // Initialize the Map on first usage.\n      itemsRef.current = new Map();\n    }\n    return itemsRef.current;\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={() => scrollToCat(catList[0])}>Neo</button>\n        <button onClick={() => scrollToCat(catList[5])}>Millie</button>\n        <button onClick={() => scrollToCat(catList[9])}>Bella</button>\n      </nav>\n      <div>\n        <ul>\n          {catList.map((cat) => (\n            <li\n              key={cat}\n              ref={(node) => {\n                const map = getMap();\n                if (node) {\n                  map.set(cat, node);\n                } else {\n                  map.delete(cat);\n                }\n              }}\n            >\n              <img src={cat} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nfunction setupCatList() {\n  const catList = [];\n  for (let i = 0; i < 10; i++) {\n    catList.push(\"https://loremflickr.com/320/240/cat?lock=\" + i);\n  }\n\n  return catList;\n}\n\nShow moreIn this example, itemsRef doesn’t hold a single DOM node. Instead, it holds a Map from item ID to a DOM node. (Refs can hold any values!) The ref callback on every list item takes care to update the Map:<li  key={cat.id}  ref={node => {    const map = getMap();    if (node) {      // Add to the Map      map.set(cat, node);    } else {      // Remove from the Map      map.delete(cat);    }  }}>This lets you read individual DOM nodes from the Map later.CanaryThis example shows another approach for managing the Map with a ref callback cleanup function.<li  key={cat.id}  ref={node => {    const map = getMap();    // Add to the Map    map.set(cat, node);    return () => {      // Remove from the Map      map.delete(cat);    };  }}>"
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Accessing another component’s DOM nodes ",
                            "content": [
                                "When you put a ref on a built-in component that outputs a browser element like <input />, React will set that ref’s current property to the corresponding DOM node (such as the actual <input /> in the browser).",
                                "However, if you try to put a ref on your own component, like <MyInput />, by default you will get null. Here is an example demonstrating it. Notice how clicking the button does not focus the input:",
                                {
                                    "code_sandbox": "import { useRef } from 'react';function MyInput(props) {  return <input {...props} />;}export default function MyForm() {  const inputRef = useRef(null);  function handleClick() {    inputRef.current.focus();  }  return (    <>      <MyInput ref={inputRef} />      <button onClick={handleClick}>        Focus the input      </button>    </>  );}"
                                },
                                "To help you notice the issue, React also prints an error to the console:",
                                "ConsoleWarning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?",
                                "This happens because by default React does not let a component access the DOM nodes of other components. Not even for its own children! This is intentional. Refs are an escape hatch that should be used sparingly. Manually manipulating another component’s DOM nodes makes your code even more fragile.",
                                "Instead, components that want to expose their DOM nodes have to opt in to that behavior. A component can specify that it “forwards” its ref to one of its children. Here’s how MyInput can use the forwardRef API:",
                                {
                                    "code_example": "const MyInput = forwardRef((props, ref) => {  return <input {...props} ref={ref} />;});"
                                },
                                "This is how it works:",
                                "  1.<MyInput ref={inputRef} /> tells React to put the corresponding DOM node into inputRef.current. However, it’s up to the MyInput component to opt into that—by default, it doesn’t.",
                                "  2.The MyInput component is declared using forwardRef. This opts it into receiving the inputRef from above as the second ref argument which is declared after props.",
                                "  3.MyInput itself passes the ref it received to the <input> inside of it.",
                                "Now clicking the button to focus the input works:",
                                {
                                    "code_sandbox": "import { forwardRef, useRef } from 'react';const MyInput = forwardRef((props, ref) => {  return <input {...props} ref={ref} />;});export default function Form() {  const inputRef = useRef(null);  function handleClick() {    inputRef.current.focus();  }  return (    <>      <MyInput ref={inputRef} />      <button onClick={handleClick}>        Focus the input      </button>    </>  );}"
                                },
                                "In design systems, it is a common pattern for low-level components like buttons, inputs, and so on, to forward their refs to their DOM nodes. On the other hand, high-level components like forms, lists, or page sections usually won’t expose their DOM nodes to avoid accidental dependencies on the DOM structure.",
                                "Deep DiveExposing a subset of the API with an imperative handle Show DetailsIn the above example, MyInput exposes the original DOM input element. This lets the parent component call focus() on it. However, this also lets the parent component do something else—for example, change its CSS styles. In uncommon cases, you may want to restrict the exposed functionality. You can do that with useImperativeHandle:App.jsApp.js ResetForkimport {\n  forwardRef, \n  useRef, \n  useImperativeHandle\n} from 'react';\n\nconst MyInput = forwardRef((props, ref) => {\n  const realInputRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    // Only expose focus and nothing else\n    focus() {\n      realInputRef.current.focus();\n    },\n  }));\n  return <input {...props} ref={realInputRef} />;\n});\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <MyInput ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n\nShow moreHere, realInputRef inside MyInput holds the actual input DOM node. However, useImperativeHandle instructs React to provide your own special object as the value of a ref to the parent component. So inputRef.current inside the Form component will only have the focus method. In this case, the ref “handle” is not the DOM node, but the custom object you create inside useImperativeHandle call."
                            ]
                        },
                        {
                            "sub_header": "When React attaches the refs ",
                            "content": [
                                "In React, every update is split in two phases:",
                                "  1.During render, React calls your components to figure out what should be on the screen.",
                                "  2.During commit, React applies changes to the DOM.",
                                "In general, you don’t want to access refs during rendering. That goes for refs holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so ref.current will be null. And during the rendering of updates, the DOM nodes haven’t been updated yet. So it’s too early to read them.",
                                "React sets ref.current during the commit. Before updating the DOM, React sets the affected ref.current values to null. After updating the DOM, React immediately sets them to the corresponding DOM nodes.",
                                "Usually, you will access refs from event handlers. If you want to do something with a ref, but there is no particular event to do it in, you might need an Effect. We will discuss Effects on the next pages.",
                                "Deep DiveFlushing state updates synchronously with flushSync Show DetailsConsider code like this, which adds a new todo and scrolls the screen down to the last child of the list. Notice how, for some reason, it always scrolls to the todo that was just before the last added one:App.jsApp.js ResetForkimport { useState, useRef } from 'react';\n\nexport default function TodoList() {\n  const listRef = useRef(null);\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState(\n    initialTodos\n  );\n\n  function handleAdd() {\n    const newTodo = { id: nextId++, text: text };\n    setText('');\n    setTodos([ ...todos, newTodo]);\n    listRef.current.lastChild.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest'\n    });\n  }\n\n  return (\n    <>\n      <button onClick={handleAdd}>\n        Add\n      </button>\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <ul ref={listRef}>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nlet nextId = 0;\nlet initialTodos = [];\nfor (let i = 0; i < 20; i++) {\n  initialTodos.push({\n    id: nextId++,\n    text: 'Todo #' + (i + 1)\n  });\n}\n\nShow moreThe issue is with these two lines:setTodos([ ...todos, newTodo]);listRef.current.lastChild.scrollIntoView();In React, state updates are queued. Usually, this is what you want. However, here it causes a problem because setTodos does not immediately update the DOM. So the time you scroll the list to its last element, the todo has not yet been added. This is why scrolling always “lags behind” by one item.To fix this issue, you can force React to update (“flush”) the DOM synchronously. To do this, import flushSync from react-dom and wrap the state update into a flushSync call:flushSync(() => {  setTodos([ ...todos, newTodo]);});listRef.current.lastChild.scrollIntoView();This will instruct React to update the DOM synchronously right after the code wrapped in flushSync executes. As a result, the last todo will already be in the DOM by the time you try to scroll to it:App.jsApp.js ResetForkimport { useState, useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport default function TodoList() {\n  const listRef = useRef(null);\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState(\n    initialTodos\n  );\n\n  function handleAdd() {\n    const newTodo = { id: nextId++, text: text };\n    flushSync(() => {\n      setText('');\n      setTodos([ ...todos, newTodo]);      \n    });\n    listRef.current.lastChild.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest'\n    });\n  }\n\n  return (\n    <>\n      <button onClick={handleAdd}>\n        Add\n      </button>\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <ul ref={listRef}>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nlet nextId = 0;\nlet initialTodos = [];\nfor (let i = 0; i < 20; i++) {\n  initialTodos.push({\n    id: nextId++,\n    text: 'Todo #' + (i + 1)\n  });\n}\n\nShow more"
                            ]
                        },
                        {
                            "sub_header": "Best practices for DOM manipulation with refs ",
                            "content": [
                                "Refs are an escape hatch. You should only use them when you have to “step outside React”. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.",
                                "If you stick to non-destructive actions like focusing and scrolling, you shouldn’t encounter any problems. However, if you try to modify the DOM manually, you can risk conflicting with the changes React is making.",
                                "To illustrate this problem, this example includes a welcome message and two buttons. The first button toggles its presence using conditional rendering and state, as you would usually do in React. The second button uses the remove() DOM API to forcefully remove it from the DOM outside of React’s control.",
                                "Try pressing “Toggle with setState” a few times. The message should disappear and appear again. Then press “Remove from the DOM”. This will forcefully remove it. Finally, press “Toggle with setState”:",
                                {
                                    "code_sandbox": "import { useState, useRef } from 'react';export default function Counter() {  const [show, setShow] = useState(true);  const ref = useRef(null);  return (    <div>      <button        onClick={() => {          setShow(!show);        }}>        Toggle with setState      </button>      <button        onClick={() => {          ref.current.remove();        }}>        Remove from the DOM      </button>      {show && <p ref={ref}>Hello world</p>}    </div>  );}"
                                },
                                "After you’ve manually removed the DOM element, trying to use setState to show it again will lead to a crash. This is because you’ve changed the DOM, and React doesn’t know how to continue managing it correctly.",
                                "Avoid changing DOM nodes managed by React. Modifying, adding children to, or removing children from elements that are managed by React can lead to inconsistent visual results or crashes like above.",
                                "However, this doesn’t mean that you can’t do it at all. It requires caution. You can safely modify parts of the DOM that React has no reason to update. For example, if some <div> is always empty in the JSX, React won’t have a reason to touch its children list. Therefore, it is safe to manually add or remove elements there.",
                                "Recap\nRefs are a generic concept, but most often you’ll use them to hold DOM elements.\nYou instruct React to put a DOM node into myRef.current by passing <div ref={myRef}>.\nUsually, you will use refs for non-destructive actions like focusing, scrolling, or measuring DOM elements.\nA component doesn’t expose its DOM nodes by default. You can opt into exposing a DOM node by using forwardRef and passing the second ref argument down to a specific node.\nAvoid changing DOM nodes managed by React.\nIf you do modify DOM nodes managed by React, modify parts that React has no reason to update.\n",
                                {
                                    "code_example": "play()"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Synchronizing with Effects",
                    "url": "https://react.dev/learn/synchronizing-with-effects",
                    "content": [
                        "Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.",
                        "You will learn\nWhat Effects are\nHow Effects are different from events\nHow to declare an Effect in your component\nHow to skip re-running an Effect unnecessarily\nWhy Effects run twice in development and how to fix them\n",
                        {
                            "sub_header": "What are Effects and how are they different from events? ",
                            "content": [
                                "Before getting to Effects, you need to be familiar with two types of logic inside React components:",
                                "  1.\nRendering code (introduced in Describing the UI) lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen. Rendering code must be pure. Like a math formula, it should only calculate the result, but not do anything else.\n",
                                "  2.\nEvent handlers (introduced in Adding Interactivity) are nested functions inside your components that do things rather than just calculate them. An event handler might update an input field, submit an HTTP POST request to buy a product, or navigate the user to another screen. Event handlers contain “side effects” (they change the program’s state) caused by a specific user action (for example, a button click or typing).\n",
                                "Sometimes this isn’t enough. Consider a ChatRoom component that must connect to the chat server whenever it’s visible on the screen. Connecting to a server is not a pure calculation (it’s a side effect) so it can’t happen during rendering. However, there is no single particular event like a click that causes ChatRoom to be displayed.",
                                "Effects let you specify side effects that are caused by rendering itself, rather than by a particular event. Sending a message in the chat is an event because it is directly caused by the user clicking a specific button. However, setting up a server connection is an Effect because it should happen no matter which interaction caused the component to appear. Effects run at the end of a commit after the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library).",
                                "NoteHere and later in this text, capitalized “Effect” refers to the React-specific definition above, i.e. a side effect caused by rendering. To refer to the broader programming concept, we’ll say “side effect”."
                            ]
                        },
                        {
                            "sub_header": "You might not need an Effect ",
                            "content": [
                                "Don’t rush to add Effects to your components. Keep in mind that Effects are typically used to “step out” of your React code and synchronize with some external system. This includes browser APIs, third-party widgets, network, and so on. If your Effect only adjusts some state based on other state, you might not need an Effect."
                            ]
                        },
                        {
                            "sub_header": "How to write an Effect ",
                            "content": [
                                "To write an Effect, follow these three steps:",
                                "  1.Declare an Effect. By default, your Effect will run after every commit.",
                                "  2.Specify the Effect dependencies. Most Effects should only re-run when needed rather than after every render. For example, a fade-in animation should only trigger when a component appears. Connecting and disconnecting to a chat room should only happen when the component appears and disappears, or when the chat room changes. You will learn how to control this by specifying dependencies.",
                                "  3.Add cleanup if needed. Some Effects need to specify how to stop, undo, or clean up whatever they were doing. For example, “connect” needs “disconnect”, “subscribe” needs “unsubscribe”, and “fetch” needs either “cancel” or “ignore”. You will learn how to do this by returning a cleanup function.",
                                "Let’s look at each of these steps in detail.",
                                {
                                    "sub_header": "Step 1: Declare an Effect ",
                                    "content": [
                                        "To declare an Effect in your component, import the useEffect Hook from React:",
                                        {
                                            "code_example": "import { useEffect } from 'react';"
                                        },
                                        "Then, call it at the top level of your component and put some code inside your Effect:",
                                        {
                                            "code_example": "function MyComponent() {  useEffect(() => {    // Code here will run after *every* render  });  return <div />;}"
                                        },
                                        "Every time your component renders, React will update the screen and then run the code inside useEffect. In other words, useEffect “delays” a piece of code from running until that render is reflected on the screen.",
                                        "Let’s see how you can use an Effect to synchronize with an external system. Consider a <VideoPlayer> React component. It would be nice to control whether it’s playing or paused by passing an isPlaying prop to it:",
                                        {
                                            "code_example": "<VideoPlayer isPlaying={isPlaying} />;"
                                        },
                                        "Your custom VideoPlayer component renders the built-in browser <video> tag:",
                                        {
                                            "code_example": "function VideoPlayer({ src, isPlaying }) {  // TODO: do something with isPlaying  return <video src={src} />;}"
                                        },
                                        "However, the browser <video> tag does not have an isPlaying prop. The only way to control it is to manually call the play() and pause() methods on the DOM element. You need to synchronize the value of isPlaying prop, which tells whether the video should currently be playing, with calls like play() and pause().",
                                        "We’ll need to first get a ref to the <video> DOM node.",
                                        "You might be tempted to try to call play() or pause() during rendering, but that isn’t correct:",
                                        {
                                            "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  if (isPlaying) {    ref.current.play();  // Calling these while rendering isn't allowed.  } else {    ref.current.pause(); // Also, this crashes.  }  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  return (    <>      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                        },
                                        "The reason this code isn’t correct is that it tries to do something with the DOM node during rendering. In React, rendering should be a pure calculation of JSX and should not contain side effects like modifying the DOM.",
                                        "Moreover, when VideoPlayer is called for the first time, its DOM does not exist yet! There isn’t a DOM node yet to call play() or pause() on, because React doesn’t know what DOM to create until you return the JSX.",
                                        "The solution here is to wrap the side effect with useEffect to move it out of the rendering calculation:",
                                        {
                                            "code_example": "import { useEffect, useRef } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  });  return <video ref={ref} src={src} loop playsInline />;}"
                                        },
                                        "By wrapping the DOM update in an Effect, you let React update the screen first. Then your Effect runs.",
                                        "When your VideoPlayer component renders (either the first time or if it re-renders), a few things will happen. First, React will update the screen, ensuring the <video> tag is in the DOM with the right props. Then React will run your Effect. Finally, your Effect will call play() or pause() depending on the value of isPlaying.",
                                        "Press Play/Pause multiple times and see how the video player stays synchronized to the isPlaying value:",
                                        {
                                            "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  });  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  return (    <>      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                        },
                                        "In this example, the “external system” you synchronized to React state was the browser media API. You can use a similar approach to wrap legacy non-React code (like jQuery plugins) into declarative React components.",
                                        "Note that controlling a video player is much more complex in practice. Calling play() may fail, the user might play or pause using the built-in browser controls, and so on. This example is very simplified and incomplete.",
                                        {
                                            "code_example": "const [count, setCount] = useState(0);useEffect(() => {  setCount(count + 1);});"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Step 2: Specify the Effect dependencies ",
                                    "content": [
                                        "By default, Effects run after every render. Often, this is not what you want:",
                                        "  1.Sometimes, it’s slow. Synchronizing with an external system is not always instant, so you might want to skip doing it unless it’s necessary. For example, you don’t want to reconnect to the chat server on every keystroke.",
                                        "  2.Sometimes, it’s wrong. For example, you don’t want to trigger a component fade-in animation on every keystroke. The animation should only play once when the component appears for the first time.",
                                        "To demonstrate the issue, here is the previous example with a few console.log calls and a text input that updates the parent component’s state. Notice how typing causes the Effect to re-run:",
                                        {
                                            "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      console.log('Calling video.play()');      ref.current.play();    } else {      console.log('Calling video.pause()');      ref.current.pause();    }  });  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  const [text, setText] = useState('');  return (    <>      <input value={text} onChange={e => setText(e.target.value)} />      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                        },
                                        "You can tell React to skip unnecessarily re-running the Effect by specifying an array of dependencies as the second argument to the useEffect call. Start by adding an empty [] array to the above example on line 14:",
                                        {
                                            "code_example": "  useEffect(() => {    // ...  }, []);"
                                        },
                                        "You should see an error saying React Hook useEffect has a missing dependency: 'isPlaying':",
                                        {
                                            "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      console.log('Calling video.play()');      ref.current.play();    } else {      console.log('Calling video.pause()');      ref.current.pause();    }  }, []); // This causes an error  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  const [text, setText] = useState('');  return (    <>      <input value={text} onChange={e => setText(e.target.value)} />      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                        },
                                        "The problem is that the code inside of your Effect depends on the isPlaying prop to decide what to do, but this dependency was not explicitly declared. To fix this issue, add isPlaying to the dependency array:",
                                        {
                                            "code_example": "  useEffect(() => {    if (isPlaying) { // It's used here...      // ...    } else {      // ...    }  }, [isPlaying]); // ...so it must be declared here!"
                                        },
                                        "Now all dependencies are declared, so there is no error. Specifying [isPlaying] as the dependency array tells React that it should skip re-running your Effect if isPlaying is the same as it was during the previous render. With this change, typing into the input doesn’t cause the Effect to re-run, but pressing Play/Pause does:",
                                        {
                                            "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      console.log('Calling video.play()');      ref.current.play();    } else {      console.log('Calling video.pause()');      ref.current.pause();    }  }, [isPlaying]);  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  const [text, setText] = useState('');  return (    <>      <input value={text} onChange={e => setText(e.target.value)} />      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                        },
                                        "The dependency array can contain multiple dependencies. React will only skip re-running the Effect if all of the dependencies you specify have exactly the same values as they had during the previous render. React compares the dependency values using the Object.is comparison. See the useEffect reference for details.",
                                        "Notice that you can’t “choose” your dependencies. You will get a lint error if the dependencies you specified don’t match what React expects based on the code inside your Effect. This helps catch many bugs in your code. If you don’t want some code to re-run, edit the Effect code itself to not “need” that dependency.",
                                        {
                                            "code_example": "[]"
                                        },
                                        "Deep DiveWhy was the ref omitted from the dependency array? Show DetailsThis Effect uses both ref and isPlaying, but only isPlaying is declared as a dependency:function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  }, [isPlaying]);This is because the ref object has a stable identity: React guarantees you’ll always get the same object from the same useRef call on every render. It never changes, so it will never by itself cause the Effect to re-run. Therefore, it does not matter whether you include it or not. Including it is fine too:function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  }, [isPlaying, ref]);The set functions returned by useState also have stable identity, so you will often see them omitted from the dependencies too. If the linter lets you omit a dependency without errors, it is safe to do.Omitting always-stable dependencies only works when the linter can “see” that the object is stable. For example, if ref was passed from a parent component, you would have to specify it in the dependency array. However, this is good because you can’t know whether the parent component always passes the same ref, or passes one of several refs conditionally. So your Effect would depend on which ref is passed."
                                    ]
                                },
                                {
                                    "sub_header": "Step 3: Add cleanup if needed ",
                                    "content": [
                                        "Consider a different example. You’re writing a ChatRoom component that needs to connect to the chat server when it appears. You are given a createConnection() API that returns an object with connect() and disconnect() methods. How do you keep the component connected while it is displayed to the user?",
                                        "Start by writing the Effect logic:",
                                        {
                                            "code_example": "useEffect(() => {  const connection = createConnection();  connection.connect();});"
                                        },
                                        "It would be slow to connect to the chat after every re-render, so you add the dependency array:",
                                        {
                                            "code_example": "useEffect(() => {  const connection = createConnection();  connection.connect();}, []);"
                                        },
                                        "The code inside the Effect does not use any props or state, so your dependency array is [] (empty). This tells React to only run this code when the component “mounts”, i.e. appears on the screen for the first time.",
                                        "Let’s try running this code:",
                                        {
                                            "code_sandbox": "chat.jsimport { useEffect } from 'react';import { createConnection } from './chat.js';export default function ChatRoom() {  useEffect(() => {    const connection = createConnection();    connection.connect();  }, []);  return <h1>Welcome to the chat!</h1>;}"
                                        },
                                        "This Effect only runs on mount, so you might expect \"✅ Connecting...\" to be printed once in the console. However, if you check the console, \"✅ Connecting...\" gets printed twice. Why does it happen?",
                                        "Imagine the ChatRoom component is a part of a larger app with many different screens. The user starts their journey on the ChatRoom page. The component mounts and calls connection.connect(). Then imagine the user navigates to another screen—for example, to the Settings page. The ChatRoom component unmounts. Finally, the user clicks Back and ChatRoom mounts again. This would set up a second connection—but the first connection was never destroyed! As the user navigates across the app, the connections would keep piling up.",
                                        "Bugs like this are easy to miss without extensive manual testing. To help you spot them quickly, in development React remounts every component once immediately after its initial mount.",
                                        "Seeing the \"✅ Connecting...\" log twice helps you notice the real issue: your code doesn’t close the connection when the component unmounts.",
                                        "To fix the issue, return a cleanup function from your Effect:",
                                        {
                                            "code_example": "  useEffect(() => {    const connection = createConnection();    connection.connect();    return () => {      connection.disconnect();    };  }, []);"
                                        },
                                        "React will call your cleanup function each time before the Effect runs again, and one final time when the component unmounts (gets removed). Let’s see what happens when the cleanup function is implemented:",
                                        {
                                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';export default function ChatRoom() {  useEffect(() => {    const connection = createConnection();    connection.connect();    return () => connection.disconnect();  }, []);  return <h1>Welcome to the chat!</h1>;}"
                                        },
                                        "Now you get three console logs in development:",
                                        "  1.\"✅ Connecting...\"",
                                        "  2.\"❌ Disconnected.\"",
                                        "  3.\"✅ Connecting...\"",
                                        "This is the correct behavior in development. By remounting your component, React verifies that navigating away and back would not break your code. Disconnecting and then connecting again is exactly what should happen! When you implement the cleanup well, there should be no user-visible difference between running the Effect once vs running it, cleaning it up, and running it again. There’s an extra connect/disconnect call pair because React is probing your code for bugs in development. This is normal—don’t try to make it go away!",
                                        "In production, you would only see \"✅ Connecting...\" printed once. Remounting components only happens in development to help you find Effects that need cleanup. You can turn off Strict Mode to opt out of the development behavior, but we recommend keeping it on. This lets you find many bugs like the one above."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "How to handle the Effect firing twice in development? ",
                            "content": [
                                "React intentionally remounts your components in development to find bugs like in the last example. The right question isn’t “how to run an Effect once”, but “how to fix my Effect so that it works after remounting”.",
                                "Usually, the answer is to implement the cleanup function.  The cleanup function should stop or undo whatever the Effect was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the Effect running once (as in production) and a setup → cleanup → setup sequence (as you’d see in development).",
                                "Most of the Effects you’ll write will fit into one of the common patterns below.",
                                {
                                    "code_example": "ref"
                                },
                                {
                                    "sub_header": "Controlling non-React widgets ",
                                    "content": [
                                        "Sometimes you need to add UI widgets that aren’t written in React. For example, let’s say you’re adding a map component to your page. It has a setZoomLevel() method, and you’d like to keep the zoom level in sync with a zoomLevel state variable in your React code. Your Effect would look similar to this:",
                                        {
                                            "code_example": "useEffect(() => {  const map = mapRef.current;  map.setZoomLevel(zoomLevel);}, [zoomLevel]);"
                                        },
                                        "Note that there is no cleanup needed in this case. In development, React will call the Effect twice, but this is not a problem because calling setZoomLevel twice with the same value does not do anything. It may be slightly slower, but this doesn’t matter because it won’t remount needlessly in production.",
                                        "Some APIs may not allow you to call them twice in a row. For example, the showModal method of the built-in <dialog> element throws if you call it twice. Implement the cleanup function and make it close the dialog:",
                                        {
                                            "code_example": "useEffect(() => {  const dialog = dialogRef.current;  dialog.showModal();  return () => dialog.close();}, []);"
                                        },
                                        "In development, your Effect will call showModal(), then immediately close(), and then showModal() again. This has the same user-visible behavior as calling showModal() once, as you would see in production."
                                    ]
                                },
                                {
                                    "sub_header": "Subscribing to events ",
                                    "content": [
                                        "If your Effect subscribes to something, the cleanup function should unsubscribe:",
                                        {
                                            "code_example": "useEffect(() => {  function handleScroll(e) {    console.log(window.scrollX, window.scrollY);  }  window.addEventListener('scroll', handleScroll);  return () => window.removeEventListener('scroll', handleScroll);}, []);"
                                        },
                                        "In development, your Effect will call addEventListener(), then immediately removeEventListener(), and then addEventListener() again with the same handler. So there would be only one active subscription at a time. This has the same user-visible behavior as calling addEventListener() once, as in production."
                                    ]
                                },
                                {
                                    "sub_header": "Triggering animations ",
                                    "content": [
                                        "If your Effect animates something in, the cleanup function should reset the animation to the initial values:",
                                        {
                                            "code_example": "useEffect(() => {  const node = ref.current;  node.style.opacity = 1; // Trigger the animation  return () => {    node.style.opacity = 0; // Reset to the initial value  };}, []);"
                                        },
                                        "In development, opacity will be set to 1, then to 0, and then to 1 again. This should have the same user-visible behavior as setting it to 1 directly, which is what would happen in production. If you use a third-party animation library with support for tweening, your cleanup function should reset the timeline to its initial state."
                                    ]
                                },
                                {
                                    "sub_header": "Fetching data ",
                                    "content": [
                                        "If your Effect fetches something, the cleanup function should either abort the fetch or ignore its result:",
                                        {
                                            "code_example": "useEffect(() => {  let ignore = false;  async function startFetching() {    const json = await fetchTodos(userId);    if (!ignore) {      setTodos(json);    }  }  startFetching();  return () => {    ignore = true;  };}, [userId]);"
                                        },
                                        "You can’t “undo” a network request that already happened, but your cleanup function should ensure that the fetch that’s not relevant anymore does not keep affecting your application. If the userId changes from 'Alice' to 'Bob', cleanup ensures that the 'Alice' response is ignored even if it arrives after 'Bob'.",
                                        "In development, you will see two fetches in the Network tab. There is nothing wrong with that. With the approach above, the first Effect will immediately get cleaned up so its copy of the ignore variable will be set to true. So even though there is an extra request, it won’t affect the state thanks to the if (!ignore) check.",
                                        "In production, there will only be one request. If the second request in development is bothering you, the best approach is to use a solution that deduplicates requests and caches their responses between components:",
                                        {
                                            "code_example": "function TodoList() {  const todos = useSomeDataLibrary(`/api/user/${userId}/todos`);  // ..."
                                        },
                                        "This will not only improve the development experience, but also make your application feel faster. For example, the user pressing the Back button won’t have to wait for some data to load again because it will be cached. You can either build such a cache yourself or use one of the many alternatives to manual fetching in Effects.",
                                        "Deep DiveWhat are good alternatives to data fetching in Effects? Show DetailsWriting fetch calls inside Effects is a popular way to fetch data, especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:\nEffects don’t run on the server. This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.\nFetching directly in Effects makes it easy to create “network waterfalls”. You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.\nFetching directly in Effects usually means you don’t preload or cache data. For example, if the component unmounts and then mounts again, it would have to fetch the data again.\nIt’s not very ergonomic. There’s quite a bit of boilerplate code involved when writing fetch calls in a way that doesn’t suffer from bugs like race conditions.\nThis list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:\nIf you use a framework, use its built-in data fetching mechanism. Modern React frameworks have integrated data fetching mechanisms that are efficient and don’t suffer from the above pitfalls.\nOtherwise, consider using or building a client-side cache. Popular open source solutions include React Query, useSWR, and React Router 6.4+. You can build your own solution too, in which case you would use Effects under the hood, but add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes).\nYou can continue fetching data directly in Effects if neither of these approaches suit you."
                                    ]
                                },
                                {
                                    "sub_header": "Sending analytics ",
                                    "content": [
                                        "Consider this code that sends an analytics event on the page visit:",
                                        {
                                            "code_example": "useEffect(() => {  logVisit(url); // Sends a POST request}, [url]);"
                                        },
                                        "In development, logVisit will be called twice for every URL, so you might be tempted to try to fix that. We recommend keeping this code as is. Like with earlier examples, there is no user-visible behavior difference between running it once and running it twice. From a practical point of view, logVisit should not do anything in development because you don’t want the logs from the development machines to skew the production metrics. Your component remounts every time you save its file, so it logs extra visits in development anyway.",
                                        "In production, there will be no duplicate visit logs.",
                                        "To debug the analytics events you’re sending, you can deploy your app to a staging environment (which runs in production mode) or temporarily opt out of Strict Mode and its development-only remounting checks. You may also send analytics from the route change event handlers instead of Effects. For more precise analytics, intersection observers can help track which components are in the viewport and how long they remain visible."
                                    ]
                                },
                                {
                                    "sub_header": "Not an Effect: Initializing the application ",
                                    "content": [
                                        "Some logic should only run once when the application starts. You can put it outside your components:",
                                        {
                                            "code_example": "if (typeof window !== 'undefined') { // Check if we're running in the browser.  checkAuthToken();  loadDataFromLocalStorage();}function App() {  // ...}"
                                        },
                                        "This guarantees that such logic only runs once after the browser loads the page."
                                    ]
                                },
                                {
                                    "sub_header": "Not an Effect: Buying a product ",
                                    "content": [
                                        "Sometimes, even if you write a cleanup function, there’s no way to prevent user-visible consequences of running the Effect twice. For example, maybe your Effect sends a POST request like buying a product:",
                                        {
                                            "code_example": "useEffect(() => {  // 🔴 Wrong: This Effect fires twice in development, exposing a problem in the code.  fetch('/api/buy', { method: 'POST' });}, []);"
                                        },
                                        "You wouldn’t want to buy the product twice. However, this is also why you shouldn’t put this logic in an Effect. What if the user goes to another page and then presses Back? Your Effect would run again. You don’t want to buy the product when the user visits a page; you want to buy it when the user clicks the Buy button.",
                                        "Buying is not caused by rendering; it’s caused by a specific interaction. It should run only when the user presses the button. Delete the Effect and move your /api/buy request into the Buy button event handler:",
                                        {
                                            "code_example": "  function handleClick() {    // ✅ Buying is an event because it is caused by a particular interaction.    fetch('/api/buy', { method: 'POST' });  }"
                                        },
                                        "This illustrates that if remounting breaks the logic of your application, this usually uncovers existing bugs. From a user’s perspective, visiting a page shouldn’t be different from visiting it, clicking a link, then pressing Back to view the page again. React verifies that your components abide by this principle by remounting them once in development."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Putting it all together ",
                            "content": [
                                "This playground can help you “get a feel” for how Effects work in practice.",
                                "This example uses setTimeout to schedule a console log with the input text to appear three seconds after the Effect runs. The cleanup function cancels the pending timeout. Start by pressing “Mount the component”:",
                                {
                                    "code_sandbox": "import { useState, useEffect } from 'react';function Playground() {  const [text, setText] = useState('a');  useEffect(() => {    function onTimeout() {      console.log('⏰ ' + text);    }    console.log('🔵 Schedule \"' + text + '\" log');    const timeoutId = setTimeout(onTimeout, 3000);    return () => {      console.log('🟡 Cancel \"' + text + '\" log');      clearTimeout(timeoutId);    };  }, [text]);  return (    <>      <label>        What to log:{' '}        <input          value={text}          onChange={e => setText(e.target.value)}        />      </label>      <h1>{text}</h1>    </>  );}export default function App() {  const [show, setShow] = useState(false);  return (    <>      <button onClick={() => setShow(!show)}>        {show ? 'Unmount' : 'Mount'} the component      </button>      {show && <hr />}      {show && <Playground />}    </>  );}"
                                },
                                "You will see three logs at first: Schedule \"a\" log, Cancel \"a\" log, and Schedule \"a\" log again. Three second later there will also be a log saying a. As you learned earlier, the extra schedule/cancel pair is because React remounts the component once in development to verify that you’ve implemented cleanup well.",
                                "Now edit the input to say abc. If you do it fast enough, you’ll see Schedule \"ab\" log immediately followed by Cancel \"ab\" log and Schedule \"abc\" log. React always cleans up the previous render’s Effect before the next render’s Effect. This is why even if you type into the input fast, there is at most one timeout scheduled at a time. Edit the input a few times and watch the console to get a feel for how Effects get cleaned up.",
                                "Type something into the input and then immediately press “Unmount the component”. Notice how unmounting cleans up the last render’s Effect. Here, it clears the last timeout before it has a chance to fire.",
                                "Finally, edit the component above and comment out the cleanup function so that the timeouts don’t get cancelled. Try typing abcde fast. What do you expect to happen in three seconds? Will console.log(text) inside the timeout print the latest text and produce five abcde logs? Give it a try to check your intuition!",
                                "Three seconds later, you should see a sequence of logs (a, ab, abc, abcd, and abcde) rather than five abcde logs. Each Effect “captures” the text value from its corresponding render.  It doesn’t matter that the text state changed: an Effect from the render with text = 'ab' will always see 'ab'. In other words, Effects from each render are isolated from each other. If you’re curious how this works, you can read about closures.",
                                "Deep DiveEach render has its own Effects Show DetailsYou can think of useEffect as “attaching” a piece of behavior to the render output. Consider this Effect:export default function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to {roomId}!</h1>;}Let’s see what exactly happens as the user navigates around the app.Initial render The user visits <ChatRoom roomId=\"general\" />. Let’s mentally substitute roomId with 'general':  // JSX for the first render (roomId = \"general\")  return <h1>Welcome to general!</h1>;The Effect is also a part of the rendering output. The first render’s Effect becomes:  // Effect for the first render (roomId = \"general\")  () => {    const connection = createConnection('general');    connection.connect();    return () => connection.disconnect();  },  // Dependencies for the first render (roomId = \"general\")  ['general']React runs this Effect, which connects to the 'general' chat room.Re-render with same dependencies Let’s say <ChatRoom roomId=\"general\" /> re-renders. The JSX output is the same:  // JSX for the second render (roomId = \"general\")  return <h1>Welcome to general!</h1>;React sees that the rendering output has not changed, so it doesn’t update the DOM.The Effect from the second render looks like this:  // Effect for the second render (roomId = \"general\")  () => {    const connection = createConnection('general');    connection.connect();    return () => connection.disconnect();  },  // Dependencies for the second render (roomId = \"general\")  ['general']React compares ['general'] from the second render with ['general'] from the first render. Because all dependencies are the same, React ignores the Effect from the second render. It never gets called.Re-render with different dependencies Then, the user visits <ChatRoom roomId=\"travel\" />. This time, the component returns different JSX:  // JSX for the third render (roomId = \"travel\")  return <h1>Welcome to travel!</h1>;React updates the DOM to change \"Welcome to general\" into \"Welcome to travel\".The Effect from the third render looks like this:  // Effect for the third render (roomId = \"travel\")  () => {    const connection = createConnection('travel');    connection.connect();    return () => connection.disconnect();  },  // Dependencies for the third render (roomId = \"travel\")  ['travel']React compares ['travel'] from the third render with ['general'] from the second render. One dependency is different: Object.is('travel', 'general') is false. The Effect can’t be skipped.Before React can apply the Effect from the third render, it needs to clean up the last Effect that did run. The second render’s Effect was skipped, so React needs to clean up the first render’s Effect. If you scroll up to the first render, you’ll see that its cleanup calls disconnect() on the connection that was created with createConnection('general'). This disconnects the app from the 'general' chat room.After that, React runs the third render’s Effect. It connects to the 'travel' chat room.Unmount Finally, let’s say the user navigates away, and the ChatRoom component unmounts. React runs the last Effect’s cleanup function. The last Effect was from the third render. The third render’s cleanup destroys the createConnection('travel') connection. So the app disconnects from the 'travel' room.Development-only behaviors When Strict Mode is on, React remounts every component once after mount (state and DOM are preserved). This helps you find Effects that need cleanup and exposes bugs like race conditions early. Additionally, React will remount the Effects whenever you save a file in development. Both of these behaviors are development-only.",
                                "Recap\nUnlike events, Effects are caused by rendering itself rather than a particular interaction.\nEffects let you synchronize a component with some external system (third-party API, network, etc).\nBy default, Effects run after every render (including the initial one).\nReact will skip the Effect if all of its dependencies have the same values as during the last render.\nYou can’t “choose” your dependencies. They are determined by the code inside the Effect.\nEmpty dependency array ([]) corresponds to the component “mounting”, i.e. being added to the screen.\nIn Strict Mode, React mounts components twice (in development only!) to stress-test your Effects.\nIf your Effect breaks because of remounting, you need to implement a cleanup function.\nReact will call your cleanup function before the Effect runs next time, and during the unmount.\n",
                                {
                                    "code_example": "<MyInput />"
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "You Might Not Need an Effect",
                    "url": "https://react.dev/learn/you-might-not-need-an-effect",
                    "content": [
                        "Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system like a non-React widget, network, or the browser DOM. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.",
                        "You will learn\nWhy and how to remove unnecessary Effects from your components\nHow to cache expensive computations without Effects\nHow to reset and adjust component state without Effects\nHow to share logic between event handlers\nWhich logic should be moved to event handlers\nHow to notify parent components about changes\n",
                        {
                            "sub_header": "How to remove unnecessary Effects ",
                            "content": [
                                "There are two common cases in which you don’t need Effects:",
                                "  1.You don’t need Effects to transform data for rendering. For example, let’s say you want to filter a list before displaying it. You might feel tempted to write an Effect that updates a state variable when the list changes. However, this is inefficient. When you update the state, React will first call your component functions to calculate what should be on the screen. Then React will “commit” these changes to the DOM, updating the screen. Then React will run your Effects. If your Effect also immediately updates the state, this restarts the whole process from scratch! To avoid the unnecessary render passes, transform all the data at the top level of your components. That code will automatically re-run whenever your props or state change.",
                                "  2.You don’t need Effects to handle user events. For example, let’s say you want to send an /api/buy POST request and show a notification when the user buys a product. In the Buy button click event handler, you know exactly what happened. By the time an Effect runs, you don’t know what the user did (for example, which button was clicked). This is why you’ll usually handle user events in the corresponding event handlers.",
                                "You do need Effects to synchronize with external systems. For example, you can write an Effect that keeps a jQuery widget synchronized with the React state. You can also fetch data with Effects: for example, you can synchronize the search results with the current search query. Keep in mind that modern frameworks provide more efficient built-in data fetching mechanisms than writing Effects directly in your components.",
                                "To help you gain the right intuition, let’s look at some common concrete examples!",
                                {
                                    "sub_header": "Updating state based on props or state ",
                                    "content": [
                                        "Suppose you have a component with two state variables: firstName and lastName. You want to calculate a fullName from them by concatenating them. Moreover, you’d like fullName to update whenever firstName or lastName change. Your first instinct might be to add a fullName state variable and update it in an Effect:",
                                        {
                                            "code_example": "function Form() {  const [firstName, setFirstName] = useState('Taylor');  const [lastName, setLastName] = useState('Swift');  // 🔴 Avoid: redundant state and unnecessary Effect  const [fullName, setFullName] = useState('');  useEffect(() => {    setFullName(firstName + ' ' + lastName);  }, [firstName, lastName]);  // ...}"
                                        },
                                        "This is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value for fullName, then immediately re-renders with the updated value. Remove the state variable and the Effect:",
                                        {
                                            "code_example": "function Form() {  const [firstName, setFirstName] = useState('Taylor');  const [lastName, setLastName] = useState('Swift');  // ✅ Good: calculated during rendering  const fullName = firstName + ' ' + lastName;  // ...}"
                                        },
                                        "When something can be calculated from the existing props or state, don’t put it in state. Instead, calculate it during rendering. This makes your code faster (you avoid the extra “cascading” updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you, Thinking in React explains what should go into state."
                                    ]
                                },
                                {
                                    "sub_header": "Caching expensive calculations ",
                                    "content": [
                                        "This component computes visibleTodos by taking the todos it receives by props and filtering them according to the filter prop. You might feel tempted to store the result in state and update it from an Effect:",
                                        {
                                            "code_example": "function TodoList({ todos, filter }) {  const [newTodo, setNewTodo] = useState('');  // 🔴 Avoid: redundant state and unnecessary Effect  const [visibleTodos, setVisibleTodos] = useState([]);  useEffect(() => {    setVisibleTodos(getFilteredTodos(todos, filter));  }, [todos, filter]);  // ...}"
                                        },
                                        "Like in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:",
                                        {
                                            "code_example": "function TodoList({ todos, filter }) {  const [newTodo, setNewTodo] = useState('');  // ✅ This is fine if getFilteredTodos() is not slow.  const visibleTodos = getFilteredTodos(todos, filter);  // ...}"
                                        },
                                        "Usually, this code is fine! But maybe getFilteredTodos() is slow or you have a lot of todos. In that case you don’t want to recalculate getFilteredTodos() if some unrelated state variable like newTodo has changed.",
                                        "You can cache (or “memoize”) an expensive calculation by wrapping it in a useMemo Hook:",
                                        {
                                            "code_example": "import { useMemo, useState } from 'react';function TodoList({ todos, filter }) {  const [newTodo, setNewTodo] = useState('');  const visibleTodos = useMemo(() => {    // ✅ Does not re-run unless todos or filter change    return getFilteredTodos(todos, filter);  }, [todos, filter]);  // ...}"
                                        },
                                        "Or, written as a single line:",
                                        {
                                            "code_example": "import { useMemo, useState } from 'react';function TodoList({ todos, filter }) {  const [newTodo, setNewTodo] = useState('');  // ✅ Does not re-run getFilteredTodos() unless todos or filter change  const visibleTodos = useMemo(() => getFilteredTodos(todos, filter), [todos, filter]);  // ...}"
                                        },
                                        "This tells React that you don’t want the inner function to re-run unless either todos or filter have changed. React will remember the return value of getFilteredTodos() during the initial render. During the next renders, it will check if todos or filter are different. If they’re the same as last time, useMemo will return the last result it has stored. But if they are different, React will call the inner function again (and store its result).",
                                        "The function you wrap in useMemo runs during rendering, so this only works for pure calculations.",
                                        "Deep DiveHow to tell if a calculation is expensive? Show DetailsIn general, unless you’re creating or looping over thousands of objects, it’s probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:console.time('filter array');const visibleTodos = getFilteredTodos(todos, filter);console.timeEnd('filter array');Perform the interaction you’re measuring (for example, typing into the input). You will then see logs like filter array: 0.15ms in your console. If the overall logged time adds up to a significant amount (say, 1ms or more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation in useMemo to verify whether the total logged time has decreased for that interaction or not:console.time('filter array');const visibleTodos = useMemo(() => {  return getFilteredTodos(todos, filter); // Skipped if todos and filter haven't changed}, [todos, filter]);console.timeEnd('filter array');useMemo won’t make the first render faster. It only helps you skip unnecessary work on updates.Keep in mind that your machine is probably faster than your users’ so it’s a good idea to test the performance with an artificial slowdown. For example, Chrome offers a CPU Throttling option for this.Also note that measuring performance in development will not give you the most accurate results. (For example, when Strict Mode is on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have."
                                    ]
                                },
                                {
                                    "sub_header": "Resetting all state when a prop changes ",
                                    "content": [
                                        "This ProfilePage component receives a userId prop. The page contains a comment input, and you use a comment state variable to hold its value. One day, you notice a problem: when you navigate from one profile to another, the comment state does not get reset. As a result, it’s easy to accidentally post a comment on a wrong user’s profile. To fix the issue, you want to clear out the comment state variable whenever the userId changes:",
                                        {
                                            "code_example": "export default function ProfilePage({ userId }) {  const [comment, setComment] = useState('');  // 🔴 Avoid: Resetting state on prop change in an Effect  useEffect(() => {    setComment('');  }, [userId]);  // ...}"
                                        },
                                        "This is inefficient because ProfilePage and its children will first render with the stale value, and then render again. It is also complicated because you’d need to do this in every component that has some state inside ProfilePage. For example, if the comment UI is nested, you’d want to clear out nested comment state too.",
                                        "Instead, you can tell React that each user’s profile is conceptually a different profile by giving it an explicit key. Split your component in two and pass a key attribute from the outer component to the inner one:",
                                        {
                                            "code_example": "export default function ProfilePage({ userId }) {  return (    <Profile      userId={userId}      key={userId}    />  );}function Profile({ userId }) {  // ✅ This and any other state below will reset on key change automatically  const [comment, setComment] = useState('');  // ...}"
                                        },
                                        "Normally, React preserves the state when the same component is rendered in the same spot. By passing userId as a key to the Profile component, you’re asking React to treat two Profile components with different userId as two different components that should not share any state. Whenever the key (which you’ve set to userId) changes, React will recreate the DOM and reset the state of the Profile component and all of its children. Now the comment field will clear out automatically when navigating between profiles.",
                                        "Note that in this example, only the outer ProfilePage component is exported and visible to other files in the project. Components rendering ProfilePage don’t need to pass the key to it: they pass userId as a regular prop. The fact ProfilePage passes it as a key to the inner Profile component is an implementation detail."
                                    ]
                                },
                                {
                                    "sub_header": "Adjusting some state when a prop changes ",
                                    "content": [
                                        "Sometimes, you might want to reset or adjust a part of the state on a prop change, but not all of it.",
                                        "This List component receives a list of items as a prop, and maintains the selected item in the selection state variable. You want to reset the selection to null whenever the items prop receives a different array:",
                                        {
                                            "code_example": "function List({ items }) {  const [isReverse, setIsReverse] = useState(false);  const [selection, setSelection] = useState(null);  // 🔴 Avoid: Adjusting state on prop change in an Effect  useEffect(() => {    setSelection(null);  }, [items]);  // ...}"
                                        },
                                        "This, too, is not ideal. Every time the items change, the List and its child components will render with a stale selection value at first. Then React will update the DOM and run the Effects. Finally, the setSelection(null) call will cause another re-render of the List and its child components, restarting this whole process again.",
                                        "Start by deleting the Effect. Instead, adjust the state directly during rendering:",
                                        {
                                            "code_example": "function List({ items }) {  const [isReverse, setIsReverse] = useState(false);  const [selection, setSelection] = useState(null);  // Better: Adjust the state while rendering  const [prevItems, setPrevItems] = useState(items);  if (items !== prevItems) {    setPrevItems(items);    setSelection(null);  }  // ...}"
                                        },
                                        "Storing information from previous renders like this can be hard to understand, but it’s better than updating the same state in an Effect. In the above example, setSelection is called directly during a render. React will re-render the List immediately after it exits with a return statement. React has not rendered the List children or updated the DOM yet, so this lets the List children skip rendering the stale selection value.",
                                        "When you update a component during rendering, React throws away the returned JSX and immediately retries rendering. To avoid very slow cascading retries, React only lets you update the same component’s state during a render. If you update another component’s state during a render, you’ll see an error. A condition like items !== prevItems is necessary to avoid loops. You may adjust state like this, but any other side effects (like changing the DOM or setting timeouts) should stay in event handlers or Effects to keep components pure.",
                                        "Although this pattern is more efficient than an Effect, most components shouldn’t need it either. No matter how you do it, adjusting state based on props or other state makes your data flow more difficult to understand and debug. Always check whether you can reset all state with a key or calculate everything during rendering instead. For example, instead of storing (and resetting) the selected item, you can store the selected item ID:",
                                        {
                                            "code_example": "function List({ items }) {  const [isReverse, setIsReverse] = useState(false);  const [selectedId, setSelectedId] = useState(null);  // ✅ Best: Calculate everything during rendering  const selection = items.find(item => item.id === selectedId) ?? null;  // ...}"
                                        },
                                        "Now there is no need to “adjust” the state at all. If the item with the selected ID is in the list, it remains selected. If it’s not, the selection calculated during rendering will be null because no matching item was found. This behavior is different, but arguably better because most changes to items preserve the selection."
                                    ]
                                },
                                {
                                    "sub_header": "Sharing logic between event handlers ",
                                    "content": [
                                        "Let’s say you have a product page with two buttons (Buy and Checkout) that both let you buy that product. You want to show a notification whenever the user puts the product in the cart. Calling showNotification() in both buttons’ click handlers feels repetitive so you might be tempted to place this logic in an Effect:",
                                        {
                                            "code_example": "function ProductPage({ product, addToCart }) {  // 🔴 Avoid: Event-specific logic inside an Effect  useEffect(() => {    if (product.isInCart) {      showNotification(`Added ${product.name} to the shopping cart!`);    }  }, [product]);  function handleBuyClick() {    addToCart(product);  }  function handleCheckoutClick() {    addToCart(product);    navigateTo('/checkout');  }  // ...}"
                                        },
                                        "This Effect is unnecessary. It will also most likely cause bugs. For example, let’s say that your app “remembers” the shopping cart between the page reloads. If you add a product to the cart once and refresh the page, the notification will appear again. It will keep appearing every time you refresh that product’s page. This is because product.isInCart will already be true on the page load, so the Effect above will call showNotification().",
                                        "When you’re not sure whether some code should be in an Effect or in an event handler, ask yourself why this code needs to run. Use Effects only for code that should run because the component was displayed to the user. In this example, the notification should appear because the user pressed the button, not because the page was displayed! Delete the Effect and put the shared logic into a function called from both event handlers:",
                                        {
                                            "code_example": "function ProductPage({ product, addToCart }) {  // ✅ Good: Event-specific logic is called from event handlers  function buyProduct() {    addToCart(product);    showNotification(`Added ${product.name} to the shopping cart!`);  }  function handleBuyClick() {    buyProduct();  }  function handleCheckoutClick() {    buyProduct();    navigateTo('/checkout');  }  // ...}"
                                        },
                                        "This both removes the unnecessary Effect and fixes the bug."
                                    ]
                                },
                                {
                                    "sub_header": "Sending a POST request ",
                                    "content": [
                                        "This Form component sends two kinds of POST requests. It sends an analytics event when it mounts. When you fill in the form and click the Submit button, it will send a POST request to the /api/register endpoint:",
                                        {
                                            "code_example": "function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  // ✅ Good: This logic should run because the component was displayed  useEffect(() => {    post('/analytics/event', { eventName: 'visit_form' });  }, []);  // 🔴 Avoid: Event-specific logic inside an Effect  const [jsonToSubmit, setJsonToSubmit] = useState(null);  useEffect(() => {    if (jsonToSubmit !== null) {      post('/api/register', jsonToSubmit);    }  }, [jsonToSubmit]);  function handleSubmit(e) {    e.preventDefault();    setJsonToSubmit({ firstName, lastName });  }  // ...}"
                                        },
                                        "Let’s apply the same criteria as in the example before.",
                                        "The analytics POST request should remain in an Effect. This is because the reason to send the analytics event is that the form was displayed. (It would fire twice in development, but see here for how to deal with that.)",
                                        "However, the /api/register POST request is not caused by the form being displayed. You only want to send the request at one specific moment in time: when the user presses the button. It should only ever happen on that particular interaction. Delete the second Effect and move that POST request into the event handler:",
                                        {
                                            "code_example": "function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  // ✅ Good: This logic runs because the component was displayed  useEffect(() => {    post('/analytics/event', { eventName: 'visit_form' });  }, []);  function handleSubmit(e) {    e.preventDefault();    // ✅ Good: Event-specific logic is in the event handler    post('/api/register', { firstName, lastName });  }  // ...}"
                                        },
                                        "When you choose whether to put some logic into an event handler or an Effect, the main question you need to answer is what kind of logic it is from the user’s perspective. If this logic is caused by a particular interaction, keep it in the event handler. If it’s caused by the user seeing the component on the screen, keep it in the Effect."
                                    ]
                                },
                                {
                                    "sub_header": "Chains of computations ",
                                    "content": [
                                        "Sometimes you might feel tempted to chain Effects that each adjust a piece of state based on other state:",
                                        {
                                            "code_example": "function Game() {  const [card, setCard] = useState(null);  const [goldCardCount, setGoldCardCount] = useState(0);  const [round, setRound] = useState(1);  const [isGameOver, setIsGameOver] = useState(false);  // 🔴 Avoid: Chains of Effects that adjust the state solely to trigger each other  useEffect(() => {    if (card !== null && card.gold) {      setGoldCardCount(c => c + 1);    }  }, [card]);  useEffect(() => {    if (goldCardCount > 3) {      setRound(r => r + 1)      setGoldCardCount(0);    }  }, [goldCardCount]);  useEffect(() => {    if (round > 5) {      setIsGameOver(true);    }  }, [round]);  useEffect(() => {    alert('Good game!');  }, [isGameOver]);  function handlePlaceCard(nextCard) {    if (isGameOver) {      throw Error('Game already ended.');    } else {      setCard(nextCard);    }  }  // ..."
                                        },
                                        "There are two problems with this code.",
                                        "The first problem is that it is very inefficient: the component (and its children) have to re-render between each set call in the chain. In the example above, in the worst case (setCard → render → setGoldCardCount → render → setRound → render → setIsGameOver → render) there are three unnecessary re-renders of the tree below.",
                                        "The second problem is that even if it weren’t slow, as your code evolves, you will run into cases where the “chain” you wrote doesn’t fit the new requirements. Imagine you are adding a way to step through the history of the game moves. You’d do it by updating each state variable to a value from the past. However, setting the card state to a value from the past would trigger the Effect chain again and change the data you’re showing. Such code is often rigid and fragile.",
                                        "In this case, it’s better to calculate what you can during rendering, and adjust the state in the event handler:",
                                        {
                                            "code_example": "function Game() {  const [card, setCard] = useState(null);  const [goldCardCount, setGoldCardCount] = useState(0);  const [round, setRound] = useState(1);  // ✅ Calculate what you can during rendering  const isGameOver = round > 5;  function handlePlaceCard(nextCard) {    if (isGameOver) {      throw Error('Game already ended.');    }    // ✅ Calculate all the next state in the event handler    setCard(nextCard);    if (nextCard.gold) {      if (goldCardCount <= 3) {        setGoldCardCount(goldCardCount + 1);      } else {        setGoldCardCount(0);        setRound(round + 1);        if (round === 5) {          alert('Good game!');        }      }    }  }  // ..."
                                        },
                                        "This is a lot more efficient. Also, if you implement a way to view game history, now you will be able to set each state variable to a move from the past without triggering the Effect chain that adjusts every other value. If you need to reuse logic between several event handlers, you can extract a function and call it from those handlers.",
                                        "Remember that inside event handlers, state behaves like a snapshot. For example, even after you call setRound(round + 1), the round variable will reflect the value at the time the user clicked the button. If you need to use the next value for calculations, define it manually like const nextRound = round + 1.",
                                        "In some cases, you can’t calculate the next state directly in the event handler. For example, imagine a form with multiple dropdowns where the options of the next dropdown depend on the selected value of the previous dropdown. Then, a chain of Effects is appropriate because you are synchronizing with network."
                                    ]
                                },
                                {
                                    "sub_header": "Initializing the application ",
                                    "content": [
                                        "Some logic should only run once when the app loads.",
                                        "You might be tempted to place it in an Effect in the top-level component:",
                                        {
                                            "code_example": "function App() {  // 🔴 Avoid: Effects with logic that should only ever run once  useEffect(() => {    loadDataFromLocalStorage();    checkAuthToken();  }, []);  // ...}"
                                        },
                                        "However, you’ll quickly discover that it runs twice in development. This can cause issues—for example, maybe it invalidates the authentication token because the function wasn’t designed to be called twice. In general, your components should be resilient to being remounted. This includes your top-level App component.",
                                        "Although it may not ever get remounted in practice in production, following the same constraints in all components makes it easier to move and reuse code. If some logic must run once per app load rather than once per component mount, add a top-level variable to track whether it has already executed:",
                                        {
                                            "code_example": "let didInit = false;function App() {  useEffect(() => {    if (!didInit) {      didInit = true;      // ✅ Only runs once per app load      loadDataFromLocalStorage();      checkAuthToken();    }  }, []);  // ...}"
                                        },
                                        "You can also run it during module initialization and before the app renders:",
                                        {
                                            "code_example": "if (typeof window !== 'undefined') { // Check if we're running in the browser.   // ✅ Only runs once per app load  checkAuthToken();  loadDataFromLocalStorage();}function App() {  // ...}"
                                        },
                                        "Code at the top level runs once when your component is imported—even if it doesn’t end up being rendered. To avoid slowdown or surprising behavior when importing arbitrary components, don’t overuse this pattern. Keep app-wide initialization logic to root component modules like App.js or in your application’s entry point."
                                    ]
                                },
                                {
                                    "sub_header": "Notifying parent components about state changes ",
                                    "content": [
                                        "Let’s say you’re writing a Toggle component with an internal isOn state which can be either true or false. There are a few different ways to toggle it (by clicking or dragging). You want to notify the parent component whenever the Toggle internal state changes, so you expose an onChange event and call it from an Effect:",
                                        {
                                            "code_example": "function Toggle({ onChange }) {  const [isOn, setIsOn] = useState(false);  // 🔴 Avoid: The onChange handler runs too late  useEffect(() => {    onChange(isOn);  }, [isOn, onChange])  function handleClick() {    setIsOn(!isOn);  }  function handleDragEnd(e) {    if (isCloserToRightEdge(e)) {      setIsOn(true);    } else {      setIsOn(false);    }  }  // ...}"
                                        },
                                        "Like earlier, this is not ideal. The Toggle updates its state first, and React updates the screen. Then React runs the Effect, which calls the onChange function passed from a parent component. Now the parent component will update its own state, starting another render pass. It would be better to do everything in a single pass.",
                                        "Delete the Effect and instead update the state of both components within the same event handler:",
                                        {
                                            "code_example": "function Toggle({ onChange }) {  const [isOn, setIsOn] = useState(false);  function updateToggle(nextIsOn) {    // ✅ Good: Perform all updates during the event that caused them    setIsOn(nextIsOn);    onChange(nextIsOn);  }  function handleClick() {    updateToggle(!isOn);  }  function handleDragEnd(e) {    if (isCloserToRightEdge(e)) {      updateToggle(true);    } else {      updateToggle(false);    }  }  // ...}"
                                        },
                                        "With this approach, both the Toggle component and its parent component update their state during the event. React batches updates from different components together, so there will only be one render pass.",
                                        "You might also be able to remove the state altogether, and instead receive isOn from the parent component:",
                                        {
                                            "code_example": "// ✅ Also good: the component is fully controlled by its parentfunction Toggle({ isOn, onChange }) {  function handleClick() {    onChange(!isOn);  }  function handleDragEnd(e) {    if (isCloserToRightEdge(e)) {      onChange(true);    } else {      onChange(false);    }  }  // ...}"
                                        },
                                        "“Lifting state up” lets the parent component fully control the Toggle by toggling the parent’s own state. This means the parent component will have to contain more logic, but there will be less state overall to worry about. Whenever you try to keep two different state variables synchronized, try lifting state up instead!"
                                    ]
                                },
                                {
                                    "sub_header": "Passing data to the parent ",
                                    "content": [
                                        "This Child component fetches some data and then passes it to the Parent component in an Effect:",
                                        {
                                            "code_example": "function Parent() {  const [data, setData] = useState(null);  // ...  return <Child onFetched={setData} />;}function Child({ onFetched }) {  const data = useSomeAPI();  // 🔴 Avoid: Passing data to the parent in an Effect  useEffect(() => {    if (data) {      onFetched(data);    }  }, [onFetched, data]);  // ...}"
                                        },
                                        "In React, data flows from the parent components to their children. When you see something wrong on the screen, you can trace where the information comes from by going up the component chain until you find which component passes the wrong prop or has the wrong state. When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent need the same data, let the parent component fetch that data, and pass it down to the child instead:",
                                        {
                                            "code_example": "function Parent() {  const data = useSomeAPI();  // ...  // ✅ Good: Passing data down to the child  return <Child data={data} />;}function Child({ data }) {  // ...}"
                                        },
                                        "This is simpler and keeps the data flow predictable: the data flows down from the parent to the child."
                                    ]
                                },
                                {
                                    "sub_header": "Subscribing to an external store ",
                                    "content": [
                                        "Sometimes, your components may need to subscribe to some data outside of the React state. This data could be from a third-party library or a built-in browser API. Since this data can change without React’s knowledge, you need to manually subscribe your components to it. This is often done with an Effect, for example:",
                                        {
                                            "code_example": "function useOnlineStatus() {  // Not ideal: Manual store subscription in an Effect  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function updateState() {      setIsOnline(navigator.onLine);    }    updateState();    window.addEventListener('online', updateState);    window.addEventListener('offline', updateState);    return () => {      window.removeEventListener('online', updateState);      window.removeEventListener('offline', updateState);    };  }, []);  return isOnline;}function ChatIndicator() {  const isOnline = useOnlineStatus();  // ...}"
                                        },
                                        "Here, the component subscribes to an external data store (in this case, the browser navigator.onLine API). Since this API does not exist on the server (so it can’t be used for the initial HTML), initially the state is set to true. Whenever the value of that data store changes in the browser, the component updates its state.",
                                        "Although it’s common to use Effects for this, React has a purpose-built Hook for subscribing to an external store that is preferred instead. Delete the Effect and replace it with a call to useSyncExternalStore:",
                                        {
                                            "code_example": "function subscribe(callback) {  window.addEventListener('online', callback);  window.addEventListener('offline', callback);  return () => {    window.removeEventListener('online', callback);    window.removeEventListener('offline', callback);  };}function useOnlineStatus() {  // ✅ Good: Subscribing to an external store with a built-in Hook  return useSyncExternalStore(    subscribe, // React won't resubscribe for as long as you pass the same function    () => navigator.onLine, // How to get the value on the client    () => true // How to get the value on the server  );}function ChatIndicator() {  const isOnline = useOnlineStatus();  // ...}"
                                        },
                                        "This approach is less error-prone than manually syncing mutable data to React state with an Effect. Typically, you’ll write a custom Hook like useOnlineStatus() above so that you don’t need to repeat this code in the individual components. Read more about subscribing to external stores from React components."
                                    ]
                                },
                                {
                                    "sub_header": "Fetching data ",
                                    "content": [
                                        "Many apps use Effects to kick off data fetching. It is quite common to write a data fetching Effect like this:",
                                        {
                                            "code_example": "function SearchResults({ query }) {  const [results, setResults] = useState([]);  const [page, setPage] = useState(1);  useEffect(() => {    // 🔴 Avoid: Fetching without cleanup logic    fetchResults(query, page).then(json => {      setResults(json);    });  }, [query, page]);  function handleNextPageClick() {    setPage(page + 1);  }  // ...}"
                                        },
                                        "You don’t need to move this fetch to an event handler.",
                                        "This might seem like a contradiction with the earlier examples where you needed to put the logic into the event handlers! However, consider that it’s not the typing event that’s the main reason to fetch. Search inputs are often prepopulated from the URL, and the user might navigate Back and Forward without touching the input.",
                                        "It doesn’t matter where page and query come from. While this component is visible, you want to keep results synchronized with data from the network for the current page and query. This is why it’s an Effect.",
                                        "However, the code above has a bug. Imagine you type \"hello\" fast. Then the query will change from \"h\", to \"he\", \"hel\", \"hell\", and \"hello\". This will kick off separate fetches, but there is no guarantee about which order the responses will arrive in. For example, the \"hell\" response may arrive after the \"hello\" response. Since it will call setResults() last, you will be displaying the wrong search results. This is called a “race condition”: two different requests “raced” against each other and came in a different order than you expected.",
                                        "To fix the race condition, you need to add a cleanup function to ignore stale responses:",
                                        {
                                            "code_example": "function SearchResults({ query }) {  const [results, setResults] = useState([]);  const [page, setPage] = useState(1);  useEffect(() => {    let ignore = false;    fetchResults(query, page).then(json => {      if (!ignore) {        setResults(json);      }    });    return () => {      ignore = true;    };  }, [query, page]);  function handleNextPageClick() {    setPage(page + 1);  }  // ...}"
                                        },
                                        "This ensures that when your Effect fetches data, all responses except the last requested one will be ignored.",
                                        "Handling race conditions is not the only difficulty with implementing data fetching. You might also want to think about caching responses (so that the user can click Back and see the previous screen instantly), how to fetch data on the server (so that the initial server-rendered HTML contains the fetched content instead of a spinner), and how to avoid network waterfalls (so that a child can fetch data without waiting for every parent).",
                                        "These issues apply to any UI library, not just React. Solving them is not trivial, which is why modern frameworks provide more efficient built-in data fetching mechanisms than fetching data in Effects.",
                                        "If you don’t use a framework (and don’t want to build your own) but would like to make data fetching from Effects more ergonomic, consider extracting your fetching logic into a custom Hook like in this example:",
                                        {
                                            "code_example": "function SearchResults({ query }) {  const [page, setPage] = useState(1);  const params = new URLSearchParams({ query, page });  const results = useData(`/api/search?${params}`);  function handleNextPageClick() {    setPage(page + 1);  }  // ...}function useData(url) {  const [data, setData] = useState(null);  useEffect(() => {    let ignore = false;    fetch(url)      .then(response => response.json())      .then(json => {        if (!ignore) {          setData(json);        }      });    return () => {      ignore = true;    };  }, [url]);  return data;}"
                                        },
                                        "You’ll likely also want to add some logic for error handling and to track whether the content is loading. You can build a Hook like this yourself or use one of the many solutions already available in the React ecosystem. Although this alone won’t be as efficient as using a framework’s built-in data fetching mechanism, moving the data fetching logic into a custom Hook will make it easier to adopt an efficient data fetching strategy later.",
                                        "In general, whenever you have to resort to writing Effects, keep an eye out for when you can extract a piece of functionality into a custom Hook with a more declarative and purpose-built API like useData above. The fewer raw useEffect calls you have in your components, the easier you will find to maintain your application.",
                                        "Recap\nIf you can calculate something during render, you don’t need an Effect.\nTo cache expensive calculations, add useMemo instead of useEffect.\nTo reset the state of an entire component tree, pass a different key to it.\nTo reset a particular bit of state in response to a prop change, set it during rendering.\nCode that runs because a component was displayed should be in Effects, the rest should be in events.\nIf you need to update the state of several components, it’s better to do it during a single event.\nWhenever you try to synchronize state variables in different components, consider lifting state up.\nYou can fetch data with Effects, but you need to implement cleanup to avoid race conditions.\n",
                                        {
                                            "code_example": "TodoList"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Lifecycle of Reactive Effects",
                    "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
                    "content": [
                        "Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time. React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. This keeps your Effect synchronized to the latest props and state.",
                        "You will learn\nHow an Effect’s lifecycle is different from a component’s lifecycle\nHow to think about each individual Effect in isolation\nWhen your Effect needs to re-synchronize, and why\nHow your Effect’s dependencies are determined\nWhat it means for a value to be reactive\nWhat an empty dependency array means\nHow React verifies your dependencies are correct with a linter\nWhat to do when you disagree with the linter\n",
                        {
                            "sub_header": "The lifecycle of an Effect ",
                            "content": [
                                "Every React component goes through the same lifecycle:",
                                "  1.A component mounts when it’s added to the screen.",
                                "  2.A component updates when it receives new props or state, usually in response to an interaction.",
                                "  3.A component unmounts when it’s removed from the screen.",
                                "It’s a good way to think about components, but not about Effects. Instead, try to think about each Effect independently from your component’s lifecycle. An Effect describes how to synchronize an external system to the current props and state. As your code changes, synchronization will need to happen more or less often.",
                                "To illustrate this point, consider this Effect connecting your component to a chat server:",
                                {
                                    "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]);  // ...}"
                                },
                                "Your Effect’s body specifies how to start synchronizing:",
                                {
                                    "code_example": "    // ...    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };    // ..."
                                },
                                "The cleanup function returned by your Effect specifies how to stop synchronizing:",
                                {
                                    "code_example": "    // ...    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };    // ..."
                                },
                                "Intuitively, you might think that React would start synchronizing when your component mounts and stop synchronizing when your component unmounts. However, this is not the end of the story! Sometimes, it may also be necessary to start and stop synchronizing multiple times while the component remains mounted.",
                                "Let’s look at why this is necessary, when it happens, and how you can control this behavior.",
                                "NoteSome Effects don’t return a cleanup function at all. More often than not, you’ll want to return one—but if you don’t, React will behave as if you returned an empty cleanup function.",
                                {
                                    "sub_header": "Why synchronization may need to happen more than once ",
                                    "content": [
                                        "Imagine this ChatRoom component receives a roomId prop that the user picks in a dropdown. Let’s say that initially the user picks the \"general\" room as the roomId. Your app displays the \"general\" chat room:",
                                        {
                                            "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId /* \"general\" */ }) {  // ...  return <h1>Welcome to the {roomId} room!</h1>;}"
                                        },
                                        "After the UI is displayed, React will run your Effect to start synchronizing. It connects to the \"general\" room:",
                                        {
                                            "code_example": "function ChatRoom({ roomId /* \"general\" */ }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room    connection.connect();    return () => {      connection.disconnect(); // Disconnects from the \"general\" room    };  }, [roomId]);  // ..."
                                        },
                                        "So far, so good.",
                                        "Later, the user picks a different room in the dropdown (for example, \"travel\"). First, React will update the UI:",
                                        {
                                            "code_example": "function ChatRoom({ roomId /* \"travel\" */ }) {  // ...  return <h1>Welcome to the {roomId} room!</h1>;}"
                                        },
                                        "Think about what should happen next. The user sees that \"travel\" is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the \"general\" room. The roomId prop has changed, so what your Effect did back then (connecting to the \"general\" room) no longer matches the UI.",
                                        "At this point, you want React to do two things:",
                                        "  1.Stop synchronizing with the old roomId (disconnect from the \"general\" room)",
                                        "  2.Start synchronizing with the new roomId (connect to the \"travel\" room)",
                                        "Luckily, you’ve already taught React how to do both of these things! Your Effect’s body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing. All that React needs to do now is to call them in the correct order and with the correct props and state. Let’s see how exactly that happens."
                                    ]
                                },
                                {
                                    "sub_header": "How React re-synchronizes your Effect ",
                                    "content": [
                                        "Recall that your ChatRoom component has received a new value for its roomId prop. It used to be \"general\", and now it is \"travel\". React needs to re-synchronize your Effect to re-connect you to a different room.",
                                        "To stop synchronizing, React will call the cleanup function that your Effect returned after connecting to the \"general\" room. Since roomId was \"general\", the cleanup function disconnects from the \"general\" room:",
                                        {
                                            "code_example": "function ChatRoom({ roomId /* \"general\" */ }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room    connection.connect();    return () => {      connection.disconnect(); // Disconnects from the \"general\" room    };    // ..."
                                        },
                                        "Then React will run the Effect that you’ve provided during this render. This time, roomId is \"travel\" so it will start synchronizing to the \"travel\" chat room (until its cleanup function is eventually called too):",
                                        {
                                            "code_example": "function ChatRoom({ roomId /* \"travel\" */ }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Connects to the \"travel\" room    connection.connect();    // ..."
                                        },
                                        "Thanks to this, you’re now connected to the same room that the user chose in the UI. Disaster averted!",
                                        "Every time after your component re-renders with a different roomId, your Effect will re-synchronize. For example, let’s say the user changes roomId from \"travel\" to \"music\". React will again stop synchronizing your Effect by calling its cleanup function (disconnecting you from the \"travel\" room). Then it will start synchronizing again by running its body with the new roomId prop (connecting you to the \"music\" room).",
                                        "Finally, when the user goes to a different screen, ChatRoom unmounts. Now there is no need to stay connected at all. React will stop synchronizing your Effect one last time and disconnect you from the \"music\" chat room."
                                    ]
                                },
                                {
                                    "sub_header": "Thinking from the Effect’s perspective ",
                                    "content": [
                                        "Let’s recap everything that’s happened from the ChatRoom component’s perspective:",
                                        "  1.ChatRoom mounted with roomId set to \"general\"",
                                        "  2.ChatRoom updated with roomId set to \"travel\"",
                                        "  3.ChatRoom updated with roomId set to \"music\"",
                                        "  4.ChatRoom unmounted",
                                        "During each of these points in the component’s lifecycle, your Effect did different things:",
                                        "  1.Your Effect connected to the \"general\" room",
                                        "  2.Your Effect disconnected from the \"general\" room and connected to the \"travel\" room",
                                        "  3.Your Effect disconnected from the \"travel\" room and connected to the \"music\" room",
                                        "  4.Your Effect disconnected from the \"music\" room",
                                        "Now let’s think about what happened from the perspective of the Effect itself:",
                                        {
                                            "code_example": "  useEffect(() => {    // Your Effect connected to the room specified with roomId...    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      // ...until it disconnected      connection.disconnect();    };  }, [roomId]);"
                                        },
                                        "This code’s structure might inspire you to see what happened as a sequence of non-overlapping time periods:",
                                        "  1.Your Effect connected to the \"general\" room (until it disconnected)",
                                        "  2.Your Effect connected to the \"travel\" room (until it disconnected)",
                                        "  3.Your Effect connected to the \"music\" room (until it disconnected)",
                                        "Previously, you were thinking from the component’s perspective. When you looked from the component’s perspective, it was tempting to think of Effects as “callbacks” or “lifecycle events” that fire at a specific time like “after a render” or “before unmount”. This way of thinking gets complicated very fast, so it’s best to avoid.",
                                        "Instead, always focus on a single start/stop cycle at a time. It shouldn’t matter whether a component is mounting, updating, or unmounting. All you need to do is to describe how to start synchronization and how to stop it. If you do it well, your Effect will be resilient to being started and stopped as many times as it’s needed.",
                                        "This might remind you how you don’t think whether a component is mounting or updating when you write the rendering logic that creates JSX. You describe what should be on the screen, and React figures out the rest."
                                    ]
                                },
                                {
                                    "sub_header": "How React verifies that your Effect can re-synchronize ",
                                    "content": [
                                        "Here is a live example that you can play with. Press “Open chat” to mount the ChatRoom component:",
                                        {
                                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [roomId, setRoomId] = useState('general');  const [show, setShow] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <button onClick={() => setShow(!show)}>        {show ? 'Close chat' : 'Open chat'}      </button>      {show && <hr />}      {show && <ChatRoom roomId={roomId} />}    </>  );}"
                                        },
                                        "Notice that when the component mounts for the first time, you see three logs:",
                                        "  1.✅ Connecting to \"general\" room at https://localhost:1234... (development-only)",
                                        "  2.❌ Disconnected from \"general\" room at https://localhost:1234. (development-only)",
                                        "  3.✅ Connecting to \"general\" room at https://localhost:1234...",
                                        "The first two logs are development-only. In development, React always remounts each component once.",
                                        "React verifies that your Effect can re-synchronize by forcing it to do that immediately in development. This might remind you of opening a door and closing it an extra time to check if the door lock works. React starts and stops your Effect one extra time in development to check you’ve implemented its cleanup well.",
                                        "The main reason your Effect will re-synchronize in practice is if some data it uses has changed. In the sandbox above, change the selected chat room. Notice how, when the roomId changes, your Effect re-synchronizes.",
                                        "However, there are also more unusual cases in which re-synchronization is necessary. For example, try editing the serverUrl in the sandbox above while the chat is open. Notice how the Effect re-synchronizes in response to your edits to the code. In the future, React may add more features that rely on re-synchronization."
                                    ]
                                },
                                {
                                    "sub_header": "How React knows that it needs to re-synchronize the Effect ",
                                    "content": [
                                        "You might be wondering how React knew that your Effect needed to re-synchronize after roomId changes. It’s because you told React that its code depends on roomId by including it in the list of dependencies:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) { // The roomId prop may change over time  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // This Effect reads roomId     connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]); // So you tell React that this Effect \"depends on\" roomId  // ..."
                                        },
                                        "Here’s how this works:",
                                        "  1.You knew roomId is a prop, which means it can change over time.",
                                        "  2.You knew that your Effect reads roomId (so its logic depends on a value that may change later).",
                                        "  3.This is why you specified it as your Effect’s dependency (so that it re-synchronizes when roomId changes).",
                                        "Every time after your component re-renders, React will look at the array of dependencies that you have passed. If any of the values in the array is different from the value at the same spot that you passed during the previous render, React will re-synchronize your Effect.",
                                        "For example, if you passed [\"general\"] during the initial render, and later you passed [\"travel\"] during the next render, React will compare \"general\" and \"travel\". These are different values (compared with Object.is), so React will re-synchronize your Effect. On the other hand, if your component re-renders but roomId has not changed, your Effect will remain connected to the same room."
                                    ]
                                },
                                {
                                    "sub_header": "Each Effect represents a separate synchronization process ",
                                    "content": [
                                        "Resist adding unrelated logic to your Effect only because this logic needs to run at the same time as an Effect you already wrote. For example, let’s say you want to send an analytics event when the user visits the room. You already have an Effect that depends on roomId, so you might feel tempted to add the analytics call there:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  useEffect(() => {    logVisit(roomId);    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]);  // ...}"
                                        },
                                        "But imagine you later add another dependency to this Effect that needs to re-establish the connection. If this Effect re-synchronizes, it will also call logVisit(roomId) for the same room, which you did not intend. Logging the visit is a separate process from connecting. Write them as two separate Effects:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  useEffect(() => {    logVisit(roomId);  }, [roomId]);  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    // ...  }, [roomId]);  // ...}"
                                        },
                                        "Each Effect in your code should represent a separate and independent synchronization process.",
                                        "In the above example, deleting one Effect wouldn’t break the other Effect’s logic. This is a good indication that they synchronize different things, and so it made sense to split them up. On the other hand, if you split up a cohesive piece of logic into separate Effects, the code may look “cleaner” but will be more difficult to maintain. This is why you should think whether the processes are same or separate, not whether the code looks cleaner."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Effects “react” to reactive values ",
                            "content": [
                                "Your Effect reads two variables (serverUrl and roomId), but you only specified roomId as a dependency:",
                                {
                                    "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]);  // ...}"
                                },
                                "Why doesn’t serverUrl need to be a dependency?",
                                "This is because the serverUrl never changes due to a re-render. It’s always the same no matter how many times the component re-renders and why. Since serverUrl never changes, it wouldn’t make sense to specify it as a dependency. After all, dependencies only do something when they change over time!",
                                "On the other hand, roomId may be different on a re-render. Props, state, and other values declared inside the component are reactive because they’re calculated during rendering and participate in the React data flow.",
                                "If serverUrl was a state variable, it would be reactive. Reactive values must be included in dependencies:",
                                {
                                    "code_example": "function ChatRoom({ roomId }) { // Props change over time  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // State may change over time  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Your Effect reads props and state    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId, serverUrl]); // So you tell React that this Effect \"depends on\" on props and state  // ...}"
                                },
                                "By including serverUrl as a dependency, you ensure that the Effect re-synchronizes after it changes.",
                                "Try changing the selected chat room or edit the server URL in this sandbox:",
                                {
                                    "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId, serverUrl]);  return (    <>      <label>        Server URL:{' '}        <input          value={serverUrl}          onChange={e => setServerUrl(e.target.value)}        />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                },
                                "Whenever you change a reactive value like roomId or serverUrl, the Effect re-connects to the chat server.",
                                {
                                    "sub_header": "What an Effect with empty dependencies means ",
                                    "content": [
                                        "What happens if you move both serverUrl and roomId outside the component?",
                                        {
                                            "code_example": "const serverUrl = 'https://localhost:1234';const roomId = 'general';function ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, []); // ✅ All dependencies declared  // ...}"
                                        },
                                        "Now your Effect’s code does not use any reactive values, so its dependencies can be empty ([]).",
                                        "Thinking from the component’s perspective, the empty [] dependency array means this Effect connects to the chat room only when the component mounts, and disconnects only when the component unmounts. (Keep in mind that React would still re-synchronize it an extra time in development to stress-test your logic.)",
                                        {
                                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';const roomId = 'general';function ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []);  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [show, setShow] = useState(false);  return (    <>      <button onClick={() => setShow(!show)}>        {show ? 'Close chat' : 'Open chat'}      </button>      {show && <hr />}      {show && <ChatRoom />}    </>  );}"
                                        },
                                        "However, if you think from the Effect’s perspective, you don’t need to think about mounting and unmounting at all. What’s important is you’ve specified what your Effect does to start and stop synchronizing. Today, it has no reactive dependencies. But if you ever want the user to change roomId or serverUrl over time (and they would become reactive), your Effect’s code won’t change. You will only need to add them to the dependencies."
                                    ]
                                },
                                {
                                    "sub_header": "All variables declared in the component body are reactive ",
                                    "content": [
                                        "Props and state aren’t the only reactive values. Values that you calculate from them are also reactive. If the props or state change, your component will re-render, and the values calculated from them will also change. This is why all variables from the component body used by the Effect should be in the Effect dependency list.",
                                        "Let’s say that the user can pick a chat server in the dropdown, but they can also configure a default server in settings. Suppose you’ve already put the settings state in a context so you read the settings from that context. Now you calculate the serverUrl based on the selected server from props and the default server:",
                                        {
                                            "code_example": "function ChatRoom({ roomId, selectedServerUrl }) { // roomId is reactive  const settings = useContext(SettingsContext); // settings is reactive  const serverUrl = selectedServerUrl ?? settings.defaultServerUrl; // serverUrl is reactive  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Your Effect reads roomId and serverUrl    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId, serverUrl]); // So it needs to re-synchronize when either of them changes!  // ...}"
                                        },
                                        "In this example, serverUrl is not a prop or a state variable. It’s a regular variable that you calculate during rendering. But it’s calculated during rendering, so it can change due to a re-render. This is why it’s reactive.",
                                        "All values inside the component (including props, state, and variables in your component’s body) are reactive. Any reactive value can change on a re-render, so you need to include reactive values as Effect’s dependencies.",
                                        "In other words, Effects “react” to all values from the component body.",
                                        "Deep DiveCan global or mutable values be dependencies? Show DetailsMutable values (including global variables) aren’t reactive.A mutable value like location.pathname can’t be a dependency. It’s mutable, so it can change at any time completely outside of the React rendering data flow. Changing it wouldn’t trigger a re-render of your component. Therefore, even if you specified it in the dependencies, React wouldn’t know to re-synchronize the Effect when it changes. This also breaks the rules of React because reading mutable data during rendering (which is when you calculate the dependencies) breaks purity of rendering. Instead, you should read and subscribe to an external mutable value with useSyncExternalStore.A mutable value like ref.current or things you read from it also can’t be a dependency. The ref object returned by useRef itself can be a dependency, but its current property is intentionally mutable. It lets you keep track of something without triggering a re-render. But since changing it doesn’t trigger a re-render, it’s not a reactive value, and React won’t know to re-run your Effect when it changes.As you’ll learn below on this page, a linter will check for these issues automatically."
                                    ]
                                },
                                {
                                    "sub_header": "React verifies that you specified every reactive value as a dependency ",
                                    "content": [
                                        "If your linter is configured for React, it will check that every reactive value used by your Effect’s code is declared as its dependency. For example, this is a lint error because both roomId and serverUrl are reactive:",
                                        {
                                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';function ChatRoom({ roomId }) { // roomId is reactive  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []); // <-- Something's wrong here!  return (    <>      <label>        Server URL:{' '}        <input          value={serverUrl}          onChange={e => setServerUrl(e.target.value)}        />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                        },
                                        "This may look like a React error, but really React is pointing out a bug in your code. Both roomId and serverUrl may change over time, but you’re forgetting to re-synchronize your Effect when they change. You will remain connected to the initial roomId and serverUrl even after the user picks different values in the UI.",
                                        "To fix the bug, follow the linter’s suggestion to specify roomId and serverUrl as dependencies of your Effect:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) { // roomId is reactive  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [serverUrl, roomId]); // ✅ All dependencies declared  // ...}"
                                        },
                                        "Try this fix in the sandbox above. Verify that the linter error is gone, and the chat re-connects when needed.",
                                        {
                                            "code_example": "set"
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "What to do when you don’t want to re-synchronize ",
                                    "content": [
                                        "In the previous example, you’ve fixed the lint error by listing roomId and serverUrl as dependencies.",
                                        "However, you could instead “prove” to the linter that these values aren’t reactive values, i.e. that they can’t change as a result of a re-render. For example, if serverUrl and roomId don’t depend on rendering and always have the same values, you can move them outside the component. Now they don’t need to be dependencies:",
                                        {
                                            "code_example": "const serverUrl = 'https://localhost:1234'; // serverUrl is not reactiveconst roomId = 'general'; // roomId is not reactivefunction ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, []); // ✅ All dependencies declared  // ...}"
                                        },
                                        "You can also move them inside the Effect. They aren’t calculated during rendering, so they’re not reactive:",
                                        {
                                            "code_example": "function ChatRoom() {  useEffect(() => {    const serverUrl = 'https://localhost:1234'; // serverUrl is not reactive    const roomId = 'general'; // roomId is not reactive    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, []); // ✅ All dependencies declared  // ...}"
                                        },
                                        "Effects are reactive blocks of code. They re-synchronize when the values you read inside of them change. Unlike event handlers, which only run once per interaction, Effects run whenever synchronization is necessary.",
                                        "You can’t “choose” your dependencies. Your dependencies must include every reactive value you read in the Effect. The linter enforces this. Sometimes this may lead to problems like infinite loops and to your Effect re-synchronizing too often. Don’t fix these problems by suppressing the linter! Here’s what to try instead:",
                                        "  1.\nCheck that your Effect represents an independent synchronization process. If your Effect doesn’t synchronize anything, it might be unnecessary. If it synchronizes several independent things, split it up.\n",
                                        "  2.\nIf you want to read the latest value of props or state without “reacting” to it and re-synchronizing the Effect, you can split your Effect into a reactive part (which you’ll keep in the Effect) and a non-reactive part (which you’ll extract into something called an Effect Event). Read about separating Events from Effects.\n",
                                        "  3.\nAvoid relying on objects and functions as dependencies. If you create objects and functions during rendering and then read them from an Effect, they will be different on every render. This will cause your Effect to re-synchronize every time. Read more about removing unnecessary dependencies from Effects.\n",
                                        {
                                            "code_example": "useEffect(() => {  // ...  // 🔴 Avoid suppressing the linter like this:  // eslint-ignore-next-line react-hooks/exhaustive-deps}, []);"
                                        },
                                        "Recap\nComponents can mount, update, and unmount.\nEach Effect has a separate lifecycle from the surrounding component.\nEach Effect describes a separate synchronization process that can start and stop.\nWhen you write and read Effects, think from each individual Effect’s perspective (how to start and stop synchronization) rather than from the component’s perspective (how it mounts, updates, or unmounts).\nValues declared inside the component body are “reactive”.\nReactive values should re-synchronize the Effect because they can change over time.\nThe linter verifies that all reactive values used inside the Effect are specified as dependencies.\nAll errors flagged by the linter are legitimate. There’s always a way to fix the code to not break the rules.\n",
                                        {
                                            "code_example": "ChatRoom"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Separating Events from Effects",
                    "url": "https://react.dev/learn/separating-events-from-effects",
                    "content": [
                        "Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if some value they read, like a prop or a state variable, is different from what it was during the last render. Sometimes, you also want a mix of both behaviors: an Effect that re-runs in response to some values but not others. This page will teach you how to do that.",
                        "You will learn\nHow to choose between an event handler and an Effect\nWhy Effects are reactive, and event handlers are not\nWhat to do when you want a part of your Effect’s code to not be reactive\nWhat Effect Events are, and how to extract them from your Effects\nHow to read the latest props and state from Effects using Effect Events\n",
                        {
                            "sub_header": "Choosing between event handlers and Effects ",
                            "content": [
                                "First, let’s recap the difference between event handlers and Effects.",
                                "Imagine you’re implementing a chat room component. Your requirements look like this:",
                                "  1.Your component should automatically connect to the selected chat room.",
                                "  2.When you click the “Send” button, it should send a message to the chat.",
                                "Let’s say you’ve already implemented the code for them, but you’re not sure where to put it. Should you use event handlers or Effects? Every time you need to answer this question, consider why the code needs to run.",
                                {
                                    "sub_header": "Event handlers run in response to specific interactions ",
                                    "content": [
                                        "From the user’s perspective, sending a message should happen because the particular “Send” button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  // ...  function handleSendClick() {    sendMessage(message);  }  // ...  return (    <>      <input value={message} onChange={e => setMessage(e.target.value)} />      <button onClick={handleSendClick}>Send</button>    </>  );}"
                                        },
                                        "With an event handler, you can be sure that sendMessage(message) will only run if the user presses the button."
                                    ]
                                },
                                {
                                    "sub_header": "Effects run whenever synchronization is needed ",
                                    "content": [
                                        "Recall that you also need to keep the component connected to the chat room. Where does that code go?",
                                        "The reason to run this code is not some particular interaction. It doesn’t matter why or how the user navigated to the chat room screen. Now that they’re looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you would still need to connect. This is why it’s an Effect:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  // ...  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]);  // ...}"
                                        },
                                        "With this code, you can be sure that there is always an active connection to the currently selected chat server, regardless of the specific interactions performed by the user. Whether the user has only opened your app, selected a different room, or navigated to another screen and back, your Effect ensures that the component will remain synchronized with the currently selected room, and will re-connect whenever it’s necessary.",
                                        {
                                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection, sendMessage } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  function handleSendClick() {    sendMessage(message);  }  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />      <button onClick={handleSendClick}>Send</button>    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  const [show, setShow] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <button onClick={() => setShow(!show)}>        {show ? 'Close chat' : 'Open chat'}      </button>      {show && <hr />}      {show && <ChatRoom roomId={roomId} />}    </>  );}"
                                        }
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Reactive values and reactive logic ",
                            "content": [
                                "Intuitively, you could say that event handlers are always triggered “manually”, for example by clicking a button. Effects, on the other hand, are “automatic”: they run and re-run as often as it’s needed to stay synchronized.",
                                "There is a more precise way to think about this.",
                                "Props, state, and variables declared inside your component’s body are called reactive values. In this example, serverUrl is not a reactive value, but roomId and message are. They participate in the rendering data flow:",
                                {
                                    "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  // ...}"
                                },
                                "Reactive values like these can change due to a re-render. For example, the user may edit the message or choose a different roomId in a dropdown. Event handlers and Effects respond to changes differently:",
                                "  1.Logic inside event handlers is not reactive. It will not run again unless the user performs the same interaction (e.g. a click) again. Event handlers can read reactive values without “reacting” to their changes.",
                                "  2.Logic inside Effects is reactive. If your Effect reads a reactive value, you have to specify it as a dependency. Then, if a re-render causes that value to change, React will re-run your Effect’s logic with the new value.",
                                "Let’s revisit the previous example to illustrate this difference.",
                                {
                                    "sub_header": "Logic inside event handlers is not reactive ",
                                    "content": [
                                        "Take a look at this line of code. Should this logic be reactive or not?",
                                        {
                                            "code_example": "    // ...    sendMessage(message);    // ..."
                                        },
                                        "From the user’s perspective, a change to the message does not mean that they want to send a message. It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because the reactive value has changed. That’s why it belongs in the event handler:",
                                        {
                                            "code_example": "  function handleSendClick() {    sendMessage(message);  }"
                                        },
                                        "Event handlers aren’t reactive, so sendMessage(message) will only run when the user clicks the Send button."
                                    ]
                                },
                                {
                                    "sub_header": "Logic inside Effects is reactive ",
                                    "content": [
                                        "Now let’s return to these lines:",
                                        {
                                            "code_example": "    // ...    const connection = createConnection(serverUrl, roomId);    connection.connect();    // ..."
                                        },
                                        "From the user’s perspective, a change to the roomId does mean that they want to connect to a different room. In other words, the logic for connecting to the room should be reactive. You want these lines of code to “keep up” with the reactive value, and to run again if that value is different. That’s why it belongs in an Effect:",
                                        {
                                            "code_example": "  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect()    };  }, [roomId]);"
                                        },
                                        "Effects are reactive, so createConnection(serverUrl, roomId) and connection.connect() will run for every distinct value of roomId. Your Effect keeps the chat connection synchronized to the currently selected room."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Extracting non-reactive logic out of Effects ",
                            "content": [
                                "Things get more tricky when you want to mix reactive logic with non-reactive logic.",
                                "For example, imagine that you want to show a notification when the user connects to the chat. You read the current theme (dark or light) from the props so that you can show the notification in the correct color:",
                                {
                                    "code_example": "function ChatRoom({ roomId, theme }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      showNotification('Connected!', theme);    });    connection.connect();    // ..."
                                },
                                "However, theme is a reactive value (it can change as a result of re-rendering), and every reactive value read by an Effect must be declared as its dependency. Now you have to specify theme as a dependency of your Effect:",
                                {
                                    "code_example": "function ChatRoom({ roomId, theme }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      showNotification('Connected!', theme);    });    connection.connect();    return () => {      connection.disconnect()    };  }, [roomId, theme]); // ✅ All dependencies declared  // ..."
                                },
                                "Play with this example and see if you can spot the problem with this user experience:",
                                {
                                    "code_sandbox": "chat.jsnotifications.jsimport { useState, useEffect } from 'react';import { createConnection, sendMessage } from './chat.js';import { showNotification } from './notifications.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId, theme }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      showNotification('Connected!', theme);    });    connection.connect();    return () => connection.disconnect();  }, [roomId, theme]);  return <h1>Welcome to the {roomId} room!</h1>}export default function App() {  const [roomId, setRoomId] = useState('general');  const [isDark, setIsDark] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <label>        <input          type=\"checkbox\"          checked={isDark}          onChange={e => setIsDark(e.target.checked)}        />        Use dark theme      </label>      <hr />      <ChatRoom        roomId={roomId}        theme={isDark ? 'dark' : 'light'}      />    </>  );}"
                                },
                                "When the roomId changes, the chat re-connects as you would expect. But since theme is also a dependency, the chat also re-connects every time you switch between the dark and the light theme. That’s not great!",
                                "In other words, you don’t want this line to be reactive, even though it is inside an Effect (which is reactive):",
                                {
                                    "code_example": "      // ...      showNotification('Connected!', theme);      // ..."
                                },
                                "You need a way to separate this non-reactive logic from the reactive Effect around it.",
                                {
                                    "sub_header": "Declaring an Effect Event ",
                                    "content": [
                                        "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                        "Use a special Hook called useEffectEvent to extract this non-reactive logic out of your Effect:",
                                        {
                                            "code_example": "import { useEffect, useEffectEvent } from 'react';function ChatRoom({ roomId, theme }) {  const onConnected = useEffectEvent(() => {    showNotification('Connected!', theme);  });  // ..."
                                        },
                                        "Here, onConnected is called an Effect Event. It’s a part of your Effect logic, but it behaves a lot more like an event handler. The logic inside it is not reactive, and it always “sees” the latest values of your props and state.",
                                        "Now you can call the onConnected Effect Event from inside your Effect:",
                                        {
                                            "code_example": "function ChatRoom({ roomId, theme }) {  const onConnected = useEffectEvent(() => {    showNotification('Connected!', theme);  });  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      onConnected();    });    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                        },
                                        "This solves the problem. Note that you had to remove onConnected from the list of your Effect’s dependencies. Effect Events are not reactive and must be omitted from dependencies.",
                                        "Verify that the new behavior works as you would expect:",
                                        {
                                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { experimental_useEffectEvent as useEffectEvent } from 'react';import { createConnection, sendMessage } from './chat.js';import { showNotification } from './notifications.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId, theme }) {  const onConnected = useEffectEvent(() => {    showNotification('Connected!', theme);  });  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      onConnected();    });    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>}export default function App() {  const [roomId, setRoomId] = useState('general');  const [isDark, setIsDark] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <label>        <input          type=\"checkbox\"          checked={isDark}          onChange={e => setIsDark(e.target.checked)}        />        Use dark theme      </label>      <hr />      <ChatRoom        roomId={roomId}        theme={isDark ? 'dark' : 'light'}      />    </>  );}"
                                        },
                                        "You can think of Effect Events as being very similar to event handlers. The main difference is that event handlers run in response to a user interactions, whereas Effect Events are triggered by you from Effects. Effect Events let you “break the chain” between the reactivity of Effects and code that should not be reactive."
                                    ]
                                },
                                {
                                    "sub_header": "Reading latest props and state with Effect Events ",
                                    "content": [
                                        "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                        "Effect Events let you fix many patterns where you might be tempted to suppress the dependency linter.",
                                        "For example, say you have an Effect to log the page visits:",
                                        {
                                            "code_example": "function Page() {  useEffect(() => {    logVisit();  }, []);  // ...}"
                                        },
                                        "Later, you add multiple routes to your site. Now your Page component receives a url prop with the current path. You want to pass the url as a part of your logVisit call, but the dependency linter complains:",
                                        {
                                            "code_example": "function Page({ url }) {  useEffect(() => {    logVisit(url);  }, []); // 🔴 React Hook useEffect has a missing dependency: 'url'  // ...}"
                                        },
                                        "Think about what you want the code to do. You want to log a separate visit for different URLs since each URL represents a different page. In other words, this logVisit call should be reactive with respect to the url. This is why, in this case, it makes sense to follow the dependency linter, and add url as a dependency:",
                                        {
                                            "code_example": "function Page({ url }) {  useEffect(() => {    logVisit(url);  }, [url]); // ✅ All dependencies declared  // ...}"
                                        },
                                        "Now let’s say you want to include the number of items in the shopping cart together with every page visit:",
                                        {
                                            "code_example": "function Page({ url }) {  const { items } = useContext(ShoppingCartContext);  const numberOfItems = items.length;  useEffect(() => {    logVisit(url, numberOfItems);  }, [url]); // 🔴 React Hook useEffect has a missing dependency: 'numberOfItems'  // ...}"
                                        },
                                        "You used numberOfItems inside the Effect, so the linter asks you to add it as a dependency. However, you don’t want the logVisit call to be reactive with respect to numberOfItems. If the user puts something into the shopping cart, and the numberOfItems changes, this does not mean that the user visited the page again. In other words, visiting the page is, in some sense, an “event”. It happens at a precise moment in time.",
                                        "Split the code in two parts:",
                                        {
                                            "code_example": "function Page({ url }) {  const { items } = useContext(ShoppingCartContext);  const numberOfItems = items.length;  const onVisit = useEffectEvent(visitedUrl => {    logVisit(visitedUrl, numberOfItems);  });  useEffect(() => {    onVisit(url);  }, [url]); // ✅ All dependencies declared  // ...}"
                                        },
                                        "Here, onVisit is an Effect Event. The code inside it isn’t reactive. This is why you can use numberOfItems (or any other reactive value!) without worrying that it will cause the surrounding code to re-execute on changes.",
                                        "On the other hand, the Effect itself remains reactive. Code inside the Effect uses the url prop, so the Effect will re-run after every re-render with a different url. This, in turn, will call the onVisit Effect Event.",
                                        "As a result, you will call logVisit for every change to the url, and always read the latest numberOfItems. However, if numberOfItems changes on its own, this will not cause any of the code to re-run.",
                                        {
                                            "code_example": "onVisit()"
                                        },
                                        "Deep DiveIs it okay to suppress the dependency linter instead? Show DetailsIn the existing codebases, you may sometimes see the lint rule suppressed like this:function Page({ url }) {  const { items } = useContext(ShoppingCartContext);  const numberOfItems = items.length;  useEffect(() => {    logVisit(url, numberOfItems);    // 🔴 Avoid suppressing the linter like this:    // eslint-disable-next-line react-hooks/exhaustive-deps  }, [url]);  // ...}After useEffectEvent becomes a stable part of React, we recommend never suppressing the linter.The first downside of suppressing the rule is that React will no longer warn you when your Effect needs to “react” to a new reactive dependency you’ve introduced to your code. In the earlier example, you added url to the dependencies because React reminded you to do it. You will no longer get such reminders for any future edits to that Effect if you disable the linter. This leads to bugs.Here is an example of a confusing bug caused by suppressing the linter. In this example, the handleMove function is supposed to read the current canMove state variable value in order to decide whether the dot should follow the cursor. However, canMove is always true inside handleMove.Can you see why?App.jsApp.js ResetForkimport { useState, useEffect } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  function handleMove(e) {\n    if (canMove) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)}\n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n\nShow moreThe problem with this code is in suppressing the dependency linter. If you remove the suppression, you’ll see that this Effect should depend on the handleMove function. This makes sense: handleMove is declared inside the component body, which makes it a reactive value. Every reactive value must be specified as a dependency, or it can potentially get stale over time!The author of the original code has “lied” to React by saying that the Effect does not depend ([]) on any reactive values. This is why React did not re-synchronize the Effect after canMove has changed (and handleMove with it). Because React did not re-synchronize the Effect, the handleMove attached as a listener is the handleMove function created during the initial render. During the initial render, canMove was true, which is why handleMove from the initial render will forever see that value.If you never suppress the linter, you will never see problems with stale values.With useEffectEvent, there is no need to “lie” to the linter, and the code works as you would expect:App.jsApp.js ResetForkimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  const onMove = useEffectEvent(e => {\n    if (canMove) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener('pointermove', onMove);\n    return () => window.removeEventListener('pointermove', onMove);\n  }, []);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)}\n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n\nShow moreThis doesn’t mean that useEffectEvent is always the correct solution. You should only apply it to the lines of code that you don’t want to be reactive. In the above sandbox, you didn’t want the Effect’s code to be reactive with regards to canMove. That’s why it made sense to extract an Effect Event.Read Removing Effect Dependencies for other correct alternatives to suppressing the linter."
                                    ]
                                },
                                {
                                    "sub_header": "Limitations of Effect Events ",
                                    "content": [
                                        "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                        "Effect Events are very limited in how you can use them:",
                                        "  1.Only call them from inside Effects.",
                                        "  2.Never pass them to other components or Hooks.",
                                        "For example, don’t declare and pass an Effect Event like this:",
                                        {
                                            "code_example": "function Timer() {  const [count, setCount] = useState(0);  const onTick = useEffectEvent(() => {    setCount(count + 1);  });  useTimer(onTick, 1000); // 🔴 Avoid: Passing Effect Events  return <h1>{count}</h1>}function useTimer(callback, delay) {  useEffect(() => {    const id = setInterval(() => {      callback();    }, delay);    return () => {      clearInterval(id);    };  }, [delay, callback]); // Need to specify \"callback\" in dependencies}"
                                        },
                                        "Instead, always declare Effect Events directly next to the Effects that use them:",
                                        {
                                            "code_example": "function Timer() {  const [count, setCount] = useState(0);  useTimer(() => {    setCount(count + 1);  }, 1000);  return <h1>{count}</h1>}function useTimer(callback, delay) {  const onTick = useEffectEvent(() => {    callback();  });  useEffect(() => {    const id = setInterval(() => {      onTick(); // ✅ Good: Only called locally inside an Effect    }, delay);    return () => {      clearInterval(id);    };  }, [delay]); // No need to specify \"onTick\" (an Effect Event) as a dependency}"
                                        },
                                        "Effect Events are non-reactive “pieces” of your Effect code. They should be next to the Effect using them.",
                                        "Recap\nEvent handlers run in response to specific interactions.\nEffects run whenever synchronization is needed.\nLogic inside event handlers is not reactive.\nLogic inside Effects is reactive.\nYou can move non-reactive logic from Effects into Effect Events.\nOnly call Effect Events from inside Effects.\nDon’t pass Effect Events to other components or Hooks.\n",
                                        {
                                            "code_example": "Timer"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Removing Effect Dependencies",
                    "url": "https://react.dev/learn/removing-effect-dependencies",
                    "content": [
                        "When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. Follow this guide to review and remove unnecessary dependencies from your Effects.",
                        "You will learn\nHow to fix infinite Effect dependency loops\nWhat to do when you want to remove a dependency\nHow to read a value from your Effect without “reacting” to it\nHow and why to avoid object and function dependencies\nWhy suppressing the dependency linter is dangerous, and what to do instead\n",
                        {
                            "sub_header": "Dependencies should match the code ",
                            "content": [
                                "When you write an Effect, you first specify how to start and stop whatever you want your Effect to be doing:",
                                {
                                    "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  \t// ...}"
                                },
                                "Then, if you leave the Effect dependencies empty ([]), the linter will suggest the correct dependencies:",
                                {
                                    "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []); // <-- Fix the mistake here!  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                },
                                "Fill them in according to what the linter says:",
                                {
                                    "code_example": "function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ...}"
                                },
                                "Effects “react” to reactive values. Since roomId is a reactive value (it can change due to a re-render), the linter verifies that you’ve specified it as a dependency. If roomId receives a different value, React will re-synchronize your Effect. This ensures that the chat stays connected to the selected room and “reacts” to the dropdown:",
                                {
                                    "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                },
                                {
                                    "sub_header": "To remove a dependency, prove that it’s not a dependency ",
                                    "content": [
                                        "Notice that you can’t “choose” the dependencies of your Effect. Every reactive value used by your Effect’s code must be declared in your dependency list. The dependency list is determined by the surrounding code:",
                                        {
                                            "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) { // This is a reactive value  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // This Effect reads that reactive value    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ So you must specify that reactive value as a dependency of your Effect  // ...}"
                                        },
                                        "Reactive values include props and all variables and functions declared directly inside of your component. Since roomId is a reactive value, you can’t remove it from the dependency list. The linter wouldn’t allow it:",
                                        {
                                            "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []); // 🔴 React Hook useEffect has a missing dependency: 'roomId'  // ...}"
                                        },
                                        "And the linter would be right! Since roomId may change over time, this would introduce a bug in your code.",
                                        "To remove a dependency, “prove” to the linter that it doesn’t need to be a dependency. For example, you can move roomId out of your component to prove that it’s not reactive and won’t change on re-renders:",
                                        {
                                            "code_example": "const serverUrl = 'https://localhost:1234';const roomId = 'music'; // Not a reactive value anymorefunction ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []); // ✅ All dependencies declared  // ...}"
                                        },
                                        "Now that roomId is not a reactive value (and can’t change on a re-render), it doesn’t need to be a dependency:",
                                        {
                                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';const roomId = 'music';export default function ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []);  return <h1>Welcome to the {roomId} room!</h1>;}"
                                        },
                                        "This is why you could now specify an empty ([]) dependency list. Your Effect really doesn’t depend on any reactive value anymore, so it really doesn’t need to re-run when any of the component’s props or state change."
                                    ]
                                },
                                {
                                    "sub_header": "To change the dependencies, change the code ",
                                    "content": [
                                        "You might have noticed a pattern in your workflow:",
                                        "  1.First, you change the code of your Effect or how your reactive values are declared.",
                                        "  2.Then, you follow the linter and adjust the dependencies to match the code you have changed.",
                                        "  3.If you’re not happy with the list of dependencies, you go back to the first step (and change the code again).",
                                        "The last part is important. If you want to change the dependencies, change the surrounding code first. You can think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t choose what to put on that list. The list describes your code. To change the dependency list, change the code.",
                                        "This might feel like solving an equation. You might start with a goal (for example, to remove a dependency), and you need to “find” the code matching that goal. Not everyone finds solving equations fun, and the same thing could be said about writing Effects! Luckily, there is a list of common recipes that you can try below.",
                                        {
                                            "code_example": "useEffect(() => {  // ...  // 🔴 Avoid suppressing the linter like this:  // eslint-ignore-next-line react-hooks/exhaustive-deps}, []);"
                                        },
                                        "Deep DiveWhy is suppressing the dependency linter so dangerous? Show DetailsSuppressing the linter leads to very unintuitive bugs that are hard to find and fix. Here’s one example:App.jsApp.js ResetForkimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n  const [increment, setIncrement] = useState(1);\n\n  function onTick() {\n\tsetCount(count + increment);\n  }\n\n  useEffect(() => {\n    const id = setInterval(onTick, 1000);\n    return () => clearInterval(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <h1>\n        Counter: {count}\n        <button onClick={() => setCount(0)}>Reset</button>\n      </h1>\n      <hr />\n      <p>\n        Every second, increment by:\n        <button disabled={increment === 0} onClick={() => {\n          setIncrement(i => i - 1);\n        }}>–</button>\n        <b>{increment}</b>\n        <button onClick={() => {\n          setIncrement(i => i + 1);\n        }}>+</button>\n      </p>\n    </>\n  );\n}\n\nShow moreLet’s say that you wanted to run the Effect “only on mount”. You’ve read that empty ([]) dependencies do that, so you’ve decided to ignore the linter, and forcefully specified [] as the dependencies.This counter was supposed to increment every second by the amount configurable with the two buttons. However, since you “lied” to React that this Effect doesn’t depend on anything, React forever keeps using the onTick function from the initial render. During that render, count was 0 and increment was 1. This is why onTick from that render always calls setCount(0 + 1) every second, and you always see 1. Bugs like this are harder to fix when they’re spread across multiple components.There’s always a better solution than ignoring the linter! To fix this code, you need to add onTick to the dependency list. (To ensure the interval is only setup once, make onTick an Effect Event.)We recommend treating the dependency lint error as a compilation error. If you don’t suppress it, you will never see bugs like this. The rest of this page documents the alternatives for this and other cases."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Removing unnecessary dependencies ",
                            "content": [
                                "Every time you adjust the Effect’s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is “no”:",
                                "  1.You might want to re-execute different parts of your Effect under different conditions.",
                                "  2.You might want to only read the latest value of some dependency instead of “reacting” to its changes.",
                                "  3.A dependency may change too often unintentionally because it’s an object or a function.",
                                "To find the right solution, you’ll need to answer a few questions about your Effect. Let’s walk through them.",
                                {
                                    "sub_header": "Should this code move to an event handler? ",
                                    "content": [
                                        "The first thing you should think about is whether this code should be an Effect at all.",
                                        "Imagine a form. On submit, you set the submitted state variable to true. You need to send a POST request and show a notification. You’ve put this logic inside an Effect that “reacts” to submitted being true:",
                                        {
                                            "code_example": "function Form() {  const [submitted, setSubmitted] = useState(false);  useEffect(() => {    if (submitted) {      // 🔴 Avoid: Event-specific logic inside an Effect      post('/api/register');      showNotification('Successfully registered!');    }  }, [submitted]);  function handleSubmit() {    setSubmitted(true);  }  // ...}"
                                        },
                                        "Later, you want to style the notification message according to the current theme, so you read the current theme. Since theme is declared in the component body, it is a reactive value, so you add it as a dependency:",
                                        {
                                            "code_example": "function Form() {  const [submitted, setSubmitted] = useState(false);  const theme = useContext(ThemeContext);  useEffect(() => {    if (submitted) {      // 🔴 Avoid: Event-specific logic inside an Effect      post('/api/register');      showNotification('Successfully registered!', theme);    }  }, [submitted, theme]); // ✅ All dependencies declared  function handleSubmit() {    setSubmitted(true);  }    // ...}"
                                        },
                                        "By doing this, you’ve introduced a bug. Imagine you submit the form first and then switch between Dark and Light themes. The theme will change, the Effect will re-run, and so it will display the same notification again!",
                                        "The problem here is that this shouldn’t be an Effect in the first place. You want to send this POST request and show the notification in response to submitting the form, which is a particular interaction. To run some code in response to particular interaction, put that logic directly into the corresponding event handler:",
                                        {
                                            "code_example": "function Form() {  const theme = useContext(ThemeContext);  function handleSubmit() {    // ✅ Good: Event-specific logic is called from event handlers    post('/api/register');    showNotification('Successfully registered!', theme);  }    // ...}"
                                        },
                                        "Now that the code is in an event handler, it’s not reactive—so it will only run when the user submits the form. Read more about choosing between event handlers and Effects and how to delete unnecessary Effects."
                                    ]
                                },
                                {
                                    "sub_header": "Is your Effect doing several unrelated things? ",
                                    "content": [
                                        "The next question you should ask yourself is whether your Effect is doing several unrelated things.",
                                        "Imagine you’re creating a shipping form where the user needs to choose their city and area. You fetch the list of cities from the server according to the selected country to show them in a dropdown:",
                                        {
                                            "code_example": "function ShippingForm({ country }) {  const [cities, setCities] = useState(null);  const [city, setCity] = useState(null);  useEffect(() => {    let ignore = false;    fetch(`/api/cities?country=${country}`)      .then(response => response.json())      .then(json => {        if (!ignore) {          setCities(json);        }      });    return () => {      ignore = true;    };  }, [country]); // ✅ All dependencies declared  // ..."
                                        },
                                        "This is a good example of fetching data in an Effect. You are synchronizing the cities state with the network according to the country prop. You can’t do this in an event handler because you need to fetch as soon as ShippingForm is displayed and whenever the country changes (no matter which interaction causes it).",
                                        "Now let’s say you’re adding a second select box for city areas, which should fetch the areas for the currently selected city. You might start by adding a second fetch call for the list of areas inside the same Effect:",
                                        {
                                            "code_example": "function ShippingForm({ country }) {  const [cities, setCities] = useState(null);  const [city, setCity] = useState(null);  const [areas, setAreas] = useState(null);  useEffect(() => {    let ignore = false;    fetch(`/api/cities?country=${country}`)      .then(response => response.json())      .then(json => {        if (!ignore) {          setCities(json);        }      });    // 🔴 Avoid: A single Effect synchronizes two independent processes    if (city) {      fetch(`/api/areas?city=${city}`)        .then(response => response.json())        .then(json => {          if (!ignore) {            setAreas(json);          }        });    }    return () => {      ignore = true;    };  }, [country, city]); // ✅ All dependencies declared  // ..."
                                        },
                                        "However, since the Effect now uses the city state variable, you’ve had to add city to the list of dependencies. That, in turn, introduced a problem: when the user selects a different city, the Effect will re-run and call fetchCities(country). As a result, you will be unnecessarily refetching the list of cities many times.",
                                        "The problem with this code is that you’re synchronizing two different unrelated things:",
                                        "  1.You want to synchronize the cities state to the network based on the country prop.",
                                        "  2.You want to synchronize the areas state to the network based on the city state.",
                                        "Split the logic into two Effects, each of which reacts to the prop that it needs to synchronize with:",
                                        {
                                            "code_example": "function ShippingForm({ country }) {  const [cities, setCities] = useState(null);  useEffect(() => {    let ignore = false;    fetch(`/api/cities?country=${country}`)      .then(response => response.json())      .then(json => {        if (!ignore) {          setCities(json);        }      });    return () => {      ignore = true;    };  }, [country]); // ✅ All dependencies declared  const [city, setCity] = useState(null);  const [areas, setAreas] = useState(null);  useEffect(() => {    if (city) {      let ignore = false;      fetch(`/api/areas?city=${city}`)        .then(response => response.json())        .then(json => {          if (!ignore) {            setAreas(json);          }        });      return () => {        ignore = true;      };    }  }, [city]); // ✅ All dependencies declared  // ..."
                                        },
                                        "Now the first Effect only re-runs if the country changes, while the second Effect re-runs when the city changes. You’ve separated them by purpose: two different things are synchronized by two separate Effects. Two separate Effects have two separate dependency lists, so they won’t trigger each other unintentionally.",
                                        "The final code is longer than the original, but splitting these Effects is still correct. Each Effect should represent an independent synchronization process. In this example, deleting one Effect doesn’t break the other Effect’s logic. This means they synchronize different things, and it’s good to split them up. If you’re concerned about duplication, you can improve this code by extracting repetitive logic into a custom Hook."
                                    ]
                                },
                                {
                                    "sub_header": "Are you reading some state to calculate the next state? ",
                                    "content": [
                                        "This Effect updates the messages state variable with a newly created array every time a new message arrives:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages([...messages, receivedMessage]);    });    // ..."
                                        },
                                        "It uses the messages variable to create a new array starting with all the existing messages and adds the new message at the end. However, since messages is a reactive value read by an Effect, it must be a dependency:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages([...messages, receivedMessage]);    });    return () => connection.disconnect();  }, [roomId, messages]); // ✅ All dependencies declared  // ..."
                                        },
                                        "And making messages a dependency introduces a problem.",
                                        "Every time you receive a message, setMessages() causes the component to re-render with a new messages array that includes the received message. However, since this Effect now depends on messages, this will also re-synchronize the Effect. So every new message will make the chat re-connect. The user would not like that!",
                                        "To fix the issue, don’t read messages inside the Effect. Instead, pass an updater function to setMessages:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages(msgs => [...msgs, receivedMessage]);    });    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                        },
                                        "Notice how your Effect does not read the messages variable at all now. You only need to pass an updater function like msgs => [...msgs, receivedMessage]. React puts your updater function in a queue and will provide the msgs argument to it during the next render. This is why the Effect itself doesn’t need to depend on messages anymore. As a result of this fix, receiving a chat message will no longer make the chat re-connect."
                                    ]
                                },
                                {
                                    "sub_header": "Do you want to read a value without “reacting” to its changes? ",
                                    "content": [
                                        "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                        "Suppose that you want to play a sound when the user receives a new message unless isMuted is true:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  const [isMuted, setIsMuted] = useState(false);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages(msgs => [...msgs, receivedMessage]);      if (!isMuted) {        playSound();      }    });    // ..."
                                        },
                                        "Since your Effect now uses isMuted in its code, you have to add it to the dependencies:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  const [isMuted, setIsMuted] = useState(false);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages(msgs => [...msgs, receivedMessage]);      if (!isMuted) {        playSound();      }    });    return () => connection.disconnect();  }, [roomId, isMuted]); // ✅ All dependencies declared  // ..."
                                        },
                                        "The problem is that every time isMuted changes (for example, when the user presses the “Muted” toggle), the Effect will re-synchronize, and reconnect to the chat. This is not the desired user experience! (In this example, even disabling the linter would not work—if you do that, isMuted would get “stuck” with its old value.)",
                                        "To solve this problem, you need to extract the logic that shouldn’t be reactive out of the Effect. You don’t want this Effect to “react” to the changes in isMuted. Move this non-reactive piece of logic into an Effect Event:",
                                        {
                                            "code_example": "import { useState, useEffect, useEffectEvent } from 'react';function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  const [isMuted, setIsMuted] = useState(false);  const onMessage = useEffectEvent(receivedMessage => {    setMessages(msgs => [...msgs, receivedMessage]);    if (!isMuted) {      playSound();    }  });  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      onMessage(receivedMessage);    });    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                        },
                                        "Effect Events let you split an Effect into reactive parts (which should “react” to reactive values like roomId and their changes) and non-reactive parts (which only read their latest values, like onMessage reads isMuted). Now that you read isMuted inside an Effect Event, it doesn’t need to be a dependency of your Effect. As a result, the chat won’t re-connect when you toggle the “Muted” setting on and off, solving the original issue!",
                                        {
                                            "sub_header": "Wrapping an event handler from the props ",
                                            "content": [
                                                "You might run into a similar problem when your component receives an event handler as a prop:",
                                                {
                                                    "code_example": "function ChatRoom({ roomId, onReceiveMessage }) {  const [messages, setMessages] = useState([]);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      onReceiveMessage(receivedMessage);    });    return () => connection.disconnect();  }, [roomId, onReceiveMessage]); // ✅ All dependencies declared  // ..."
                                                },
                                                "Suppose that the parent component passes a different onReceiveMessage function on every render:",
                                                {
                                                    "code_example": "<ChatRoom  roomId={roomId}  onReceiveMessage={receivedMessage => {    // ...  }}/>"
                                                },
                                                "Since onReceiveMessage is a dependency, it would cause the Effect to re-synchronize after every parent re-render. This would make it re-connect to the chat. To solve this, wrap the call in an Effect Event:",
                                                {
                                                    "code_example": "function ChatRoom({ roomId, onReceiveMessage }) {  const [messages, setMessages] = useState([]);  const onMessage = useEffectEvent(receivedMessage => {    onReceiveMessage(receivedMessage);  });  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      onMessage(receivedMessage);    });    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                                },
                                                "Effect Events aren’t reactive, so you don’t need to specify them as dependencies. As a result, the chat will no longer re-connect even if the parent component passes a function that’s different on every re-render."
                                            ]
                                        },
                                        {
                                            "sub_header": "Separating reactive and non-reactive code ",
                                            "content": [
                                                "In this example, you want to log a visit every time roomId changes. You want to include the current notificationCount with every log, but you don’t want a change to notificationCount to trigger a log event.",
                                                "The solution is again to split out the non-reactive code into an Effect Event:",
                                                {
                                                    "code_example": "function Chat({ roomId, notificationCount }) {  const onVisit = useEffectEvent(visitedRoomId => {    logVisit(visitedRoomId, notificationCount);  });  useEffect(() => {    onVisit(roomId);  }, [roomId]); // ✅ All dependencies declared  // ...}"
                                                },
                                                "You want your logic to be reactive with regards to roomId, so you read roomId inside of your Effect. However, you don’t want a change to notificationCount to log an extra visit, so you read notificationCount inside of the Effect Event. Learn more about reading the latest props and state from Effects using Effect Events."
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Does some reactive value change unintentionally? ",
                                    "content": [
                                        "Sometimes, you do want your Effect to “react” to a certain value, but that value changes more often than you’d like—and might not reflect any actual change from the user’s perspective. For example, let’s say that you create an options object in the body of your component, and then read that object from inside of your Effect:",
                                        {
                                            "code_example": "function ChatRoom({ roomId }) {  // ...  const options = {    serverUrl: serverUrl,    roomId: roomId  };  useEffect(() => {    const connection = createConnection(options);    connection.connect();    // ..."
                                        },
                                        "This object is declared in the component body, so it’s a reactive value. When you read a reactive value like this inside an Effect, you declare it as a dependency. This ensures your Effect “reacts” to its changes:",
                                        {
                                            "code_example": "  // ...  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [options]); // ✅ All dependencies declared  // ..."
                                        },
                                        "It is important to declare it as a dependency! This ensures, for example, that if the roomId changes, your Effect will re-connect to the chat with the new options. However, there is also a problem with the code above. To see it, try typing into the input in the sandbox below, and watch what happens in the console:",
                                        {
                                            "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  // Temporarily disable the linter to demonstrate the problem  // eslint-disable-next-line react-hooks/exhaustive-deps  const options = {    serverUrl: serverUrl,    roomId: roomId  };  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [options]);  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                        },
                                        "In the sandbox above, the input only updates the message state variable. From the user’s perspective, this should not affect the chat connection. However, every time you update the message, your component re-renders. When your component re-renders, the code inside of it runs again from scratch.",
                                        "A new options object is created from scratch on every re-render of the ChatRoom component. React sees that the options object is a different object from the options object created during the last render. This is why it re-synchronizes your Effect (which depends on options), and the chat re-connects as you type.",
                                        "This problem only affects objects and functions. In JavaScript, each newly created object and function is considered distinct from all the others. It doesn’t matter that the contents inside of them may be the same!",
                                        {
                                            "code_example": "// During the first renderconst options1 = { serverUrl: 'https://localhost:1234', roomId: 'music' };// During the next renderconst options2 = { serverUrl: 'https://localhost:1234', roomId: 'music' };// These are two different objects!console.log(Object.is(options1, options2)); // false"
                                        },
                                        "Object and function dependencies can make your Effect re-synchronize more often than you need.",
                                        "This is why, whenever possible, you should try to avoid objects and functions as your Effect’s dependencies. Instead, try moving them outside the component, inside the Effect, or extracting primitive values out of them.",
                                        {
                                            "sub_header": "Move static objects and functions outside your component ",
                                            "content": [
                                                "If the object does not depend on any props and state, you can move that object outside your component:",
                                                {
                                                    "code_example": "const options = {  serverUrl: 'https://localhost:1234',  roomId: 'music'};function ChatRoom() {  const [message, setMessage] = useState('');  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, []); // ✅ All dependencies declared  // ..."
                                                },
                                                "This way, you prove to the linter that it’s not reactive. It can’t change as a result of a re-render, so it doesn’t need to be a dependency. Now re-rendering ChatRoom won’t cause your Effect to re-synchronize.",
                                                "This works for functions too:",
                                                {
                                                    "code_example": "function createOptions() {  return {    serverUrl: 'https://localhost:1234',    roomId: 'music'  };}function ChatRoom() {  const [message, setMessage] = useState('');  useEffect(() => {    const options = createOptions();    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, []); // ✅ All dependencies declared  // ..."
                                                },
                                                "Since createOptions is declared outside your component, it’s not a reactive value. This is why it doesn’t need to be specified in your Effect’s dependencies, and why it won’t ever cause your Effect to re-synchronize."
                                            ]
                                        },
                                        {
                                            "sub_header": "Move dynamic objects and functions inside your Effect ",
                                            "content": [
                                                "If your object depends on some reactive value that may change as a result of a re-render, like a roomId prop, you can’t pull it outside your component. You can, however, move its creation inside of your Effect’s code:",
                                                {
                                                    "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                                },
                                                "Now that options is declared inside of your Effect, it is no longer a dependency of your Effect. Instead, the only reactive value used by your Effect is roomId. Since roomId is not an object or function, you can be sure that it won’t be unintentionally different. In JavaScript, numbers and strings are compared by their content:",
                                                {
                                                    "code_example": "// During the first renderconst roomId1 = 'music';// During the next renderconst roomId2 = 'music';// These two strings are the same!console.log(Object.is(roomId1, roomId2)); // true"
                                                },
                                                "Thanks to this fix, the chat no longer re-connects if you edit the input:",
                                                {
                                                    "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                                },
                                                "However, it does re-connect when you change the roomId dropdown, as you would expect.",
                                                "This works for functions, too:",
                                                {
                                                    "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    function createOptions() {      return {        serverUrl: serverUrl,        roomId: roomId      };    }    const options = createOptions();    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                                },
                                                "You can write your own functions to group pieces of logic inside your Effect. As long as you also declare them inside your Effect, they’re not reactive values, and so they don’t need to be dependencies of your Effect."
                                            ]
                                        },
                                        {
                                            "sub_header": "Read primitive values from objects ",
                                            "content": [
                                                "Sometimes, you may receive an object from props:",
                                                {
                                                    "code_example": "function ChatRoom({ options }) {  const [message, setMessage] = useState('');  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [options]); // ✅ All dependencies declared  // ..."
                                                },
                                                "The risk here is that the parent component will create the object during rendering:",
                                                {
                                                    "code_example": "<ChatRoom  roomId={roomId}  options={{    serverUrl: serverUrl,    roomId: roomId  }}/>"
                                                },
                                                "This would cause your Effect to re-connect every time the parent component re-renders. To fix this, read information from the object outside the Effect, and avoid having object and function dependencies:",
                                                {
                                                    "code_example": "function ChatRoom({ options }) {  const [message, setMessage] = useState('');  const { roomId, serverUrl } = options;  useEffect(() => {    const connection = createConnection({      roomId: roomId,      serverUrl: serverUrl    });    connection.connect();    return () => connection.disconnect();  }, [roomId, serverUrl]); // ✅ All dependencies declared  // ..."
                                                },
                                                "The logic gets a little repetitive (you read some values from an object outside an Effect, and then create an object with the same values inside the Effect). But it makes it very explicit what information your Effect actually depends on. If an object is re-created unintentionally by the parent component, the chat would not re-connect. However, if options.roomId or options.serverUrl really are different, the chat would re-connect."
                                            ]
                                        },
                                        {
                                            "sub_header": "Calculate primitive values from functions ",
                                            "content": [
                                                "The same approach can work for functions. For example, suppose the parent component passes a function:",
                                                {
                                                    "code_example": "<ChatRoom  roomId={roomId}  getOptions={() => {    return {      serverUrl: serverUrl,      roomId: roomId    };  }}/>"
                                                },
                                                "To avoid making it a dependency (and causing it to re-connect on re-renders), call it outside the Effect. This gives you the roomId and serverUrl values that aren’t objects, and that you can read from inside your Effect:",
                                                {
                                                    "code_example": "function ChatRoom({ getOptions }) {  const [message, setMessage] = useState('');  const { roomId, serverUrl } = getOptions();  useEffect(() => {    const connection = createConnection({      roomId: roomId,      serverUrl: serverUrl    });    connection.connect();    return () => connection.disconnect();  }, [roomId, serverUrl]); // ✅ All dependencies declared  // ..."
                                                },
                                                "This only works for pure functions because they are safe to call during rendering. If your function is an event handler, but you don’t want its changes to re-synchronize your Effect, wrap it into an Effect Event instead.",
                                                "Recap\nDependencies should always match the code.\nWhen you’re not happy with your dependencies, what you need to edit is the code.\nSuppressing the linter leads to very confusing bugs, and you should always avoid it.\nTo remove a dependency, you need to “prove” to the linter that it’s not necessary.\nIf some code should run in response to a specific interaction, move that code to an event handler.\nIf different parts of your Effect should re-run for different reasons, split it into several Effects.\nIf you want to update some state based on the previous state, pass an updater function.\nIf you want to read the latest value without “reacting” it, extract an Effect Event from your Effect.\nIn JavaScript, objects and functions are considered different if they were created at different times.\nTry to avoid object and function dependencies. Move them outside the component or inside the Effect.\n",
                                                "Try out some challenges1. Fix a resetting interval 2. Fix a retriggering animation 3. Fix a reconnecting chat 4. Fix a reconnecting chat, again Challenge 1 of 4: Fix a resetting interval This Effect sets up an interval that ticks every second. You’ve noticed something strange happening: it seems like the interval gets destroyed and re-created every time it ticks. Fix the code so that the interval doesn’t get constantly re-created.App.jsApp.js ResetForkimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('✅ Creating an interval');\n    const id = setInterval(() => {\n      console.log('⏰ Interval tick');\n      setCount(count + 1);\n    }, 1000);\n    return () => {\n      console.log('❌ Clearing an interval');\n      clearInterval(id);\n    };\n  }, [count]);\n\n  return <h1>Counter: {count}</h1>\n}\n\nShow more Show hint Show solutionNext Challenge"
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "headers": "Reusing Logic with Custom Hooks",
                    "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
                    "content": [
                        "You will learn\nWhat custom Hooks are, and how to write your own\nHow to reuse logic between components\nHow to name and structure your custom Hooks\nWhen and why to extract custom Hooks\n",
                        {
                            "sub_header": "Custom Hooks: Sharing logic between components ",
                            "content": [
                                "Imagine you’re developing an app that heavily relies on the network (as most apps do). You want to warn the user if their network connection has accidentally gone off while they were using your app. How would you go about it? It seems like you’ll need two things in your component:",
                                "  1.A piece of state that tracks whether the network is online.",
                                "  2.An Effect that subscribes to the global online and offline events, and updates that state.",
                                "This will keep your component synchronized with the network status. You might start with something like this:",
                                {
                                    "code_sandbox": "import { useState, useEffect } from 'react';export default function StatusBar() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function handleOnline() {      setIsOnline(true);    }    function handleOffline() {      setIsOnline(false);    }    window.addEventListener('online', handleOnline);    window.addEventListener('offline', handleOffline);    return () => {      window.removeEventListener('online', handleOnline);      window.removeEventListener('offline', handleOffline);    };  }, []);  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;}"
                                },
                                "Try turning your network on and off, and notice how this StatusBar updates in response to your actions.",
                                "Now imagine you also want to use the same logic in a different component. You want to implement a Save button that will become disabled and show “Reconnecting…” instead of “Save” while the network is off.",
                                "To start, you can copy and paste the isOnline state and the Effect into SaveButton:",
                                {
                                    "code_sandbox": "import { useState, useEffect } from 'react';export default function SaveButton() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function handleOnline() {      setIsOnline(true);    }    function handleOffline() {      setIsOnline(false);    }    window.addEventListener('online', handleOnline);    window.addEventListener('offline', handleOffline);    return () => {      window.removeEventListener('online', handleOnline);      window.removeEventListener('offline', handleOffline);    };  }, []);  function handleSaveClick() {    console.log('✅ Progress saved');  }  return (    <button disabled={!isOnline} onClick={handleSaveClick}>      {isOnline ? 'Save progress' : 'Reconnecting...'}    </button>  );}"
                                },
                                "Verify that, if you turn off the network, the button will change its appearance.",
                                "These two components work fine, but the duplication in logic between them is unfortunate. It seems like even though they have different visual appearance, you want to reuse the logic between them.",
                                {
                                    "sub_header": "Extracting your own custom Hook from a component ",
                                    "content": [
                                        "Imagine for a moment that, similar to useState and useEffect, there was a built-in useOnlineStatus Hook. Then both of these components could be simplified and you could remove the duplication between them:",
                                        {
                                            "code_example": "function StatusBar() {  const isOnline = useOnlineStatus();  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;}function SaveButton() {  const isOnline = useOnlineStatus();  function handleSaveClick() {    console.log('✅ Progress saved');  }  return (    <button disabled={!isOnline} onClick={handleSaveClick}>      {isOnline ? 'Save progress' : 'Reconnecting...'}    </button>  );}"
                                        },
                                        "Although there is no such built-in Hook, you can write it yourself. Declare a function called useOnlineStatus and move all the duplicated code into it from the components you wrote earlier:",
                                        {
                                            "code_example": "function useOnlineStatus() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function handleOnline() {      setIsOnline(true);    }    function handleOffline() {      setIsOnline(false);    }    window.addEventListener('online', handleOnline);    window.addEventListener('offline', handleOffline);    return () => {      window.removeEventListener('online', handleOnline);      window.removeEventListener('offline', handleOffline);    };  }, []);  return isOnline;}"
                                        },
                                        "At the end of the function, return isOnline. This lets your components read that value:",
                                        {
                                            "code_sandbox": "useOnlineStatus.jsimport { useOnlineStatus } from './useOnlineStatus.js';function StatusBar() {  const isOnline = useOnlineStatus();  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;}function SaveButton() {  const isOnline = useOnlineStatus();  function handleSaveClick() {    console.log('✅ Progress saved');  }  return (    <button disabled={!isOnline} onClick={handleSaveClick}>      {isOnline ? 'Save progress' : 'Reconnecting...'}    </button>  );}export default function App() {  return (    <>      <SaveButton />      <StatusBar />    </>  );}"
                                        },
                                        "Verify that switching the network on and off updates both components.",
                                        "Now your components don’t have as much repetitive logic. More importantly, the code inside them describes what they want to do (use the online status!) rather than how to do it (by subscribing to the browser events).",
                                        "When you extract logic into custom Hooks, you can hide the gnarly details of how you deal with some external system or a browser API. The code of your components expresses your intent, not the implementation."
                                    ]
                                },
                                {
                                    "sub_header": "Hook names always start with use ",
                                    "content": [
                                        "React applications are built from components. Components are built from Hooks, whether built-in or custom. You’ll likely often use custom Hooks created by others, but occasionally you might write one yourself!",
                                        "You must follow these naming conventions:",
                                        "  1.React component names must start with a capital letter, like StatusBar and SaveButton. React components also need to return something that React knows how to display, like a piece of JSX.",
                                        "  2.Hook names must start with use followed by a capital letter, like useState (built-in) or useOnlineStatus (custom, like earlier on the page). Hooks may return arbitrary values.",
                                        "This convention guarantees that you can always look at a component and know where its state, Effects, and other React features might “hide”. For example, if you see a getColor() function call inside your component, you can be sure that it can’t possibly contain React state inside because its name doesn’t start with use. However, a function call like useOnlineStatus() will most likely contain calls to other Hooks inside!",
                                        {
                                            "code_example": "useOnlineStatus"
                                        },
                                        "Deep DiveShould all functions called during rendering start with the use prefix? Show DetailsNo. Functions that don’t call Hooks don’t need to be Hooks.If your function doesn’t call any Hooks, avoid the use prefix. Instead, write it as a regular function without the use prefix. For example, useSorted below doesn’t call Hooks, so call it getSorted instead:// 🔴 Avoid: A Hook that doesn't use Hooksfunction useSorted(items) {  return items.slice().sort();}// ✅ Good: A regular function that doesn't use Hooksfunction getSorted(items) {  return items.slice().sort();}This ensures that your code can call this regular function anywhere, including conditions:function List({ items, shouldSort }) {  let displayedItems = items;  if (shouldSort) {    // ✅ It's ok to call getSorted() conditionally because it's not a Hook    displayedItems = getSorted(items);  }  // ...}You should give use prefix to a function (and thus make it a Hook) if it uses at least one Hook inside of it:// ✅ Good: A Hook that uses other Hooksfunction useAuth() {  return useContext(Auth);}Technically, this isn’t enforced by React. In principle, you could make a Hook that doesn’t call other Hooks. This is often confusing and limiting so it’s best to avoid that pattern. However, there may be rare cases where it is helpful. For example, maybe your function doesn’t use any Hooks right now, but you plan to add some Hook calls to it in the future. Then it makes sense to name it with the use prefix:// ✅ Good: A Hook that will likely use some other Hooks laterfunction useAuth() {  // TODO: Replace with this line when authentication is implemented:  // return useContext(Auth);  return TEST_USER;}Then components won’t be able to call it conditionally. This will become important when you actually add Hook calls inside. If you don’t plan to use Hooks inside it (now or later), don’t make it a Hook."
                                    ]
                                },
                                {
                                    "sub_header": "Custom Hooks let you share stateful logic, not state itself ",
                                    "content": [
                                        "In the earlier example, when you turned the network on and off, both components updated together. However, it’s wrong to think that a single isOnline state variable is shared between them. Look at this code:",
                                        {
                                            "code_example": "function StatusBar() {  const isOnline = useOnlineStatus();  // ...}function SaveButton() {  const isOnline = useOnlineStatus();  // ...}"
                                        },
                                        "It works the same way as before you extracted the duplication:",
                                        {
                                            "code_example": "function StatusBar() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    // ...  }, []);  // ...}function SaveButton() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    // ...  }, []);  // ...}"
                                        },
                                        "These are two completely independent state variables and Effects! They happened to have the same value at the same time because you synchronized them with the same external value (whether the network is on).",
                                        "To better illustrate this, we’ll need a different example. Consider this Form component:",
                                        {
                                            "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('Mary');  const [lastName, setLastName] = useState('Poppins');  function handleFirstNameChange(e) {    setFirstName(e.target.value);  }  function handleLastNameChange(e) {    setLastName(e.target.value);  }  return (    <>      <label>        First name:        <input value={firstName} onChange={handleFirstNameChange} />      </label>      <label>        Last name:        <input value={lastName} onChange={handleLastNameChange} />      </label>      <p><b>Good morning, {firstName} {lastName}.</b></p>    </>  );}"
                                        },
                                        "There’s some repetitive logic for each form field:",
                                        "  1.There’s a piece of state (firstName and lastName).",
                                        "  2.There’s a change handler (handleFirstNameChange and handleLastNameChange).",
                                        "  3.There’s a piece of JSX that specifies the value and onChange attributes for that input.",
                                        "You can extract the repetitive logic into this useFormInput custom Hook:",
                                        {
                                            "code_sandbox": "useFormInput.jsuseFormInput.jsimport { useState } from 'react';export function useFormInput(initialValue) {  const [value, setValue] = useState(initialValue);  function handleChange(e) {    setValue(e.target.value);  }  const inputProps = {    value: value,    onChange: handleChange  };  return inputProps;}"
                                        },
                                        "Notice that it only declares one state variable called value.",
                                        "However, the Form component calls useFormInput two times:",
                                        {
                                            "code_example": "function Form() {  const firstNameProps = useFormInput('Mary');  const lastNameProps = useFormInput('Poppins');  // ..."
                                        },
                                        "This is why it works like declaring two separate state variables!",
                                        "Custom Hooks let you share stateful logic but not state itself. Each call to a Hook is completely independent from every other call to the same Hook. This is why the two sandboxes above are completely equivalent. If you’d like, scroll back up and compare them. The behavior before and after extracting a custom Hook is identical.",
                                        "When you need to share the state itself between multiple components, lift it up and pass it down instead."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Passing reactive values between Hooks ",
                            "content": [
                                "The code inside your custom Hooks will re-run during every re-render of your component. This is why, like components, custom Hooks need to be pure. Think of custom Hooks’ code as part of your component’s body!",
                                "Because custom Hooks re-render together with your component, they always receive the latest props and state. To see what this means, consider this chat room example. Change the server URL or the chat room:",
                                {
                                    "code_sandbox": "ChatRoom.jschat.jsnotifications.jsChatRoom.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';import { showNotification } from './notifications.js';export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.on('message', (msg) => {      showNotification('New message: ' + msg);    });    connection.connect();    return () => connection.disconnect();  }, [roomId, serverUrl]);  return (    <>      <label>        Server URL:        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}"
                                },
                                "When you change serverUrl or roomId, the Effect “reacts” to your changes and re-synchronizes. You can tell by the console messages that the chat re-connects every time that you change your Effect’s dependencies.",
                                "Now move the Effect’s code into a custom Hook:",
                                {
                                    "code_example": "export function useChatRoom({ serverUrl, roomId }) {  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    connection.on('message', (msg) => {      showNotification('New message: ' + msg);    });    return () => connection.disconnect();  }, [roomId, serverUrl]);}"
                                },
                                "This lets your ChatRoom component call your custom Hook without worrying about how it works inside:",
                                {
                                    "code_example": "export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl  });  return (    <>      <label>        Server URL:        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}"
                                },
                                "This looks much simpler! (But it does the same thing.)",
                                "Notice that the logic still responds to prop and state changes. Try editing the server URL or the selected room:",
                                {
                                    "code_sandbox": "ChatRoom.jsuseChatRoom.jschat.jsnotifications.jsChatRoom.jsimport { useState } from 'react';import { useChatRoom } from './useChatRoom.js';export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl  });  return (    <>      <label>        Server URL:        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}"
                                },
                                "Notice how you’re taking the return value of one Hook:",
                                {
                                    "code_example": "export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl  });  // ..."
                                },
                                "and pass it as an input to another Hook:",
                                {
                                    "code_example": "export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl  });  // ..."
                                },
                                "Every time your ChatRoom component re-renders, it passes the latest roomId and serverUrl to your Hook. This is why your Effect re-connects to the chat whenever their values are different after a re-render. (If you ever worked with audio or video processing software, chaining Hooks like this might remind you of chaining visual or audio effects. It’s as if the output of useState “feeds into” the input of the useChatRoom.)",
                                {
                                    "sub_header": "Passing event handlers to custom Hooks ",
                                    "content": [
                                        "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                        "As you start using useChatRoom in more components, you might want to let components customize its behavior. For example, currently, the logic for what to do when a message arrives is hardcoded inside the Hook:",
                                        {
                                            "code_example": "export function useChatRoom({ serverUrl, roomId }) {  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    connection.on('message', (msg) => {      showNotification('New message: ' + msg);    });    return () => connection.disconnect();  }, [roomId, serverUrl]);}"
                                        },
                                        "Let’s say you want to move this logic back to your component:",
                                        {
                                            "code_example": "export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl,    onReceiveMessage(msg) {      showNotification('New message: ' + msg);    }  });  // ..."
                                        },
                                        "To make this work, change your custom Hook to take onReceiveMessage as one of its named options:",
                                        {
                                            "code_example": "export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    connection.on('message', (msg) => {      onReceiveMessage(msg);    });    return () => connection.disconnect();  }, [roomId, serverUrl, onReceiveMessage]); // ✅ All dependencies declared}"
                                        },
                                        "This will work, but there’s one more improvement you can do when your custom Hook accepts event handlers.",
                                        "Adding a dependency on onReceiveMessage is not ideal because it will cause the chat to re-connect every time the component re-renders. Wrap this event handler into an Effect Event to remove it from the dependencies:",
                                        {
                                            "code_example": "import { useEffect, useEffectEvent } from 'react';// ...export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {  const onMessage = useEffectEvent(onReceiveMessage);  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    connection.on('message', (msg) => {      onMessage(msg);    });    return () => connection.disconnect();  }, [roomId, serverUrl]); // ✅ All dependencies declared}"
                                        },
                                        "Now the chat won’t re-connect every time that the ChatRoom component re-renders. Here is a fully working demo of passing an event handler to a custom Hook that you can play with:",
                                        {
                                            "code_sandbox": "ChatRoom.jsuseChatRoom.jschat.jsnotifications.jsChatRoom.jsimport { useState } from 'react';import { useChatRoom } from './useChatRoom.js';import { showNotification } from './notifications.js';export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl,    onReceiveMessage(msg) {      showNotification('New message: ' + msg);    }  });  return (    <>      <label>        Server URL:        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}"
                                        },
                                        "Notice how you no longer need to know how useChatRoom works in order to use it. You could add it to any other component, pass any other options, and it would work the same way. That’s the power of custom Hooks."
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "When to use custom Hooks ",
                            "content": [
                                "You don’t need to extract a custom Hook for every little duplicated bit of code. Some duplication is fine. For example, extracting a useFormInput Hook to wrap a single useState call like earlier is probably unnecessary.",
                                "However, whenever you write an Effect, consider whether it would be clearer to also wrap it in a custom Hook. You shouldn’t need Effects very often, so if you’re writing one, it means that you need to “step outside React” to synchronize with some external system or to do something that React doesn’t have a built-in API for. Wrapping it into a custom Hook lets you precisely communicate your intent and how the data flows through it.",
                                "For example, consider a ShippingForm component that displays two dropdowns: one shows the list of cities, and another shows the list of areas in the selected city. You might start with some code that looks like this:",
                                {
                                    "code_example": "function ShippingForm({ country }) {  const [cities, setCities] = useState(null);  // This Effect fetches cities for a country  useEffect(() => {    let ignore = false;    fetch(`/api/cities?country=${country}`)      .then(response => response.json())      .then(json => {        if (!ignore) {          setCities(json);        }      });    return () => {      ignore = true;    };  }, [country]);  const [city, setCity] = useState(null);  const [areas, setAreas] = useState(null);  // This Effect fetches areas for the selected city  useEffect(() => {    if (city) {      let ignore = false;      fetch(`/api/areas?city=${city}`)        .then(response => response.json())        .then(json => {          if (!ignore) {            setAreas(json);          }        });      return () => {        ignore = true;      };    }  }, [city]);  // ..."
                                },
                                "Although this code is quite repetitive, it’s correct to keep these Effects separate from each other. They synchronize two different things, so you shouldn’t merge them into one Effect. Instead, you can simplify the ShippingForm component above by extracting the common logic between them into your own useData Hook:",
                                {
                                    "code_example": "function useData(url) {  const [data, setData] = useState(null);  useEffect(() => {    if (url) {      let ignore = false;      fetch(url)        .then(response => response.json())        .then(json => {          if (!ignore) {            setData(json);          }        });      return () => {        ignore = true;      };    }  }, [url]);  return data;}"
                                },
                                "Now you can replace both Effects in the ShippingForm components with calls to useData:",
                                {
                                    "code_example": "function ShippingForm({ country }) {  const cities = useData(`/api/cities?country=${country}`);  const [city, setCity] = useState(null);  const areas = useData(city ? `/api/areas?city=${city}` : null);  // ..."
                                },
                                "Extracting a custom Hook makes the data flow explicit. You feed the url in and you get the data out. By “hiding” your Effect inside useData, you also prevent someone working on the ShippingForm component from adding unnecessary dependencies to it. With time, most of your app’s Effects will be in custom Hooks.",
                                "Deep DiveKeep your custom Hooks focused on concrete high-level use cases Show DetailsStart by choosing your custom Hook’s name. If you struggle to pick a clear name, it might mean that your Effect is too coupled to the rest of your component’s logic, and is not yet ready to be extracted.Ideally, your custom Hook’s name should be clear enough that even a person who doesn’t write code often could have a good guess about what your custom Hook does, what it takes, and what it returns:\n✅ useData(url)\n✅ useImpressionLog(eventName, extraData)\n✅ useChatRoom(options)\nWhen you synchronize with an external system, your custom Hook name may be more technical and use jargon specific to that system. It’s good as long as it would be clear to a person familiar with that system:\n✅ useMediaQuery(query)\n✅ useSocket(url)\n✅ useIntersectionObserver(ref, options)\nKeep custom Hooks focused on concrete high-level use cases. Avoid creating and using custom “lifecycle” Hooks that act as alternatives and convenience wrappers for the useEffect API itself:\n🔴 useMount(fn)\n🔴 useEffectOnce(fn)\n🔴 useUpdateEffect(fn)\nFor example, this useMount Hook tries to ensure some code only runs “on mount”:function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  // 🔴 Avoid: using custom \"lifecycle\" Hooks  useMount(() => {    const connection = createConnection({ roomId, serverUrl });    connection.connect();    post('/analytics/event', { eventName: 'visit_chat' });  });  // ...}// 🔴 Avoid: creating custom \"lifecycle\" Hooksfunction useMount(fn) {  useEffect(() => {    fn();  }, []); // 🔴 React Hook useEffect has a missing dependency: 'fn'}Custom “lifecycle” Hooks like useMount don’t fit well into the React paradigm. For example, this code example has a mistake (it doesn’t “react” to roomId or serverUrl changes), but the linter won’t warn you about it because the linter only checks direct useEffect calls. It won’t know about your Hook.If you’re writing an Effect, start by using the React API directly:function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  // ✅ Good: two raw Effects separated by purpose  useEffect(() => {    const connection = createConnection({ serverUrl, roomId });    connection.connect();    return () => connection.disconnect();  }, [serverUrl, roomId]);  useEffect(() => {    post('/analytics/event', { eventName: 'visit_chat', roomId });  }, [roomId]);  // ...}Then, you can (but don’t have to) extract custom Hooks for different high-level use cases:function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  // ✅ Great: custom Hooks named after their purpose  useChatRoom({ serverUrl, roomId });  useImpressionLog('visit_chat', { roomId });  // ...}A good custom Hook makes the calling code more declarative by constraining what it does. For example, useChatRoom(options) can only connect to the chat room, while useImpressionLog(eventName, extraData) can only send an impression log to the analytics. If your custom Hook API doesn’t constrain the use cases and is very abstract, in the long run it’s likely to introduce more problems than it solves.",
                                {
                                    "sub_header": "Custom Hooks help you migrate to better patterns ",
                                    "content": [
                                        "Effects are an “escape hatch”: you use them when you need to “step outside React” and when there is no better built-in solution for your use case. With time, the React team’s goal is to reduce the number of the Effects in your app to the minimum by providing more specific solutions to more specific problems. Wrapping your Effects in custom Hooks makes it easier to upgrade your code when these solutions become available.",
                                        "Let’s return to this example:",
                                        {
                                            "code_sandbox": "useOnlineStatus.jsuseOnlineStatus.jsimport { useState, useEffect } from 'react';export function useOnlineStatus() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function handleOnline() {      setIsOnline(true);    }    function handleOffline() {      setIsOnline(false);    }    window.addEventListener('online', handleOnline);    window.addEventListener('offline', handleOffline);    return () => {      window.removeEventListener('online', handleOnline);      window.removeEventListener('offline', handleOffline);    };  }, []);  return isOnline;}"
                                        },
                                        "In the above example, useOnlineStatus is implemented with a pair of useState and useEffect. However, this isn’t the best possible solution. There is a number of edge cases it doesn’t consider. For example, it assumes that when the component mounts, isOnline is already true, but this may be wrong if the network already went offline. You can use the browser navigator.onLine API to check for that, but using it directly would not work on the server for generating the initial HTML. In short, this code could be improved.",
                                        "Luckily, React 18 includes a dedicated API called useSyncExternalStore which takes care of all of these problems for you. Here is how your useOnlineStatus Hook, rewritten to take advantage of this new API:",
                                        {
                                            "code_sandbox": "useOnlineStatus.jsuseOnlineStatus.jsimport { useSyncExternalStore } from 'react';function subscribe(callback) {  window.addEventListener('online', callback);  window.addEventListener('offline', callback);  return () => {    window.removeEventListener('online', callback);    window.removeEventListener('offline', callback);  };}export function useOnlineStatus() {  return useSyncExternalStore(    subscribe,    () => navigator.onLine, // How to get the value on the client    () => true // How to get the value on the server  );}"
                                        },
                                        "Notice how you didn’t need to change any of the components to make this migration:",
                                        {
                                            "code_example": "function StatusBar() {  const isOnline = useOnlineStatus();  // ...}function SaveButton() {  const isOnline = useOnlineStatus();  // ...}"
                                        },
                                        "This is another reason for why wrapping Effects in custom Hooks is often beneficial:",
                                        "  1.You make the data flow to and from your Effects very explicit.",
                                        "  2.You let your components focus on the intent rather than on the exact implementation of your Effects.",
                                        "  3.When React adds new features, you can remove those Effects without changing any of your components.",
                                        "Similar to a design system, you might find it helpful to start extracting common idioms from your app’s components into custom Hooks. This will keep your components’ code focused on the intent, and let you avoid writing raw Effects very often. Many excellent custom Hooks are maintained by the React community.",
                                        "Deep DiveWill React provide any built-in solution for data fetching? Show DetailsWe’re still working out the details, but we expect that in the future, you’ll write data fetching like this:import { use } from 'react'; // Not available yet!function ShippingForm({ country }) {  const cities = use(fetch(`/api/cities?country=${country}`));  const [city, setCity] = useState(null);  const areas = city ? use(fetch(`/api/areas?city=${city}`)) : null;  // ...If you use custom Hooks like useData above in your app, it will require fewer changes to migrate to the eventually recommended approach than if you write raw Effects in every component manually. However, the old approach will still work fine, so if you feel happy writing raw Effects, you can continue to do that."
                                    ]
                                },
                                {
                                    "sub_header": "There is more than one way to do it ",
                                    "content": [
                                        "Let’s say you want to implement a fade-in animation from scratch using the browser requestAnimationFrame API. You might start with an Effect that sets up an animation loop. During each frame of the animation, you could change the opacity of the DOM node you hold in a ref until it reaches 1. Your code might start like this:",
                                        {
                                            "code_sandbox": "import { useState, useEffect, useRef } from 'react';function Welcome() {  const ref = useRef(null);  useEffect(() => {    const duration = 1000;    const node = ref.current;    let startTime = performance.now();    let frameId = null;    function onFrame(now) {      const timePassed = now - startTime;      const progress = Math.min(timePassed / duration, 1);      onProgress(progress);      if (progress < 1) {        // We still have more frames to paint        frameId = requestAnimationFrame(onFrame);      }    }    function onProgress(progress) {      node.style.opacity = progress;    }    function start() {      onProgress(0);      startTime = performance.now();      frameId = requestAnimationFrame(onFrame);    }    function stop() {      cancelAnimationFrame(frameId);      startTime = null;      frameId = null;    }    start();    return () => stop();  }, []);  return (    <h1 className=\"welcome\" ref={ref}>      Welcome    </h1>  );}export default function App() {  const [show, setShow] = useState(false);  return (    <>      <button onClick={() => setShow(!show)}>        {show ? 'Remove' : 'Show'}      </button>      <hr />      {show && <Welcome />}    </>  );}"
                                        },
                                        "To make the component more readable, you might extract the logic into a useFadeIn custom Hook:",
                                        {
                                            "code_sandbox": "useFadeIn.jsimport { useState, useEffect, useRef } from 'react';import { useFadeIn } from './useFadeIn.js';function Welcome() {  const ref = useRef(null);  useFadeIn(ref, 1000);  return (    <h1 className=\"welcome\" ref={ref}>      Welcome    </h1>  );}export default function App() {  const [show, setShow] = useState(false);  return (    <>      <button onClick={() => setShow(!show)}>        {show ? 'Remove' : 'Show'}      </button>      <hr />      {show && <Welcome />}    </>  );}"
                                        },
                                        "You could keep the useFadeIn code as is, but you could also refactor it more. For example, you could extract the logic for setting up the animation loop out of useFadeIn into a custom useAnimationLoop Hook:",
                                        {
                                            "code_sandbox": "useFadeIn.jsuseFadeIn.jsimport { useState, useEffect } from 'react';import { experimental_useEffectEvent as useEffectEvent } from 'react';export function useFadeIn(ref, duration) {  const [isRunning, setIsRunning] = useState(true);  useAnimationLoop(isRunning, (timePassed) => {    const progress = Math.min(timePassed / duration, 1);    ref.current.style.opacity = progress;    if (progress === 1) {      setIsRunning(false);    }  });}function useAnimationLoop(isRunning, drawFrame) {  const onFrame = useEffectEvent(drawFrame);  useEffect(() => {    if (!isRunning) {      return;    }    const startTime = performance.now();    let frameId = null;    function tick(now) {      const timePassed = now - startTime;      onFrame(timePassed);      frameId = requestAnimationFrame(tick);    }    tick();    return () => cancelAnimationFrame(frameId);  }, [isRunning]);}"
                                        },
                                        "However, you didn’t have to do that. As with regular functions, ultimately you decide where to draw the boundaries between different parts of your code. You could also take a very different approach. Instead of keeping the logic in the Effect, you could move most of the imperative logic inside a JavaScript class:",
                                        {
                                            "code_sandbox": "useFadeIn.jsanimation.jsuseFadeIn.jsimport { useState, useEffect } from 'react';import { FadeInAnimation } from './animation.js';export function useFadeIn(ref, duration) {  useEffect(() => {    const animation = new FadeInAnimation(ref.current);    animation.start(duration);    return () => {      animation.stop();    };  }, [ref, duration]);}"
                                        },
                                        "Effects let you connect React to external systems. The more coordination between Effects is needed (for example, to chain multiple animations), the more it makes sense to extract that logic out of Effects and Hooks completely like in the sandbox above. Then, the code you extracted becomes the “external system”. This lets your Effects stay simple because they only need to send messages to the system you’ve moved outside React.",
                                        "The examples above assume that the fade-in logic needs to be written in JavaScript. However, this particular fade-in animation is both simpler and much more efficient to implement with a plain CSS Animation:",
                                        {
                                            "code_sandbox": "welcome.csswelcome.css.welcome {  color: white;  padding: 50px;  text-align: center;  font-size: 50px;  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);  animation: fadeIn 1000ms;}@keyframes fadeIn {  0% { opacity: 0; }  100% { opacity: 1; }}"
                                        },
                                        "Sometimes, you don’t even need a Hook!",
                                        "Recap\nCustom Hooks let you share logic between components.\nCustom Hooks must be named starting with use followed by a capital letter.\nCustom Hooks only share stateful logic, not state itself.\nYou can pass reactive values from one Hook to another, and they stay up-to-date.\nAll Hooks re-run every time your component re-renders.\nThe code of your custom Hooks should be pure, like your component’s code.\nWrap event handlers received by custom Hooks into Effect Events.\nDon’t create custom Hooks like useMount. Keep their purpose specific.\nIt’s up to you how and where to choose the boundaries of your code.\n",
                                        {
                                            "code_example": "useCounter"
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ],
    [
        {
            "title": "What is AWS Lambda?",
            "href": "https://docs.aws.amazon.com/lambda/latest/dg/welcome.html",
            "source": "Aws",
            "parent_content": [
                "You can use AWS Lambda to run code without provisioning or managing servers.",
                " Lambda runs your code    on a high-availability compute infrastructure and performs all of the administration of the compute resources,    including server and operating system maintenance, capacity provisioning and automatic scaling, and    logging. With Lambda, all you need to do is supply your code in one of the language runtimes that Lambda supports.",
                "You organize your code into Lambda functions. The Lambda service runs your function only when needed and scales automatically. You only pay for the compute time that you consume—there is no charge when your code is not running. For more information, see AWS Lambda Pricing.",
                "Tip",
                [],
                "To learn how to build serverless solutions, check out the Serverless Developer Guide.",
                [],
                {
                    "sub_header": "When to use Lambda",
                    "content": [
                        "Lambda is an ideal compute service for application scenarios that need to scale up rapidly, and scale down to      zero when not in demand. For example, you can use Lambda for:",
                        "  1.File processing::  Use Amazon Simple Storage Service (Amazon S3) to trigger Lambda data processing in real time after an upload.",
                        "  2.Stream processing::  Use Lambda and Amazon Kinesis to process real-time streaming data for application activity tracking, transaction order processing, clickstream analysis, data cleansing, log filtering, indexing, social media analysis, Internet of Things (IoT) device data telemetry, and metering.",
                        "  3.Web applications::  Combine Lambda with other AWS services to build powerful web applications that automatically scale up and down and run in a highly available configuration across multiple data centers.",
                        "  4.IoT backends::  Build serverless backends using Lambda to handle web, mobile, IoT, and third-party API requests.",
                        "  5.Mobile backends::  Build backends using Lambda and Amazon API Gateway  to authenticate and process API requests. Use AWS Amplify to easily integrate with your iOS, Android, Web, and React Native frontends.",
                        "When using Lambda, you are responsible only for your code. Lambda manages the compute fleet that offers a      balance of memory, CPU, network, and other resources to run your code. Because Lambda manages these resources, you      cannot log in to compute instances or customize the operating system on provided        runtimes. Lambda performs operational and administrative activities on your behalf, including managing      capacity, monitoring, and logging your Lambda functions."
                    ]
                },
                {
                    "sub_header": "Key features",
                    "content": [
                        "The following key features help you develop Lambda applications that are scalable, secure, and easily      extensible:",
                        "  1. Environment variables : \nUse environment variables to adjust your function's behavior without updating code.\n",
                        "  2.Versions : \nManage the deployment of your functions with versions, so that, for example, a new function can be used for beta testing without affecting users of the stable production version.\n",
                        "  3.Container images : \nCreate a container image for a Lambda function by using an AWS provided base image or an alternative base\n            image so that you can reuse your existing container tooling or deploy larger workloads that rely on sizable dependencies, such as machine learning.\n",
                        "  4.Layers : \nPackage libraries and other dependencies to reduce the size of deployment archives and makes it faster to deploy your code.\n",
                        "  5.Lambda extensions : \nAugment your Lambda functions with tools for monitoring, observability, security, and governance.\n",
                        "  6.Function URLs : \nAdd a dedicated HTTP(S) endpoint to your Lambda function.\n",
                        "  7.Response streaming : \nConfigure your Lambda function URLs to stream response payloads back to clients from Node.js functions, to improve time to first byte (TTFB) performance or to return larger payloads.\n",
                        "  8.Concurrency and scaling controls : \nApply fine-grained control over the scaling and responsiveness of your production applications.\n",
                        "  9.Code signing : \nVerify that only approved developers publish unaltered, trusted code in your Lambda functions \n",
                        "  10.Private networking : \nCreate a private network for resources such as databases, cache instances, or internal services.\n",
                        "  11.File system access : \nConfigure a function to mount an Amazon Elastic File System (Amazon EFS) to a local directory, so that your function code can access and modify shared resources safely and at high concurrency.\n",
                        "  12.Lambda SnapStart for Java : \nImprove startup performance for Java runtimes by up to 10x at no extra cost, typically with no changes to your function code.\n"
                    ]
                }
            ]
        },
        {
            "title": "Example apps",
            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example-apps.html",
            "contents": [
                {
                    "title": "File-processing app",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/file-processing-app.html",
                    "source": "Aws",
                    "parent_content": [
                        "One of the most common use cases for Lambda is to perform file processing tasks. For example, you might use a Lambda function     to automatically create PDF files from HTML files or images, or to create thumbnails when a user uploads an image.",
                        "In this example, you create an app which automatically encrypts PDF files when they are uploaded to an Amazon Simple Storage Service (Amazon S3) bucket.     To implement this app, you create the following resources:",
                        "  1.An S3 bucket for users to upload PDF files to",
                        "  2.A Lambda function in Python which reads the uploaded file and creates an encrypted, password-protected version of it",
                        "  3.A second S3 bucket for Lambda to save the encrypted file in",
                        "You also create an AWS Identity and Access Management (IAM) policy to give your Lambda function permission to perform read and write operations     on your S3 buckets.",
                        [],
                        "Tip",
                        [],
                        "If you’re brand new to Lambda, we recommend that you carry out the tutorial Create your first Lambda function before      creating this example app.",
                        [],
                        "You can deploy your app manually by creating and configuring resources with the AWS Management Console or the AWS Command Line Interface (AWS CLI). You can     also deploy the app by using the AWS Serverless Application Model (AWS SAM). AWS SAM is an infrastructure as code (IaC) tool. With IaC, you don’t create     resources manually, but define them in code and then deploy them automatically.",
                        "If you want to learn more about using Lambda with IaC before deploying this example app, see Using Lambda with infrastructure as code (IaC).",
                        {
                            "sub_header": "Prerequisites",
                            "content": [
                                "Before you can create the example app, make sure you have the required command line tools installed.",
                                "  1.AWS CLI: You can manually deploy the resources for your app using either the AWS Management Console or the . To use the CLI, install it by following               the installation                 instructions in the AWS Command Line Interface User Guide.",
                                "  2.AWS SAM CLI: If you want to deploy the example app using AWS SAM, you need to install both the AWS CLI and the . To install the ,               follow the installation instructions               in the AWS SAM User Guide.",
                                "  3.pytest module: After you’ve deployed your app, you can test it using an automated Python test script that we provide. To use this script, install the               pytest package in you local development environment by running the following command:pip install pytest",
                                {
                                    "code_example": "pip install pytest"
                                },
                                "To deploy the app using AWS SAM, Docker must also be installed on your build machine."
                            ]
                        },
                        {
                            "sub_header": "Downloading the example app files",
                            "content": [
                                "To create and test the example app, you create the following files in your project directory:",
                                "  1.lambda_function.py - the Python function code for the Lambda function that performs the file encryption",
                                "  2.requirements.txt - a manifest file defining the dependencies that your Python function code requires",
                                "  3.template.yaml - an AWS SAM template you can use to deploy the app",
                                "  4.test_pdf_encrypt.py - a test script you can use to automatically test your application",
                                "  5.pytest.ini - a configuration file for the the test script",
                                "Expand the following sections to view the code and to learn more about the role of each file in creating and testing your app. To create the       files on your local machine, either copy and paste the code below, or download the files from the aws-lambda-developer-guide GitHub repo.",
                                "Copy and paste the following code into a file named lambda_function.py.",
                                {
                                    "code_example": "from pypdf import PdfReader, PdfWriter\nimport uuid\nimport os\nfrom urllib.parse import unquote_plus\nimport boto3\n\n# Create the S3 client to download and upload objects from S3\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    # Iterate over the S3 event object and get the key for all uploaded files\n    for record in event['Records']:\n        bucket = record['s3']['bucket']['name']\n        key = unquote_plus(record['s3']['object']['key']) # Decode the S3 object key to remove any URL-encoded characters\n        download_path = f'/tmp/{uuid.uuid4()}.pdf' # Create a path in the Lambda tmp directory to save the file to \n        upload_path = f'/tmp/converted-{uuid.uuid4()}.pdf' # Create another path to save the encrypted file to\n        \n        # If the file is a PDF, encrypt it and upload it to the destination S3 bucket\n        if key.lower().endswith('.pdf'):\n            s3_client.download_file(bucket, key, download_path)\n            encrypt_pdf(download_path, upload_path)\n            encrypted_key = add_encrypted_suffix(key)\n            s3_client.upload_file(upload_path, f'{bucket}-encrypted', encrypted_key)\n\n# Define the function to encrypt the PDF file with a password\ndef encrypt_pdf(file_path, encrypted_file_path):\n    reader = PdfReader(file_path)\n    writer = PdfWriter()\n    \n    for page in reader.pages:\n        writer.add_page(page)\n\n    # Add a password to the new PDF\n    writer.encrypt(\"my-secret-password\")\n\n    # Save the new PDF to a file\n    with open(encrypted_file_path, \"wb\") as file:\n        writer.write(file)\n\n# Define a function to add a suffix to the original filename after encryption\ndef add_encrypted_suffix(original_key):\n    filename, extension = original_key.rsplit('.', 1)\n    return f'{filename}_encrypted.{extension}'"
                                },
                                "Note",
                                [],
                                "In this example code, a password for the encrypted file (my-secret-password) is hardcoded into the           function code. In a production application, don't include sensitive information like passwords in your function code. Use           AWS Secrets Manager to securely store sensitive parameters.",
                                [],
                                [],
                                "The python function code contains three functions - the handler function that Lambda runs           when your function is invoked, and two separate function named add_encrypted_suffix and encrypt_pdf that the handler calls to perform the PDF encryption.",
                                "When your function is invoked by Amazon S3, Lambda passes a JSON formatted event argument to the function that contains details about the           event that caused the invocation. In this case, the information includes name of the S3 bucket and the object keys for the uploaded files.           To learn more about the format of event object for Amazon S3, see Process Amazon S3 event notifications with Lambda.",
                                "Your function then uses the AWS SDK for Python (Boto3) to download the PDF files specified in the event object to its local temporary storage directory, before           encrypting them using the pypdf library.",
                                "Finally, the function uses the Boto3 SDK to store the encrypted file in your S3 destination bucket.",
                                [],
                                "Python function code",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named lambda_function.py.",
                                {
                                    "code_example": "from pypdf import PdfReader, PdfWriter\nimport uuid\nimport os\nfrom urllib.parse import unquote_plus\nimport boto3\n\n# Create the S3 client to download and upload objects from S3\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    # Iterate over the S3 event object and get the key for all uploaded files\n    for record in event['Records']:\n        bucket = record['s3']['bucket']['name']\n        key = unquote_plus(record['s3']['object']['key']) # Decode the S3 object key to remove any URL-encoded characters\n        download_path = f'/tmp/{uuid.uuid4()}.pdf' # Create a path in the Lambda tmp directory to save the file to \n        upload_path = f'/tmp/converted-{uuid.uuid4()}.pdf' # Create another path to save the encrypted file to\n        \n        # If the file is a PDF, encrypt it and upload it to the destination S3 bucket\n        if key.lower().endswith('.pdf'):\n            s3_client.download_file(bucket, key, download_path)\n            encrypt_pdf(download_path, upload_path)\n            encrypted_key = add_encrypted_suffix(key)\n            s3_client.upload_file(upload_path, f'{bucket}-encrypted', encrypted_key)\n\n# Define the function to encrypt the PDF file with a password\ndef encrypt_pdf(file_path, encrypted_file_path):\n    reader = PdfReader(file_path)\n    writer = PdfWriter()\n    \n    for page in reader.pages:\n        writer.add_page(page)\n\n    # Add a password to the new PDF\n    writer.encrypt(\"my-secret-password\")\n\n    # Save the new PDF to a file\n    with open(encrypted_file_path, \"wb\") as file:\n        writer.write(file)\n\n# Define a function to add a suffix to the original filename after encryption\ndef add_encrypted_suffix(original_key):\n    filename, extension = original_key.rsplit('.', 1)\n    return f'{filename}_encrypted.{extension}'"
                                },
                                "Note",
                                [],
                                "In this example code, a password for the encrypted file (my-secret-password) is hardcoded into the           function code. In a production application, don't include sensitive information like passwords in your function code. Use           AWS Secrets Manager to securely store sensitive parameters.",
                                [],
                                [],
                                "The python function code contains three functions - the handler function that Lambda runs           when your function is invoked, and two separate function named add_encrypted_suffix and encrypt_pdf that the handler calls to perform the PDF encryption.",
                                "When your function is invoked by Amazon S3, Lambda passes a JSON formatted event argument to the function that contains details about the           event that caused the invocation. In this case, the information includes name of the S3 bucket and the object keys for the uploaded files.           To learn more about the format of event object for Amazon S3, see Process Amazon S3 event notifications with Lambda.",
                                "Your function then uses the AWS SDK for Python (Boto3) to download the PDF files specified in the event object to its local temporary storage directory, before           encrypting them using the pypdf library.",
                                "Finally, the function uses the Boto3 SDK to store the encrypted file in your S3 destination bucket.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named requirements.txt.",
                                {
                                    "code_example": "boto3\npypdf"
                                },
                                "For this example, your function code has only two dependencies that aren't part of the standard Python library -           the SDK for Python (Boto3) and the pypdf package the function uses to perform the PDF encryption.",
                                "Note",
                                [],
                                "A version of the SDK for Python (Boto3) is included as part of the Lambda runtime, so your code would run without adding Boto3 to your             function's deployment package. However, to maintain full control of your function's dependencies and avoid possible issues with             version misalignment, best practice for Python is to include all function dependencies in your function's deployment package.           See Runtime dependencies in Python to learn more.",
                                [],
                                [],
                                [],
                                "requirements.txt manifest file",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named requirements.txt.",
                                {
                                    "code_example": "boto3\npypdf"
                                },
                                "For this example, your function code has only two dependencies that aren't part of the standard Python library -           the SDK for Python (Boto3) and the pypdf package the function uses to perform the PDF encryption.",
                                "Note",
                                [],
                                "A version of the SDK for Python (Boto3) is included as part of the Lambda runtime, so your code would run without adding Boto3 to your             function's deployment package. However, to maintain full control of your function's dependencies and avoid possible issues with             version misalignment, best practice for Python is to include all function dependencies in your function's deployment package.           See Runtime dependencies in Python to learn more.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named template.yaml.",
                                {
                                    "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nResources:\n  EncryptPDFFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: EncryptPDF\n      Architectures: [x86_64]\n      CodeUri: ./\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.12\n      Timeout: 15\n      MemorySize: 256\n      LoggingConfig:\n        LogFormat: JSON\n      Policies:\n        - AmazonS3FullAccess\n      Events:\n        S3Event:\n          Type: S3\n          Properties:\n            Bucket: !Ref PDFSourceBucket\n            Events: s3:ObjectCreated:*\n\n  PDFSourceBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: EXAMPLE-BUCKET\n\n  EncryptedPDFBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: EXAMPLE-BUCKET-encrypted"
                                },
                                "The AWS SAM template defines the resources you create for your app. In this example, the template defines a Lambda function using the         AWS::Serverless::Function type and two S3 buckets using the AWS::S3::Bucket type. The bucket names specified in the         template are placeholders. Before you deploy the app using AWS SAM, you need to edit the template to rename the buckets with globally unique names that          meet the S3 bucket naming rules. This step is           explained further in Deploy the resources using AWS SAM.",
                                "The definition of the Lambda function resource configures a trigger for the function using the S3Event event property. This         trigger causes your function to be invoked whenever an object is created in your source bucket.",
                                "The function definition also specifies an AWS Identity and Access Management (IAM) policy to be attached to the function's execution role.           The AWS managed policyAmazonS3FullAccess gives your function the permissions it needs to read and write objects to Amazon S3.",
                                [],
                                "AWS SAM template",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named template.yaml.",
                                {
                                    "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nResources:\n  EncryptPDFFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: EncryptPDF\n      Architectures: [x86_64]\n      CodeUri: ./\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.12\n      Timeout: 15\n      MemorySize: 256\n      LoggingConfig:\n        LogFormat: JSON\n      Policies:\n        - AmazonS3FullAccess\n      Events:\n        S3Event:\n          Type: S3\n          Properties:\n            Bucket: !Ref PDFSourceBucket\n            Events: s3:ObjectCreated:*\n\n  PDFSourceBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: EXAMPLE-BUCKET\n\n  EncryptedPDFBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: EXAMPLE-BUCKET-encrypted"
                                },
                                "The AWS SAM template defines the resources you create for your app. In this example, the template defines a Lambda function using the         AWS::Serverless::Function type and two S3 buckets using the AWS::S3::Bucket type. The bucket names specified in the         template are placeholders. Before you deploy the app using AWS SAM, you need to edit the template to rename the buckets with globally unique names that          meet the S3 bucket naming rules. This step is           explained further in Deploy the resources using AWS SAM.",
                                "The definition of the Lambda function resource configures a trigger for the function using the S3Event event property. This         trigger causes your function to be invoked whenever an object is created in your source bucket.",
                                "The function definition also specifies an AWS Identity and Access Management (IAM) policy to be attached to the function's execution role.           The AWS managed policyAmazonS3FullAccess gives your function the permissions it needs to read and write objects to Amazon S3.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named test_pdf_encrypt.py.",
                                {
                                    "code_example": "import boto3\nimport json\nimport pytest\nimport time\nimport os\n\n@pytest.fixture\ndef lambda_client():\n    return boto3.client('lambda')\n    \n@pytest.fixture\ndef s3_client():\n    return boto3.client('s3')\n\n@pytest.fixture\ndef logs_client():\n    return boto3.client('logs')\n\n@pytest.fixture(scope='session')\ndef cleanup():\n    # Create a new S3 client for cleanup\n    s3_client = boto3.client('s3')\n\n    yield\n    # Cleanup code will be executed after all tests have finished\n\n    # Delete test.pdf from the source bucket\n    source_bucket = 'EXAMPLE-BUCKET'\n    source_file_key = 'test.pdf'\n    s3_client.delete_object(Bucket=source_bucket, Key=source_file_key)\n    print(f\"\\nDeleted {source_file_key} from {source_bucket}\")\n\n    # Delete test_encrypted.pdf from the destination bucket\n    destination_bucket = 'EXAMPLE-BUCKET-encrypted'\n    destination_file_key = 'test_encrypted.pdf'\n    s3_client.delete_object(Bucket=destination_bucket, Key=destination_file_key)\n    print(f\"Deleted {destination_file_key} from {destination_bucket}\")\n        \n\n@pytest.mark.order(1)\ndef test_source_bucket_available(s3_client):\n    s3_bucket_name = 'EXAMPLE-BUCKET'\n    file_name = 'test.pdf'\n    file_path = os.path.join(os.path.dirname(__file__), file_name)\n\n    file_uploaded = False\n    try:\n        s3_client.upload_file(file_path, s3_bucket_name, file_name)\n        file_uploaded = True\n    except:\n        print(\"Error: couldn't upload file\")\n\n    assert file_uploaded, \"Could not upload file to S3 bucket\"\n\n    \n\n@pytest.mark.order(2)\ndef test_lambda_invoked(logs_client):\n\n    # Wait for a few seconds to make sure the logs are available\n    time.sleep(5)\n\n    # Get the latest log stream for the specified log group\n    log_streams = logs_client.describe_log_streams(\n        logGroupName='/aws/lambda/EncryptPDF',\n        orderBy='LastEventTime',\n        descending=True,\n        limit=1\n    )\n\n    latest_log_stream_name = log_streams['logStreams'][0]['logStreamName']\n\n    # Retrieve the log events from the latest log stream\n    log_events = logs_client.get_log_events(\n        logGroupName='/aws/lambda/EncryptPDF',\n        logStreamName=latest_log_stream_name\n    )\n\n    success_found = False\n    for event in log_events['events']:\n        message = json.loads(event['message'])\n        status = message.get('record', {}).get('status')\n        if status == 'success':\n            success_found = True\n            break\n\n    assert success_found, \"Lambda function execution did not report 'success' status in logs.\"\n\n@pytest.mark.order(3)\ndef test_encrypted_file_in_bucket(s3_client):\n    # Specify the destination S3 bucket and the expected converted file key\n    destination_bucket = 'EXAMPLE-BUCKET-encrypted'\n    converted_file_key = 'test_encrypted.pdf'\n\n    try:\n        # Attempt to retrieve the metadata of the converted file from the destination S3 bucket\n        s3_client.head_object(Bucket=destination_bucket, Key=converted_file_key)\n    except s3_client.exceptions.ClientError as e:\n        # If the file is not found, the test will fail\n        pytest.fail(f\"Converted file '{converted_file_key}' not found in the destination bucket: {str(e)}\")\n\ndef test_cleanup(cleanup):\n    # This test uses the cleanup fixture and will be executed last\n    pass"
                                },
                                "The automated test script executes three test functions to confirm correct operation of your app:",
                                "  1.The test test_source_bucket_available confirms that your source bucket has been successfully created             by uploading a test PDF file to the bucket.",
                                "  2.The test test_lambda_invoked interrogates the latest CloudWatch Logs log stream for your function to confirm that             when you uploaded the test file, your Lambda function ran and reported success.",
                                "  3.The test test_encrypted_file_in_bucket confirms that your destination bucket contains the encrypted test_encrypted.pdf             file.",
                                [],
                                "After all these tests have run, the script runs an additional cleanup step to delete the test.pdf and test_encrypted.pdf files from         both your source and destination buckets.",
                                "As with the AWS SAM template, the bucket names specified in this file are placeholders. Before running the test, you need to edit this file           with your app's real bucket names. This step is explained further in Testing the app with the automated script",
                                [],
                                "Automated test script",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named test_pdf_encrypt.py.",
                                {
                                    "code_example": "import boto3\nimport json\nimport pytest\nimport time\nimport os\n\n@pytest.fixture\ndef lambda_client():\n    return boto3.client('lambda')\n    \n@pytest.fixture\ndef s3_client():\n    return boto3.client('s3')\n\n@pytest.fixture\ndef logs_client():\n    return boto3.client('logs')\n\n@pytest.fixture(scope='session')\ndef cleanup():\n    # Create a new S3 client for cleanup\n    s3_client = boto3.client('s3')\n\n    yield\n    # Cleanup code will be executed after all tests have finished\n\n    # Delete test.pdf from the source bucket\n    source_bucket = 'EXAMPLE-BUCKET'\n    source_file_key = 'test.pdf'\n    s3_client.delete_object(Bucket=source_bucket, Key=source_file_key)\n    print(f\"\\nDeleted {source_file_key} from {source_bucket}\")\n\n    # Delete test_encrypted.pdf from the destination bucket\n    destination_bucket = 'EXAMPLE-BUCKET-encrypted'\n    destination_file_key = 'test_encrypted.pdf'\n    s3_client.delete_object(Bucket=destination_bucket, Key=destination_file_key)\n    print(f\"Deleted {destination_file_key} from {destination_bucket}\")\n        \n\n@pytest.mark.order(1)\ndef test_source_bucket_available(s3_client):\n    s3_bucket_name = 'EXAMPLE-BUCKET'\n    file_name = 'test.pdf'\n    file_path = os.path.join(os.path.dirname(__file__), file_name)\n\n    file_uploaded = False\n    try:\n        s3_client.upload_file(file_path, s3_bucket_name, file_name)\n        file_uploaded = True\n    except:\n        print(\"Error: couldn't upload file\")\n\n    assert file_uploaded, \"Could not upload file to S3 bucket\"\n\n    \n\n@pytest.mark.order(2)\ndef test_lambda_invoked(logs_client):\n\n    # Wait for a few seconds to make sure the logs are available\n    time.sleep(5)\n\n    # Get the latest log stream for the specified log group\n    log_streams = logs_client.describe_log_streams(\n        logGroupName='/aws/lambda/EncryptPDF',\n        orderBy='LastEventTime',\n        descending=True,\n        limit=1\n    )\n\n    latest_log_stream_name = log_streams['logStreams'][0]['logStreamName']\n\n    # Retrieve the log events from the latest log stream\n    log_events = logs_client.get_log_events(\n        logGroupName='/aws/lambda/EncryptPDF',\n        logStreamName=latest_log_stream_name\n    )\n\n    success_found = False\n    for event in log_events['events']:\n        message = json.loads(event['message'])\n        status = message.get('record', {}).get('status')\n        if status == 'success':\n            success_found = True\n            break\n\n    assert success_found, \"Lambda function execution did not report 'success' status in logs.\"\n\n@pytest.mark.order(3)\ndef test_encrypted_file_in_bucket(s3_client):\n    # Specify the destination S3 bucket and the expected converted file key\n    destination_bucket = 'EXAMPLE-BUCKET-encrypted'\n    converted_file_key = 'test_encrypted.pdf'\n\n    try:\n        # Attempt to retrieve the metadata of the converted file from the destination S3 bucket\n        s3_client.head_object(Bucket=destination_bucket, Key=converted_file_key)\n    except s3_client.exceptions.ClientError as e:\n        # If the file is not found, the test will fail\n        pytest.fail(f\"Converted file '{converted_file_key}' not found in the destination bucket: {str(e)}\")\n\ndef test_cleanup(cleanup):\n    # This test uses the cleanup fixture and will be executed last\n    pass"
                                },
                                "The automated test script executes three test functions to confirm correct operation of your app:",
                                "  1.The test test_source_bucket_available confirms that your source bucket has been successfully created             by uploading a test PDF file to the bucket.",
                                "  2.The test test_lambda_invoked interrogates the latest CloudWatch Logs log stream for your function to confirm that             when you uploaded the test file, your Lambda function ran and reported success.",
                                "  3.The test test_encrypted_file_in_bucket confirms that your destination bucket contains the encrypted test_encrypted.pdf             file.",
                                [],
                                "After all these tests have run, the script runs an additional cleanup step to delete the test.pdf and test_encrypted.pdf files from         both your source and destination buckets.",
                                "As with the AWS SAM template, the bucket names specified in this file are placeholders. Before running the test, you need to edit this file           with your app's real bucket names. This step is explained further in Testing the app with the automated script",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named pytest.ini.",
                                {
                                    "code_example": "[pytest]\nmarkers =\n    order: specify test execution order"
                                },
                                "This is needed to specify the order in which the tests in the test_pdf_encrypt.py script run.",
                                [],
                                "Test script configuration file",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named pytest.ini.",
                                {
                                    "code_example": "[pytest]\nmarkers =\n    order: specify test execution order"
                                },
                                "This is needed to specify the order in which the tests in the test_pdf_encrypt.py script run.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                []
                            ]
                        },
                        {
                            "sub_header": "Deploying the app",
                            "content": [
                                "You can create and deploy the resources for this example app either manually or by using AWS SAM. In a production environment, we       recommend that you use an IaC tool like AWS SAM to quickly and repeatably deploy whole serverless applications without using manual processes.",
                                "For this example, follow the console or AWS CLI instructions to learn how to configure each AWS resource separately, or skip ahead to        Deploy the resources using AWS SAM to quickly deploy the app using a few CLI commands.",
                                {
                                    "sub_header": "Deploy the resources manually",
                                    "content": [
                                        "To deploy your app manually, you carry out the following steps:",
                                        "  1.Create source and destination Amazon S3 buckets",
                                        "  2.Create a Lambda function that encrypts a PDF file and saves the encrypted version to an S3 bucket",
                                        "  3.Configure a Lambda trigger that invokes your function when objects are uploaded to your source bucket",
                                        "Follow the instructions in the following paragraphs to create and configure your resources.",
                                        {
                                            "sub_header": "Create two S3 buckets",
                                            "content": [
                                                "First create two S3 buckets. The first bucket is the source bucket you will upload your PDF files to. The second bucket is used by     Lambda to save the encrypted file when you invoke your function.",
                                                "  1.Console : SOURCEBUCKET-encrypted",
                                                "  2.AWS CLI : region",
                                                "anchor",
                                                "anchor",
                                                [],
                                                [],
                                                [],
                                                "To create the S3 buckets (console)",
                                                "  1 : Open the Buckets page of the Amazon S3 console.",
                                                "  2 : Choose Create bucket.",
                                                "  3 : Under General configuration, do the following:For Bucket name, enter a globally unique name that meets the Amazon S3 Bucket naming rules.                     Bucket names can contain only lower case letters, numbers, dots (.), and hyphens (-). For AWS Region, choose the AWS Region                     closest to your geographical location. Later in the deployment process, you must create your Lambda function in the same AWS Region, so                     make a note of the region you chose.",
                                                "  4 : Leave all other options set to their default values and choose Create bucket.",
                                                "  5 : Repeat steps 1 to 4 to create your destination bucket. For Bucket name, enter SOURCEBUCKET-encrypted,                 where SOURCEBUCKET is the name of the source bucket you just created.",
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                []
                                            ]
                                        },
                                        {
                                            "sub_header": "Create an execution role (AWS CLI only)",
                                            "content": [
                                                "An execution role is an IAM role that grants a Lambda function permission to access AWS services and resources. When you create a function       using the Lambda console, Lambda automatically creates an execution role. You only need to create a role manually if you choose to deploy the app       using the AWS CLI. To give your function read and write access to Amazon S3, you attach the       AWS managed policyAmazonS3FullAccess.",
                                                "  1.Console : \nThis step is only required if you choose to deploy your app using the AWS CLI.\n",
                                                "  2.AWS CLI : AmazonS3FullAccess",
                                                "anchor",
                                                "anchor",
                                                [],
                                                [],
                                                [],
                                                "This step is only required if you choose to deploy your app using the AWS CLI.",
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                []
                                            ]
                                        },
                                        {
                                            "sub_header": "Create the function deployment package",
                                            "content": [
                                                "To create your function, you create a deployment package containing your function code and its dependencies. For this       application, your function code uses a separate library for the PDF encryption.",
                                                "To create the deployment package",
                                                "  1 : Navigate to the project directory containing the lambda_function.py and requirements.txt           files you created or downloaded from GitHub earlier and create a new directory named package.",
                                                " 2 : Install the dependencies specified in the requirements.txt file in your package directory by running the following command. ",
                                                {
                                                    "code_example": "pip install -r requirements.txt --target ./package/"
                                                },
                                                " 3 : Create a .zip file containing your application code and its dependencies. In Linux or MacOS, run the following commands from your           command line interface.  In Windows, use your preferred zip tool to create the lambda_function.zip file. Make sure that your         lambda_function.py file and the folders containing your dependencies are all at the root of the .zip file.",
                                                {
                                                    "code_example": "cd package\nzip -r ../lambda_function.zip .\ncd ..\nzip lambda_function.zip lambda_function.py"
                                                },
                                                "You can also create your deployment package using a Python virtual environment. See Working with .zip file archives for Python Lambda functions"
                                            ]
                                        },
                                        {
                                            "sub_header": "Create the Lambda function",
                                            "content": [
                                                "You now use the deployment package you created in the previous step to deploy your Lambda function.",
                                                "  1.Console : EncryptPDF",
                                                "  2.AWS CLI : lambda_function.zip",
                                                "anchor",
                                                "anchor",
                                                [],
                                                [],
                                                [],
                                                "To create the function (console)",
                                                "To create your Lambda function using the console, you first create a basic function containing some ‘Hello world’ code. You then           replace this code with your own function code by uploading the.zip file you created in the previous step.",
                                                "To ensure that your function doesn't time out when encrypting large PDF files, you configure the function's memory and timeout settings.           You also set the function's log format to JSON. Configuring JSON formatted logs is necessary when using the provided test script so it can read the           function's invocation status from CloudWatch Logs to confirm successful invocation.",
                                                "  1 : Open the Functions page of the Lambda console.",
                                                "  2 : Make sure you're working in the same AWS Region you created your S3 bucket in. You can change your region using the drop-down             list at the top of the screen.",
                                                "  3 : Choose Create function.",
                                                "  4 : Choose Author from scratch.",
                                                "  5 : Under Basic information, do the following:For Function name, enter EncryptPDF.For Runtime choose Python 3.12.For Architecture, choose x86_64.",
                                                "  6 : Choose Create function.",
                                                [],
                                                "To upload the function code (console)",
                                                "  1 : In the Code source pane, choose Upload from.",
                                                "  2 : Choose .zip file.",
                                                "  3 : Choose Upload.",
                                                "  4 : In the file selector, select your .zip file and choose Open.",
                                                "  5 : Choose Save.",
                                                [],
                                                "To configure the function memory and timeout (console)",
                                                "  1 : Select the Configuration tab for your function.",
                                                "  2 : In the General configuration pane, choose Edit.",
                                                "  3 : Set Memory to 256 MB and Timeout to 15 seconds.",
                                                "  4 : Choose Save.",
                                                [],
                                                "To configure the log format (console)",
                                                "  1 : Select the Configuration tab for your function.",
                                                "  2 : Select Monitoring and operations tools.",
                                                "  3 : In the Logging configuration pane, choose Edit.",
                                                "  4 : For Logging configuration, select JSON.",
                                                "  5 : Choose Save.",
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                []
                                            ]
                                        },
                                        {
                                            "sub_header": "Configure an Amazon S3 trigger to invoke the function",
                                            "content": [
                                                "For your Lambda function to run when you upload a file to your source bucket, you need to configure a trigger for your function. You can     configure the Amazon S3 trigger using either the console or the AWS CLI.",
                                                "Important",
                                                [],
                                                "This procedure configures the S3 bucket to invoke your function every time that an object is created in the bucket. Be sure to       configure this only on the source bucket. If your Lambda function creates objects in the same bucket that invokes it, your function can be         invoked continuously in a loop. This can result         in un expected charges being billed to your AWS account.",
                                                [],
                                                "  1.Console : EncryptPDF",
                                                "  2.AWS CLI : source-account",
                                                "anchor",
                                                "anchor",
                                                [],
                                                [],
                                                [],
                                                "To configure the Amazon S3 trigger (console)",
                                                "  1 : Open the Functions page of the Lambda console and choose your function (EncryptPDF).",
                                                "  2 : Choose Add trigger.",
                                                "  3 : Select S3.",
                                                "  4 : Under Bucket, select your source bucket.",
                                                "  5 : Under Event types, select All object create events.",
                                                "  6 : Under Recursive invocation, select the check box to acknowledge that using the same S3 bucket for input                 and output is not recommended. You can learn more about recursive invocation patterns in Lambda by reading                Recursive patterns that cause run-away Lambda functions                in Serverless Land.",
                                                "  7 : Choose Add.When you create a trigger using the Lambda console, Lambda automatically creates a resource based policy                 to give the service you select permission to invoke your function. ",
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                [],
                                                []
                                            ]
                                        }
                                    ]
                                },
                                {
                                    "sub_header": "Deploy the resources using AWS SAM",
                                    "content": [
                                        "To deploy the example app using the AWS SAM CLI, carry out the following steps.",
                                        "Make sure that you have         installed the latest version of the           CLI and that Docker is installed on your build machine.",
                                        "  1 : Edit the template.yaml file to specify the name of your             S3 buckets. S3 buckets must have globally unique names that meet the S3 bucket naming rules.Replace the bucket name EXAMPLE-BUCKET with a name of your choice consisting of lowercase letters, numbers, dots (.), and hyphens (-). For the destination           bucket, replace EXAMPLE-BUCKET-encrypted with <source-bucket-name>-encrypted, where <source-bucket> is the name           you chose for your source bucket.",
                                        " 2 : Run the following command from the directory in which you saved your template.yaml, lambda_function.py,             and requirements.txtfiles. This command gathers the build artifacts for your application and places them in the proper format and location to deploy them. Specifying           the --use-container option builds your function inside a Lambda-like Docker container. We use it here so you don't need to have Python 3.12          installed on your local machine for the build to work.During the build process, AWS SAM looks for the Lambda function code in the location you specified with the CodeUri           property in the template. In this case, we specified the current directory as the location (./).If a requirements.txt file is present, AWS SAM uses it to gather the specified dependencies. By default, AWS SAM creates a .zip             deployment package with your function code and dependencies. You can also choose to deploy your function as a container image using the             PackageType           property.",
                                        {
                                            "code_example": "sam build --use-container"
                                        },
                                        " 3 : To deploy your application and create the Lambda and Amazon S3 resources specified in your AWS SAM template, run the following             command. Using the --guided flag means that AWS SAM will show you prompts to guide you through the deployment process. For this             deployment, accept the default options by pressing Enter.",
                                        {
                                            "code_example": "sam deploy --guided"
                                        },
                                        "During the deployment process, AWS SAM creates the following resources in your AWS account:",
                                        "  1.An AWS CloudFormation stack             named sam-app",
                                        "  2.A Lambda function with the name EncryptPDF",
                                        "  3.Two S3 buckets with the names you chose when you edited the template.yaml AWS SAM template file",
                                        "  4.An IAM execution role for your function with the name format sam-app-EncryptPDFFunctionRole-2qGaapHFWOQ8",
                                        "When AWS SAM finishes creating your resources, you should see the following message:",
                                        "Successfully created/updated stack - sam-app in us-west-2"
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Testing the app",
                            "content": [
                                "To test your app, you upload a PDF file to your source bucket, and confirm that Lambda creates an encrypted version of the file in your       destination bucket. In this example, you can either test this manually using the console or the AWS CLI, or by using the provided test script.",
                                "For production applications, you can use traditional test methods and techniques, such as unit testing, to confirm the       correct functioning of your Lambda function code. Best practice is also to conduct tests like those in the provided test script which perform integration       testing with real, cloud-based resources. Integration testing in the cloud confirms that your infrastructure has been correctly deployed and that events flow       between different services as expected. To learn more, see How to test serverless functions and applications.",
                                {
                                    "sub_header": "Testing the app manually",
                                    "content": [
                                        "You can test your function manually by adding a PDF file to           your Amazon S3 source bucket. When you add your file to the source bucket, your Lambda function should be automatically invoked and should store an encrypted           version of the file in your target bucket.",
                                        "  1.Console : filename_encrypted.pdf",
                                        "  2.AWS CLI : --bucket",
                                        "anchor",
                                        "anchor",
                                        [],
                                        [],
                                        [],
                                        "To test your app by uploading a file (console)",
                                        "  1 : To upload a PDF file to your S3 bucket, do the following:Open the Buckets page of the Amazon S3 console and choose your source bucket.Choose Upload.Choose Add files and use the file selector to choose the PDF file you want to upload.Choose Open, then choose Upload.",
                                        "  2 : Verify that Lambda has saved an encrypted version of your PDF file in your target bucket by doing the following:Navigate back to the Buckets page of the Amazon S3 console and choose your destination bucket.In the Objects pane, you should now see a file with name format filename_encrypted.pdf (where                         filename.pdf was the name of the file you uploaded to your source bucket).                        To download your encrypted PDF, select the file, then choose Download.Confirm that you can open the downloaded file with the password your Lambda function protected it with (my-secret-password).",
                                        [],
                                        [],
                                        [],
                                        [],
                                        [],
                                        [],
                                        [],
                                        [],
                                        []
                                    ]
                                },
                                {
                                    "sub_header": "Testing the app with the automated script",
                                    "content": [
                                        "To test your app using the provided test script, first ensure that the pytest module is installed in your local environment. You can install       pytest by running the following command:",
                                        "pip install pytest",
                                        "You also need to edit the code in the test_pdf_encrypt.py file to replace the placeholder bucket names with the names of           your Amazon S3 source and destination buckets. Make the following changes to test_pdf_encrypt.py:",
                                        "  1.In the test_source_bucket_available function, replace EXAMPLE-BUCKET with the name of your source bucket.",
                                        "  2.In the test_encrypted_file_in_bucket function, replace EXAMPLE-BUCKET-encrypted with <source-bucket>-encrypted,            where <source-bucket> is the name of your source bucket.",
                                        "  3.In the cleanup function, replace EXAMPLE-BUCKET with the name of your source bucket, and replace               EXAMPLE-BUCKET-encrypted with ≪source-bucket>-encrypted, where <source-bucket> is the name of your source bucket.",
                                        "To run the tests do the following:",
                                        "  1.Save a PDF file named test.pdfin the directory containing the test_pdf_encrypt.py and pytest.ini             files.",
                                        "  2.Open a terminal or shell program and run the following command from the directory containing the test files.pytest -s -v",
                                        {
                                            "code_example": "pytest -s -v"
                                        },
                                        "When the test completes, you should see output like the following:",
                                        "============================================================== test session starts =========================================================platform linux -- Python 3.12.2, pytest-7.2.2, pluggy-1.0.0 -- /usr/bin/python3cachedir: .pytest_cachehypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/pdf_encrypt_app/.hypothesis/examples')Test order randomisation NOT enabled. Enable with --random-order or --random-order-bucket=<bucket_type>rootdir: /home/pdf_encrypt_app, configfile: pytest.iniplugins: anyio-3.7.1, hypothesis-6.70.0, localserver-0.7.1, random-order-1.1.0collected 4 itemstest_pdf_encrypt.py::test_source_bucket_available PASSEDtest_pdf_encrypt.py::test_lambda_invoked PASSEDtest_pdf_encrypt.py::test_encrypted_file_in_bucket PASSEDtest_pdf_encrypt.py::test_cleanup PASSEDDeleted test.pdf from EXAMPLE-BUCKETDeleted test_encrypted.pdf from EXAMPLE-BUCKET-encrypted=============================================================== 4 passed in 7.32s =========================================================="
                                    ]
                                }
                            ]
                        },
                        {
                            "sub_header": "Next steps",
                            "content": [
                                "Now you've created this example app, you can use the provided code as a basis to create other types of file-processing application. Modify the     code in the lambda_function.py file to implement the file-processing logic for your use case.",
                                "Many typical file-processing use cases involve image processing. When using Python, the most popular image-processing libraries like       pillow typically contain C or C++ components. In order to ensure that your function's deployment package is     compatible with the Lambda execution environment, it's important to use the correct source distribution binary.",
                                "When deploying your resources with AWS SAM, you need to take some extra steps to include the right source distribution in your deployment package. Because AWS SAM won't install dependencies     for a different platform than your build machine, specifying the correct source distribution (.whl file) in your requirements.txt       file won't work if your build machine uses an operating system or architecture that's different from the Lambda execution environment. Instead, you should do one of the following:",
                                "  1.Use the --use-container option when running sam build. When you specify this option, AWS SAM downloads a container base image that's         compatible with the Lambda execution environment and builds your function's deployment package in a Docker container using that image. To learn more, see           Building a Lambda           function inside of a provided container.",
                                "  2.Build your function's .zip deployment package yourself using the correct source distribution binary and save the .zip file in the directory you specify as the           CodeUri in the AWS SAM template. To learn more about building .zip deployment packages for Python using binary distributions, see           Creating a .zip deployment package with dependencies and Creating .zip deployment packages with native libraries."
                            ]
                        }
                    ]
                },
                {
                    "title": "Scheduled-maintenance app",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/scheduled-task-app.html",
                    "source": "Aws",
                    "parent_content": [
                        "You can use AWS Lambda to replace scheduled processes such as automated system backups, file conversions, and maintenance tasks.   In this example, you create a serverless application that performs regular scheduled maintenance on a DynamoDB table by deleting old entries. The app uses EventBridge Scheduler to invoke a   Lambda function on a cron schedule. When invoked, the function queries the table for items older than one year, and deletes them. The function logs each deleted item  in CloudWatch Logs.",
                        "To implement this example, first create a DynamoDB table and populate it with some test data for your function to query. Then, create a Python Lambda function with   an EventBridge Scheduler trigger and an IAM execution role that gives the function permission to read, and delete, items from your table.",
                        [],
                        "Tip",
                        [],
                        "If you’re new to Lambda, we recommend that you complete the tutorial Create your first Lambda function before      creating this example app.",
                        [],
                        "You can deploy your app manually by creating and configuring resources with the AWS Management Console. You can     also deploy the app by using the AWS Serverless Application Model (AWS SAM). AWS SAM is an infrastructure as code (IaC) tool. With IaC, you don’t create     resources manually, but define them in code and then deploy them automatically.",
                        "If you want to learn more about using Lambda with IaC before deploying this example app, see Using Lambda with infrastructure as code (IaC).",
                        {
                            "sub_header": "Prerequisites",
                            "content": [
                                "Before you can create the example app, make sure you have the required command line tools and programs installed.",
                                "  1.Python: To populate the DynamoDB table you create to test your app, this example uses a  script and a CSV file to write data into the table. Make sure you have          version 3.8 or later installed on your machine.",
                                "  2.AWS SAM CLI: If you want to create the DynamoDB table and deploy the example app using AWS SAM, you need to install the .           Follow the installation instructions           in the AWS SAM User Guide.",
                                "  3.AWS CLI: To use the provided Python script to populate your test table, you need to have installed and configured the . This is because the script uses           the AWS SDK for Python (Boto3), which needs access to your AWS Identity and Access Management (IAM) credentials. You also need the  installed to deploy resources using AWS SAM. Install the CLI by following           the installation instructions in the AWS Command Line Interface User Guide.",
                                "  4.Docker: To deploy the app using AWS SAM,  must also be installed on your build machine. Follow the instructions in Install  Engine         on the  documentation website."
                            ]
                        },
                        {
                            "sub_header": "Downloading the example app files",
                            "content": [
                                "To create the example database and the scheduled-maintenance app, you need to create the following files in your project directory:",
                                "Example database files",
                                "  1.template.yaml - an AWS SAM template you can use to create the DynamoDB table",
                                "  2.sample_data.csv - a CSV file containing sample data to load into your table",
                                "  3.load_sample_data.py - a Python script that writes the data in the CSV file into the table",
                                "Scheduled-maintenance app files",
                                "  1.lambda_function.py - the Python function code for the Lambda function that performs the database maintenance",
                                "  2.requirements.txt - a manifest file defining the dependencies that your Python function code requires",
                                "  3.template.yaml - an AWS SAM template you can use to deploy the app",
                                "Test file",
                                "  1.test_app.py - a Python script that scans the table and confirms successful operation of your function by outputting all records older than one year",
                                "Expand the following sections to view the code and to learn more about the role of each file in creating and testing your app. To create the       files on your local machine, copy and paste the code below.",
                                "Copy and paste the following code into a file named template.yaml.",
                                {
                                    "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Template for DynamoDB Table with Order_number as Partition Key and Date as Sort Key\n\nResources:\n  MyDynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Retain\n    UpdateReplacePolicy: Retain\n    Properties:\n      TableName: MyOrderTable\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: Order_number\n          AttributeType: S\n        - AttributeName: Date\n          AttributeType: S\n      KeySchema:\n        - AttributeName: Order_number\n          KeyType: HASH\n        - AttributeName: Date\n          KeyType: RANGE\n      SSESpecification:\n        SSEEnabled: true\n      GlobalSecondaryIndexes:\n        - IndexName: Date-index\n          KeySchema:\n            - AttributeName: Date\n              KeyType: HASH\n          Projection:\n            ProjectionType: ALL\n      PointInTimeRecoverySpecification:\n        PointInTimeRecoveryEnabled: true\n\nOutputs:\n  TableName:\n    Description: DynamoDB Table Name\n    Value: !Ref MyDynamoDBTable\n  TableArn:\n    Description: DynamoDB Table ARN\n    Value: !GetAtt MyDynamoDBTable.Arn"
                                },
                                "Note",
                                [],
                                "AWS SAM templates use a standard naming convention of template.yaml. In this example, you have two template files - one to create the           example database and another to create the app itself. Save them in separate sub-directories in your project folder.",
                                [],
                                [],
                                "This AWS SAM template defines the DynamoDB table resource you create to test your app. The table uses a primary key of Order_number with a sort           key of Date. In order for your Lambda function to find items directly by date, we also define a Global Secondary Index         named Date-index.",
                                "To learn more about creating and configuring a DynamoDB table using the AWS::DynamoDB::Table resource, see AWS::DynamoDB::Table in           the AWS CloudFormation User Guide.",
                                [],
                                "AWS SAM template (example DynamoDB table)",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named template.yaml.",
                                {
                                    "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Template for DynamoDB Table with Order_number as Partition Key and Date as Sort Key\n\nResources:\n  MyDynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Retain\n    UpdateReplacePolicy: Retain\n    Properties:\n      TableName: MyOrderTable\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: Order_number\n          AttributeType: S\n        - AttributeName: Date\n          AttributeType: S\n      KeySchema:\n        - AttributeName: Order_number\n          KeyType: HASH\n        - AttributeName: Date\n          KeyType: RANGE\n      SSESpecification:\n        SSEEnabled: true\n      GlobalSecondaryIndexes:\n        - IndexName: Date-index\n          KeySchema:\n            - AttributeName: Date\n              KeyType: HASH\n          Projection:\n            ProjectionType: ALL\n      PointInTimeRecoverySpecification:\n        PointInTimeRecoveryEnabled: true\n\nOutputs:\n  TableName:\n    Description: DynamoDB Table Name\n    Value: !Ref MyDynamoDBTable\n  TableArn:\n    Description: DynamoDB Table ARN\n    Value: !GetAtt MyDynamoDBTable.Arn"
                                },
                                "Note",
                                [],
                                "AWS SAM templates use a standard naming convention of template.yaml. In this example, you have two template files - one to create the           example database and another to create the app itself. Save them in separate sub-directories in your project folder.",
                                [],
                                [],
                                "This AWS SAM template defines the DynamoDB table resource you create to test your app. The table uses a primary key of Order_number with a sort           key of Date. In order for your Lambda function to find items directly by date, we also define a Global Secondary Index         named Date-index.",
                                "To learn more about creating and configuring a DynamoDB table using the AWS::DynamoDB::Table resource, see AWS::DynamoDB::Table in           the AWS CloudFormation User Guide.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named sample_data.csv.",
                                {
                                    "code_example": "Date,Order_number,CustomerName,ProductID,Quantity,TotalAmount\n2023-09-01,ORD001,Alejandro Rosalez,PROD123,2,199.98\n2023-09-01,ORD002,Akua Mansa,PROD456,1,49.99\n2023-09-02,ORD003,Ana Carolina Silva,PROD789,3,149.97\n2023-09-03,ORD004,Arnav Desai,PROD123,1,99.99\n2023-10-01,ORD005,Carlos Salazar,PROD456,2,99.98\n2023-10-02,ORD006,Diego Ramirez,PROD789,1,49.99\n2023-10-03,ORD007,Efua Owusu,PROD123,4,399.96\n2023-10-04,ORD008,John Stiles,PROD456,2,99.98\n2023-10-05,ORD009,Jorge Souza,PROD789,3,149.97\n2023-10-06,ORD010,Kwaku Mensah,PROD123,1,99.99\n2023-11-01,ORD011,Li Juan,PROD456,5,249.95\n2023-11-02,ORD012,Marcia Oliveria,PROD789,2,99.98\n2023-11-03,ORD013,Maria Garcia,PROD123,3,299.97\n2023-11-04,ORD014,Martha Rivera,PROD456,1,49.99\n2023-11-05,ORD015,Mary Major,PROD789,4,199.96\n2023-12-01,ORD016,Mateo Jackson,PROD123,2,199.99\n2023-12-02,ORD017,Nikki Wolf,PROD456,3,149.97\n2023-12-03,ORD018,Pat Candella,PROD789,1,49.99\n2023-12-04,ORD019,Paulo Santos,PROD123,5,499.95\n2023-12-05,ORD020,Richard Roe,PROD456,2,99.98\n2024-01-01,ORD021,Saanvi Sarkar,PROD789,3,149.97\n2024-01-02,ORD022,Shirley Rodriguez,PROD123,1,99.99\n2024-01-03,ORD023,Sofia Martinez,PROD456,4,199.96\n2024-01-04,ORD024,Terry Whitlock,PROD789,2,99.98\n2024-01-05,ORD025,Wang Xiulan,PROD123,3,299.97"
                                },
                                "This file contains some example test data to populate your DynamoDB table with in a standard comma-separated values (CSV) format.",
                                [],
                                "Sample database data file",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named sample_data.csv.",
                                {
                                    "code_example": "Date,Order_number,CustomerName,ProductID,Quantity,TotalAmount\n2023-09-01,ORD001,Alejandro Rosalez,PROD123,2,199.98\n2023-09-01,ORD002,Akua Mansa,PROD456,1,49.99\n2023-09-02,ORD003,Ana Carolina Silva,PROD789,3,149.97\n2023-09-03,ORD004,Arnav Desai,PROD123,1,99.99\n2023-10-01,ORD005,Carlos Salazar,PROD456,2,99.98\n2023-10-02,ORD006,Diego Ramirez,PROD789,1,49.99\n2023-10-03,ORD007,Efua Owusu,PROD123,4,399.96\n2023-10-04,ORD008,John Stiles,PROD456,2,99.98\n2023-10-05,ORD009,Jorge Souza,PROD789,3,149.97\n2023-10-06,ORD010,Kwaku Mensah,PROD123,1,99.99\n2023-11-01,ORD011,Li Juan,PROD456,5,249.95\n2023-11-02,ORD012,Marcia Oliveria,PROD789,2,99.98\n2023-11-03,ORD013,Maria Garcia,PROD123,3,299.97\n2023-11-04,ORD014,Martha Rivera,PROD456,1,49.99\n2023-11-05,ORD015,Mary Major,PROD789,4,199.96\n2023-12-01,ORD016,Mateo Jackson,PROD123,2,199.99\n2023-12-02,ORD017,Nikki Wolf,PROD456,3,149.97\n2023-12-03,ORD018,Pat Candella,PROD789,1,49.99\n2023-12-04,ORD019,Paulo Santos,PROD123,5,499.95\n2023-12-05,ORD020,Richard Roe,PROD456,2,99.98\n2024-01-01,ORD021,Saanvi Sarkar,PROD789,3,149.97\n2024-01-02,ORD022,Shirley Rodriguez,PROD123,1,99.99\n2024-01-03,ORD023,Sofia Martinez,PROD456,4,199.96\n2024-01-04,ORD024,Terry Whitlock,PROD789,2,99.98\n2024-01-05,ORD025,Wang Xiulan,PROD123,3,299.97"
                                },
                                "This file contains some example test data to populate your DynamoDB table with in a standard comma-separated values (CSV) format.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named load_sample_data.py.",
                                {
                                    "code_example": "import boto3\nimport csv\nfrom decimal import Decimal\n\n# Initialize the DynamoDB client\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('MyOrderTable') \nprint(\"DDB client initialized.\")\n\ndef load_data_from_csv(filename):\n    with open(filename, 'r') as file:\n        csv_reader = csv.DictReader(file)\n        for row in csv_reader:\n            item = {\n                'Order_number': row['Order_number'],\n                'Date': row['Date'],\n                'CustomerName': row['CustomerName'],\n                'ProductID': row['ProductID'],\n                'Quantity': int(row['Quantity']),\n                'TotalAmount': Decimal(str(row['TotalAmount']))\n            }\n            table.put_item(Item=item)\n            print(f\"Added item: {item['Order_number']} - {item['Date']}\")\n\nif __name__ == \"__main__\":\n    load_data_from_csv('sample_data.csv')\n    print(\"Data loading completed.\")"
                                },
                                "This Python script first uses the AWS SDK for Python (Boto3) to create a connection to your DynamoDB table. It then iterates over each row in the example-data CSV file, creates an item from that row, and            writes the item to the DynamoDB table using the boto3 SDK.",
                                [],
                                "Python script to load sample data",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named load_sample_data.py.",
                                {
                                    "code_example": "import boto3\nimport csv\nfrom decimal import Decimal\n\n# Initialize the DynamoDB client\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('MyOrderTable') \nprint(\"DDB client initialized.\")\n\ndef load_data_from_csv(filename):\n    with open(filename, 'r') as file:\n        csv_reader = csv.DictReader(file)\n        for row in csv_reader:\n            item = {\n                'Order_number': row['Order_number'],\n                'Date': row['Date'],\n                'CustomerName': row['CustomerName'],\n                'ProductID': row['ProductID'],\n                'Quantity': int(row['Quantity']),\n                'TotalAmount': Decimal(str(row['TotalAmount']))\n            }\n            table.put_item(Item=item)\n            print(f\"Added item: {item['Order_number']} - {item['Date']}\")\n\nif __name__ == \"__main__\":\n    load_data_from_csv('sample_data.csv')\n    print(\"Data loading completed.\")"
                                },
                                "This Python script first uses the AWS SDK for Python (Boto3) to create a connection to your DynamoDB table. It then iterates over each row in the example-data CSV file, creates an item from that row, and            writes the item to the DynamoDB table using the boto3 SDK.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named lambda_function.py.",
                                {
                                    "code_example": "import boto3\nfrom datetime import datetime, timedelta\nfrom boto3.dynamodb.conditions import Key, Attr\nimport logging\n\nlogger = logging.getLogger()\nlogger.setLevel(\"INFO\")\n\ndef lambda_handler(event, context):\n    # Initialize the DynamoDB client\n    dynamodb = boto3.resource('dynamodb')\n    \n    # Specify the table name\n    table_name = 'MyOrderTable'\n    table = dynamodb.Table(table_name)\n    \n    # Get today's date\n    today = datetime.now()\n    \n    # Calculate the date one year ago\n    one_year_ago = (today - timedelta(days=365)).strftime('%Y-%m-%d')\n    \n    # Scan the table using a global secondary index\n    response = table.scan(\n        IndexName='Date-index',\n        FilterExpression='#date < :one_year_ago',\n        ExpressionAttributeNames={\n            '#date': 'Date'\n        },\n        ExpressionAttributeValues={\n            ':one_year_ago': one_year_ago\n        }\n    )\n    \n     # Delete old items\n    with table.batch_writer() as batch:\n        for item in response['Items']:\n            Order_number = item['Order_number']\n            batch.delete_item(\n                Key={\n                    'Order_number': Order_number,\n                    'Date': item['Date']\n                }\n            )\n            logger.info(f'deleted order number {Order_number}')\n    \n    # Check if there are more items to scan\n    while 'LastEvaluatedKey' in response:\n        response = table.scan(\n            IndexName='DateIndex',\n            FilterExpression='#date < :one_year_ago',\n            ExpressionAttributeNames={\n                '#date': 'Date'\n            },\n            ExpressionAttributeValues={\n                ':one_year_ago': one_year_ago\n            },\n            ExclusiveStartKey=response['LastEvaluatedKey']\n        )\n        \n        # Delete old items\n        with table.batch_writer() as batch:\n            for item in response['Items']:\n                batch.delete_item(\n                    Key={\n                        'Order_number': item['Order_number'],\n                        'Date': item['Date']\n                    }\n                )\n    \n    return {\n        'statusCode': 200,\n        'body': 'Cleanup completed successfully'\n    }"
                                },
                                "The Python function code contains the handler function (lambda_handler) that Lambda runs when your function is     invoked.",
                                "When the function is invoked by EventBridge Scheduler, it uses the AWS SDK for Python (Boto3) to create a connection to the DynamoDB table on which the scheduled maintenance task is to be performed.     It then uses the Python datetime library to calculate the date one year ago, before scanning the table for items older than this and deleting them.",
                                "Note that responses from DynamoDB query and scan operations are limited to a maximum of 1 MB in size. If the response is larger than 1 MB, DynamoDB paginates the       data and returns a LastEvaluatedKey element in the response. To ensure that our function processes all the records in the table, we check for the presence of this key       and continue performing table scans from the last evaluated position until the whole table has been scanned.",
                                [],
                                "Python function code",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named lambda_function.py.",
                                {
                                    "code_example": "import boto3\nfrom datetime import datetime, timedelta\nfrom boto3.dynamodb.conditions import Key, Attr\nimport logging\n\nlogger = logging.getLogger()\nlogger.setLevel(\"INFO\")\n\ndef lambda_handler(event, context):\n    # Initialize the DynamoDB client\n    dynamodb = boto3.resource('dynamodb')\n    \n    # Specify the table name\n    table_name = 'MyOrderTable'\n    table = dynamodb.Table(table_name)\n    \n    # Get today's date\n    today = datetime.now()\n    \n    # Calculate the date one year ago\n    one_year_ago = (today - timedelta(days=365)).strftime('%Y-%m-%d')\n    \n    # Scan the table using a global secondary index\n    response = table.scan(\n        IndexName='Date-index',\n        FilterExpression='#date < :one_year_ago',\n        ExpressionAttributeNames={\n            '#date': 'Date'\n        },\n        ExpressionAttributeValues={\n            ':one_year_ago': one_year_ago\n        }\n    )\n    \n     # Delete old items\n    with table.batch_writer() as batch:\n        for item in response['Items']:\n            Order_number = item['Order_number']\n            batch.delete_item(\n                Key={\n                    'Order_number': Order_number,\n                    'Date': item['Date']\n                }\n            )\n            logger.info(f'deleted order number {Order_number}')\n    \n    # Check if there are more items to scan\n    while 'LastEvaluatedKey' in response:\n        response = table.scan(\n            IndexName='DateIndex',\n            FilterExpression='#date < :one_year_ago',\n            ExpressionAttributeNames={\n                '#date': 'Date'\n            },\n            ExpressionAttributeValues={\n                ':one_year_ago': one_year_ago\n            },\n            ExclusiveStartKey=response['LastEvaluatedKey']\n        )\n        \n        # Delete old items\n        with table.batch_writer() as batch:\n            for item in response['Items']:\n                batch.delete_item(\n                    Key={\n                        'Order_number': item['Order_number'],\n                        'Date': item['Date']\n                    }\n                )\n    \n    return {\n        'statusCode': 200,\n        'body': 'Cleanup completed successfully'\n    }"
                                },
                                "The Python function code contains the handler function (lambda_handler) that Lambda runs when your function is     invoked.",
                                "When the function is invoked by EventBridge Scheduler, it uses the AWS SDK for Python (Boto3) to create a connection to the DynamoDB table on which the scheduled maintenance task is to be performed.     It then uses the Python datetime library to calculate the date one year ago, before scanning the table for items older than this and deleting them.",
                                "Note that responses from DynamoDB query and scan operations are limited to a maximum of 1 MB in size. If the response is larger than 1 MB, DynamoDB paginates the       data and returns a LastEvaluatedKey element in the response. To ensure that our function processes all the records in the table, we check for the presence of this key       and continue performing table scans from the last evaluated position until the whole table has been scanned.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named requirements.txt.",
                                {
                                    "code_example": "boto3"
                                },
                                "For this example, your function code has only one dependency that isn't part of the standard Python library -           the SDK for Python (Boto3) that the function uses to scan and delete items from the DynamoDB table.",
                                "Note",
                                [],
                                "A version of the SDK for Python (Boto3) is included as part of the Lambda runtime, so your code would run without adding Boto3 to your             function's deployment package. However, to maintain full control of your function's dependencies and avoid possible issues with             version misalignment, best practice for Python is to include all function dependencies in your function's deployment package.             See Runtime dependencies in Python to learn more.",
                                [],
                                [],
                                [],
                                "requirements.txt manifest file",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named requirements.txt.",
                                {
                                    "code_example": "boto3"
                                },
                                "For this example, your function code has only one dependency that isn't part of the standard Python library -           the SDK for Python (Boto3) that the function uses to scan and delete items from the DynamoDB table.",
                                "Note",
                                [],
                                "A version of the SDK for Python (Boto3) is included as part of the Lambda runtime, so your code would run without adding Boto3 to your             function's deployment package. However, to maintain full control of your function's dependencies and avoid possible issues with             version misalignment, best practice for Python is to include all function dependencies in your function's deployment package.             See Runtime dependencies in Python to learn more.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named template.yaml.",
                                {
                                    "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Template for Lambda function and EventBridge Scheduler rule\n\nResources:\n  MyLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: ScheduledDBMaintenance\n      CodeUri: ./\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.11\n      Architectures:\n        - x86_64\n      Events:\n        ScheduleEvent:\n          Type: ScheduleV2\n          Properties:\n            ScheduleExpression: cron(0 3 1 * ? *)\n            Description: Run on the first day of every month at 03:00 AM\n      Policies:\n        - CloudWatchLogsFullAccess\n        - Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:Scan\n                - dynamodb:BatchWriteItem\n              Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MyOrderTable'\n\n  LambdaLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${MyLambdaFunction}\n      RetentionInDays: 30\n\nOutputs:\n  LambdaFunctionName:\n    Description: Lambda Function Name\n    Value: !Ref MyLambdaFunction\n  LambdaFunctionArn:\n    Description: Lambda Function ARN\n    Value: !GetAtt MyLambdaFunction.Arn"
                                },
                                "Note",
                                [],
                                "AWS SAM templates use a standard naming convention of template.yaml. In this example, you have two template files - one to create the             example database and another to create the app itself. Save them in separate sub-directories in your project folder.",
                                [],
                                [],
                                "This AWS SAM template defines the resources for your app. We define the Lambda function using the AWS::Serverless::Function resource. The EventBridge Scheduler schedule and the           trigger to invoke the Lambda function are created by using the Events property of this resource using a type of ScheduleV2. To learn more about defining EventBridge Scheduler schedules in AWS SAM templates,           see ScheduleV2 in the           AWS Serverless Application Model Developer Guide.",
                                "In addition to the Lambda function and the EventBridge Scheduler schedule, we also define a CloudWatch log group for your function to send records of deleted items to.",
                                [],
                                "AWS SAM template (scheduled-maintenance app)",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named template.yaml.",
                                {
                                    "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Template for Lambda function and EventBridge Scheduler rule\n\nResources:\n  MyLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: ScheduledDBMaintenance\n      CodeUri: ./\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.11\n      Architectures:\n        - x86_64\n      Events:\n        ScheduleEvent:\n          Type: ScheduleV2\n          Properties:\n            ScheduleExpression: cron(0 3 1 * ? *)\n            Description: Run on the first day of every month at 03:00 AM\n      Policies:\n        - CloudWatchLogsFullAccess\n        - Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:Scan\n                - dynamodb:BatchWriteItem\n              Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MyOrderTable'\n\n  LambdaLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${MyLambdaFunction}\n      RetentionInDays: 30\n\nOutputs:\n  LambdaFunctionName:\n    Description: Lambda Function Name\n    Value: !Ref MyLambdaFunction\n  LambdaFunctionArn:\n    Description: Lambda Function ARN\n    Value: !GetAtt MyLambdaFunction.Arn"
                                },
                                "Note",
                                [],
                                "AWS SAM templates use a standard naming convention of template.yaml. In this example, you have two template files - one to create the             example database and another to create the app itself. Save them in separate sub-directories in your project folder.",
                                [],
                                [],
                                "This AWS SAM template defines the resources for your app. We define the Lambda function using the AWS::Serverless::Function resource. The EventBridge Scheduler schedule and the           trigger to invoke the Lambda function are created by using the Events property of this resource using a type of ScheduleV2. To learn more about defining EventBridge Scheduler schedules in AWS SAM templates,           see ScheduleV2 in the           AWS Serverless Application Model Developer Guide.",
                                "In addition to the Lambda function and the EventBridge Scheduler schedule, we also define a CloudWatch log group for your function to send records of deleted items to.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named test_app.py.",
                                {
                                    "code_example": "import boto3\nfrom datetime import datetime, timedelta\nimport json\n\n# Initialize the DynamoDB client\ndynamodb = boto3.resource('dynamodb')\n\n# Specify your table name\ntable_name = 'YourTableName'\ntable = dynamodb.Table(table_name)\n\n# Get the current date\ncurrent_date = datetime.now()\n\n# Calculate the date one year ago\none_year_ago = current_date - timedelta(days=365)\n\n# Convert the date to string format (assuming the date in DynamoDB is stored as a string)\none_year_ago_str = one_year_ago.strftime('%Y-%m-%d')\n\n# Scan the table\nresponse = table.scan(\n    FilterExpression='#date < :one_year_ago',\n    ExpressionAttributeNames={\n        '#date': 'Date'\n    },\n    ExpressionAttributeValues={\n        ':one_year_ago': one_year_ago_str\n    }\n)\n\n# Process the results\nold_records = response['Items']\n\n# Continue scanning if we have more items (pagination)\nwhile 'LastEvaluatedKey' in response:\n    response = table.scan(\n        FilterExpression='#date < :one_year_ago',\n        ExpressionAttributeNames={\n            '#date': 'Date'\n        },\n        ExpressionAttributeValues={\n            ':one_year_ago': one_year_ago_str\n        },\n        ExclusiveStartKey=response['LastEvaluatedKey']\n    )\n    old_records.extend(response['Items'])\n\nfor record in old_records:\n    print(json.dumps(record))\n\n# The total number of old records should be zero.\nprint(f\"Total number of old records: {len(old_records)}\")\n"
                                },
                                "This test script uses the AWS SDK for Python (Boto3) to create a connection to your DynamoDB table and scan for items older than one year. To confirm if the Lambda function           has run successfully, at the end of the test, the function prints the number of records older than one year still in the table. If the Lambda function was successful,           the number of old records in the table should be zero.        ",
                                [],
                                "Test script",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "Copy and paste the following code into a file named test_app.py.",
                                {
                                    "code_example": "import boto3\nfrom datetime import datetime, timedelta\nimport json\n\n# Initialize the DynamoDB client\ndynamodb = boto3.resource('dynamodb')\n\n# Specify your table name\ntable_name = 'YourTableName'\ntable = dynamodb.Table(table_name)\n\n# Get the current date\ncurrent_date = datetime.now()\n\n# Calculate the date one year ago\none_year_ago = current_date - timedelta(days=365)\n\n# Convert the date to string format (assuming the date in DynamoDB is stored as a string)\none_year_ago_str = one_year_ago.strftime('%Y-%m-%d')\n\n# Scan the table\nresponse = table.scan(\n    FilterExpression='#date < :one_year_ago',\n    ExpressionAttributeNames={\n        '#date': 'Date'\n    },\n    ExpressionAttributeValues={\n        ':one_year_ago': one_year_ago_str\n    }\n)\n\n# Process the results\nold_records = response['Items']\n\n# Continue scanning if we have more items (pagination)\nwhile 'LastEvaluatedKey' in response:\n    response = table.scan(\n        FilterExpression='#date < :one_year_ago',\n        ExpressionAttributeNames={\n            '#date': 'Date'\n        },\n        ExpressionAttributeValues={\n            ':one_year_ago': one_year_ago_str\n        },\n        ExclusiveStartKey=response['LastEvaluatedKey']\n    )\n    old_records.extend(response['Items'])\n\nfor record in old_records:\n    print(json.dumps(record))\n\n# The total number of old records should be zero.\nprint(f\"Total number of old records: {len(old_records)}\")\n"
                                },
                                "This test script uses the AWS SDK for Python (Boto3) to create a connection to your DynamoDB table and scan for items older than one year. To confirm if the Lambda function           has run successfully, at the end of the test, the function prints the number of records older than one year still in the table. If the Lambda function was successful,           the number of old records in the table should be zero.        ",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                []
                            ]
                        },
                        {
                            "sub_header": "Creating and populating the example DynamoDB table",
                            "content": [
                                "To test your scheduled-maintenance app, you first create a DynamoDB table and populate it with some sample data. You can create the table either manually using the       AWS Management Console or by using AWS SAM. We recommend that you use AWS SAM to quickly create and configure the table using a few AWS CLI commands.",
                                "  1.Console : MyOrderTable",
                                "  2.AWS SAM : template.yaml",
                                "anchor",
                                "anchor",
                                [],
                                [],
                                [],
                                "To create the DynamoDB table",
                                "  1 : Open the Tables page of the DynamoDB console.",
                                "  2 : Choose Create table.",
                                "  3 : Create the table by doing the following:Under Table details, for Table name, enter MyOrderTable.For Partition key, enter Order_number and leave the type as String.For Sort key, enter Date and leave the type as String.Leave Table settings set to Default settings and choose Create table.",
                                "  4 : When your table has finished creating and its Status shows as Active, create a global secondary index (GSI) by doing the               following. Your app will use this GSI to search for items directly by date to determine what to delete.Choose MyOrderTable from the list of tables.Choose the Indexes tab.Under Global secondary indexes, choose Create index.Under Index details, enter Date for the Partition key and leave the                   Data type set to String.For Index name, enter Date-index.Leave all other parameters set to their default values, scroll to the bottom of the page, and choose Create index.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "After you've created your table, you next add some sample data to test your app. The CSV file sample_data.csv you downloaded     earlier contains a number of example entries comprised of order numbers, dates, and customer and order information. Use the provided python script     load_sample_data.py to add this data to your table.",
                                "To add the sample data to the table",
                                "  1 : Navigate to the directory containing the sample_data.csv and load_sample_data.py files. If these files are in         separate directories, move them so they're saved in the same location.",
                                " 2 : Create a Python virtual environment to run the script in by running the following command. We recommend that you use a virtual environment because in a following         step you'll need to install the AWS SDK for Python (Boto3). ",
                                {
                                    "code_example": "python -m venv venv"
                                },
                                " 3 : Activate the virtual environment by running the following command. ",
                                {
                                    "code_example": "source venv/bin/activate"
                                },
                                " 4 : Install the SDK for Python (Boto3) in your virtual environment by running the following command. The script uses this library to connect to your DynamoDB table and add the items. ",
                                {
                                    "code_example": "pip install boto3"
                                },
                                " 5 : Run the script to populate the table by running the following command. If the script runs successfully, it should print each item to the console as it loads it and report Data loading completed.",
                                {
                                    "code_example": "python load_sample_data.py"
                                },
                                " 6 : Deactivate the virtual environment by running the following command. ",
                                {
                                    "code_example": "deactivate"
                                },
                                "  7 : You can verify that the data has been loaded to your DynamoDB table by doing the following:Open the Explore items page of the DynamoDB console and select your table (MyOrderTable).In the Items returned pane, you should see the 25 items from the CSV file that the script added to the table."
                            ]
                        },
                        {
                            "sub_header": "Creating the scheduled-maintenance app",
                            "content": [
                                "You can create and deploy the resources for this example app step by step using the AWS Management Console or by using AWS SAM. In a production environment, we       recommend that you use an Infrustracture-as-Code (IaC) tool like AWS SAM to repeatably deploy serverless applications without using manual processes.",
                                "For this example, follow the console instructions to learn how to configure each AWS resource separately, or follow the AWS SAM instructions     to quickly deploy the app using AWS CLI commands.",
                                "  1.Console : .zip",
                                "  2.AWS SAM : template.yaml",
                                "anchor",
                                "anchor",
                                [],
                                [],
                                [],
                                "To create the function using the AWS Management Console",
                                "First, create a function containing basic starter code. You then                 replace this code with your own function code by either copying and pasting the code directly in the Lambda code editor, or by uploading your code                as a .zip package. For this task, we recommend simply copying and pasting the code.",
                                "  1 : Open the Functions page of the Lambda console.",
                                "  2 : Choose Create function.",
                                "  3 : Choose Author from scratch.",
                                "  4 : Under Basic information, do the following:For Function name, enter ScheduledDBMaintenance.For Runtime choose the latest Python version.For Architecture, choose x86_64.",
                                "  5 : Choose Create function.",
                                "  6 : After your function is created, you can configure your function with the provided function code.In the Code source pane, replace the Hello world code that Lambda created with the Python function code from                        the lambda_function.py file that you saved earlier.In the DEPLOY section, choose Deploy to update your function's code:",
                                [],
                                "To configure the function memory and timeout (console)",
                                "  1 : Select the Configuration tab for your function.",
                                "  2 : In the General configuration pane, choose Edit.",
                                "  3 : Set Memory to 256 MB and Timeout to 15 seconds.                  If you are processing a large table with many records, for example in the case of a production environment,                  you might consider setting Timeout to a larger number. This gives your function                  more time to scan, and clean the database.",
                                "  4 : Choose Save.",
                                [],
                                "To configure the log format (console)",
                                "You can configure Lambda functions to output logs in either unstructured text or JSON format. We recommend that you use JSON format for logs to                   make it easier to search and filter log data. To learn more about Lambda log configuration options, see Configuring advanced logging controls for Lambda functions.",
                                "  1 : Select the Configuration tab for your function.",
                                "  2 : Select Monitoring and operations tools.",
                                "  3 : In the Logging configuration pane, choose Edit.",
                                "  4 : For Logging configuration, select JSON.",
                                "  5 : Choose Save.",
                                [],
                                "To set Up IAM permissions",
                                "To give your function the permissions it needs to read and delete DynamoDB items, you need to add a policy to your function's                     execution role defining the necessary permissions.",
                                "  1 : Open the Configuration tab, then choose                        Permissions from the left navigation bar.",
                                "  2 : Choose the role name under Execution role.",
                                "  3 : In the IAM console, choose Add permissions, then                        Create inline policy.",
                                " 4 : Use the JSON editor and enter the following policy: ",
                                {
                                    "code_example": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:Scan\",\n                \"dynamodb:DeleteItem\",\n                \"dynamodb:BatchWriteItem\"\n            ],\n            \"Resource\": \"arn:aws:dynamodb:*:*:table/MyOrderTable\"\n        }\n    ]\n}"
                                },
                                "  5 : Name the policy DynamoDBCleanupPolicy, then create it.",
                                [],
                                "To set up EventBridge Scheduler as a trigger (console)",
                                "  1 : Open the EventBridge console.",
                                "  2 : In the left navigation pane, choose Schedulers under the                        Scheduler section.",
                                "  3 : Choose Create schedule.",
                                "  4 : Configure the schedule by doing the following:Under Schedule name, enter a name for your schedule (for example, DynamoDBCleanupSchedule).Under Schedule pattern, choose Recurring schedule.For Schedule type leave the default as Cron-based schedule,                          then enter the following schedule details:Minutes: 0Hours: 3Day of month: 1Month: *Day of the week: ?Year: *When evaluated, this cron expression runs on the first day of every month at 03:00 AM.For Flexible time window, select Off.",
                                "  5 : Choose Next.",
                                "  6 : Configure the trigger for your Lambda function by doing the following:In the Target detail pane, leave Target API set to Templated targets,                         then select AWS Lambda Invoke.Under Invoke, select your Lambda function (ScheduledDBMaintenance) from the dropdown list.Leave the Payload empty and choose Next.Scroll down to Permissions and select Create a new role for this schedule.                            When you create a new EventBridge Scheduler schedule using the console, EventBridge Scheduler creates a new policy with the required                          permissions the schedule needs to invoke your function. For more information about managing your schedule permissions, see                          Cron-based schedules.                          in the EventBridge Scheduler User Guide.Choose Next.",
                                "  7 : Review your settings and choose Create schedule to complete creation of the schedule and Lambda trigger.",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                []
                            ]
                        },
                        {
                            "sub_header": "Testing the app",
                            "content": [
                                "      To test that your schedule correctly triggers your function, and that your function correctly cleans records      from the database, you can temporarily modify your schedule to run once at a specific time. You can then run sam deploy again to      reset your recurrence schedule to run once a month.    ",
                                "To run the application using the AWS Management Console",
                                "  1 : Navigate back to the EventBridge Scheduler console page.",
                                "  2 : Choose your schedule, then choose Edit.",
                                "  3 : In the Schedule pattern section, under Recurrence, choose One-time schedule.",
                                "  4 :           Set your invocation time to a few minutes from now, review your settings, then choose Save.        ",
                                "      After the schedule runs and invokes its target, you run the test_app.py script to verify that your function successfully removed all old records      from the DynamoDB table.    ",
                                "To verify that old records are deleted using a Python script",
                                "  1 :           In your command line windown, navigate to the folder where you saved test_app.py.        ",
                                " 2 :           Run the script.                   If successful, you will see the following output.        Total number of old records: 0",
                                {
                                    "code_example": "python test_app.py"
                                }
                            ]
                        },
                        {
                            "sub_header": "Next steps",
                            "content": [
                                "      You can now modify the EventBridge Scheduler schedule to meet your partifuclar application requirements. EventBridge Scheduler supports the following schedule expressions: cron, rate, and one-time schedules.    ",
                                "      For more information about EventBridge Scheduler schedule expresssions, see Schedule types in the      EventBridge Scheduler User Guide.    "
                            ]
                        }
                    ]
                }
            ],
            "source": "Aws",
            "parent_content": [
                "The following examples provide function code and  infrastructure as code (IaC) templates to quickly create and deploy serverless apps that implement some common Lambda uses cases. The  examples also include code examples and instructions to test the apps after you deploy them.",
                "For each of the example apps, we provide instructions to either create and configure resources manually using the AWS Management Console, or to   use the AWS Serverless Application Model to deploy the resources using IaC. Follow the console intructions to learn more about configuring the individual AWS   resources for each app, or use to AWS SAM to quickly deploy resources as you would in a production environment.",
                "You can use the provided examples as a basis for your own serverless applications by modifying the provided function code and templates   for your own use case.",
                "We're continuing to create new examples, so check back again to find more severless apps for common Lambda use cases.",
                {
                    "sub_header": "Example apps",
                    "content": [
                        "  1.Example serverless file-processing appCreate a serverless app to automatically perform a file-processing task when an object is uploaded to an Amazon S3 bucket. In this         example, when a PDF file is uploaded, the app encrypts the file and saves it to another S3 bucket.",
                        "  2.Example scheduled cron task appCreate an app to perform a scheduled task using a cron schedule. In this example, the app performs maintenance on a         Amazon DynamoDB table by deleting entries more than 12 months old."
                    ]
                }
            ]
        },
        {
            "title": "Building with TypeScript",
            "href": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-typescript.html",
            "contents": [
                {
                    "title": "Handler",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-handler.html",
                    "source": "Aws",
                    "parent_content": [
                        "The Lambda function handler is the method in your function code that processes events. When your function is  invoked, Lambda runs the handler method. Your function runs until the handler returns a response, exits, or times out.",
                        "Topics",
                        {
                            "sub_header": "Typescript handler basics",
                            "content": [
                                "Example TypeScript handler",
                                "This example function logs the contents of the event object and returns the location of the        logs. Note the following:",
                                "  1.Before using this code in a Lambda function, you must add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. When @types/aws-lambda is installed, the import statement (import ... from 'aws-lambda') imports the type definitions. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository.",
                                "  2.The handler in this example is an ES module and must be designated as such in your package.json file or by using the .mjs file extension. For more information, see  see Designating a function handler as an ES module.",
                                [],
                                {
                                    "code_example": "import { Handler } from 'aws-lambda';\n\nexport const handler: Handler = async (event, context) => {\n    console.log('EVENT: \\n' + JSON.stringify(event, null, 2));\n    return context.logStreamName;\n};"
                                },
                                [],
                                "The runtime passes arguments to the handler method. The first argument is the event object,      which contains information from the invoker. The invoker passes this information as a JSON-formatted string when it      calls Invoke, and the runtime converts it to an object. When an AWS service invokes your function, the event      structure varies by service. With TypeScript, we recommend using type      annotations for the event object. For more information, see Using types for the event object.",
                                "The second argument is the context object, which contains information      about the invocation, function, and execution environment. In the preceding example, the function gets the name of      the log stream from the context object and returns it to the invoker.",
                                "You can also use a callback argument, which is a function that you can call in non-async handlers to send a response.      We recommend that you use async/await instead of callbacks. Async/await provides improved readability, error handling,      and efficiency. For more information about the differences between async/await and callbacks, see      Using callbacks."
                            ]
                        },
                        {
                            "sub_header": "Using async/await",
                            "content": [
                                "If your code performs an asynchronous task, use the async/await pattern to make sure that the handler finishes running. Async/await is a concise and readable way to write asynchronous code in Node.js, without the need for nested callbacks or chaining promises. With async/await, you can write code that reads like synchronous code, while still being asynchronous and non-blocking.",
                                "The async keyword marks a function as asynchronous, and the await keyword pauses the execution of the function until a Promise is resolved.",
                                "Example  TypeScript function – asynchronous",
                                "This example uses fetch, which is available in the nodejs18.x runtime. Note the following:",
                                "  1.Before using this code in a Lambda function, you must add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. When @types/aws-lambda is installed, the import statement (import ... from 'aws-lambda') imports the type definitions. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository.",
                                "  2.The handler in this example is an ES module and must be designated as such in your package.json file or by using the .mjs file extension. For more information, see  see Designating a function handler as an ES module.",
                                [],
                                {
                                    "code_example": "import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nconst url = 'https://aws.amazon.com/';\nexport const lambdaHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n    try {\n        // fetch is available with Node.js 18\n        const res = await fetch(url);\n        return {\n            statusCode: res.status,\n            body: JSON.stringify({\n                message: await res.text(),\n            }),\n        };\n    } catch (err) {\n        console.log(err);\n        return {\n            statusCode: 500,\n            body: JSON.stringify({\n                message: 'some error happened',\n            }),\n        };\n    }\n};"
                                },
                                []
                            ]
                        },
                        {
                            "sub_header": "Using callbacks",
                            "content": [
                                "We recommend that you use async/await to declare the function handler instead of using callbacks. Async/await is a better choice for several reasons:",
                                "  1.Readability::  Async/await code is easier to read and understand than callback code, which can quickly become difficult to follow and result in callback hell.",
                                "  2.Debugging and error handling::  Debugging callback-based code can be difficult. The call stack can become hard to follow and errors can easily be swallowed. With async/await, you can use try/catch blocks to handle errors.",
                                "  3.Efficiency::  Callbacks often require switching between different parts of the code. Async/await can reduce the number of context switches, resulting in more efficient code.",
                                "When you use callbacks in your handler, the function continues to execute until the event loop is empty or the    function times out. The response isn't sent to the invoker until all event loop tasks are finished. If the    function times out, an error is returned instead. You can configure the runtime to send the response immediately    by setting context.callbackWaitsForEmptyEventLoop to false.",
                                "The callback function takes two      arguments: an Error and a response. The response object must be compatible with        JSON.stringify.",
                                "Example TypeScript function with callback",
                                "This sample function receives an event from Amazon API Gateway, logs the event and context objects, and then returns a response to API Gateway. Note the following:",
                                "  1.Before using this code in a Lambda function, you must add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. When @types/aws-lambda is installed, the import statement (import ... from 'aws-lambda') imports the type definitions. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository.",
                                "  2.The handler in this example is an ES module and must be designated as such in your package.json file or by using the .mjs file extension. For more information, see  see Designating a function handler as an ES module.",
                                [],
                                {
                                    "code_example": "import { Context, APIGatewayProxyCallback, APIGatewayEvent } from 'aws-lambda';\n\nexport const lambdaHandler = (event: APIGatewayEvent, context: Context, callback: APIGatewayProxyCallback): void => {\n    console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n    console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n    callback(null, {\n        statusCode: 200,\n        body: JSON.stringify({\n            message: 'hello world',\n        }),\n    });\n};"
                                },
                                []
                            ]
                        },
                        {
                            "sub_header": "Using types for the event object",
                            "content": [
                                "We recommend that you don’t use the any type for the handler arguments and return type because you lose the ability to check types. Instead, generate an event using the sam local generate-event AWS Serverless Application Model CLI command, or use an open-source definition from the @types/aws-lambda package.",
                                "Generating an event using the sam local generate-event command",
                                " 1 : Generate an  Amazon Simple Storage Service (Amazon S3) proxy event. ",
                                {
                                    "code_example": "sam local generate-event s3 put >> S3PutEvent.json"
                                },
                                " 2 : Use the quicktype utility to generate type definitions from the S3PutEvent.json file. ",
                                {
                                    "code_example": "npm install -g quicktype\nquicktype S3PutEvent.json -o S3PutEvent.ts"
                                },
                                " 3 : Use the generated types in your code. ",
                                {
                                    "code_example": "import { S3PutEvent } from './S3PutEvent';\n\nexport const lambdaHandler = async (event: S3PutEvent): Promise<void> => {\n  event.Records.map((record) => console.log(record.s3.object.key));\n};"
                                },
                                "Generating an event using an open-source definition from the @types/aws-lambda package",
                                " 1 : Add the @types/aws-lambda package as a development dependency. ",
                                {
                                    "code_example": "npm install -D @types/aws-lambda"
                                },
                                " 2 : Use the types in your code. ",
                                {
                                    "code_example": "import { S3Event } from \"aws-lambda\";\n\nexport const lambdaHandler = async (event: S3Event): Promise<void> => {\n  event.Records.map((record) => console.log(record.s3.object.key));\n};"
                                }
                            ]
                        },
                        {
                            "sub_header": "Code best practices for Typescript Lambda functions",
                            "content": [
                                "Adhere to the guidelines in the following list to use best coding practices when building your Lambda functions:",
                                "  1.Separate the Lambda handler from your core logic.:  This allows you to make          a more unit-testable function. In Node.js this may look like: exports.myHandler = function(event, context, callback) {\tvar foo = event.foo;\tvar bar = event.bar;\tvar result = MyLambdaFunction (foo, bar);\tcallback(null, result);}function MyLambdaFunction (foo, bar) {\t// MyLambdaFunction logic here}",
                                {
                                    "code_example": "exports.myHandler = function(event, context, callback) {\n\tvar foo = event.foo;\n\tvar bar = event.bar;\n\tvar result = MyLambdaFunction (foo, bar);\n\n\tcallback(null, result);\n}\n\nfunction MyLambdaFunction (foo, bar) {\n\t// MyLambdaFunction logic here\n}"
                                },
                                "  2.Control the dependencies in your function's deployment package. :  The          AWS Lambda execution environment contains a number of libraries. For the Node.js and Python runtimes, these include the AWS SDKs.          To enable the latest set of features and security updates, Lambda will periodically update these libraries.          These updates may introduce subtle changes to the behavior of your Lambda function. To have full control of the          dependencies your function uses, package all of your dependencies with your deployment package. ",
                                "  3.Minimize the complexity of your dependencies.:  Prefer simpler frameworks          that load quickly on execution environment startup.",
                                "  4.Minimize your deployment package size to its runtime necessities. :  This          will reduce the amount of time that it takes for your deployment package to be downloaded and unpacked ahead          of invocation.",
                                "  1.Take advantage of execution environment reuse to improve the performance of your\n        function.:  Initialize SDK clients and database connections outside of the function handler, and        cache static assets locally in the /tmp directory. Subsequent invocations processed by        the same instance of your function can reuse these resources. This saves cost by reducing function run time.To avoid potential data leaks across invocations, don’t use the execution environment to store user data,        events, or other information with security implications. If your function relies on a mutable state that can’t        be stored in memory within the handler, consider creating a separate function or separate versions of a        function for each user.",
                                "  2.Use a keep-alive directive to maintain persistent connections.:  Lambda purges idle connections over time. Attempting to reuse an idle connection when invoking a function will result in a connection error. To maintain your persistent connection, use the keep-alive directive associated with your runtime. For an example, see Reusing Connections with Keep-Alive in Node.js.",
                                "  3.Use environment variables to pass operational parameters to your function.:  For example, if        you are writing to an Amazon S3 bucket, instead of hard-coding the bucket name you are writing to, configure the        bucket name as an environment variable.",
                                "  4.Avoid using recursive invocations:  in your Lambda function, where the function        invokes itself or initiates a process that may invoke the function again. This could lead to unintended volume of        function invocations and escalated costs. If you see an unintended volume of invocations, set the function reserved concurrency        to 0 immediately to throttle all invocations to the function, while you update the        code.",
                                "  5.Do not use non-documented, non-public APIs:  in your Lambda function code.        For AWS Lambda managed runtimes, Lambda periodically applies security and functional updates to Lambda's internal APIs.        These internal API updates may be backwards-incompatible, leading to unintended consequences such as invocation        failures if your function has a dependency on these non-public APIs. See        the API reference for a list of        publicly available APIs.",
                                "  6.Write idempotent code.:  Writing idempotent code for your functions ensures that        duplicate events are handled the same way. Your code should properly validate events and gracefully handle        duplicate events. For more information, see        How do I make          my Lambda function idempotent?."
                            ]
                        }
                    ]
                },
                {
                    "title": "Deploy .zip file archives",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-package.html",
                    "source": "Aws",
                    "parent_content": [
                        "Before you can deploy TypeScript code to AWS Lambda, you need to transpile it into JavaScript. This page explains three ways to build and deploy TypeScript code to Lambda with .zip file archives:",
                        "  1.Using AWS Serverless Application Model (AWS SAM)",
                        "  2.Using the AWS Cloud Development Kit (AWS CDK)",
                        "  3.Using the AWS Command Line Interface (AWS CLI) and esbuild",
                        "AWS SAM and AWS CDK simplify building and deploying TypeScript functions. The AWS SAM template specification provides a simple and clean syntax to describe the Lambda functions, APIs, permissions, configurations, and events that make up your serverless application. The AWS CDK lets you build reliable, scalable, cost-effective applications in the cloud with the considerable expressive power of a programming language. The AWS CDK is intended for moderately to highly experienced AWS users. Both the AWS CDK and the AWS SAM use esbuild to transpile TypeScript code into JavaScript.",
                        {
                            "sub_header": "Using AWS SAM to deploy TypeScript code to Lambda",
                            "content": [
                                "Follow the steps below to download, build, and deploy a sample Hello World TypeScript application using the AWS SAM. This application implements a basic API backend. It consists of an Amazon API Gateway endpoint and a Lambda function. When you send a GET request to the API Gateway endpoint, the Lambda function is invoked. The function returns a hello world message.",
                                "Note",
                                [],
                                "AWS SAM uses esbuild to create Node.js Lambda functions from TypeScript code. esbuild support is currently in public preview. During public preview, esbuild support may be subject to backwards incompatible changes.",
                                [],
                                "Prerequisites",
                                "To complete the steps in this section, you must have the following:",
                                "  1.AWS CLI version 2",
                                "  2.AWS SAM CLI version 1.75 or later",
                                "  3.Node.js 18.x",
                                "Deploy a sample AWS SAM application",
                                " 1 : Initialize the application using the Hello World TypeScript template. ",
                                {
                                    "code_example": "sam init --app-template hello-world-typescript --name sam-app --package-type Zip --runtime nodejs18.x"
                                },
                                " 2 : (Optional) The sample application includes configurations for commonly used tools, such as ESLlint for code linting and Jest for unit testing. To run lint and test commands: ",
                                {
                                    "code_example": "cd sam-app/hello-world\nnpm install\nnpm run lint\nnpm run test"
                                },
                                " 3 : Build the app. ",
                                {
                                    "code_example": "cd sam-app\nsam build"
                                },
                                " 4 : Deploy the app. ",
                                {
                                    "code_example": "sam deploy --guided"
                                },
                                "  5 : Follow the on-screen prompts. To accept the default options provided in the interactive experience, respond with Enter.",
                                " 6 : The output shows the endpoint for the REST API. Open the endpoint in a browser to test the function. You should see this response: ",
                                {
                                    "code_example": "{\"message\":\"hello world\"}"
                                },
                                " 7 : This is a public API endpoint that is accessible over the internet. We recommend that you delete the endpoint after testing. ",
                                {
                                    "code_example": "sam delete"
                                }
                            ]
                        },
                        {
                            "sub_header": "Using the AWS CDK to deploy TypeScript code to Lambda",
                            "content": [
                                "Follow the steps below to build and deploy a sample TypeScript application using the AWS CDK. This application implements a basic API backend. It consists of an API Gateway endpoint and a Lambda function. When you send a GET request to the API Gateway endpoint, the Lambda function is invoked. The function returns a hello world message.",
                                "Prerequisites",
                                "To complete the steps in this section, you must have the following:",
                                "  1.AWS CLI version 2",
                                "  2.AWS CDK version 2",
                                "  3.Node.js 18.x",
                                "  4.Either Docker or esbuild",
                                "Deploy a sample AWS CDK application",
                                " 1 : Create a project directory for your new application. ",
                                {
                                    "code_example": "mkdir hello-world\ncd hello-world"
                                },
                                " 2 : Initialize the app. ",
                                {
                                    "code_example": "cdk init app --language typescript"
                                },
                                " 3 : Add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. ",
                                {
                                    "code_example": "npm install -D @types/aws-lambda"
                                },
                                "  4 : Open the lib directory. You should see a file called hello-world-stack.ts. Create two new files in this directory: hello-world.function.ts and hello-world.ts.",
                                " 5 : Open hello-world.function.ts and add the following code to the file. This is the code for the Lambda function.NoteThe import statement imports the type definitions from @types/aws-lambda. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository. ",
                                {
                                    "code_example": "import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n    console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n    console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n    return {\n        statusCode: 200,\n        body: JSON.stringify({\n            message: 'hello world',\n        }),\n    };\n};"
                                },
                                " 6 : Open hello-world.ts and add the following code to the file. This contains the NodejsFunction construct, which creates the Lambda function, and the LambdaRestApi construct, which creates the REST API. The NodejsFunction construct assumes the following by default:Your function handler is called handler.The .ts file that contains the function code (hello-world.function.ts) is in the same directory as the .ts file that contains the construct (hello-world.ts). The construct uses the construct's ID (\"hello-world\") and the name of the Lambda handler file (\"function\") to find the function code. For example, if your function code is in a file called hello-world.my-function.ts, the hello-world.ts file must reference the function code like this:const helloFunction = new NodejsFunction(this, 'my-function');You can change this behavior and configure other esbuild parameters. For more information, see Configuring esbuild in the AWS CDK API reference.",
                                {
                                    "code_example": "import { Construct } from 'constructs';\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';\nimport { LambdaRestApi } from 'aws-cdk-lib/aws-apigateway';\n  \nexport class HelloWorld extends Construct {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    const helloFunction = new NodejsFunction(this, 'function');\n    new LambdaRestApi(this, 'apigw', {\n      handler: helloFunction,\n    });\n  }\n}"
                                },
                                " 7 : Open hello-world-stack.ts. This is the code that defines your AWS CDK stack. Replace the code with the following: ",
                                {
                                    "code_example": "import { Stack, StackProps } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport { HelloWorld } from './hello-world';\n  \nexport class HelloWorldStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n    new HelloWorld(this, 'hello-world');\n  }\n}"
                                },
                                " 8 : from the hello-world directory containing your cdk.json file, deploy your           application. ",
                                {
                                    "code_example": "cdk deploy"
                                },
                                " 9 : The AWS CDK builds and packages the Lambda function using esbuild, and then deploys the function to the Lambda runtime. The output shows the endpoint for the REST API. Open the endpoint in a browser to test the function. You should see this response: This is a public API endpoint that is accessible over the internet. We recommend that you delete the endpoint after testing.",
                                {
                                    "code_example": "{\"message\":\"hello world\"}"
                                }
                            ]
                        },
                        {
                            "sub_header": "Using the AWS CLI and esbuild to deploy TypeScript code to Lambda",
                            "content": [
                                "The following example demonstrates how to transpile and deploy TypeScript code to Lambda using esbuild and the AWS CLI. esbuild produces one JavaScript file with all dependencies. This is the only file that you need to add to the .zip archive.",
                                "Prerequisites",
                                "To complete the steps in this section, you must have the following:",
                                "  1.AWS CLI version 2",
                                "  2.Node.js 18.x",
                                "  3.An execution role for the Lambda function",
                                "  4.For Windows users, a zip file utility such as 7zip.",
                                "Deploy a sample function",
                                "  1 : On your local machine, create a project directory for your new function. ",
                                " 2 : Create a new Node.js project with npm or a package manager of your choice. ",
                                {
                                    "code_example": "npm init"
                                },
                                " 3 : Add the @types/aws-lambda and esbuild packages as development dependencies. The @types/aws-lambda package contains the type definitions for Lambda. ",
                                {
                                    "code_example": "npm install -D @types/aws-lambda esbuild"
                                },
                                " 4 : Create a new file called index.ts. Add the following code to the new file. This is the code for the Lambda function. The function returns a hello world message. The function doesn’t create any API Gateway resources.NoteThe import statement imports the type definitions from @types/aws-lambda. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository. ",
                                {
                                    "code_example": "import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n  console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n  console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n  return {\n      statusCode: 200,\n      body: JSON.stringify({\n          message: 'hello world',\n      }),\n   };\n};"
                                },
                                " 5 : Add a build script to the package.json file. This configures esbuild to automatically create the .zip deployment package. For more information, see Build scripts in the esbuild documentation.Linux and MacOS WindowsIn this example, the \"postbuild\" command uses the 7zip utility to       create your .zip file. Use your own preferred Windows zip utility and modify the command as necessary.\"scripts\": {  \"prebuild\": \"del /q dist\",  \"build\": \"esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js\",  \"postbuild\": \"cd dist && 7z a -tzip index.zip index.js*\"},anchoranchorLinux and MacOSWindows ",
                                {
                                    "code_example": "\"scripts\": {\n  \"prebuild\": \"rm -rf dist\",\n  \"build\": \"esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js\",\n  \"postbuild\": \"cd dist && zip -r index.zip index.js*\"\n},"
                                },
                                " 6 : Build the package. ",
                                {
                                    "code_example": "npm run build"
                                },
                                " 7 : Create a Lambda function using the .zip deployment package. Replace the highlighted text with the Amazon Resource Name (ARN) of your execution role. ",
                                {
                                    "code_example": "aws lambda create-function --function-name hello-world --runtime \"nodejs18.x\" --role arn:aws:iam::123456789012:role/lambda-ex --zip-file \"fileb://dist/index.zip\" --handler index.handler"
                                },
                                " 8 : Run a test event to confirm that the function returns the following response. If you want to invoke this function using API Gateway, create and configure a REST API. ",
                                {
                                    "code_example": "{\n  \"statusCode\": 200,\n  \"body\": \"{\\\"message\\\":\\\"hello world\\\"}\"\n}"
                                }
                            ]
                        }
                    ]
                },
                {
                    "title": "Deploy container images",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-image.html",
                    "source": "Aws",
                    "parent_content": [
                        "You can deploy your TypeScript code to an AWS Lambda function as a Node.js container image. AWS provides base images for Node.js to help you build the container image. These base images are preloaded with a language runtime and other components that are required to run the image on Lambda. AWS provides a Dockerfile for each of the base images to help with building your container image.",
                        "If you use a community or private enterprise base image, you must add the Node.js runtime interface client (RIC) to the base image to make it compatible with Lambda.",
                        "Lambda provides a runtime interface emulator for local testing. The AWS base images for Node.js include the runtime interface emulator. If you use an alternative base image, such as an Alpine Linux or Debian image, you can build the emulator into your image or install it on your local machine.",
                        {
                            "sub_header": "Using a Node.js base image to build and package TypeScript function code",
                            "content": [
                                "To complete the steps in this section, you must have the following:",
                                "  1.AWS CLI version 2",
                                "  2.Docker",
                                "  3.Node.js 22.x",
                                [],
                                [],
                                "Prerequisites",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "To complete the steps in this section, you must have the following:",
                                "  1.AWS CLI version 2",
                                "  2.Docker",
                                "  3.Node.js 22.x",
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "To create an image from an AWS base image for Lambda",
                                "  1 : On your local machine, create a project directory for your new function.",
                                " 2 : Create a new Node.js project with npm or a package manager of your choice. ",
                                {
                                    "code_example": "npm init"
                                },
                                " 3 : Add the @types/aws-lambda and esbuild packages as development dependencies. The @types/aws-lambda package contains the type definitions for Lambda. ",
                                {
                                    "code_example": "npm install -D @types/aws-lambda esbuild"
                                },
                                " 4 : Add a build script to the package.json file. ",
                                {
                                    "code_example": "  \"scripts\": {\n  \"build\": \"esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js\"\n}"
                                },
                                " 5 : Create a new file called index.ts. Add the following sample code to the new file. This is the code for the Lambda function. The function returns a hello world message.NoteThe import statement imports the type definitions from @types/aws-lambda. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository. ",
                                {
                                    "code_example": "import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n    console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n    console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n    return {\n        statusCode: 200,\n        body: JSON.stringify({\n            message: 'hello world',\n        }),\n    };\n};"
                                },
                                " 6 : Create a new Dockerfile with the following configuration:Set the FROM property to the URI of the base image.Set the CMD argument to specify the Lambda function handler.The following example Dockerfile uses a multi-stage build. The first step transpiles the TypeScript code into JavaScript. The second step produces a container image that contains only JavaScript files and production dependencies.Note that the example Dockerfile does not include a USER instruction. When you deploy a container image to Lambda, Lambda automatically defines a default Linux user with least-privileged permissions. This is different from standard Docker behavior which defaults to the root user when no USER instruction is provided.Example  Dockerfile ",
                                {
                                    "code_example": "FROM public.ecr.aws/lambda/nodejs:22 as builder\nWORKDIR /usr/app\nCOPY package.json index.ts  ./\nRUN npm install\nRUN npm run build\n    \nFROM public.ecr.aws/lambda/nodejs:22\nWORKDIR ${LAMBDA_TASK_ROOT}\nCOPY --from=builder /usr/app/dist/* ./\nCMD [\"index.handler\"]"
                                },
                                " 7 : Build the Docker image with the docker build command. The          following example names the image docker-image and gives it the test tag. NoteThe command specifies the --platform linux/amd64 option to ensure that your container is compatible with the Lambda execution environment regardless of the         architecture of your build machine. If you intend to create a Lambda function using the ARM64 instruction set architecture, be sure to change the command to use the --platform linux/arm64        option instead.",
                                {
                                    "code_example": "docker build --platform linux/amd64 -t docker-image:test ."
                                },
                                [],
                                [],
                                "Creating an image from a base image",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "To create an image from an AWS base image for Lambda",
                                "  1 : On your local machine, create a project directory for your new function.",
                                " 2 : Create a new Node.js project with npm or a package manager of your choice. ",
                                {
                                    "code_example": "npm init"
                                },
                                " 3 : Add the @types/aws-lambda and esbuild packages as development dependencies. The @types/aws-lambda package contains the type definitions for Lambda. ",
                                {
                                    "code_example": "npm install -D @types/aws-lambda esbuild"
                                },
                                " 4 : Add a build script to the package.json file. ",
                                {
                                    "code_example": "  \"scripts\": {\n  \"build\": \"esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js\"\n}"
                                },
                                " 5 : Create a new file called index.ts. Add the following sample code to the new file. This is the code for the Lambda function. The function returns a hello world message.NoteThe import statement imports the type definitions from @types/aws-lambda. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository. ",
                                {
                                    "code_example": "import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n    console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n    console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n    return {\n        statusCode: 200,\n        body: JSON.stringify({\n            message: 'hello world',\n        }),\n    };\n};"
                                },
                                " 6 : Create a new Dockerfile with the following configuration:Set the FROM property to the URI of the base image.Set the CMD argument to specify the Lambda function handler.The following example Dockerfile uses a multi-stage build. The first step transpiles the TypeScript code into JavaScript. The second step produces a container image that contains only JavaScript files and production dependencies.Note that the example Dockerfile does not include a USER instruction. When you deploy a container image to Lambda, Lambda automatically defines a default Linux user with least-privileged permissions. This is different from standard Docker behavior which defaults to the root user when no USER instruction is provided.Example  Dockerfile ",
                                {
                                    "code_example": "FROM public.ecr.aws/lambda/nodejs:22 as builder\nWORKDIR /usr/app\nCOPY package.json index.ts  ./\nRUN npm install\nRUN npm run build\n    \nFROM public.ecr.aws/lambda/nodejs:22\nWORKDIR ${LAMBDA_TASK_ROOT}\nCOPY --from=builder /usr/app/dist/* ./\nCMD [\"index.handler\"]"
                                },
                                " 7 : Build the Docker image with the docker build command. The          following example names the image docker-image and gives it the test tag. NoteThe command specifies the --platform linux/amd64 option to ensure that your container is compatible with the Lambda execution environment regardless of the         architecture of your build machine. If you intend to create a Lambda function using the ARM64 instruction set architecture, be sure to change the command to use the --platform linux/arm64        option instead.",
                                {
                                    "code_example": "docker build --platform linux/amd64 -t docker-image:test ."
                                },
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                " 1 : Start the Docker image with the docker run command. In this example,              docker-image is the image name and test is the tag. This command runs the image as a container and creates a local endpoint at            localhost:9000/2015-03-31/functions/function/invocations.NoteIf you built the Docker image for the ARM64 instruction set architecture, be sure to use the --platform linux/arm64 option instead of --platform linux/amd64.",
                                {
                                    "code_example": "docker run --platform linux/amd64 -p 9000:8080 docker-image:test"
                                },
                                " 2 : From a new terminal window, post an event to the local endpoint.Linux/macOSIn Linux and macOS, run the following curl command: This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{\"payload\":\"hello world!\"}'PowerShellIn PowerShell, run the following Invoke-WebRequest command:Invoke-WebRequest -Uri \"http://localhost:9000/2015-03-31/functions/function/invocations\" -Method Post -Body '{}' -ContentType \"application/json\"This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:Invoke-WebRequest -Uri \"http://localhost:9000/2015-03-31/functions/function/invocations\" -Method Post -Body '{\"payload\":\"hello world!\"}' -ContentType \"application/json\"",
                                {
                                    "code_example": "curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{}'"
                                },
                                " 3 : Get the container ID. ",
                                {
                                    "code_example": "docker ps"
                                },
                                " 4 : Use the docker kill command to stop the container. In this command, replace 3766c4ab331c with the container ID from the previous step. ",
                                {
                                    "code_example": "docker kill 3766c4ab331c"
                                },
                                [],
                                [],
                                "(Optional) Test the image locally",
                                [],
                                [],
                                [],
                                [],
                                [],
                                " 1 : Start the Docker image with the docker run command. In this example,              docker-image is the image name and test is the tag. This command runs the image as a container and creates a local endpoint at            localhost:9000/2015-03-31/functions/function/invocations.NoteIf you built the Docker image for the ARM64 instruction set architecture, be sure to use the --platform linux/arm64 option instead of --platform linux/amd64.",
                                {
                                    "code_example": "docker run --platform linux/amd64 -p 9000:8080 docker-image:test"
                                },
                                " 2 : From a new terminal window, post an event to the local endpoint.Linux/macOSIn Linux and macOS, run the following curl command: This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{\"payload\":\"hello world!\"}'PowerShellIn PowerShell, run the following Invoke-WebRequest command:Invoke-WebRequest -Uri \"http://localhost:9000/2015-03-31/functions/function/invocations\" -Method Post -Body '{}' -ContentType \"application/json\"This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:Invoke-WebRequest -Uri \"http://localhost:9000/2015-03-31/functions/function/invocations\" -Method Post -Body '{\"payload\":\"hello world!\"}' -ContentType \"application/json\"anchoranchorLinux/macOSPowerShellIn Linux and macOS, run the following curl command: This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{\"payload\":\"hello world!\"}'",
                                {
                                    "code_example": "curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{}'"
                                },
                                " 3 : Get the container ID. ",
                                {
                                    "code_example": "docker ps"
                                },
                                " 4 : Use the docker kill command to stop the container. In this command, replace 3766c4ab331c with the container ID from the previous step. ",
                                {
                                    "code_example": "docker kill 3766c4ab331c"
                                },
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                "To upload the image to Amazon ECR and create the Lambda function",
                                " 1 : Run the get-login-password command to authenticate the Docker CLI to your Amazon ECR registry.Set the --region value to the AWS Region where you want to create the Amazon ECR repository.Replace 111122223333 with your AWS account ID. ",
                                {
                                    "code_example": "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 111122223333.dkr.ecr.us-east-1.amazonaws.com"
                                },
                                " 2 : Create a repository in Amazon ECR using the create-repository command. NoteThe Amazon ECR repository must be in the same AWS Region as the Lambda function.If successful, you see a response like this:{    \"repository\": {        \"repositoryArn\": \"arn:aws:ecr:us-east-1:111122223333:repository/hello-world\",        \"registryId\": \"111122223333\",        \"repositoryName\": \"hello-world\",        \"repositoryUri\": \"111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world\",        \"createdAt\": \"2023-03-09T10:39:01+00:00\",        \"imageTagMutability\": \"MUTABLE\",        \"imageScanningConfiguration\": {            \"scanOnPush\": true        },        \"encryptionConfiguration\": {            \"encryptionType\": \"AES256\"        }    }}",
                                {
                                    "code_example": "aws ecr create-repository --repository-name hello-world --region us-east-1 --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE"
                                },
                                "  3 : Copy the repositoryUri from the output in the previous step.",
                                " 4 : Run the docker tag command to tag your local image into your Amazon ECR repository as the latest version. In this command:docker-image:test is the name and tag of your Docker image. This is the image name and tag that you specified in the docker build command.Replace <ECRrepositoryUri> with the repositoryUri that you copied. Make sure to include :latest at the end of the URI. Example:docker tag docker-image:test 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest",
                                {
                                    "code_example": "docker tag docker-image:test <ECRrepositoryUri>:latest"
                                },
                                " 5 : Run the docker push command to deploy your local image to the Amazon ECR repository. Make sure to include :latest at the end of the repository URI. ",
                                {
                                    "code_example": "docker push 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest"
                                },
                                "  6 : Create an execution role for the function, if you don't already have one. You need the Amazon Resource Name (ARN) of the role in the next step.",
                                " 7 : Create the Lambda function. For ImageUri, specify the repository URI from earlier. Make sure to include :latest at the end of the URI. NoteYou can create a function using an image in a different AWS account, as long as the image is in the same Region as the Lambda function. For more information, see  Amazon ECR cross-account permissions.",
                                {
                                    "code_example": "aws lambda create-function \\\n  --function-name hello-world \\\n  --package-type Image \\\n  --code ImageUri=111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest \\\n  --role arn:aws:iam::111122223333:role/lambda-ex"
                                },
                                " 8 : Invoke the function. You should see a response like this:{  \"ExecutedVersion\": \"$LATEST\",   \"StatusCode\": 200}",
                                {
                                    "code_example": "aws lambda invoke --function-name hello-world response.json"
                                },
                                "  9 : To see the output of the function, check the response.json file.",
                                [],
                                "To update the function code, you must build the image again, upload the new image to the Amazon ECR repository, and then use the update-function-code command to deploy the image to the Lambda function.",
                                "Lambda resolves the image tag to a specific image digest. This means that if you point the image tag that was used to deploy the function to a new image in Amazon ECR, Lambda doesn't automatically update the function to use the new image.",
                                "To deploy the new image to the same Lambda function, you must use the update-function-code command, even if the image tag in Amazon ECR remains the same. In the following example, the --publish option creates a new version of the function using the updated container image.",
                                {
                                    "code_example": "aws lambda update-function-code \\\n  --function-name hello-world \\\n  --image-uri 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest \\\n  --publish"
                                },
                                [],
                                "Deploying the image",
                                [],
                                [],
                                [],
                                [],
                                [],
                                "To upload the image to Amazon ECR and create the Lambda function",
                                " 1 : Run the get-login-password command to authenticate the Docker CLI to your Amazon ECR registry.Set the --region value to the AWS Region where you want to create the Amazon ECR repository.Replace 111122223333 with your AWS account ID. ",
                                {
                                    "code_example": "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 111122223333.dkr.ecr.us-east-1.amazonaws.com"
                                },
                                " 2 : Create a repository in Amazon ECR using the create-repository command. NoteThe Amazon ECR repository must be in the same AWS Region as the Lambda function.If successful, you see a response like this:{    \"repository\": {        \"repositoryArn\": \"arn:aws:ecr:us-east-1:111122223333:repository/hello-world\",        \"registryId\": \"111122223333\",        \"repositoryName\": \"hello-world\",        \"repositoryUri\": \"111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world\",        \"createdAt\": \"2023-03-09T10:39:01+00:00\",        \"imageTagMutability\": \"MUTABLE\",        \"imageScanningConfiguration\": {            \"scanOnPush\": true        },        \"encryptionConfiguration\": {            \"encryptionType\": \"AES256\"        }    }}",
                                {
                                    "code_example": "aws ecr create-repository --repository-name hello-world --region us-east-1 --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE"
                                },
                                "  3 : Copy the repositoryUri from the output in the previous step.",
                                " 4 : Run the docker tag command to tag your local image into your Amazon ECR repository as the latest version. In this command:docker-image:test is the name and tag of your Docker image. This is the image name and tag that you specified in the docker build command.Replace <ECRrepositoryUri> with the repositoryUri that you copied. Make sure to include :latest at the end of the URI. Example:docker tag docker-image:test 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest",
                                {
                                    "code_example": "docker tag docker-image:test <ECRrepositoryUri>:latest"
                                },
                                " 5 : Run the docker push command to deploy your local image to the Amazon ECR repository. Make sure to include :latest at the end of the repository URI. ",
                                {
                                    "code_example": "docker push 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest"
                                },
                                "  6 : Create an execution role for the function, if you don't already have one. You need the Amazon Resource Name (ARN) of the role in the next step.",
                                " 7 : Create the Lambda function. For ImageUri, specify the repository URI from earlier. Make sure to include :latest at the end of the URI. NoteYou can create a function using an image in a different AWS account, as long as the image is in the same Region as the Lambda function. For more information, see  Amazon ECR cross-account permissions.",
                                {
                                    "code_example": "aws lambda create-function \\\n  --function-name hello-world \\\n  --package-type Image \\\n  --code ImageUri=111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest \\\n  --role arn:aws:iam::111122223333:role/lambda-ex"
                                },
                                " 8 : Invoke the function. You should see a response like this:{  \"ExecutedVersion\": \"$LATEST\",   \"StatusCode\": 200}",
                                {
                                    "code_example": "aws lambda invoke --function-name hello-world response.json"
                                },
                                "  9 : To see the output of the function, check the response.json file.",
                                [],
                                "To update the function code, you must build the image again, upload the new image to the Amazon ECR repository, and then use the update-function-code command to deploy the image to the Lambda function.",
                                "Lambda resolves the image tag to a specific image digest. This means that if you point the image tag that was used to deploy the function to a new image in Amazon ECR, Lambda doesn't automatically update the function to use the new image.",
                                "To deploy the new image to the same Lambda function, you must use the update-function-code command, even if the image tag in Amazon ECR remains the same. In the following example, the --publish option creates a new version of the function using the updated container image.",
                                {
                                    "code_example": "aws lambda update-function-code \\\n  --function-name hello-world \\\n  --image-uri 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest \\\n  --publish"
                                },
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                [],
                                []
                            ]
                        }
                    ]
                },
                {
                    "title": "Layers",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-layers.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Context",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-context.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Logging",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-logging.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Tracing",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-tracing.html",
                    "source": "Aws",
                    "parent_content": []
                }
            ],
            "source": "Aws",
            "parent_content": [
                "You can use the Node.js runtime to run TypeScript code in AWS Lambda. Because Node.js doesn't run TypeScript code natively, you must first     transpile your TypeScript code into JavaScript. Then, use the JavaScript files to deploy your function code to Lambda. Your code runs in an     environment that includes the AWS SDK for JavaScript, with credentials from an AWS Identity and Access Management (IAM) role that you manage. To learn more     about the SDK versions included with the Node.js runtimes, see Runtime-included SDK versions.",
                "Lambda supports the following Node.js runtimes.",
                "NameIdentifierOperating systemDeprecation dateBlock function createBlock function updateNode.js 22nodejs22.xAmazon Linux 2023            Not scheduled                        Not scheduled                        Not scheduled            Node.js 20nodejs20.xAmazon Linux 2023            Not scheduled                        Not scheduled                        Not scheduled            Node.js 18nodejs18.xAmazon Linux 2            Jul 31, 2025                        Sep 1, 2025                        Oct 1, 2025            ",
                [],
                "Topics",
                {
                    "sub_header": "Setting up a TypeScript development environment",
                    "content": [
                        "Use a local integrated development environment (IDE), text editor, or AWS Cloud9 to write your TypeScript function code. You can’t create TypeScript code on the Lambda console.",
                        "To transpile your TypeScript code, set up a compiler such as esbuild or Microsoft's TypeScript compiler (tsc) , which is bundled with the TypeScript distribution. You can use the AWS Serverless Application Model (AWS SAM) or the AWS Cloud Development Kit (AWS CDK) to simplify building and deploying TypeScript code. Both tools use esbuild to transpile TypeScript code into JavaScript.",
                        "When using esbuild, consider the following:",
                        "  1.There are several TypeScript caveats.",
                        "  2.tsconfig.json: You must configure your TypeScript transpilation settings to match the Node.js runtime that you plan to use. For more information, see Target in the esbuild documentation. For an example of a  file that demonstrates how to target a specific Node.js version supported by Lambda, refer to the TypeScript GitHub repository.",
                        "  3.tsconfig.json: esbuild doesn’t perform type checks. To check types, use the tsc compiler. Run tsc -noEmit or add a \"noEmit\" parameter to your  file, as shown in the following example. This configures tsc to not emit JavaScript files. After checking types, use esbuild to convert the TypeScript files into JavaScript.",
                        "Example  tsconfig.json",
                        {
                            "code_example": " {\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"strict\": true,\n    \"preserveConstEnums\": true,\n    \"noEmit\": true,\n    \"sourceMap\": false,\n    \"module\":\"commonjs\",\n    \"moduleResolution\":\"node\",\n    \"esModuleInterop\": true, \n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true, \n    \"isolatedModules\": true, \n  },\n  \"exclude\": [\"node_modules\", \"**/*.test.ts\"]\n}"
                        },
                        []
                    ]
                }
            ]
        },
        {
            "title": "Integrating other services",
            "href": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html",
            "contents": [
                {
                    "title": "Apache Kafka",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html",
                    "contents": [
                        {
                            "title": "Configure event source",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-configure.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Process messages",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-process.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Event filtering",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-filtering.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "On-failure destinations",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-on-failure.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Troubleshooting",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-troubleshoot.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "API Gateway",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html",
                    "contents": [
                        {
                            "title": "Tutorial",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Errors",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-errors.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Select an HTTP invoke method for Lambda",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/apig-http-invoke-decision.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Infrastructure Composer",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-appcomposer.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "CloudFormation",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-cloudformation.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Amazon DocumentDB",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html",
                    "contents": [
                        {
                            "title": "Tutorial",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb-tutorial.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "DynamoDB",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html",
                    "contents": [
                        {
                            "title": "Create mapping",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-dynamodb-eventsourcemapping.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Batch item failures",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-ddb-batchfailurereporting.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Error handling",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-dynamodb-errors.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Stateful processing",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-ddb-windows.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Parameters",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-ddb-params.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Event filtering",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-ddb-filtering.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Tutorial",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-ddb-example.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "EC2",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-ec2.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Elastic Load Balancing (Application Load Balancer)",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-alb.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Invoke using an EventBridge Scheduler",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-eventbridge-scheduler.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "IoT",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-iot.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Kinesis Data Streams",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html",
                    "contents": [
                        {
                            "title": "Create mapping",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-kinesis-create.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Batch item failures",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-kinesis-batchfailurereporting.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Error handling",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/kinesis-on-failure-destination.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Stateful processing",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-kinesis-windows.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Parameters",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-kinesis-parameters.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Event filtering",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis-filtering.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Tutorial",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis-example.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "MQ",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html",
                    "contents": [
                        {
                            "title": "Configure event source",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/process-mq-messages-with-lambda.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Parameters",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-mq-params.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Event filtering",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-mq-filtering.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Troubleshoot",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-mq-errors.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "MSK",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html",
                    "contents": [
                        {
                            "title": "Configure event source",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk-configure.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Process messages",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk-process.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Event filtering",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk-filtering.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "On-failure destinations",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk-on-failure.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Tutorial",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-msk-tutorial.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "RDS",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-rds.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "S3",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-s3.html",
                    "contents": [
                        {
                            "title": "Tutorial: Use an S3 trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Tutorial: Use an Amazon S3 trigger to create thumbnails",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-s3-tutorial.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "SQS",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html",
                    "contents": [
                        {
                            "title": "Create mapping",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-configure.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Scaling behavior",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-scaling.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Error handling",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-errorhandling.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Parameters",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-parameters.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Event filtering",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-filtering.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Tutorial",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-example.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "SQS cross-account tutorial",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-cross-account-example.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "S3 Batch",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-s3-batch.html",
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "SNS",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sns.html",
                    "contents": [
                        {
                            "title": "Tutorial",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sns-example.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                }
            ],
            "source": "Aws",
            "parent_content": []
        },
        {
            "title": "Code examples",
            "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples.html",
            "contents": [
                {
                    "title": "Basics",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples_basics.html",
                    "contents": [
                        {
                            "title": "Hello Lambda",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_Hello_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Learn the basics",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_Scenario_GettingStartedFunctions_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Actions",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples_actions.html",
                            "contents": [
                                {
                                    "title": "CreateAlias",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_CreateAlias_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "CreateFunction",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_CreateFunction_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "DeleteAlias",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_DeleteAlias_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "DeleteFunction",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_DeleteFunction_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "DeleteFunctionConcurrency",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_DeleteFunctionConcurrency_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "DeleteProvisionedConcurrencyConfig",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_DeleteProvisionedConcurrencyConfig_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "GetAccountSettings",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetAccountSettings_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "GetAlias",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetAlias_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "GetFunction",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetFunction_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "GetFunctionConcurrency",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetFunctionConcurrency_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "GetFunctionConfiguration",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetFunctionConfiguration_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "GetPolicy",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetPolicy_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "GetProvisionedConcurrencyConfig",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetProvisionedConcurrencyConfig_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "Invoke",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_Invoke_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "ListFunctions",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_ListFunctions_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "ListProvisionedConcurrencyConfigs",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_ListProvisionedConcurrencyConfigs_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "ListTags",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_ListTags_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "ListVersionsByFunction",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_ListVersionsByFunction_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "PublishVersion",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_PublishVersion_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "PutFunctionConcurrency",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_PutFunctionConcurrency_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "PutProvisionedConcurrencyConfig",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_PutProvisionedConcurrencyConfig_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "RemovePermission",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_RemovePermission_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "TagResource",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_TagResource_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "UntagResource",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_UntagResource_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "UpdateAlias",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_UpdateAlias_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "UpdateFunctionCode",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_UpdateFunctionCode_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                },
                                {
                                    "title": "UpdateFunctionConfiguration",
                                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_UpdateFunctionConfiguration_section.html",
                                    "source": "Aws",
                                    "parent_content": []
                                }
                            ],
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Scenarios",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples_scenarios.html",
                    "contents": [
                        {
                            "title": "Automatically confirm known users with a Lambda function",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_CognitoAutoConfirmUser_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Automatically migrate known users with a Lambda function",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_CognitoAutoMigrateUser_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Create a REST API to track COVID-19 data",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_ApiGatewayDataTracker_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Create a lending library REST API",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_AuroraRestLendingLibrary_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Create a messenger application",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_StepFunctionsMessenger_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Create a serverless application to manage photos",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_PAM_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Create a websocket chat application",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_ApiGatewayWebsocketChat_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Create an application to analyze customer feedback",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_FSA_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Invoke a Lambda function from a browser",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_LambdaForBrowser_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Transform data with S3 Object Lambda",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_ServerlessS3DataTransformation_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Use API Gateway to invoke a Lambda function",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_LambdaAPIGateway_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Use Step Functions to invoke Lambda functions",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_ServerlessWorkflows_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Use scheduled events to invoke a Lambda function",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_LambdaScheduledEvents_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Write custom activity data with a Lambda function after Amazon Cognito user authentication",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_CognitoCustomActivityLog_section.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                },
                {
                    "title": "Serverless examples",
                    "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples_serverless_examples.html",
                    "contents": [
                        {
                            "title": "Connecting to an Amazon RDS database in a Lambda function",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_connect_RDS_Lambda_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Invoke a Lambda function from a Kinesis trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_Kinesis_Lambda_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Invoke a Lambda function from a DynamoDB trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_DynamoDB_Lambda_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Invoke a Lambda function from a Amazon DocumentDB trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_DocumentDB_Lambda_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Invoke a Lambda function from an Amazon MSK trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_MSK_Lambda_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Invoke a Lambda function from an Amazon S3 trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_S3_Lambda_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Invoke a Lambda function from an Amazon SNS trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_SNS_Lambda_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Invoke a Lambda function from an Amazon SQS trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_SQS_Lambda_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Reporting batch item failures for Lambda functions with a Kinesis trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_Kinesis_Lambda_batch_item_failures_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Reporting batch item failures for Lambda functions with a DynamoDB trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_DynamoDB_Lambda_batch_item_failures_section.html",
                            "source": "Aws",
                            "parent_content": []
                        },
                        {
                            "title": "Reporting batch item failures for Lambda functions with an Amazon SQS trigger",
                            "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_SQS_Lambda_batch_item_failures_section.html",
                            "source": "Aws",
                            "parent_content": []
                        }
                    ],
                    "source": "Aws",
                    "parent_content": []
                }
            ],
            "source": "Aws",
            "parent_content": []
        }
    ]
]