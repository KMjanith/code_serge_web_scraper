[
    {
        "title": "Quick Start",
        "source": "react",
        "url": "https://react.dev/learn",
        "sections": [
            "Welcome to the React documentation! This page will give you an introduction to the 80% of React concepts that you will use on a daily basis.",
            "  1.How to create and nest components",
            "  2.How to add markup and styles",
            "  3.How to display data",
            "  4.How to render conditions and lists",
            "  5.How to respond to events and update the screen",
            "  6.How to share data between components",
            "You will learn\nHow to create and nest components\nHow to add markup and styles\nHow to display data\nHow to render conditions and lists\nHow to respond to events and update the screen\nHow to share data between components\n",
            {
                "subHeader": "Creating and nesting components ",
                "url": "https://react.dev/learn/#components",
                "sections": [
                    "React apps are made out of components. A component is a piece of the UI (user interface) that has its own logic and appearance. A component can be as small as a button, or as large as an entire page.",
                    "React components are JavaScript functions that return markup:",
                    {
                        "code_example": "function MyButton() {  return (    <button>I'm a button</button>  );}"
                    },
                    "Now that you’ve declared MyButton, you can nest it into another component:",
                    {
                        "code_example": "export default function MyApp() {  return (    <div>      <h1>Welcome to my app</h1>      <MyButton />    </div>  );}"
                    },
                    "Notice that <MyButton /> starts with a capital letter. That’s how you know it’s a React component. React component names must always start with a capital letter, while HTML tags must be lowercase.",
                    "Have a look at the result:",
                    {
                        "code_sandbox": "function MyButton() {  return (    <button>      I'm a button    </button>  );}export default function MyApp() {  return (    <div>      <h1>Welcome to my app</h1>      <MyButton />    </div>  );}"
                    },
                    "The export default keywords specify the main component in the file. If you’re not familiar with some piece of JavaScript syntax, MDN and javascript.info have great references."
                ]
            },
            {
                "subHeader": "Writing markup with JSX ",
                "url": "https://react.dev/learn/#writing-markup-with-jsx",
                "sections": [
                    "The markup syntax you’ve seen above is called JSX. It is optional, but most React projects use JSX for its convenience. All of the tools we recommend for local development support JSX out of the box.",
                    "JSX is stricter than HTML. You have to close tags like <br />. Your component also can’t return multiple JSX tags. You have to wrap them into a shared parent, like a <div>...</div> or an empty <>...</> wrapper:",
                    {
                        "code_example": "function AboutPage() {  return (    <>      <h1>About</h1>      <p>Hello there.<br />How do you do?</p>    </>  );}"
                    },
                    "If you have a lot of HTML to port to JSX, you can use an online converter."
                ]
            },
            {
                "subHeader": "Adding styles ",
                "url": "https://react.dev/learn/#adding-styles",
                "sections": [
                    "In React, you specify a CSS class with className. It works the same way as the HTML class attribute:",
                    {
                        "code_example": "<img className=\"avatar\" />"
                    },
                    "Then you write the CSS rules for it in a separate CSS file:",
                    {
                        "code_example": "/* In your CSS */.avatar {  border-radius: 50%;}"
                    },
                    "React does not prescribe how you add CSS files. In the simplest case, you’ll add a <link> tag to your HTML. If you use a build tool or a framework, consult its documentation to learn how to add a CSS file to your project."
                ]
            },
            {
                "subHeader": "Displaying data ",
                "url": "https://react.dev/learn/#displaying-data",
                "sections": [
                    "JSX lets you put markup into JavaScript. Curly braces let you “escape back” into JavaScript so that you can embed some variable from your code and display it to the user. For example, this will display user.name:",
                    {
                        "code_example": "return (  <h1>    {user.name}  </h1>);"
                    },
                    "You can also “escape into JavaScript” from JSX attributes, but you have to use curly braces instead of quotes. For example, className=\"avatar\" passes the \"avatar\" string as the CSS class, but src={user.imageUrl} reads the JavaScript user.imageUrl variable value, and then passes that value as the src attribute:",
                    {
                        "code_example": "return (  <img    className=\"avatar\"    src={user.imageUrl}  />);"
                    },
                    "You can put more complex expressions inside the JSX curly braces too, for example, string concatenation:",
                    {
                        "code_sandbox": "const user = {  name: 'Hedy Lamarr',  imageUrl: 'https://i.imgur.com/yXOvdOSs.jpg',  imageSize: 90,};export default function Profile() {  return (    <>      <h1>{user.name}</h1>      <img        className=\"avatar\"        src={user.imageUrl}        alt={'Photo of ' + user.name}        style={{          width: user.imageSize,          height: user.imageSize        }}      />    </>  );}"
                    },
                    "In the above example, style={{}} is not a special syntax, but a regular {} object inside the style={ } JSX curly braces. You can use the style attribute when your styles depend on JavaScript variables."
                ]
            },
            {
                "subHeader": "Conditional rendering ",
                "url": "https://react.dev/learn/#conditional-rendering",
                "sections": [
                    "In React, there is no special syntax for writing conditions. Instead, you’ll use the same techniques as you use when writing regular JavaScript code. For example, you can use an if statement to conditionally include JSX:",
                    {
                        "code_example": "let content;if (isLoggedIn) {  content = <AdminPanel />;} else {  content = <LoginForm />;}return (  <div>    {content}  </div>);"
                    },
                    "If you prefer more compact code, you can use the conditional ? operator. Unlike if, it works inside JSX:",
                    {
                        "code_example": "<div>  {isLoggedIn ? (    <AdminPanel />  ) : (    <LoginForm />  )}</div>"
                    },
                    "When you don’t need the else branch, you can also use a shorter logical && syntax:",
                    {
                        "code_example": "<div>  {isLoggedIn && <AdminPanel />}</div>"
                    },
                    "All of these approaches also work for conditionally specifying attributes. If you’re unfamiliar with some of this JavaScript syntax, you can start by always using if...else."
                ]
            },
            {
                "subHeader": "Rendering lists ",
                "url": "https://react.dev/learn/#rendering-lists",
                "sections": [
                    "You will rely on JavaScript features like for loop and the array map() function to render lists of components.",
                    "For example, let’s say you have an array of products:",
                    {
                        "code_example": "const products = [  { title: 'Cabbage', id: 1 },  { title: 'Garlic', id: 2 },  { title: 'Apple', id: 3 },];"
                    },
                    "Inside your component, use the map() function to transform an array of products into an array of <li> items:",
                    {
                        "code_example": "const listItems = products.map(product =>  <li key={product.id}>    {product.title}  </li>);return (  <ul>{listItems}</ul>);"
                    },
                    "Notice how <li> has a key attribute. For each item in a list, you should pass a string or a number that uniquely identifies that item among its siblings. Usually, a key should be coming from your data, such as a database ID. React uses your keys to know what happened if you later insert, delete, or reorder the items.",
                    {
                        "code_sandbox": "const products = [  { title: 'Cabbage', isFruit: false, id: 1 },  { title: 'Garlic', isFruit: false, id: 2 },  { title: 'Apple', isFruit: true, id: 3 },];export default function ShoppingList() {  const listItems = products.map(product =>    <li      key={product.id}      style={{        color: product.isFruit ? 'magenta' : 'darkgreen'      }}    >      {product.title}    </li>  );  return (    <ul>{listItems}</ul>  );}"
                    }
                ]
            },
            {
                "subHeader": "Responding to events ",
                "url": "https://react.dev/learn/#responding-to-events",
                "sections": [
                    "You can respond to events by declaring event handler functions inside your components:",
                    {
                        "code_example": "function MyButton() {  function handleClick() {    alert('You clicked me!');  }  return (    <button onClick={handleClick}>      Click me    </button>  );}"
                    },
                    "Notice how onClick={handleClick} has no parentheses at the end! Do not call the event handler function: you only need to pass it down. React will call your event handler when the user clicks the button."
                ]
            },
            {
                "subHeader": "Updating the screen ",
                "url": "https://react.dev/learn/#updating-the-screen",
                "sections": [
                    "Often, you’ll want your component to “remember” some information and display it. For example, maybe you want to count the number of times a button is clicked. To do this, add state to your component.",
                    "First, import useState from React:",
                    {
                        "code_example": "import { useState } from 'react';"
                    },
                    "Now you can declare a state variable inside your component:",
                    {
                        "code_example": "function MyButton() {  const [count, setCount] = useState(0);  // ..."
                    },
                    "You’ll get two things from useState: the current state (count), and the function that lets you update it (setCount). You can give them any names, but the convention is to write [something, setSomething].",
                    "The first time the button is displayed, count will be 0 because you passed 0 to useState(). When you want to change state, call setCount() and pass the new value to it. Clicking this button will increment the counter:",
                    {
                        "code_example": "function MyButton() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <button onClick={handleClick}>      Clicked {count} times    </button>  );}"
                    },
                    "React will call your component function again. This time, count will be 1. Then it will be 2. And so on.",
                    "If you render the same component multiple times, each will get its own state. Click each button separately:",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function MyApp() {  return (    <div>      <h1>Counters that update separately</h1>      <MyButton />      <MyButton />    </div>  );}function MyButton() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <button onClick={handleClick}>      Clicked {count} times    </button>  );}"
                    },
                    "Notice how each button “remembers” its own count state and doesn’t affect other buttons."
                ]
            },
            {
                "subHeader": "Using Hooks ",
                "url": "https://react.dev/learn/#using-hooks",
                "sections": [
                    "Functions starting with use are called Hooks. useState is a built-in Hook provided by React. You can find other built-in Hooks in the API reference. You can also write your own Hooks by combining the existing ones.",
                    "Hooks are more restrictive than other functions. You can only call Hooks at the top of your components (or other Hooks). If you want to use useState in a condition or a loop, extract a new component and put it there."
                ]
            },
            {
                "subHeader": "Sharing data between components ",
                "url": "https://react.dev/learn/#sharing-data-between-components",
                "sections": [
                    "In the previous example, each MyButton had its own independent count, and when each button was clicked, only the count for the button clicked changed:",
                    {
                        "code_example": "MyButton"
                    },
                    "However, often you’ll need components to share data and always update together.",
                    "To make both MyButton components display the same count and update together, you need to move the state from the individual buttons “upwards” to the closest component containing all of them.",
                    "In this example, it is MyApp:",
                    {
                        "code_example": "MyApp"
                    },
                    "Now when you click either button, the count in MyApp will change, which will change both of the counts in MyButton. Here’s how you can express this in code.",
                    "First, move the state up from MyButton into MyApp:",
                    {
                        "code_example": "export default function MyApp() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <div>      <h1>Counters that update separately</h1>      <MyButton />      <MyButton />    </div>  );}function MyButton() {  // ... we're moving code from here ...}"
                    },
                    "Then, pass the state down from MyApp to each MyButton, together with the shared click handler. You can pass information to MyButton using the JSX curly braces, just like you previously did with built-in tags like <img>:",
                    {
                        "code_example": "export default function MyApp() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <div>      <h1>Counters that update together</h1>      <MyButton count={count} onClick={handleClick} />      <MyButton count={count} onClick={handleClick} />    </div>  );}"
                    },
                    "The information you pass down like this is called props. Now the MyApp component contains the count state and the handleClick event handler, and passes both of them down as props to each of the buttons.",
                    "Finally, change MyButton to read the props you have passed from its parent component:",
                    {
                        "code_example": "function MyButton({ count, onClick }) {  return (    <button onClick={onClick}>      Clicked {count} times    </button>  );}"
                    },
                    "When you click the button, the onClick handler fires. Each button’s onClick prop was set to the handleClick function inside MyApp, so the code inside of it runs. That code calls setCount(count + 1), incrementing the count state variable. The new count value is passed as a prop to each button, so they all show the new value. This is called “lifting state up”. By moving state up, you’ve shared it between components.",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function MyApp() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <div>      <h1>Counters that update together</h1>      <MyButton count={count} onClick={handleClick} />      <MyButton count={count} onClick={handleClick} />    </div>  );}function MyButton({ count, onClick }) {  return (    <button onClick={onClick}>      Clicked {count} times    </button>  );}"
                    }
                ]
            },
            {
                "subHeader": "Next Steps ",
                "url": "https://react.dev/learn/#next-steps",
                "sections": [
                    "By now, you know the basics of how to write React code!",
                    "Check out the Tutorial to put them into practice and build your first mini-app with React."
                ]
            },
            {
                "subTopics": [
                    {
                        "headers": "Tutorial: Tic-Tac-Toe",
                        "url": "https://react.dev/learn/tutorial-tic-tac-toe",
                        "content": [
                            "You will build a small tic-tac-toe game during this tutorial. This tutorial does not assume any existing React knowledge. The techniques you’ll learn in the tutorial are fundamental to building any React app, and fully understanding it will give you a deep understanding of React.",
                            "NoteThis tutorial is designed for people who prefer to learn by doing and want to quickly try making something tangible. If you prefer learning each concept step by step, start with Describing the UI.",
                            "The tutorial is divided into several sections:",
                            "  1.Setup for the tutorial will give you a starting point to follow the tutorial.",
                            "  2.Overview will teach you the fundamentals of React: components, props, and state.",
                            "  3.Completing the game will teach you the most common techniques in React development.",
                            "  4.Adding time travel will give you a deeper insight into the unique strengths of React.",
                            {
                                "sub_header": "What are you building? ",
                                "source": "react",
                                "url": "https://react.dev/learn/tutorial-tic-tac-toe/#what-are-you-building",
                                "content": [
                                    "In this tutorial, you’ll build an interactive tic-tac-toe game with React.",
                                    "You can see what it will look like when you’re finished here:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const xIsNext = currentMove % 2 === 0;  const currentSquares = history[currentMove];  function handlePlay(nextSquares) {    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];    setHistory(nextHistory);    setCurrentMove(nextHistory.length - 1);  }  function jumpTo(nextMove) {    setCurrentMove(nextMove);  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li key={move}>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                    },
                                    "If the code doesn’t make sense to you yet, or if you are unfamiliar with the code’s syntax, don’t worry! The goal of this tutorial is to help you understand React and its syntax.",
                                    "We recommend that you check out the tic-tac-toe game above before continuing with the tutorial. One of the features that you’ll notice is that there is a numbered list to the right of the game’s board. This list gives you a history of all of the moves that have occurred in the game, and it is updated as the game progresses.",
                                    "Once you’ve played around with the finished tic-tac-toe game, keep scrolling. You’ll start with a simpler template in this tutorial. Our next step is to set you up so that you can start building the game."
                                ]
                            },
                            {
                                "sub_header": "Setup for the tutorial ",
                                "source": "react",
                                "url": "https://react.dev/learn/tutorial-tic-tac-toe/#setup-for-the-tutorial",
                                "content": [
                                    "In the live code editor below, click Fork in the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you’ve created. The new tab should display an empty square and the starter code for this tutorial.",
                                    {
                                        "code_sandbox": "export default function Square() {  return <button className=\"square\">X</button>;}"
                                    },
                                    {
                                        "code_example": "cd"
                                    },
                                    "  1.Install Node.js",
                                    "  2.In the CodeSandbox tab you opened earlier, press the top-left corner button to open the menu, and then choose Download Sandbox in that menu to download an archive of the files locally",
                                    "  3.Unzip the archive, then open a terminal and cd to the directory you unzipped",
                                    "  4.Install the dependencies with npm install",
                                    "  5.Run npm start to start a local server and follow the prompts to view the code running in a browser"
                                ]
                            },
                            {
                                "sub_header": "Overview ",
                                "source": "react",
                                "url": "https://react.dev/learn/tutorial-tic-tac-toe/#overview",
                                "content": [
                                    "Now that you’re set up, let’s get an overview of React!",
                                    {
                                        "sub_header": "Inspecting the starter code ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#inspecting-the-starter-code",
                                        "content": [
                                            "In CodeSandbox you’ll see three main sections:",
                                            "  1.The Files section with a list of files like App.js, index.js, styles.css and a folder called public",
                                            "  2.The code editor where you’ll see the source code of your selected file",
                                            "  3.The browser section where you’ll see how the code you’ve written will be displayed",
                                            "The App.js file should be selected in the Files section. The contents of that file in the code editor should be:",
                                            {
                                                "code_example": "export default function Square() {  return <button className=\"square\">X</button>;}"
                                            },
                                            "The browser section should be displaying a square with a X in it like this:",
                                            "Now let’s have a look at the files in the starter code.",
                                            {
                                                "sub_header": "App.js ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/tutorial-tic-tac-toe/#appjs",
                                                "content": [
                                                    "The code in App.js creates a component. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let’s look at the component line by line to see what’s going on:",
                                                    {
                                                        "code_example": "export default function Square() {  return <button className=\"square\">X</button>;}"
                                                    },
                                                    "The first line defines a function called Square. The export JavaScript keyword makes this function accessible outside of this file. The default keyword tells other files using your code that it’s the main function in your file.",
                                                    {
                                                        "code_example": "export default function Square() {  return <button className=\"square\">X</button>;}"
                                                    },
                                                    "The second line returns a button. The return JavaScript keyword means whatever comes after is returned as a value to the caller of the function. <button> is a JSX element. A JSX element is a combination of JavaScript code and HTML tags that describes what you’d like to display. className=\"square\" is a button property or prop that tells CSS how to style the button. X is the text displayed inside of the button and </button> closes the JSX element to indicate that any following content shouldn’t be placed inside the button."
                                                ]
                                            },
                                            {
                                                "sub_header": "styles.css ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/tutorial-tic-tac-toe/#stylescss",
                                                "content": [
                                                    "Click on the file labeled styles.css in the Files section of CodeSandbox. This file defines the styles for your React app. The first two CSS selectors (* and body) define the style of large parts of your app while the .square selector defines the style of any component where the className property is set to square. In your code, that would match the button from your Square component in the App.js file."
                                                ]
                                            },
                                            {
                                                "sub_header": "index.js ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/tutorial-tic-tac-toe/#indexjs",
                                                "content": [
                                                    "Click on the file labeled index.js in the Files section of CodeSandbox. You won’t be editing this file during the tutorial but it is the bridge between the component you created in the App.js file and the web browser.",
                                                    {
                                                        "code_example": "import { StrictMode } from 'react';import { createRoot } from 'react-dom/client';import './styles.css';import App from './App';"
                                                    },
                                                    "Lines 1-5 bring all the necessary pieces together:",
                                                    "  1.React",
                                                    "  2.React’s library to talk to web browsers (React DOM)",
                                                    "  3.the styles for your components",
                                                    "  4.the component you created in App.js.",
                                                    "The remainder of the file brings all the pieces together and injects the final product into index.html in the public folder."
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Building the board ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#building-the-board",
                                        "content": [
                                            "Let’s get back to App.js. This is where you’ll spend the rest of the tutorial.",
                                            "Currently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:",
                                            {
                                                "code_example": "export default function Square() {  return <button className=\"square\">X</button><button className=\"square\">X</button>;}"
                                            },
                                            "You’ll get this error:",
                                            {
                                                "code_example": "<>...</>"
                                            },
                                            "React components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can use Fragments (<> and </>) to wrap multiple adjacent JSX elements like this:",
                                            {
                                                "code_example": "export default function Square() {  return (    <>      <button className=\"square\">X</button>      <button className=\"square\">X</button>    </>  );}"
                                            },
                                            "Now you should see:",
                                            "Great! Now you just need to copy-paste a few times to add nine squares and…",
                                            "Oh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you’ll need to group your squares into rows with divs and add some CSS classes. While you’re at it, you’ll give each square a number to make sure you know where each square is displayed.",
                                            "In the App.js file, update the Square component to look like this:",
                                            {
                                                "code_example": "export default function Square() {  return (    <>      <div className=\"board-row\">        <button className=\"square\">1</button>        <button className=\"square\">2</button>        <button className=\"square\">3</button>      </div>      <div className=\"board-row\">        <button className=\"square\">4</button>        <button className=\"square\">5</button>        <button className=\"square\">6</button>      </div>      <div className=\"board-row\">        <button className=\"square\">7</button>        <button className=\"square\">8</button>        <button className=\"square\">9</button>      </div>    </>  );}"
                                            },
                                            "The CSS defined in styles.css styles the divs with the className of board-row. Now that you’ve grouped your components into rows with the styled divs you have your tic-tac-toe board:",
                                            "But you now have a problem. Your component named Square, really isn’t a square anymore. Let’s fix that by changing the name to Board:",
                                            {
                                                "code_example": "export default function Board() {  //...}"
                                            },
                                            "At this point your code should look something like this:",
                                            {
                                                "code_sandbox": "export default function Board() {  return (    <>      <div className=\"board-row\">        <button className=\"square\">1</button>        <button className=\"square\">2</button>        <button className=\"square\">3</button>      </div>      <div className=\"board-row\">        <button className=\"square\">4</button>        <button className=\"square\">5</button>        <button className=\"square\">6</button>      </div>      <div className=\"board-row\">        <button className=\"square\">7</button>        <button className=\"square\">8</button>        <button className=\"square\">9</button>      </div>    </>  );}"
                                            },
                                            "NotePsssst… That’s a lot to type! It’s okay to copy and paste code from this page. However, if you’re up for a little challenge, we recommend only copying code that you’ve manually typed at least once yourself."
                                        ]
                                    },
                                    {
                                        "sub_header": "Passing data through props ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#passing-data-through-props",
                                        "content": [
                                            "Next, you’ll want to change the value of a square from empty to “X” when the user clicks on the square. With how you’ve built the board so far you would need to copy-paste the code that updates the square nine times (once for each square you have)! Instead of copy-pasting, React’s component architecture allows you to create a reusable component to avoid messy, duplicated code.",
                                            "First, you are going to copy the line defining your first square (<button className=\"square\">1</button>) from your Board component into a new Square component:",
                                            {
                                                "code_example": "function Square() {  return <button className=\"square\">1</button>;}export default function Board() {  // ...}"
                                            },
                                            "Then you’ll update the Board component to render that Square component using JSX syntax:",
                                            {
                                                "code_example": "// ...export default function Board() {  return (    <>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>    </>  );}"
                                            },
                                            "Note how unlike the browser divs, your own components Board and Square must start with a capital letter.",
                                            "Let’s take a look:",
                                            "Oh no! You lost the numbered squares you had before. Now each square says “1”. To fix this, you will use props to pass the value each square should have from the parent component (Board) to its child (Square).",
                                            "Update the Square component to read the value prop that you’ll pass from the Board:",
                                            {
                                                "code_example": "function Square({ value }) {  return <button className=\"square\">1</button>;}"
                                            },
                                            "function Square({ value }) indicates the Square component can be passed a prop called value.",
                                            "Now you want to display that value instead of 1 inside every square. Try doing it like this:",
                                            {
                                                "code_example": "function Square({ value }) {  return <button className=\"square\">value</button>;}"
                                            },
                                            "Oops, this is not what you wanted:",
                                            "You wanted to render the JavaScript variable called value from your component, not the word “value”. To “escape into JavaScript” from JSX, you need curly braces. Add curly braces around value in JSX like so:",
                                            {
                                                "code_example": "function Square({ value }) {  return <button className=\"square\">{value}</button>;}"
                                            },
                                            "For now, you should see an empty board:",
                                            "This is because the Board component hasn’t passed the value prop to each Square component it renders yet. To fix it you’ll add the value prop to each Square component rendered by the Board component:",
                                            {
                                                "code_example": "export default function Board() {  return (    <>      <div className=\"board-row\">        <Square value=\"1\" />        <Square value=\"2\" />        <Square value=\"3\" />      </div>      <div className=\"board-row\">        <Square value=\"4\" />        <Square value=\"5\" />        <Square value=\"6\" />      </div>      <div className=\"board-row\">        <Square value=\"7\" />        <Square value=\"8\" />        <Square value=\"9\" />      </div>    </>  );}"
                                            },
                                            "Now you should see a grid of numbers again:",
                                            "Your updated code should look like this:",
                                            {
                                                "code_sandbox": "function Square({ value }) {  return <button className=\"square\">{value}</button>;}export default function Board() {  return (    <>      <div className=\"board-row\">        <Square value=\"1\" />        <Square value=\"2\" />        <Square value=\"3\" />      </div>      <div className=\"board-row\">        <Square value=\"4\" />        <Square value=\"5\" />        <Square value=\"6\" />      </div>      <div className=\"board-row\">        <Square value=\"7\" />        <Square value=\"8\" />        <Square value=\"9\" />      </div>    </>  );}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Making an interactive component ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#making-an-interactive-component",
                                        "content": [
                                            "Let’s fill the Square component with an X when you click it. Declare a function called handleClick inside of the Square. Then, add onClick to the props of the button JSX element returned from the Square:",
                                            {
                                                "code_example": "function Square({ value }) {  function handleClick() {    console.log('clicked!');  }  return (    <button      className=\"square\"      onClick={handleClick}    >      {value}    </button>  );}"
                                            },
                                            "If you click on a square now, you should see a log saying \"clicked!\" in the Console tab at the bottom of the Browser section in CodeSandbox. Clicking the square more than once will log \"clicked!\" again. Repeated console logs with the same message will not create more lines in the console. Instead, you will see an incrementing counter next to your first \"clicked!\" log.",
                                            "NoteIf you are following this tutorial using your local development environment, you need to open your browser’s Console. For example, if you use the Chrome browser, you can view the Console with the keyboard shortcut Shift + Ctrl + J (on Windows/Linux) or Option + ⌘ + J (on macOS).",
                                            "As a next step, you want the Square component to “remember” that it got clicked, and fill it with an “X” mark. To “remember” things, components use state.",
                                            "React provides a special function called useState that you can call from your component to let it “remember” things. Let’s store the current value of the Square in state, and change it when the Square is clicked.",
                                            "Import useState at the top of the file. Remove the value prop from the Square component. Instead, add a new line at the start of the Square that calls useState. Have it return a state variable called value:",
                                            {
                                                "code_example": "import { useState } from 'react';function Square() {  const [value, setValue] = useState(null);  function handleClick() {    //..."
                                            },
                                            "value stores the value and setValue is a function that can be used to change the value. The null passed to useState is used as the initial value for this state variable, so value here starts off equal to null.",
                                            "Since the Square component no longer accepts props anymore, you’ll remove the value prop from all nine of the Square components created by the Board component:",
                                            {
                                                "code_example": "// ...export default function Board() {  return (    <>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>    </>  );}"
                                            },
                                            "Now you’ll change Square to display an “X” when clicked. Replace the console.log(\"clicked!\"); event handler with setValue('X');. Now your Square component looks like this:",
                                            {
                                                "code_example": "function Square() {  const [value, setValue] = useState(null);  function handleClick() {    setValue('X');  }  return (    <button      className=\"square\"      onClick={handleClick}    >      {value}    </button>  );}"
                                            },
                                            "By calling this set function from an onClick handler, you’re telling React to re-render that Square whenever its <button> is clicked. After the update, the Square’s value will be 'X', so you’ll see the “X” on the game board. Click on any Square, and “X” should show up:",
                                            "Each Square has its own state: the value stored in each Square is completely independent of the others. When you call a set function in a component, React automatically updates the child components inside too.",
                                            "After you’ve made the above changes, your code will look like this:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square() {  const [value, setValue] = useState(null);  function handleClick() {    setValue('X');  }  return (    <button      className=\"square\"      onClick={handleClick}    >      {value}    </button>  );}export default function Board() {  return (    <>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>      <div className=\"board-row\">        <Square />        <Square />        <Square />      </div>    </>  );}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "React Developer Tools ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#react-developer-tools",
                                        "content": [
                                            "React DevTools let you check the props and the state of your React components. You can find the React DevTools tab at the bottom of the browser section in CodeSandbox:",
                                            "To inspect a particular component on the screen, use the button in the top left corner of React DevTools:",
                                            "NoteFor local development, React DevTools is available as a Chrome, Firefox, and Edge browser extension. Install it, and the Components tab will appear in your browser Developer Tools for sites using React."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Completing the game ",
                                "source": "react",
                                "url": "https://react.dev/learn/tutorial-tic-tac-toe/#completing-the-game",
                                "content": [
                                    "By this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing “X”s and “O”s on the board, and you need a way to determine a winner.",
                                    {
                                        "sub_header": "Lifting state up ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#lifting-state-up",
                                        "content": [
                                            "Currently, each Square component maintains a part of the game’s state. To check for a winner in a tic-tac-toe game, the Board would need to somehow know the state of each of the 9 Square components.",
                                            "How would you approach that? At first, you might guess that the Board needs to “ask” each Square for that Square’s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game’s state in the parent Board component instead of in each Square. The Board component can tell each Square what to display by passing a prop, like you did when you passed a number to each Square.",
                                            "To collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.",
                                            "Lifting state into a parent component is common when React components are refactored.",
                                            "Let’s take this opportunity to try it out. Edit the Board component so that it declares a state variable named squares that defaults to an array of 9 nulls corresponding to the 9 squares:",
                                            {
                                                "code_example": "// ...export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  return (    // ...  );}"
                                            },
                                            "Array(9).fill(null) creates an array with nine elements and sets each of them to null. The useState() call around it declares a squares state variable that’s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, the squares array will look like this:",
                                            {
                                                "code_example": "['O', null, 'X', 'X', 'X', 'O', 'O', null, null]"
                                            },
                                            "Now your Board component needs to pass the value prop down to each Square that it renders:",
                                            {
                                                "code_example": "export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} />        <Square value={squares[1]} />        <Square value={squares[2]} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} />        <Square value={squares[4]} />        <Square value={squares[5]} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} />        <Square value={squares[7]} />        <Square value={squares[8]} />      </div>    </>  );}"
                                            },
                                            "Next, you’ll edit the Square component to receive the value prop from the Board component. This will require removing the Square component’s own stateful tracking of value and the button’s onClick prop:",
                                            {
                                                "code_example": "function Square({value}) {  return <button className=\"square\">{value}</button>;}"
                                            },
                                            "At this point you should see an empty tic-tac-toe board:",
                                            "And your code should look like this:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({ value }) {  return <button className=\"square\">{value}</button>;}export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} />        <Square value={squares[1]} />        <Square value={squares[2]} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} />        <Square value={squares[4]} />        <Square value={squares[5]} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} />        <Square value={squares[7]} />        <Square value={squares[8]} />      </div>    </>  );}"
                                            },
                                            "Each Square will now receive a value prop that will either be 'X', 'O', or null for empty squares.",
                                            "Next, you need to change what happens when a Square is clicked. The Board component now maintains which squares are filled. You’ll need to create a way for the Square to update the Board’s state. Since state is private to a component that defines it, you cannot update the Board’s state directly from Square.",
                                            "Instead, you’ll pass down a function from the Board component to the Square component, and you’ll have Square call that function when a square is clicked. You’ll start with the function that the Square component will call when it is clicked. You’ll call that function onSquareClick:",
                                            {
                                                "code_example": "function Square({ value }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}"
                                            },
                                            "Next, you’ll add the onSquareClick function to the Square component’s props:",
                                            {
                                                "code_example": "function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}"
                                            },
                                            "Now you’ll connect the onSquareClick prop to a function in the Board component that you’ll name handleClick. To connect onSquareClick to handleClick you’ll pass a function to the onSquareClick prop of the first Square component:",
                                            {
                                                "code_example": "export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={handleClick} />        //...  );}"
                                            },
                                            "Lastly, you will define the handleClick function inside the Board component to update the squares array holding your board’s state:",
                                            {
                                                "code_example": "export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick() {    const nextSquares = squares.slice();    nextSquares[0] = \"X\";    setSquares(nextSquares);  }  return (    // ...  )}"
                                            },
                                            "The handleClick function creates a copy of the squares array (nextSquares) with the JavaScript slice() Array method. Then, handleClick updates the nextSquares array to add X to the first ([0] index) square.",
                                            "Calling the setSquares function lets React know the state of the component has changed. This will trigger a re-render of the components that use the squares state (Board) as well as its child components (the Square components that make up the board).",
                                            {
                                                "code_example": "handleClick"
                                            },
                                            "Now you can add X’s to the board…  but only to the upper left square. Your handleClick function is hardcoded to update the index for the upper left square (0). Let’s update handleClick to be able to update any square. Add an argument i to the handleClick function that takes the index of the square to update:",
                                            {
                                                "code_example": "export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    const nextSquares = squares.slice();    nextSquares[i] = \"X\";    setSquares(nextSquares);  }  return (    // ...  )}"
                                            },
                                            "Next, you will need to pass that i to handleClick. You could try to set the onSquareClick prop of square to be handleClick(0) directly in the JSX like this, but it won’t work:",
                                            {
                                                "code_example": "<Square value={squares[0]} onSquareClick={handleClick(0)} />"
                                            },
                                            "Here is why this doesn’t work. The handleClick(0) call will be a part of rendering the board component. Because handleClick(0) alters the state of the board component by calling setSquares, your entire board component will be re-rendered again. But this runs handleClick(0) again, leading to an infinite loop:",
                                            "ConsoleToo many re-renders. React limits the number of renders to prevent an infinite loop.",
                                            "Why didn’t this problem happen earlier?",
                                            "When you were passing onSquareClick={handleClick}, you were passing the handleClick function down as a prop. You were not calling it! But now you are calling that function right away—notice the parentheses in handleClick(0)—and that’s why it runs too early. You don’t want to call handleClick until the user clicks!",
                                            "You could fix this by creating a function like handleFirstSquareClick that calls handleClick(0), a function like handleSecondSquareClick that calls handleClick(1), and so on. You would pass (rather than call) these functions down as props like onSquareClick={handleFirstSquareClick}. This would solve the infinite loop.",
                                            "However, defining nine different functions and giving each of them a name is too verbose. Instead, let’s do this:",
                                            {
                                                "code_example": "export default function Board() {  // ...  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        // ...  );}"
                                            },
                                            "Notice the new () => syntax. Here, () => handleClick(0) is an arrow function, which is a shorter way to define functions. When the square is clicked, the code after the => “arrow” will run, calling handleClick(0).",
                                            "Now you need to update the other eight squares to call handleClick from the arrow functions you pass. Make sure that the argument for each call of the handleClick corresponds to the index of the correct square:",
                                            {
                                                "code_example": "export default function Board() {  // ...  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );};"
                                            },
                                            "Now you can again add X’s to any square on the board by clicking on them:",
                                            "But this time all the state management is handled by the Board component!",
                                            "This is what your code should look like:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}export default function Board() {  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    const nextSquares = squares.slice();    nextSquares[i] = 'X';    setSquares(nextSquares);  }  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}"
                                            },
                                            "Now that your state handling is in the Board component, the parent Board component passes props to the child Square components so that they can be displayed correctly. When clicking on a Square, the child Square component now asks the parent Board component to update the state of the board. When the Board’s state changes, both the Board component and every child Square re-renders automatically. Keeping the state of all squares in the Board component will allow it to determine the winner in the future.",
                                            "Let’s recap what happens when a user clicks the top left square on your board to add an X to it:",
                                            "  1.Clicking on the upper left square runs the function that the button received as its onClick prop from the Square. The Square component received that function as its onSquareClick prop from the Board. The Board component defined that function directly in the JSX. It calls handleClick with an argument of 0.",
                                            "  2.handleClick uses the argument (0) to update the first element of the squares array from null to X.",
                                            "  3.The squares state of the Board component was updated, so the Board and all of its children re-render. This causes the value prop of the Square component with index 0 to change from null to X.",
                                            "In the end the user sees that the upper left square has changed from empty to having a X after clicking it.",
                                            {
                                                "code_example": "<button>"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Why immutability is important ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#why-immutability-is-important",
                                        "content": [
                                            "Note how in handleClick, you call .slice() to create a copy of the squares array instead of modifying the existing array. To explain why, we need to discuss immutability and why immutability is important to learn.",
                                            "There are generally two approaches to changing data. The first approach is to mutate the data by directly changing the data’s values. The second approach is to replace the data with a new copy which has the desired changes. Here is what it would look like if you mutated the squares array:",
                                            {
                                                "code_example": "const squares = [null, null, null, null, null, null, null, null, null];squares[0] = 'X';// Now `squares` is [\"X\", null, null, null, null, null, null, null, null];"
                                            },
                                            "And here is what it would look like if you changed data without mutating the squares array:",
                                            {
                                                "code_example": "const squares = [null, null, null, null, null, null, null, null, null];const nextSquares = ['X', null, null, null, null, null, null, null, null];// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`"
                                            },
                                            "The result is the same but by not mutating (changing the underlying data) directly, you gain several benefits.",
                                            "Immutability makes complex features much easier to implement. Later in this tutorial, you will implement a “time travel” feature that lets you review the game’s history and “jump back” to past moves. This functionality isn’t specific to games—an ability to undo and redo certain actions is a common requirement for apps. Avoiding direct data mutation lets you keep previous versions of the data intact, and reuse them later.",
                                            "There is also another benefit of immutability. By default, all child components re-render automatically when the state of a parent component changes. This includes even the child components that weren’t affected by the change. Although re-rendering is not by itself noticeable to the user (you shouldn’t actively try to avoid it!), you might want to skip re-rendering a part of the tree that clearly wasn’t affected by it for performance reasons. Immutability makes it very cheap for components to compare whether their data has changed or not. You can learn more about how React chooses when to re-render a component in the memo API reference."
                                        ]
                                    },
                                    {
                                        "sub_header": "Taking turns ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#taking-turns",
                                        "content": [
                                            "It’s now time to fix a major defect in this tic-tac-toe game: the “O”s cannot be marked on the board.",
                                            "You’ll set the first move to be “X” by default. Let’s keep track of this by adding another piece of state to the Board component:",
                                            {
                                                "code_example": "function Board() {  const [xIsNext, setXIsNext] = useState(true);  const [squares, setSquares] = useState(Array(9).fill(null));  // ...}"
                                            },
                                            "Each time a player moves, xIsNext (a boolean) will be flipped to determine which player goes next and the game’s state will be saved. You’ll update the Board’s handleClick function to flip the value of xIsNext:",
                                            {
                                                "code_example": "export default function Board() {  const [xIsNext, setXIsNext] = useState(true);  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = \"X\";    } else {      nextSquares[i] = \"O\";    }    setSquares(nextSquares);    setXIsNext(!xIsNext);  }  return (    //...  );}"
                                            },
                                            "Now, as you click on different squares, they will alternate between X and O, as they should!",
                                            "But wait, there’s a problem. Try clicking on the same square multiple times:",
                                            "The X is overwritten by an O! While this would add a very interesting twist to the game, we’re going to stick to the original rules for now.",
                                            "When you mark a square with a X or an O you aren’t first checking to see if the square already has a X or O value. You can fix this by returning early. You’ll check to see if the square already has a X or an O. If the square is already filled, you will return in the handleClick function early—before it tries to update the board state.",
                                            {
                                                "code_example": "function handleClick(i) {  if (squares[i]) {    return;  }  const nextSquares = squares.slice();  //...}"
                                            },
                                            "Now you can only add X’s or O’s to empty squares! Here is what your code should look like at this point:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({value, onSquareClick}) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}export default function Board() {  const [xIsNext, setXIsNext] = useState(true);  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    if (squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    setSquares(nextSquares);    setXIsNext(!xIsNext);  }  return (    <>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Declaring a winner ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#declaring-a-winner",
                                        "content": [
                                            "Now that the players can take turns, you’ll want to show when the game is won and there are no more turns to make. To do this you’ll add a helper function called calculateWinner that takes an array of 9 squares, checks for a winner and returns 'X', 'O', or null as appropriate. Don’t worry too much about the calculateWinner function; it’s not specific to React:",
                                            {
                                                "code_example": "export default function Board() {  //...}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6]  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                            },
                                            {
                                                "code_example": "calculateWinner"
                                            },
                                            "You will call calculateWinner(squares) in the Board component’s handleClick function to check if a player has won. You can perform this check at the same time you check if a user has clicked a square that already has a X or and O. We’d like to return early in both cases:",
                                            {
                                                "code_example": "function handleClick(i) {  if (squares[i] || calculateWinner(squares)) {    return;  }  const nextSquares = squares.slice();  //...}"
                                            },
                                            "To let the players know when the game is over, you can display text such as “Winner: X” or “Winner: O”. To do that you’ll add a status section to the Board component. The status will display the winner if the game is over and if the game is ongoing you’ll display which player’s turn is next:",
                                            {
                                                "code_example": "export default function Board() {  // ...  const winner = calculateWinner(squares);  let status;  if (winner) {    status = \"Winner: \" + winner;  } else {    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        // ...  )}"
                                            },
                                            "Congratulations! You now have a working tic-tac-toe game. And you’ve just learned the basics of React too. So you are the real winner here. Here is what the code should look like:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({value, onSquareClick}) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}export default function Board() {  const [xIsNext, setXIsNext] = useState(true);  const [squares, setSquares] = useState(Array(9).fill(null));  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    setSquares(nextSquares);    setXIsNext(!xIsNext);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Adding time travel ",
                                "source": "react",
                                "url": "https://react.dev/learn/tutorial-tic-tac-toe/#adding-time-travel",
                                "content": [
                                    "As a final exercise, let’s make it possible to “go back in time” to the previous moves in the game.",
                                    {
                                        "sub_header": "Storing a history of moves ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#storing-a-history-of-moves",
                                        "content": [
                                            "If you mutated the squares array, implementing time travel would be very difficult.",
                                            "However, you used slice() to create a new copy of the squares array after every move, and treated it as immutable. This will allow you to store every past version of the squares array, and navigate between the turns that have already happened.",
                                            "You’ll store the past squares arrays in another array called history, which you’ll store as a new state variable. The history array represents all board states, from the first to the last move, and has a shape like this:",
                                            {
                                                "code_example": "[  // Before first move  [null, null, null, null, null, null, null, null, null],  // After first move  [null, null, null, null, 'X', null, null, null, null],  // After second move  [null, null, null, null, 'X', null, null, null, 'O'],  // ...]"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Lifting state up, again ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#lifting-state-up-again",
                                        "content": [
                                            "You will now write a new top-level component called Game to display a list of past moves. That’s where you will place the history state that contains the entire game history.",
                                            "Placing the history state into the Game component will let you remove the squares state from its child Board component. Just like you “lifted state up” from the Square component into the Board component, you will now lift it up from the Board into the top-level Game component. This gives the Game component full control over the Board’s data and lets it instruct the Board to render previous turns from the history.",
                                            "First, add a Game component with export default. Have it render the Board component and some markup:",
                                            {
                                                "code_example": "function Board() {  // ...}export default function Game() {  return (    <div className=\"game\">      <div className=\"game-board\">        <Board />      </div>      <div className=\"game-info\">        <ol>{/*TODO*/}</ol>      </div>    </div>  );}"
                                            },
                                            "Note that you are removing the export default keywords before the function Board() { declaration and adding them before the function Game() { declaration. This tells your index.js file to use the Game component as the top-level component instead of your Board component. The additional divs returned by the Game component are making room for the game information you’ll add to the board later.",
                                            "Add some state to the Game component to track which player is next and the history of moves:",
                                            {
                                                "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  // ..."
                                            },
                                            "Notice how [Array(9).fill(null)] is an array with a single item, which itself is an array of 9 nulls.",
                                            "To render the squares for the current move, you’ll want to read the last squares array from the history. You don’t need useState for this—you already have enough information to calculate it during rendering:",
                                            {
                                                "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  // ..."
                                            },
                                            "Next, create a handlePlay function inside the Game component that will be called by the Board component to update the game. Pass xIsNext, currentSquares and handlePlay as props to the Board component:",
                                            {
                                                "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    // TODO  }  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />        //...  )}"
                                            },
                                            "Let’s make the Board component fully controlled by the props it receives. Change the Board component to take three props: xIsNext, squares, and a new onPlay function that Board can call with the updated squares array when a player makes a move. Next, remove the first two lines of the Board function that call useState:",
                                            {
                                                "code_example": "function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    //...  }  // ...}"
                                            },
                                            "Now replace the setSquares and setXIsNext calls in handleClick in the Board component with a single call to your new onPlay function so the Game component can update the Board when the user clicks a square:",
                                            {
                                                "code_example": "function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = \"X\";    } else {      nextSquares[i] = \"O\";    }    onPlay(nextSquares);  }  //...}"
                                            },
                                            "The Board component is fully controlled by the props passed to it by the Game component. You need to implement the handlePlay function in the Game component to get the game working again.",
                                            "What should handlePlay do when called? Remember that Board used to call setSquares with an updated array; now it passes the updated squares array to onPlay.",
                                            "The handlePlay function needs to update Game’s state to trigger a re-render, but you don’t have a setSquares function that you can call any more—you’re now using the history state variable to store this information. You’ll want to update history by appending the updated squares array as a new history entry. You also want to toggle xIsNext, just as Board used to do:",
                                            {
                                                "code_example": "export default function Game() {  //...  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  //...}"
                                            },
                                            "Here, [...history, nextSquares] creates a new array that contains all the items in history, followed by nextSquares. (You can read the ...history spread syntax as “enumerate all the items in history”.)",
                                            "For example, if history is [[null,null,null], [\"X\",null,null]] and nextSquares is [\"X\",null,\"O\"], then the new [...history, nextSquares] array will be [[null,null,null], [\"X\",null,null], [\"X\",null,\"O\"]].",
                                            "At this point, you’ve moved the state to live in the Game component, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{/*TODO*/}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Showing the past moves ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#showing-the-past-moves",
                                        "content": [
                                            "Since you are recording the tic-tac-toe game’s history, you can now display a list of past moves to the player.",
                                            "React elements like <button> are regular JavaScript objects; you can pass them around in your application. To render multiple items in React, you can use an array of React elements.",
                                            "You already have an array of history moves in state, so now you need to transform it to an array of React elements. In JavaScript, to transform one array into another, you can use the array map method:",
                                            {
                                                "code_example": "[1, 2, 3].map((x) => x * 2) // [2, 4, 6]"
                                            },
                                            "You’ll use map to transform your history of moves into React elements representing buttons on the screen, and display a list of buttons to “jump” to past moves. Let’s map over the history in the Game component:",
                                            {
                                                "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  function jumpTo(nextMove) {    // TODO  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}"
                                            },
                                            "You can see what your code should look like below. Note that you should see an error in the developer tools console that says:",
                                            "ConsoleWarning: Each child in an array or iterator should have a unique “key” prop. Check the render method of `Game`.",
                                            "You’ll fix this error in the next section.",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  function jumpTo(nextMove) {    // TODO  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                            },
                                            "As you iterate through history array inside the function you passed to map, the squares argument goes through each element of history, and the move argument goes through each array index: 0, 1, 2, …. (In most cases, you’d need the actual array elements, but to render a list of moves you will only need indexes.)",
                                            "For each move in the tic-tac-toe game’s history, you create a list item <li> which contains a button <button>. The button has an onClick handler which calls a function called jumpTo (that you haven’t implemented yet).",
                                            "For now, you should see a list of the moves that occurred in the game and an error in the developer tools console. Let’s discuss what the “key” error means."
                                        ]
                                    },
                                    {
                                        "sub_header": "Picking a key ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#picking-a-key",
                                        "content": [
                                            "When you render a list, React stores some information about each rendered list item. When you update a list, React needs to determine what has changed. You could have added, removed, re-arranged, or updated the list’s items.",
                                            "Imagine transitioning from",
                                            {
                                                "code_example": "<li>Alexa: 7 tasks left</li><li>Ben: 5 tasks left</li>"
                                            },
                                            "to",
                                            {
                                                "code_example": "<li>Ben: 9 tasks left</li><li>Claudia: 8 tasks left</li><li>Alexa: 5 tasks left</li>"
                                            },
                                            "In addition to the updated counts, a human reading this would probably say that you swapped Alexa and Ben’s ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and does not know what you intended, so you need to specify a key property for each list item to differentiate each list item from its siblings. If your data was from a database, Alexa, Ben, and Claudia’s database IDs could be used as keys.",
                                            {
                                                "code_example": "<li key={user.id}>  {user.name}: {user.taskCount} tasks left</li>"
                                            },
                                            "When a list is re-rendered, React takes each list item’s key and searches the previous list’s items for a matching key. If the current list has a key that didn’t exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved.",
                                            "Keys tell React about the identity of each component, which allows React to maintain state between re-renders. If a component’s key changes, the component will be destroyed and re-created with a new state.",
                                            "key is a special and reserved property in React. When an element is created, React extracts the key property and stores the key directly on the returned element. Even though key may look like it is passed as props, React automatically uses key to decide which components to update. There’s no way for a component to ask what key its parent specified.",
                                            "It’s strongly recommended that you assign proper keys whenever you build dynamic lists. If you don’t have an appropriate key, you may want to consider restructuring your data so that you do.",
                                            "If no key is specified, React will report an error and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list’s items or inserting/removing list items. Explicitly passing key={i} silences the error but has the same problems as array indices and is not recommended in most cases.",
                                            "Keys do not need to be globally unique; they only need to be unique between components and their siblings."
                                        ]
                                    },
                                    {
                                        "sub_header": "Implementing time travel ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#implementing-time-travel",
                                        "content": [
                                            "In the tic-tac-toe game’s history, each past move has a unique ID associated with it: it’s the sequential number of the move. Moves will never be re-ordered, deleted, or inserted in the middle, so it’s safe to use the move index as a key.",
                                            "In the Game function, you can add the key as <li key={move}>, and if you reload the rendered game, React’s “key” error should disappear:",
                                            {
                                                "code_example": "const moves = history.map((squares, move) => {  //...  return (    <li key={move}>      <button onClick={() => jumpTo(move)}>{description}</button>    </li>  );});"
                                            },
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const currentSquares = history[history.length - 1];  function handlePlay(nextSquares) {    setHistory([...history, nextSquares]);    setXIsNext(!xIsNext);  }  function jumpTo(nextMove) {    // TODO  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li key={move}>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                            },
                                            "Before you can implement jumpTo, you need the Game component to keep track of which step the user is currently viewing. To do this, define a new state variable called currentMove, defaulting to 0:",
                                            {
                                                "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const currentSquares = history[history.length - 1];  //...}"
                                            },
                                            "Next, update the jumpTo function inside Game to update that currentMove. You’ll also set xIsNext to true if the number that you’re changing currentMove to is even.",
                                            {
                                                "code_example": "export default function Game() {  // ...  function jumpTo(nextMove) {    setCurrentMove(nextMove);    setXIsNext(nextMove % 2 === 0);  }  //...}"
                                            },
                                            "You will now make two changes to the Game’s handlePlay function which is called when you click on a square.",
                                            "  1.If you “go back in time” and then make a new move from that point, you only want to keep the history up to that point. Instead of adding nextSquares after all items (... spread syntax) in history, you’ll add it after all items in history.slice(0, currentMove + 1) so that you’re only keeping that portion of the old history.",
                                            "  2.Each time a move is made, you need to update currentMove to point to the latest history entry.",
                                            {
                                                "code_example": "function handlePlay(nextSquares) {  const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];  setHistory(nextHistory);  setCurrentMove(nextHistory.length - 1);  setXIsNext(!xIsNext);}"
                                            },
                                            "Finally, you will modify the Game component to render the currently selected move, instead of always rendering the final move:",
                                            {
                                                "code_example": "export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const currentSquares = history[currentMove];  // ...}"
                                            },
                                            "If you click on any step in the game’s history, the tic-tac-toe board should immediately update to show what the board looked like after that step occurred.",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({value, onSquareClick}) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [xIsNext, setXIsNext] = useState(true);  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const currentSquares = history[currentMove];  function handlePlay(nextSquares) {    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];    setHistory(nextHistory);    setCurrentMove(nextHistory.length - 1);    setXIsNext(!xIsNext);  }  function jumpTo(nextMove) {    setCurrentMove(nextMove);    setXIsNext(nextMove % 2 === 0);  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li key={move}>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Final cleanup ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#final-cleanup",
                                        "content": [
                                            "If you look at the code very closely, you may notice that xIsNext === true when currentMove is even and xIsNext === false when currentMove is odd. In other words, if you know the value of currentMove, then you can always figure out what xIsNext should be.",
                                            "There’s no reason for you to store both of these in state. In fact, always try to avoid redundant state. Simplifying what you store in state reduces bugs and makes your code easier to understand. Change Game so that it doesn’t store xIsNext as a separate state variable and instead figures it out based on the currentMove:",
                                            {
                                                "code_example": "export default function Game() {  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const xIsNext = currentMove % 2 === 0;  const currentSquares = history[currentMove];  function handlePlay(nextSquares) {    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];    setHistory(nextHistory);    setCurrentMove(nextHistory.length - 1);  }  function jumpTo(nextMove) {    setCurrentMove(nextMove);  }  // ...}"
                                            },
                                            "You no longer need the xIsNext state declaration or the calls to setXIsNext. Now, there’s no chance for xIsNext to get out of sync with currentMove, even if you make a mistake while coding the components."
                                        ]
                                    },
                                    {
                                        "sub_header": "Wrapping up ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/tutorial-tic-tac-toe/#wrapping-up",
                                        "content": [
                                            "Congratulations! You’ve created a tic-tac-toe game that:",
                                            "  1.Lets you play tic-tac-toe,",
                                            "  2.Indicates when a player has won the game,",
                                            "  3.Stores a game’s history as a game progresses,",
                                            "  4.Allows players to review a game’s history and see previous versions of a game’s board.",
                                            "Nice work! We hope you now feel like you have a decent grasp of how React works.",
                                            "Check out the final result here:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';function Square({ value, onSquareClick }) {  return (    <button className=\"square\" onClick={onSquareClick}>      {value}    </button>  );}function Board({ xIsNext, squares, onPlay }) {  function handleClick(i) {    if (calculateWinner(squares) || squares[i]) {      return;    }    const nextSquares = squares.slice();    if (xIsNext) {      nextSquares[i] = 'X';    } else {      nextSquares[i] = 'O';    }    onPlay(nextSquares);  }  const winner = calculateWinner(squares);  let status;  if (winner) {    status = 'Winner: ' + winner;  } else {    status = 'Next player: ' + (xIsNext ? 'X' : 'O');  }  return (    <>      <div className=\"status\">{status}</div>      <div className=\"board-row\">        <Square value={squares[0]} onSquareClick={() => handleClick(0)} />        <Square value={squares[1]} onSquareClick={() => handleClick(1)} />        <Square value={squares[2]} onSquareClick={() => handleClick(2)} />      </div>      <div className=\"board-row\">        <Square value={squares[3]} onSquareClick={() => handleClick(3)} />        <Square value={squares[4]} onSquareClick={() => handleClick(4)} />        <Square value={squares[5]} onSquareClick={() => handleClick(5)} />      </div>      <div className=\"board-row\">        <Square value={squares[6]} onSquareClick={() => handleClick(6)} />        <Square value={squares[7]} onSquareClick={() => handleClick(7)} />        <Square value={squares[8]} onSquareClick={() => handleClick(8)} />      </div>    </>  );}export default function Game() {  const [history, setHistory] = useState([Array(9).fill(null)]);  const [currentMove, setCurrentMove] = useState(0);  const xIsNext = currentMove % 2 === 0;  const currentSquares = history[currentMove];  function handlePlay(nextSquares) {    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];    setHistory(nextHistory);    setCurrentMove(nextHistory.length - 1);  }  function jumpTo(nextMove) {    setCurrentMove(nextMove);  }  const moves = history.map((squares, move) => {    let description;    if (move > 0) {      description = 'Go to move #' + move;    } else {      description = 'Go to game start';    }    return (      <li key={move}>        <button onClick={() => jumpTo(move)}>{description}</button>      </li>    );  });  return (    <div className=\"game\">      <div className=\"game-board\">        <Board xIsNext={xIsNext} squares={currentSquares} onPlay={handlePlay} />      </div>      <div className=\"game-info\">        <ol>{moves}</ol>      </div>    </div>  );}function calculateWinner(squares) {  const lines = [    [0, 1, 2],    [3, 4, 5],    [6, 7, 8],    [0, 3, 6],    [1, 4, 7],    [2, 5, 8],    [0, 4, 8],    [2, 4, 6],  ];  for (let i = 0; i < lines.length; i++) {    const [a, b, c] = lines[i];    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {      return squares[a];    }  }  return null;}"
                                            },
                                            "If you have extra time or want to practice your new React skills, here are some ideas for improvements that you could make to the tic-tac-toe game, listed in order of increasing difficulty:",
                                            "  1.For the current move only, show “You are at move #…” instead of a button.",
                                            "  2.Rewrite Board to use two loops to make the squares instead of hardcoding them.",
                                            "  3.Add a toggle button that lets you sort the moves in either ascending or descending order.",
                                            "  4.When someone wins, highlight the three squares that caused the win (and when no one wins, display a message about the result being a draw).",
                                            "  5.Display the location for each move in the format (row, col) in the move history list.",
                                            "Throughout this tutorial, you’ve touched on React concepts including elements, components, props, and state. Now that you’ve seen how these concepts work when building a game, check out Thinking in React to see how the same React concepts work when building an app’s UI."
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Thinking in React",
                        "url": "https://react.dev/learn/thinking-in-react",
                        "content": [
                            "React can change how you think about the designs you look at and the apps you build. When you build a user interface with React, you will first break it apart into pieces called components. Then, you will describe the different visual states for each of your components. Finally, you will connect your components together so that the data flows through them. In this tutorial, we’ll guide you through the thought process of building a searchable product data table with React.",
                            {
                                "sub_header": "Start with the mockup ",
                                "source": "react",
                                "url": "https://react.dev/learn/thinking-in-react/#start-with-the-mockup",
                                "content": [
                                    "Imagine that you already have a JSON API and a mockup from a designer.",
                                    "The JSON API returns some data that looks like this:",
                                    {
                                        "code_example": "[  { category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\" },  { category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\" },  { category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\" },  { category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\" },  { category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\" },  { category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\" }]"
                                    },
                                    "The mockup looks like this:",
                                    "To implement a UI in React, you will usually follow the same five steps."
                                ]
                            },
                            {
                                "sub_header": "Step 1: Break the UI into a component hierarchy ",
                                "source": "react",
                                "url": "https://react.dev/learn/thinking-in-react/#step-1-break-the-ui-into-a-component-hierarchy",
                                "content": [
                                    "Start by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Ask them!",
                                    "Depending on your background, you can think about splitting up a design into components in different ways:",
                                    "  1.Programming—use the same techniques for deciding if you should create a new function or object. One such technique is the single responsibility principle, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.",
                                    "  2.CSS—consider what you would make class selectors for. (However, components are a bit less granular.)",
                                    "  3.Design—consider how you would organize the design’s layers.",
                                    "If your JSON is well-structured, you’ll often find that it naturally maps to the component structure of your UI. That’s because UI and data models often have the same information architecture—that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.",
                                    "There are five components on this screen:",
                                    {
                                        "code_example": "FilterableProductTable"
                                    },
                                    "  1.FilterableProductTable (grey) contains the entire app.",
                                    "  2.SearchBar (blue) receives the user input.",
                                    "  3.ProductTable (lavender) displays and filters the list according to the user input.",
                                    "  4.ProductCategoryRow (green) displays a heading for each category.",
                                    "  5.ProductRow\t(yellow) displays a row for each product.",
                                    "If you look at ProductTable (lavender), you’ll see that the table header (containing the “Name” and “Price” labels) isn’t its own component. This is a matter of preference, and you could go either way. For this example, it is a part of ProductTable because it appears inside the ProductTable’s list. However, if this header grows to be complex (e.g., if you add sorting), you can move it into its own ProductTableHeader component.",
                                    "Now that you’ve identified the components in the mockup, arrange them into a hierarchy. Components that appear within another component in the mockup should appear as a child in the hierarchy:",
                                    "  1.FilterableProductTable\n\nSearchBar\nProductTable\n\nProductCategoryRow\nProductRow\n\n\n\n",
                                    "  2.SearchBar",
                                    "  3.ProductTable\n\nProductCategoryRow\nProductRow\n\n",
                                    "  4.ProductCategoryRow",
                                    "  5.ProductRow"
                                ]
                            },
                            {
                                "sub_header": "Step 2: Build a static version in React ",
                                "source": "react",
                                "url": "https://react.dev/learn/thinking-in-react/#step-2-build-a-static-version-in-react",
                                "content": [
                                    "Now that you have your component hierarchy, it’s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity… yet! It’s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.",
                                    "To build a static version of your app that renders your data model, you’ll want to build components that reuse other components and pass data using props. Props are a way of passing data from parent to child. (If you’re familiar with the concept of state, don’t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don’t need it.)",
                                    "You can either build “top down” by starting with building the components higher up in the hierarchy (like FilterableProductTable) or “bottom up” by working from components lower down (like ProductRow). In simpler examples, it’s usually easier to go top-down, and on larger projects, it’s easier to go bottom-up.",
                                    {
                                        "code_sandbox": "function ProductCategoryRow({ category }) {  return (    <tr>      <th colSpan=\"2\">        {category}      </th>    </tr>  );}function ProductRow({ product }) {  const name = product.stocked ? product.name :    <span style={{ color: 'red' }}>      {product.name}    </span>;  return (    <tr>      <td>{name}</td>      <td>{product.price}</td>    </tr>  );}function ProductTable({ products }) {  const rows = [];  let lastCategory = null;  products.forEach((product) => {    if (product.category !== lastCategory) {      rows.push(        <ProductCategoryRow          category={product.category}          key={product.category} />      );    }    rows.push(      <ProductRow        product={product}        key={product.name} />    );    lastCategory = product.category;  });  return (    <table>      <thead>        <tr>          <th>Name</th>          <th>Price</th>        </tr>      </thead>      <tbody>{rows}</tbody>    </table>  );}function SearchBar() {  return (    <form>      <input type=\"text\" placeholder=\"Search...\" />      <label>        <input type=\"checkbox\" />        {' '}        Only show products in stock      </label>    </form>  );}function FilterableProductTable({ products }) {  return (    <div>      <SearchBar />      <ProductTable products={products} />    </div>  );}const PRODUCTS = [  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}];export default function App() {  return <FilterableProductTable products={PRODUCTS} />;}"
                                    },
                                    "(If this code looks intimidating, go through the Quick Start first!)",
                                    "After building your components, you’ll have a library of reusable components that render your data model. Because this is a static app, the components will only return JSX. The component at the top of the hierarchy (FilterableProductTable) will take your data model as a prop. This is called one-way data flow because the data flows down from the top-level component to the ones at the bottom of the tree.",
                                    "PitfallAt this point, you should not be using any state values. That’s for the next step!"
                                ]
                            },
                            {
                                "sub_header": "Step 3: Find the minimal but complete representation of UI state ",
                                "source": "react",
                                "url": "https://react.dev/learn/thinking-in-react/#step-3-find-the-minimal-but-complete-representation-of-ui-state",
                                "content": [
                                    "To make the UI interactive, you need to let users change your underlying data model. You will use state for this.",
                                    "Think of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep it DRY (Don’t Repeat Yourself). Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you’re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don’t store the number of items as another state value—instead, read the length of your array.",
                                    "Now think of all of the pieces of data in this example application:",
                                    "  1.The original list of products",
                                    "  2.The search text the user has entered",
                                    "  3.The value of the checkbox",
                                    "  4.The filtered list of products",
                                    "Which of these are state? Identify the ones that are not:",
                                    "  1.Does it remain unchanged over time? If so, it isn’t state.",
                                    "  2.Is it passed in from a parent via props? If so, it isn’t state.",
                                    "  3.Can you compute it based on existing state or props in your component? If so, it definitely isn’t state!",
                                    "What’s left is probably state.",
                                    "Let’s go through them one by one again:",
                                    "  1.The original list of products is passed in as props, so it’s not state.",
                                    "  2.The search text seems to be state since it changes over time and can’t be computed from anything.",
                                    "  3.The value of the checkbox seems to be state since it changes over time and can’t be computed from anything.",
                                    "  4.The filtered list of products isn’t state because it can be computed by taking the original list of products and filtering it according to the search text and value of the checkbox.",
                                    "This means only the search text and the value of the checkbox are state! Nicely done!",
                                    "Deep DiveProps vs State Show DetailsThere are two types of “model” data in React: props and state. The two are very different:\nProps are like arguments you pass to a function. They let a parent component pass data to a child component and customize its appearance. For example, a Form can pass a color prop to a Button.\nState is like a component’s memory. It lets a component keep track of some information and change it in response to interactions. For example, a Button might keep track of isHovered state.\nProps and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), and pass it down to child components as their props. It’s okay if the difference still feels fuzzy on the first read. It takes a bit of practice for it to really stick!"
                                ]
                            },
                            {
                                "sub_header": "Step 4: Identify where your state should live ",
                                "source": "react",
                                "url": "https://react.dev/learn/thinking-in-react/#step-4-identify-where-your-state-should-live",
                                "content": [
                                    "After identifying your app’s minimal state data, you need to identify which component is responsible for changing this state, or owns the state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you’re new to this concept, but you can figure it out by following these steps!",
                                    "For each piece of state in your application:",
                                    "  1.Identify every component that renders something based on that state.",
                                    "  2.Find their closest common parent component—a component above them all in the hierarchy.",
                                    "  3.Decide where the state should live:\n\nOften, you can put the state directly into their common parent.\nYou can also put the state into some component above their common parent.\nIf you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\n\n",
                                    "  4.Often, you can put the state directly into their common parent.",
                                    "  5.You can also put the state into some component above their common parent.",
                                    "  6.If you can’t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.",
                                    "In the previous step, you found two pieces of state in this application: the search input text, and the value of the checkbox. In this example, they always appear together, so it makes sense to put them into the same place.",
                                    "Now let’s run through our strategy for them:",
                                    "  1.Identify components that use state:\n\nProductTable needs to filter the product list based on that state (search text and checkbox value).\nSearchBar needs to display that state (search text and checkbox value).\n\n",
                                    "  2.ProductTable needs to filter the product list based on that state (search text and checkbox value).",
                                    "  3.SearchBar needs to display that state (search text and checkbox value).",
                                    "  4.Find their common parent: The first parent component both components share is FilterableProductTable.",
                                    "  5.Decide where the state lives: We’ll keep the filter text and checked state values in FilterableProductTable.",
                                    "So the state values will live in FilterableProductTable.",
                                    "Add state to the component with the useState() Hook. Hooks are special functions that let you “hook into” React. Add two state variables at the top of FilterableProductTable and specify their initial state:",
                                    {
                                        "code_example": "function FilterableProductTable({ products }) {  const [filterText, setFilterText] = useState('');  const [inStockOnly, setInStockOnly] = useState(false);"
                                    },
                                    "Then, pass filterText and inStockOnly to ProductTable and SearchBar as props:",
                                    {
                                        "code_example": "<div>  <SearchBar     filterText={filterText}     inStockOnly={inStockOnly} />  <ProductTable     products={products}    filterText={filterText}    inStockOnly={inStockOnly} /></div>"
                                    },
                                    "You can start seeing how your application will behave. Edit the filterText initial value from useState('') to useState('fruit') in the sandbox code below. You’ll see both the search input text and the table update:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';function FilterableProductTable({ products }) {  const [filterText, setFilterText] = useState('');  const [inStockOnly, setInStockOnly] = useState(false);  return (    <div>      <SearchBar         filterText={filterText}         inStockOnly={inStockOnly} />      <ProductTable         products={products}        filterText={filterText}        inStockOnly={inStockOnly} />    </div>  );}function ProductCategoryRow({ category }) {  return (    <tr>      <th colSpan=\"2\">        {category}      </th>    </tr>  );}function ProductRow({ product }) {  const name = product.stocked ? product.name :    <span style={{ color: 'red' }}>      {product.name}    </span>;  return (    <tr>      <td>{name}</td>      <td>{product.price}</td>    </tr>  );}function ProductTable({ products, filterText, inStockOnly }) {  const rows = [];  let lastCategory = null;  products.forEach((product) => {    if (      product.name.toLowerCase().indexOf(        filterText.toLowerCase()      ) === -1    ) {      return;    }    if (inStockOnly && !product.stocked) {      return;    }    if (product.category !== lastCategory) {      rows.push(        <ProductCategoryRow          category={product.category}          key={product.category} />      );    }    rows.push(      <ProductRow        product={product}        key={product.name} />    );    lastCategory = product.category;  });  return (    <table>      <thead>        <tr>          <th>Name</th>          <th>Price</th>        </tr>      </thead>      <tbody>{rows}</tbody>    </table>  );}function SearchBar({ filterText, inStockOnly }) {  return (    <form>      <input         type=\"text\"         value={filterText}         placeholder=\"Search...\"/>      <label>        <input           type=\"checkbox\"           checked={inStockOnly} />        {' '}        Only show products in stock      </label>    </form>  );}const PRODUCTS = [  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}];export default function App() {  return <FilterableProductTable products={PRODUCTS} />;}"
                                    },
                                    "Notice that editing the form doesn’t work yet. There is a console error in the sandbox above explaining why:",
                                    "ConsoleYou provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field.",
                                    "In the sandbox above, ProductTable and SearchBar read the filterText and inStockOnly props to render the table, the input, and the checkbox. For example, here is how SearchBar populates the input value:",
                                    {
                                        "code_example": "function SearchBar({ filterText, inStockOnly }) {  return (    <form>      <input         type=\"text\"         value={filterText}         placeholder=\"Search...\"/>"
                                    },
                                    "However, you haven’t added any code to respond to the user actions like typing yet. This will be your final step."
                                ]
                            },
                            {
                                "sub_header": "Step 5: Add inverse data flow ",
                                "source": "react",
                                "url": "https://react.dev/learn/thinking-in-react/#step-5-add-inverse-data-flow",
                                "content": [
                                    "Currently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state in FilterableProductTable.",
                                    "React makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you’ll see that React ignores your input. This is intentional. By writing <input value={filterText} />, you’ve set the value prop of the input to always be equal to the filterText state passed in from FilterableProductTable. Since filterText state is never set, the input never changes.",
                                    "You want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned by FilterableProductTable, so only it can call setFilterText and setInStockOnly. To let SearchBar update the FilterableProductTable’s state, you need to pass these functions down to SearchBar:",
                                    {
                                        "code_example": "function FilterableProductTable({ products }) {  const [filterText, setFilterText] = useState('');  const [inStockOnly, setInStockOnly] = useState(false);  return (    <div>      <SearchBar         filterText={filterText}         inStockOnly={inStockOnly}        onFilterTextChange={setFilterText}        onInStockOnlyChange={setInStockOnly} />"
                                    },
                                    "Inside the SearchBar, you will add the onChange event handlers and set the parent state from them:",
                                    {
                                        "code_example": "function SearchBar({  filterText,  inStockOnly,  onFilterTextChange,  onInStockOnlyChange}) {  return (    <form>      <input        type=\"text\"        value={filterText}        placeholder=\"Search...\"        onChange={(e) => onFilterTextChange(e.target.value)}      />      <label>        <input          type=\"checkbox\"          checked={inStockOnly}          onChange={(e) => onInStockOnlyChange(e.target.checked)}"
                                    },
                                    "Now the application fully works!",
                                    {
                                        "code_sandbox": "import { useState } from 'react';function FilterableProductTable({ products }) {  const [filterText, setFilterText] = useState('');  const [inStockOnly, setInStockOnly] = useState(false);  return (    <div>      <SearchBar         filterText={filterText}         inStockOnly={inStockOnly}         onFilterTextChange={setFilterText}         onInStockOnlyChange={setInStockOnly} />      <ProductTable         products={products}         filterText={filterText}        inStockOnly={inStockOnly} />    </div>  );}function ProductCategoryRow({ category }) {  return (    <tr>      <th colSpan=\"2\">        {category}      </th>    </tr>  );}function ProductRow({ product }) {  const name = product.stocked ? product.name :    <span style={{ color: 'red' }}>      {product.name}    </span>;  return (    <tr>      <td>{name}</td>      <td>{product.price}</td>    </tr>  );}function ProductTable({ products, filterText, inStockOnly }) {  const rows = [];  let lastCategory = null;  products.forEach((product) => {    if (      product.name.toLowerCase().indexOf(        filterText.toLowerCase()      ) === -1    ) {      return;    }    if (inStockOnly && !product.stocked) {      return;    }    if (product.category !== lastCategory) {      rows.push(        <ProductCategoryRow          category={product.category}          key={product.category} />      );    }    rows.push(      <ProductRow        product={product}        key={product.name} />    );    lastCategory = product.category;  });  return (    <table>      <thead>        <tr>          <th>Name</th>          <th>Price</th>        </tr>      </thead>      <tbody>{rows}</tbody>    </table>  );}function SearchBar({  filterText,  inStockOnly,  onFilterTextChange,  onInStockOnlyChange}) {  return (    <form>      <input         type=\"text\"         value={filterText} placeholder=\"Search...\"         onChange={(e) => onFilterTextChange(e.target.value)} />      <label>        <input           type=\"checkbox\"           checked={inStockOnly}           onChange={(e) => onInStockOnlyChange(e.target.checked)} />        {' '}        Only show products in stock      </label>    </form>  );}const PRODUCTS = [  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Apple\"},  {category: \"Fruits\", price: \"$1\", stocked: true, name: \"Dragonfruit\"},  {category: \"Fruits\", price: \"$2\", stocked: false, name: \"Passionfruit\"},  {category: \"Vegetables\", price: \"$2\", stocked: true, name: \"Spinach\"},  {category: \"Vegetables\", price: \"$4\", stocked: false, name: \"Pumpkin\"},  {category: \"Vegetables\", price: \"$1\", stocked: true, name: \"Peas\"}];export default function App() {  return <FilterableProductTable products={PRODUCTS} />;}"
                                    },
                                    "You can learn all about handling events and updating state in the Adding Interactivity section."
                                ]
                            },
                            {
                                "sub_header": "Where to go from here ",
                                "source": "react",
                                "url": "https://react.dev/learn/thinking-in-react/#where-to-go-from-here",
                                "content": [
                                    "This was a very brief introduction to how to think about building components and applications with React. You can start a React project right now or dive deeper on all the syntax used in this tutorial."
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "Installation",
        "source": "react",
        "url": "https://react.dev/learn/installation",
        "sections": [
            "React has been designed from the start for gradual adoption. You can use as little or as much React as you need. Whether you want to get a taste of React, add some interactivity to an HTML page, or start a complex React-powered app, this section will help you get started.",
            "  1.How to start a new React project",
            "  2.How to add React to an existing project",
            "  3.How to set up your editor",
            "  4.How to install React Developer Tools",
            "In this chapter\nHow to start a new React project\nHow to add React to an existing project\nHow to set up your editor\nHow to install React Developer Tools\n",
            {
                "subHeader": "Next steps ",
                "url": "https://react.dev/learn/installation/#try-react-locally",
                "sections": [
                    {
                        "subHeader": "Next steps ",
                        "url": "https://react.dev/learn/installation/#try-react-locally",
                        "sections": [
                            "Head to the Quick Start guide for a tour of the most important React concepts you will encounter every day."
                        ]
                    }
                ]
            },
            {
                "subTopics": [
                    {
                        "headers": "Start a New React Project",
                        "url": "https://react.dev/learn/start-a-new-react-project",
                        "content": [
                            "If you want to build a new app or a new website fully with React, we recommend picking one of the React-powered frameworks popular in the community.",
                            "You can use React without a framework, however we’ve found that most apps and sites eventually build solutions to common problems such as code-splitting, routing, data fetching, and generating HTML. These problems are common to all UI libraries, not just React.",
                            "By starting with a framework, you can get started with React quickly, and avoid essentially building your own framework later.",
                            "Deep DiveCan I use React without a framework? Show DetailsYou can definitely use React without a framework—that’s how you’d use React for a part of your page. However, if you’re building a new app or a site fully with React, we recommend using a framework.Here’s why.Even if you don’t need routing or data fetching at first, you’ll likely want to add some libraries for them. As your JavaScript bundle grows with every new feature, you might have to figure out how to split code for every route individually. As your data fetching needs get more complex, you are likely to encounter server-client network waterfalls that make your app feel very slow. As your audience includes more users with poor network conditions and low-end devices, you might need to generate HTML from your components to display content early—either on the server, or during the build time. Changing your setup to run some of your code on the server or during the build can be very tricky.These problems are not React-specific. This is why Svelte has SvelteKit, Vue has Nuxt, and so on. To solve these problems on your own, you’ll need to integrate your bundler with your router and with your data fetching library. It’s not hard to get an initial setup working, but there are a lot of subtleties involved in making an app that loads quickly even as it grows over time. You’ll want to send down the minimal amount of app code but do so in a single client–server roundtrip, in parallel with any data required for the page. You’ll likely want the page to be interactive before your JavaScript code even runs, to support progressive enhancement. You may want to generate a folder of fully static HTML files for your marketing pages that can be hosted anywhere and still work with JavaScript disabled. Building these capabilities yourself takes real work.React frameworks on this page solve problems like these by default, with no extra work from your side. They let you start very lean and then scale your app with your needs. Each React framework has a community, so finding answers to questions and upgrading tooling is easier. Frameworks also give structure to your code, helping you and others retain context and skills between different projects. Conversely, with a custom setup it’s easier to get stuck on unsupported dependency versions, and you’ll essentially end up creating your own framework—albeit one with no community or upgrade path (and if it’s anything like the ones we’ve made in the past, more haphazardly designed).If your app has unusual constraints not served well by these frameworks, or you prefer to solve these problems yourself, you can roll your own custom setup with React. Grab react and react-dom from npm, set up your custom build process with a bundler like Vite or Parcel, and add other tools as you need them for routing, static generation or server-side rendering, and more.",
                            {
                                "sub_header": "Production-grade React frameworks ",
                                "source": "react",
                                "url": "https://react.dev/learn/start-a-new-react-project/#production-grade-react-frameworks",
                                "content": [
                                    "These frameworks support all the features you need to deploy and scale your app in production and are working towards supporting our full-stack architecture vision. All of the frameworks we recommend are open source with active communities for support, and can be deployed to your own server or a hosting provider. If you’re a framework author interested in being included on this list, please let us know.",
                                    {
                                        "sub_header": "Next.js ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/start-a-new-react-project/#nextjs-pages-router",
                                        "content": [
                                            "Next.js’ Pages Router is a full-stack React framework. It’s versatile and lets you create React apps of any size—from a mostly static blog to a complex dynamic application. To create a new Next.js project, run in your terminal:",
                                            " Terminal  Copynpx create-next-app@latest",
                                            "If you’re new to Next.js, check out the learn Next.js course.",
                                            "Next.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports a static export which doesn’t require a server."
                                        ]
                                    },
                                    {
                                        "sub_header": "Remix ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/start-a-new-react-project/#remix",
                                        "content": [
                                            "Remix is a full-stack React framework with nested routing. It lets you break your app into nested parts that can load data in parallel and refresh in response to the user actions. To create a new Remix project, run:",
                                            " Terminal  Copynpx create-remix",
                                            "If you’re new to Remix, check out the Remix blog tutorial (short) and app tutorial (long).",
                                            "Remix is maintained by Shopify. When you create a Remix project, you need to pick your deployment target. You can deploy a Remix app to any Node.js or serverless hosting by using or writing an adapter."
                                        ]
                                    },
                                    {
                                        "sub_header": "Gatsby ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/start-a-new-react-project/#gatsby",
                                        "content": [
                                            "Gatsby is a React framework for fast CMS-backed websites. Its rich plugin ecosystem and its GraphQL data layer simplify integrating content, APIs, and services into one website. To create a new Gatsby project, run:",
                                            " Terminal  Copynpx create-gatsby",
                                            "If you’re new to Gatsby, check out the Gatsby tutorial.",
                                            "Gatsby is maintained by Netlify. You can deploy a fully static Gatsby site to any static hosting. If you opt into using server-only features, make sure your hosting provider supports them for Gatsby."
                                        ]
                                    },
                                    {
                                        "sub_header": "Expo (for native apps) ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/start-a-new-react-project/#expo",
                                        "content": [
                                            "Expo is a React framework that lets you create universal Android, iOS, and web apps with truly native UIs. It provides an SDK for React Native that makes the native parts easier to use. To create a new Expo project, run:",
                                            " Terminal  Copynpx create-expo-app",
                                            "If you’re new to Expo, check out the Expo tutorial.",
                                            "Expo is maintained by Expo (the company). Building apps with Expo is free, and you can submit them to the Google and Apple app stores without restrictions. Expo additionally provides opt-in paid cloud services."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Bleeding-edge React frameworks ",
                                "source": "react",
                                "url": "https://react.dev/learn/start-a-new-react-project/#bleeding-edge-react-frameworks",
                                "content": [
                                    "As we’ve explored how to continue improving React, we realized that integrating React more closely with frameworks (specifically, with routing, bundling, and server technologies) is our biggest opportunity to help React users build better apps. The Next.js team has agreed to collaborate with us in researching, developing, integrating, and testing framework-agnostic bleeding-edge React features like React Server Components.",
                                    "These features are getting closer to being production-ready every day, and we’ve been in talks with other bundler and framework developers about integrating them. Our hope is that in a year or two, all frameworks listed on this page will have full support for these features. (If you’re a framework author interested in partnering with us to experiment with these features, please let us know!)",
                                    {
                                        "sub_header": "Next.js (App Router) ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/start-a-new-react-project/#nextjs-app-router",
                                        "content": [
                                            "Next.js’s App Router is a redesign of the Next.js APIs aiming to fulfill the React team’s full-stack architecture vision. It lets you fetch data in asynchronous components that run on the server or even during the build.",
                                            "Next.js is maintained by Vercel. You can deploy a Next.js app to any Node.js or serverless hosting, or to your own server. Next.js also supports static export which doesn’t require a server.",
                                            "Deep DiveWhich features make up the React team’s full-stack architecture vision? Show DetailsNext.js’s App Router bundler fully implements the official React Server Components specification. This lets you mix build-time, server-only, and interactive components in a single React tree.For example, you can write a server-only React component as an async function that reads from a database or from a file. Then you can pass data down from it to your interactive components:// This component runs *only* on the server (or during the build).async function Talks({ confId }) {  // 1. You're on the server, so you can talk to your data layer. API endpoint not required.  const talks = await db.Talks.findAll({ confId });  // 2. Add any amount of rendering logic. It won't make your JavaScript bundle larger.  const videos = talks.map(talk => talk.video);  // 3. Pass the data down to the components that will run in the browser.  return <SearchableVideoList videos={videos} />;}Next.js’s App Router also integrates data fetching with Suspense. This lets you specify a loading state (like a skeleton placeholder) for different parts of your user interface directly in your React tree:<Suspense fallback={<TalksLoading />}>  <Talks confId={conf.id} /></Suspense>Server Components and Suspense are React features rather than Next.js features. However, adopting them at the framework level requires buy-in and non-trivial implementation work. At the moment, the Next.js App Router is the most complete implementation. The React team is working with bundler developers to make these features easier to implement in the next generation of frameworks."
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Add React to an Existing Project",
                        "url": "https://react.dev/learn/add-react-to-an-existing-project",
                        "content": [
                            "If you want to add some interactivity to your existing project, you don’t have to rewrite it in React. Add React to your existing stack, and render interactive React components anywhere.",
                            "NoteYou need to install Node.js for local development. Although you can try React online or with a simple HTML page, realistically most JavaScript tooling you’ll want to use for development requires Node.js.",
                            {
                                "sub_header": "Using React for an entire subroute of your existing website ",
                                "source": "react",
                                "url": "https://react.dev/learn/add-react-to-an-existing-project/#using-react-for-an-entire-subroute-of-your-existing-website",
                                "content": [
                                    "Let’s say you have an existing web app at example.com built with another server technology (like Rails), and you want to implement all routes starting with example.com/some-app/ fully with React.",
                                    "Here’s how we recommend to set it up:",
                                    "  1.Build the React part of your app using one of the React-based frameworks.",
                                    "  2.Specify /some-app as the base path in your framework’s configuration (here’s how: Next.js, Gatsby).",
                                    "  3.Configure your server or a proxy so that all requests under /some-app/ are handled by your React app.",
                                    "This ensures the React part of your app can benefit from the best practices baked into those frameworks.",
                                    "Many React-based frameworks are full-stack and let your React app take advantage of the server. However, you can use the same approach even if you can’t or don’t want to run JavaScript on the server. In that case, serve the HTML/CSS/JS export (next export output for Next.js, default for Gatsby) at /some-app/ instead."
                                ]
                            },
                            {
                                "sub_header": "Using React for a part of your existing page ",
                                "source": "react",
                                "url": "https://react.dev/learn/add-react-to-an-existing-project/#using-react-for-a-part-of-your-existing-page",
                                "content": [
                                    "Let’s say you have an existing page built with another technology (either a server one like Rails, or a client one like Backbone), and you want to render interactive React components somewhere on that page. That’s a common way to integrate React—in fact, it’s how most React usage looked at Meta for many years!",
                                    "You can do this in two steps:",
                                    "  1.Set up a JavaScript environment that lets you use the JSX syntax, split your code into modules with the import / export syntax, and use packages (for example, React) from the npm package registry.",
                                    "  2.Render your React components where you want to see them on the page.",
                                    "The exact approach depends on your existing page setup, so let’s walk through some details.",
                                    {
                                        "sub_header": "Step 1: Set up a modular JavaScript environment ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/add-react-to-an-existing-project/#step-1-set-up-a-modular-javascript-environment",
                                        "content": [
                                            "A modular JavaScript environment lets you write your React components in individual files, as opposed to writing all of your code in a single file. It also lets you use all the wonderful packages published by other developers on the npm registry—including React itself! How you do this depends on your existing setup:",
                                            "  1.\nIf your app is already split into files that use import statements, try to use the setup you already have. Check whether writing <div /> in your JS code causes a syntax error. If it causes a syntax error, you might need to transform your JavaScript code with Babel, and enable the Babel React preset to use JSX.\n",
                                            "  2.\nIf your app doesn’t have an existing setup for compiling JavaScript modules, set it up with Vite. The Vite community maintains many integrations with backend frameworks, including Rails, Django, and Laravel. If your backend framework is not listed, follow this guide to manually integrate Vite builds with your backend.\n",
                                            "To check whether your setup works, run this command in your project folder:",
                                            " Terminal  Copynpm install react react-dom",
                                            "Then add these lines of code at the top of your main JavaScript file (it might be called index.js or main.js):",
                                            {
                                                "code_sandbox": "import { createRoot } from 'react-dom/client';// Clear the existing HTML contentdocument.body.innerHTML = '<div id=\"app\"></div>';// Render your React component insteadconst root = createRoot(document.getElementById('app'));root.render(<h1>Hello, world</h1>);"
                                            },
                                            "If the entire content of your page was replaced by a “Hello, world!”, everything worked! Keep reading.",
                                            "NoteIntegrating a modular JavaScript environment into an existing project for the first time can feel intimidating, but it’s worth it! If you get stuck, try our community resources or the Vite Chat."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Render React components anywhere on the page ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/add-react-to-an-existing-project/#step-2-render-react-components-anywhere-on-the-page",
                                        "content": [
                                            "In the previous step, you put this code at the top of your main file:",
                                            {
                                                "code_example": "import { createRoot } from 'react-dom/client';// Clear the existing HTML contentdocument.body.innerHTML = '<div id=\"app\"></div>';// Render your React component insteadconst root = createRoot(document.getElementById('app'));root.render(<h1>Hello, world</h1>);"
                                            },
                                            "Of course, you don’t actually want to clear the existing HTML content!",
                                            "Delete this code.",
                                            "Instead, you probably want to render your React components in specific places in your HTML. Open your HTML page (or the server templates that generate it) and add a unique id attribute to any tag, for example:",
                                            {
                                                "code_example": "<!-- ... somewhere in your html ... --><nav id=\"navigation\"></nav><!-- ... more html ... -->"
                                            },
                                            "This lets you find that HTML element with document.getElementById and pass it to createRoot so that you can render your own React component inside:",
                                            {
                                                "code_sandbox": "import { createRoot } from 'react-dom/client';function NavigationBar() {  // TODO: Actually implement a navigation bar  return <h1>Hello from React!</h1>;}const domNode = document.getElementById('navigation');const root = createRoot(domNode);root.render(<NavigationBar />);"
                                            },
                                            "Notice how the original HTML content from index.html is preserved, but your own NavigationBar React component now appears inside the <nav id=\"navigation\"> from your HTML. Read the createRoot usage documentation to learn more about rendering React components inside an existing HTML page.",
                                            "When you adopt React in an existing project, it’s common to start with small interactive components (like buttons), and then gradually keep “moving upwards” until eventually your entire page is built with React. If you ever reach that point, we recommend migrating to a React framework right after to get the most out of React."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Using React Native in an existing native mobile app ",
                                "source": "react",
                                "url": "https://react.dev/learn/add-react-to-an-existing-project/#using-react-native-in-an-existing-native-mobile-app",
                                "content": [
                                    "React Native can also be integrated into existing native apps incrementally. If you have an existing native app for Android (Java or Kotlin) or iOS (Objective-C or Swift), follow this guide to add a React Native screen to it."
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Editor Setup",
                        "url": "https://react.dev/learn/editor-setup",
                        "content": [
                            "A properly configured editor can make code clearer to read and faster to write. It can even help you catch bugs as you write them! If this is your first time setting up an editor or you’re looking to tune up your current editor, we have a few recommendations.",
                            "  1.What the most popular editors are",
                            "  2.How to format your code automatically",
                            "You will learn\nWhat the most popular editors are\nHow to format your code automatically\n",
                            {
                                "sub_header": "Your editor ",
                                "source": "react",
                                "url": "https://react.dev/learn/editor-setup/#your-editor",
                                "content": [
                                    "VS Code is one of the most popular editors in use today. It has a large marketplace of extensions and integrates well with popular services like GitHub. Most of the features listed below can be added to VS Code as extensions as well, making it highly configurable!",
                                    "Other popular text editors used in the React community include:",
                                    "  1.WebStorm is an integrated development environment designed specifically for JavaScript.",
                                    "  2.Sublime Text has support for JSX and TypeScript, syntax highlighting and autocomplete built in.",
                                    "  3.Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as “vi” with most UNIX systems and with Apple OS X."
                                ]
                            },
                            {
                                "sub_header": "Recommended text editor features ",
                                "source": "react",
                                "url": "https://react.dev/learn/editor-setup/#recommended-text-editor-features",
                                "content": [
                                    "Some editors come with these features built in, but others might require adding an extension. Check to see what support your editor of choice provides to be sure!",
                                    {
                                        "sub_header": "Linting ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/editor-setup/#linting",
                                        "content": [
                                            "Code linters find problems in your code as you write, helping you fix them early. ESLint is a popular, open source linter for JavaScript.",
                                            "  1.Install ESLint with the recommended configuration for React (be sure you have Node installed!)",
                                            "  2.Integrate ESLint in VSCode with the official extension",
                                            "Make sure that you’ve enabled all the eslint-plugin-react-hooks rules for your project. They are essential and catch the most severe bugs early. The recommended eslint-config-react-app preset already includes them."
                                        ]
                                    },
                                    {
                                        "sub_header": "Formatting ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/editor-setup/#formatting",
                                        "content": [
                                            "The last thing you want to do when sharing your code with another contributor is get into a discussion about tabs vs spaces! Fortunately, Prettier will clean up your code by reformatting it to conform to preset, configurable rules. Run Prettier, and all your tabs will be converted to spaces—and your indentation, quotes, etc will also all be changed to conform to the configuration. In the ideal setup, Prettier will run when you save your file, quickly making these edits for you.",
                                            "You can install the Prettier extension in VSCode by following these steps:",
                                            "  1.Launch VS Code",
                                            "  2.Use Quick Open (press Ctrl/Cmd+P)",
                                            "  3.Paste in ext install esbenp.prettier-vscode",
                                            "  4.Press Enter",
                                            {
                                                "sub_header": "Formatting on save ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/editor-setup/#formatting-on-save",
                                                "content": [
                                                    "Ideally, you should format your code on every save. VS Code has settings for this!",
                                                    "  1.In VS Code, press CTRL/CMD + SHIFT + P.",
                                                    "  2.Type “settings”",
                                                    "  3.Hit Enter",
                                                    "  4.In the search bar, type “format on save”",
                                                    "  5.Be sure the “format on save” option is ticked!",
                                                    "\nIf your ESLint preset has formatting rules, they may conflict with Prettier. We recommend disabling all formatting rules in your ESLint preset using eslint-config-prettier so that ESLint is only used for catching logical mistakes. If you want to enforce that files are formatted before a pull request is merged, use prettier --check for your continuous integration.\n"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Using TypeScript",
                        "url": "https://react.dev/learn/typescript",
                        "content": [
                            {
                                "sub_header": "Installation ",
                                "source": "react",
                                "url": "https://react.dev/learn/typescript/#installation",
                                "content": [
                                    "All production-grade React frameworks offer support for using TypeScript. Follow the framework specific guide for installation:",
                                    "  1.Next.js",
                                    "  2.Remix",
                                    "  3.Gatsby",
                                    "  4.Expo",
                                    {
                                        "sub_header": "Adding TypeScript to an existing React project ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#adding-typescript-to-an-existing-react-project",
                                        "content": [
                                            "To install the latest version of React’s type definitions:",
                                            " Terminal  Copynpm install @types/react @types/react-dom",
                                            "The following compiler options need to be set in your tsconfig.json:",
                                            "  1.dom must be included in lib (Note: If no lib option is specified, dom is included by default).",
                                            "  2.jsx must be set to one of the valid options. preserve should suffice for most applications.\nIf you’re publishing a library, consult the jsx documentation on what value to choose."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "TypeScript with React Components ",
                                "source": "react",
                                "url": "https://react.dev/learn/typescript/#typescript-with-react-components",
                                "content": [
                                    "Writing TypeScript with React is very similar to writing JavaScript with React. The key difference when working with a component is that you can provide types for your component’s props. These types can be used for correctness checking and providing inline documentation in editors.",
                                    "Taking the MyButton component from the Quick Start guide, we can add a type describing the title for the button:",
                                    {
                                        "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundfunction MyButton({ title }: { title: string }) {  return (    <button>{title}</button>  );}export default function MyApp() {  return (    <div>      <h1>Welcome to my app</h1>      <MyButton title=\"I'm a button\" />    </div>  );}"
                                    },
                                    "NoteThese sandboxes can handle TypeScript code, but they do not run the type-checker. This means you can amend the TypeScript sandboxes to learn, but you won’t get any type errors or warnings. To get type-checking, you can use the TypeScript Playground or use a more fully-featured online sandbox.",
                                    "This inline syntax is the simplest way to provide types for a component, though once you start to have a few fields to describe it can become unwieldy. Instead, you can use an interface or type to describe the component’s props:",
                                    {
                                        "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundinterface MyButtonProps {  /** The text to display inside the button */  title: string;  /** Whether the button can be interacted with */  disabled: boolean;}function MyButton({ title, disabled }: MyButtonProps) {  return (    <button disabled={disabled}>{title}</button>  );}export default function MyApp() {  return (    <div>      <h1>Welcome to my app</h1>      <MyButton title=\"I'm a disabled button\" disabled={true}/>    </div>  );}"
                                    },
                                    "The type describing your component’s props can be as simple or as complex as you need, though they should be an object type described with either a type or interface. You can learn about how TypeScript describes objects in Object Types but you may also be interested in using Union Types to describe a prop that can be one of a few different types and the Creating Types from Types guide for more advanced use cases."
                                ]
                            },
                            {
                                "sub_header": "Example Hooks ",
                                "source": "react",
                                "url": "https://react.dev/learn/typescript/#example-hooks",
                                "content": [
                                    "The type definitions from @types/react include types for the built-in Hooks, so you can use them in your components without any additional setup. They are built to take into account the code you write in your component, so you will get inferred types a lot of the time and ideally do not need to handle the minutiae of providing the types.",
                                    "However, we can look at a few examples of how to provide types for Hooks.",
                                    {
                                        "sub_header": "useState ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#typing-usestate",
                                        "content": [
                                            "The useState Hook will re-use the value passed in as the initial state to determine what the type of the value should be. For example:",
                                            {
                                                "code_example": "// Infer the type as \"boolean\"const [enabled, setEnabled] = useState(false);"
                                            },
                                            "This will assign the type of boolean to enabled, and setEnabled will be a function accepting either a boolean argument, or a function that returns a boolean. If you want to explicitly provide a type for the state, you can do so by providing a type argument to the useState call:",
                                            {
                                                "code_example": "// Explicitly set the type to \"boolean\"const [enabled, setEnabled] = useState<boolean>(false);"
                                            },
                                            "This isn’t very useful in this case, but a common case where you may want to provide a type is when you have a union type. For example, status here can be one of a few different strings:",
                                            {
                                                "code_example": "type Status = \"idle\" | \"loading\" | \"success\" | \"error\";const [status, setStatus] = useState<Status>(\"idle\");"
                                            },
                                            "Or, as recommended in Principles for structuring state, you can group related state as an object and describe the different possibilities via object types:",
                                            {
                                                "code_example": "type RequestState =  | { status: 'idle' }  | { status: 'loading' }  | { status: 'success', data: any }  | { status: 'error', error: Error };const [requestState, setRequestState] = useState<RequestState>({ status: 'idle' });"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "useReducer ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#typing-usereducer",
                                        "content": [
                                            "The useReducer Hook is a more complex Hook that takes a reducer function and an initial state. The types for the reducer function are inferred from the initial state. You can optionally provide a type argument to the useReducer call to provide a type for the state, but it is often better to set the type on the initial state instead:",
                                            {
                                                "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundimport {useReducer} from 'react';interface State {   count: number };type CounterAction =  | { type: \"reset\" }  | { type: \"setCount\"; value: State[\"count\"] }const initialState: State = { count: 0 };function stateReducer(state: State, action: CounterAction): State {  switch (action.type) {    case \"reset\":      return initialState;    case \"setCount\":      return { ...state, count: action.value };    default:      throw new Error(\"Unknown action\");  }}export default function App() {  const [state, dispatch] = useReducer(stateReducer, initialState);  const addFive = () => dispatch({ type: \"setCount\", value: state.count + 5 });  const reset = () => dispatch({ type: \"reset\" });  return (    <div>      <h1>Welcome to my counter</h1>      <p>Count: {state.count}</p>      <button onClick={addFive}>Add 5</button>      <button onClick={reset}>Reset</button>    </div>  );}"
                                            },
                                            "We are using TypeScript in a few key places:",
                                            "  1.interface State describes the shape of the reducer’s state.",
                                            "  2.type CounterAction describes the different actions which can be dispatched to the reducer.",
                                            "  3.const initialState: State provides a type for the initial state, and also the type which is used by useReducer by default.",
                                            "  4.stateReducer(state: State, action: CounterAction): State sets the types for the reducer function’s arguments and return value.",
                                            "A more explicit alternative to setting the type on initialState is to provide a type argument to useReducer:",
                                            {
                                                "code_example": "import { stateReducer, State } from './your-reducer-implementation';const initialState = { count: 0 };export default function App() {  const [state, dispatch] = useReducer<State>(stateReducer, initialState);}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "useContext ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#typing-usecontext",
                                        "content": [
                                            "The useContext Hook is a technique for passing data down the component tree without having to pass props through components. It is used by creating a provider component and often by creating a Hook to consume the value in a child component.",
                                            "The type of the value provided by the context is inferred from the value passed to the createContext call:",
                                            {
                                                "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundimport { createContext, useContext, useState } from 'react';type Theme = \"light\" | \"dark\" | \"system\";const ThemeContext = createContext<Theme>(\"system\");const useGetTheme = () => useContext(ThemeContext);export default function MyApp() {  const [theme, setTheme] = useState<Theme>('light');  return (    <ThemeContext.Provider value={theme}>      <MyComponent />    </ThemeContext.Provider>  )}function MyComponent() {  const theme = useGetTheme();  return (    <div>      <p>Current theme: {theme}</p>    </div>  )}"
                                            },
                                            "This technique works when you have a default value which makes sense - but there are occasionally cases when you do not, and in those cases null can feel reasonable as a default value. However, to allow the type-system to understand your code, you need to explicitly set ContextShape | null on the createContext.",
                                            "This causes the issue that you need to eliminate the | null in the type for context consumers. Our recommendation is to have the Hook do a runtime check for it’s existence and throw an error when not present:",
                                            {
                                                "code_example": "import { createContext, useContext, useState, useMemo } from 'react';// This is a simpler example, but you can imagine a more complex object heretype ComplexObject = {  kind: string};// The context is created with `| null` in the type, to accurately reflect the default value.const Context = createContext<ComplexObject | null>(null);// The `| null` will be removed via the check in the Hook.const useGetComplexObject = () => {  const object = useContext(Context);  if (!object) { throw new Error(\"useGetComplexObject must be used within a Provider\") }  return object;}export default function MyApp() {  const object = useMemo(() => ({ kind: \"complex\" }), []);  return (    <Context.Provider value={object}>      <MyComponent />    </Context.Provider>  )}function MyComponent() {  const object = useGetComplexObject();  return (    <div>      <p>Current object: {object.kind}</p>    </div>  )}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "useMemo ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#typing-usememo",
                                        "content": [
                                            "The useMemo Hooks will create/re-access a memorized value from a function call, re-running the function only when dependencies passed as the 2nd parameter are changed. The result of calling the Hook is inferred from the return value from the function in the first parameter. You can be more explicit by providing a type argument to the Hook.",
                                            {
                                                "code_example": "// The type of visibleTodos is inferred from the return value of filterTodosconst visibleTodos = useMemo(() => filterTodos(todos, tab), [todos, tab]);"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "useCallback ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#typing-usecallback",
                                        "content": [
                                            "The useCallback provide a stable reference to a function as long as the dependencies passed into the second parameter are the same. Like useMemo, the function’s type is inferred from the return value of the function in the first parameter, and you can be more explicit by providing a type argument to the Hook.",
                                            {
                                                "code_example": "const handleClick = useCallback(() => {  // ...}, [todos]);"
                                            },
                                            "When working in TypeScript strict mode useCallback requires adding types for the parameters in your callback. This is because the type of the callback is inferred from the return value of the function, and without parameters the type cannot be fully understood.",
                                            "Depending on your code-style preferences, you could use the *EventHandler functions from the React types to provide the type for the event handler at the same time as defining the callback:",
                                            {
                                                "code_example": "import { useState, useCallback } from 'react';export default function Form() {  const [value, setValue] = useState(\"Change me\");  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>((event) => {    setValue(event.currentTarget.value);  }, [setValue])    return (    <>      <input value={value} onChange={handleChange} />      <p>Value: {value}</p>    </>  );}"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Useful Types ",
                                "source": "react",
                                "url": "https://react.dev/learn/typescript/#useful-types",
                                "content": [
                                    "There is quite an expansive set of types which come from the @types/react package, it is worth a read when you feel comfortable with how React and TypeScript interact. You can find them in React’s folder in DefinitelyTyped. We will cover a few of the more common types here.",
                                    {
                                        "sub_header": "DOM Events ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#typing-dom-events",
                                        "content": [
                                            "When working with DOM events in React, the type of the event can often be inferred from the event handler. However, when you want to extract a function to be passed to an event handler, you will need to explicitly set the type of the event.",
                                            {
                                                "code_sandbox": "App.tsxApp.tsxTypeScript Playgroundimport { useState } from 'react';export default function Form() {  const [value, setValue] = useState(\"Change me\");  function handleChange(event: React.ChangeEvent<HTMLInputElement>) {    setValue(event.currentTarget.value);  }  return (    <>      <input value={value} onChange={handleChange} />      <p>Value: {value}</p>    </>  );}"
                                            },
                                            "There are many types of events provided in the React types - the full list can be found here which is based on the most popular events from the DOM.",
                                            "When determining the type you are looking for you can first look at the hover information for the event handler you are using, which will show the type of the event.",
                                            "If you need to use an event that is not included in this list, you can use the React.SyntheticEvent type, which is the base type for all events."
                                        ]
                                    },
                                    {
                                        "sub_header": "Children ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#typing-children",
                                        "content": [
                                            "There are two common paths to describing the children of a component. The first is to use the React.ReactNode type, which is a union of all the possible types that can be passed as children in JSX:",
                                            {
                                                "code_example": "interface ModalRendererProps {  title: string;  children: React.ReactNode;}"
                                            },
                                            "This is a very broad definition of children. The second is to use the React.ReactElement type, which is only JSX elements and not JavaScript primitives like strings or numbers:",
                                            {
                                                "code_example": "interface ModalRendererProps {  title: string;  children: React.ReactElement;}"
                                            },
                                            "Note, that you cannot use TypeScript to describe that the children are a certain type of JSX elements, so you cannot use the type-system to describe a component which only accepts <li> children.",
                                            "You can see an example of both React.ReactNode and React.ReactElement with the type-checker in this TypeScript playground."
                                        ]
                                    },
                                    {
                                        "sub_header": "Style Props ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/typescript/#typing-style-props",
                                        "content": [
                                            "When using inline styles in React, you can use React.CSSProperties to describe the object passed to the style prop. This type is a union of all the possible CSS properties, and is a good way to ensure you are passing valid CSS properties to the style prop, and to get auto-complete in your editor.",
                                            {
                                                "code_example": "interface MyComponentProps {  style: React.CSSProperties;}"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Further learning ",
                                "source": "react",
                                "url": "https://react.dev/learn/typescript/#further-learning",
                                "content": [
                                    "This guide has covered the basics of using TypeScript with React, but there is a lot more to learn.\nIndividual API pages on the docs may contain more in-depth documentation on how to use them with TypeScript.",
                                    "We recommend the following resources:",
                                    "  1.\nThe TypeScript handbook is the official documentation for TypeScript, and covers most key language features.\n",
                                    "  2.\nThe TypeScript release notes cover new features in depth.\n",
                                    "  3.\nReact TypeScript Cheatsheet is a community-maintained cheatsheet for using TypeScript with React, covering a lot of useful edge cases and providing more breadth than this document.\n",
                                    "  4.\nTypeScript Community Discord is a great place to ask questions and get help with TypeScript and React issues.\n"
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "React Developer Tools",
                        "url": "https://react.dev/learn/react-developer-tools",
                        "content": [
                            "Use React Developer Tools to inspect React components, edit props and state, and identify performance problems.",
                            "  1.How to install React Developer Tools",
                            "You will learn\nHow to install React Developer Tools\n",
                            {
                                "sub_header": "Browser extension ",
                                "source": "react",
                                "url": "https://react.dev/learn/react-developer-tools/#browser-extension",
                                "content": [
                                    "The easiest way to debug websites built with React is to install the React Developer Tools browser extension. It is available for several popular browsers:",
                                    "  1.Install for Chrome",
                                    "  2.Install for Firefox",
                                    "  3.Install for Edge",
                                    "Now, if you visit a website built with React, you will see the Components and Profiler panels.",
                                    {
                                        "sub_header": "Safari and other browsers ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-developer-tools/#safari-and-other-browsers",
                                        "content": [
                                            "For other browsers (for example, Safari), install the react-devtools npm package:",
                                            {
                                                "code_example": "# Yarnyarn global add react-devtools# Npmnpm install -g react-devtools"
                                            },
                                            "Next open the developer tools from the terminal:",
                                            {
                                                "code_example": "react-devtools"
                                            },
                                            "Then connect your website by adding the following <script> tag to the beginning of your website’s <head>:",
                                            {
                                                "code_example": "<html>  <head>    <script src=\"http://localhost:8097\"></script>"
                                            },
                                            "Reload your website in the browser now to view it in developer tools."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Mobile (React Native) ",
                                "source": "react",
                                "url": "https://react.dev/learn/react-developer-tools/#mobile-react-native",
                                "content": [
                                    "React Developer Tools can be used to inspect apps built with React Native as well.",
                                    "The easiest way to use React Developer Tools is to install it globally:",
                                    {
                                        "code_example": "# Yarnyarn global add react-devtools# Npmnpm install -g react-devtools"
                                    },
                                    "Next open the developer tools from the terminal.",
                                    {
                                        "code_example": "react-devtools"
                                    },
                                    "It should connect to any local React Native app that’s running.",
                                    "\nTry reloading the app if developer tools doesn’t connect after a few seconds.\n",
                                    "Learn more about debugging React Native."
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "React Compiler",
                        "url": "https://react.dev/learn/react-compiler",
                        "content": [
                            "This page will give you an introduction to React Compiler and how to try it out successfully.",
                            "Under ConstructionThese docs are still a work in progress. More documentation is available in the React Compiler Working Group repo, and will be upstreamed into these docs when they are more stable.",
                            "  1.Getting started with the compiler",
                            "  2.Installing the compiler and ESLint plugin",
                            "  3.Troubleshooting",
                            "You will learn\nGetting started with the compiler\nInstalling the compiler and ESLint plugin\nTroubleshooting\n",
                            {
                                "code_example": "@beta"
                            },
                            "React Compiler is a new compiler that we’ve open sourced to get early feedback from the community. It is a build-time only tool that automatically optimizes your React app. It works with plain JavaScript, and understands the Rules of React, so you don’t need to rewrite any code to use it.",
                            "The compiler also includes an ESLint plugin that surfaces the analysis from the compiler right in your editor. We strongly recommend everyone use the linter today. The linter does not require that you have the compiler installed, so you can use it even if you are not ready to try out the compiler.",
                            "The compiler is currently released as beta, and is available to try out on React 17+ apps and libraries. To install the Beta:",
                            " Terminal  Copynpm install -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta",
                            "Or, if you’re using Yarn:",
                            " Terminal  Copyyarn add -D babel-plugin-react-compiler@beta eslint-plugin-react-compiler@beta",
                            "If you are not using React 19 yet, please see the section below for further instructions.",
                            {
                                "sub_header": "What does the compiler do? ",
                                "source": "react",
                                "url": "https://react.dev/learn/react-compiler/#what-does-the-compiler-do",
                                "content": [
                                    "In order to optimize applications, React Compiler automatically memoizes your code. You may be familiar today with memoization through APIs such as useMemo, useCallback, and React.memo. With these APIs you can tell React that certain parts of your application don’t need to recompute if their inputs haven’t changed, reducing work on updates. While powerful, it’s easy to forget to apply memoization or apply them incorrectly. This can lead to inefficient updates as React has to check parts of your UI that don’t have any meaningful changes.",
                                    "The compiler uses its knowledge of JavaScript and React’s rules to automatically memoize values or groups of values within your components and hooks. If it detects breakages of the rules, it will automatically skip over just those components or hooks, and continue safely compiling other code.",
                                    "NoteReact Compiler can statically detect when Rules of React are broken, and safely opt-out of optimizing just the affected components or hooks. It is not necessary for the compiler to optimize 100% of your codebase.",
                                    "If your codebase is already very well-memoized, you might not expect to see major performance improvements with the compiler. However, in practice memoizing the correct dependencies that cause performance issues is tricky to get right by hand.",
                                    "Deep DiveWhat kind of memoization does React Compiler add? Show DetailsThe initial release of React Compiler is primarily focused on improving update performance (re-rendering existing components), so it focuses on these two use cases:\nSkipping cascading re-rendering of components\n\nRe-rendering <Parent /> causes many components in its component tree to re-render, even though only <Parent /> has changed\n\n\nSkipping expensive calculations from outside of React\n\nFor example, calling expensivelyProcessAReallyLargeArrayOfObjects() inside of your component or hook that needs that data\n\n\nOptimizing Re-renders React lets you express your UI as a function of their current state (more concretely: their props, state, and context). In its current implementation, when a component’s state changes, React will re-render that component and all of its children — unless you have applied some form of manual memoization with useMemo(), useCallback(), or React.memo(). For example, in the following example, <MessageButton> will re-render whenever <FriendList>’s state changes:function FriendList({ friends }) {  const onlineCount = useFriendOnlineCount();  if (friends.length === 0) {    return <NoFriends />;  }  return (    <div>      <span>{onlineCount} online</span>      {friends.map((friend) => (        <FriendListCard key={friend.id} friend={friend} />      ))}      <MessageButton />    </div>  );}See this example in the React Compiler PlaygroundReact Compiler automatically applies the equivalent of manual memoization, ensuring that only the relevant parts of an app re-render as state changes, which is sometimes referred to as “fine-grained reactivity”. In the above example, React Compiler determines that the return value of <FriendListCard /> can be reused even as friends changes, and can avoid recreating this JSX and avoid re-rendering <MessageButton> as the count changes.Expensive calculations also get memoized The compiler can also automatically memoize for expensive calculations used during rendering:// **Not** memoized by React Compiler, since this is not a component or hookfunction expensivelyProcessAReallyLargeArrayOfObjects() { /* ... */ }// Memoized by React Compiler since this is a componentfunction TableContainer({ items }) {  // This function call would be memoized:  const data = expensivelyProcessAReallyLargeArrayOfObjects(items);  // ...}See this example in the React Compiler PlaygroundHowever, if expensivelyProcessAReallyLargeArrayOfObjects is truly an expensive function, you may want to consider implementing its own memoization outside of React, because:\nReact Compiler only memoizes React components and hooks, not every function\nReact Compiler’s memoization is not shared across multiple components or hooks\nSo if expensivelyProcessAReallyLargeArrayOfObjects was used in many different components, even if the same exact items were passed down, that expensive calculation would be run repeatedly. We recommend profiling first to see if it really is that expensive before making code more complicated.",
                                    {
                                        "sub_header": "Should I try out the compiler? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#should-i-try-out-the-compiler",
                                        "content": [
                                            "Please note that the compiler is still in Beta and has many rough edges. While it has been used in production at companies like Meta, rolling out the compiler to production for your app will depend on the health of your codebase and how well you’ve followed the Rules of React.",
                                            "You don’t have to rush into using the compiler now. It’s okay to wait until it reaches a stable release before adopting it. However, we do appreciate trying it out in small experiments in your apps so that you can provide feedback to us to help make the compiler better."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Getting Started ",
                                "source": "react",
                                "url": "https://react.dev/learn/react-compiler/#getting-started",
                                "content": [
                                    "In addition to these docs, we recommend checking the React Compiler Working Group for additional information and discussion about the compiler.",
                                    {
                                        "sub_header": "Installing eslint-plugin-react-compiler ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#installing-eslint-plugin-react-compiler",
                                        "content": [
                                            "React Compiler also powers an ESLint plugin. The ESLint plugin can be used independently of the compiler, meaning you can use the ESLint plugin even if you don’t use the compiler.",
                                            " Terminal  Copynpm install -D eslint-plugin-react-compiler@beta",
                                            "Then, add it to your ESLint config:",
                                            {
                                                "code_example": "import reactCompiler from 'eslint-plugin-react-compiler'export default [  {    plugins: {      'react-compiler': reactCompiler,    },    rules: {      'react-compiler/react-compiler': 'error',    },  },]"
                                            },
                                            "Or, in the deprecated eslintrc config format:",
                                            {
                                                "code_example": "module.exports = {  plugins: [    'eslint-plugin-react-compiler',  ],  rules: {    'react-compiler/react-compiler': 'error',  },}"
                                            },
                                            "The ESLint plugin will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase.",
                                            "NoteYou don’t have to fix all ESLint violations straight away. You can address them at your own pace to increase the amount of components and hooks being optimized, but it is not required to fix everything before you can use the compiler."
                                        ]
                                    },
                                    {
                                        "sub_header": "Rolling out the compiler to your codebase ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#using-the-compiler-effectively",
                                        "content": [
                                            {
                                                "sub_header": "Existing projects ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/react-compiler/#existing-projects",
                                                "content": [
                                                    "The compiler is designed to compile functional components and hooks that follow the Rules of React. It can also handle code that breaks those rules by bailing out (skipping over) those components or hooks. However, due to the flexible nature of JavaScript, the compiler cannot catch every possible violation and may compile with false negatives: that is, the compiler may accidentally compile a component/hook that breaks the Rules of React which can lead to undefined behavior.",
                                                    "For this reason, to adopt the compiler successfully on existing projects, we recommend running it on a small directory in your product code first. You can do this by configuring the compiler to only run on a specific set of directories:",
                                                    {
                                                        "code_example": "const ReactCompilerConfig = {  sources: (filename) => {    return filename.indexOf('src/path/to/dir') !== -1;  },};"
                                                    },
                                                    "When you have more confidence with rolling out the compiler, you can expand coverage to other directories as well and slowly roll it out to your whole app."
                                                ]
                                            },
                                            {
                                                "sub_header": "New projects ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/react-compiler/#new-projects",
                                                "content": [
                                                    "If you’re starting a new project, you can enable the compiler on your entire codebase, which is the default behavior."
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Using React Compiler with React 17 or 18 ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#using-react-compiler-with-react-17-or-18",
                                        "content": [
                                            "React Compiler works best with React 19 RC. If you are unable to upgrade, you can install the extra react-compiler-runtime package which will allow the compiled code to run on versions prior to 19. However, note that the minimum supported version is 17.",
                                            " Terminal  Copynpm install react-compiler-runtime@beta",
                                            "You should also add the correct target to your compiler config, where target is the major version of React you are targeting:",
                                            {
                                                "code_example": "// babel.config.jsconst ReactCompilerConfig = {  target: '18' // '17' | '18' | '19'};module.exports = function () {  return {    plugins: [      ['babel-plugin-react-compiler', ReactCompilerConfig],    ],  };};"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Using the compiler on libraries ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#using-the-compiler-on-libraries",
                                        "content": [
                                            "React Compiler can also be used to compile libraries. Because React Compiler needs to run on the original source code prior to any code transformations, it is not possible for an application’s build pipeline to compile the libraries they use. Hence, our recommendation is for library maintainers to independently compile and test their libraries with the compiler, and ship compiled code to npm.",
                                            "Because your code is pre-compiled, users of your library will not need to have the compiler enabled in order to benefit from the automatic memoization applied to your library. If your library targets apps not yet on React 19, specify a minimum target and add react-compiler-runtime as a direct dependency. The runtime package will use the correct implementation of APIs depending on the application’s version, and polyfill the missing APIs if necessary.",
                                            "Library code can often require more complex patterns and usage of escape hatches. For this reason, we recommend ensuring that you have sufficient testing in order to identify any issues that might arise from using the compiler on your library. If you identify any issues, you can always opt-out the specific components or hooks with the 'use no memo' directive.",
                                            "Similarly to apps, it is not necessary to fully compile 100% of your components or hooks to see benefits in your library. A good starting point might be to identify the most performance sensitive parts of your library and ensuring that they don’t break the Rules of React, which you can use eslint-plugin-react-compiler to identify."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Usage ",
                                "source": "react",
                                "url": "https://react.dev/learn/react-compiler/#installation",
                                "content": [
                                    {
                                        "sub_header": "Babel ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-babel",
                                        "content": [
                                            " Terminal  Copynpm install babel-plugin-react-compiler@beta",
                                            "The compiler includes a Babel plugin which you can use in your build pipeline to run the compiler.",
                                            "After installing, add it to your Babel config. Please note that it’s critical that the compiler run first in the pipeline:",
                                            {
                                                "code_example": "// babel.config.jsconst ReactCompilerConfig = { /* ... */ };module.exports = function () {  return {    plugins: [      ['babel-plugin-react-compiler', ReactCompilerConfig], // must run first!      // ...    ],  };};"
                                            },
                                            "babel-plugin-react-compiler should run first before other Babel plugins as the compiler requires the input source information for sound analysis."
                                        ]
                                    },
                                    {
                                        "sub_header": "Vite ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-vite",
                                        "content": [
                                            "If you use Vite, you can add the plugin to vite-plugin-react:",
                                            {
                                                "code_example": "// vite.config.jsconst ReactCompilerConfig = { /* ... */ };export default defineConfig(() => {  return {    plugins: [      react({        babel: {          plugins: [            [\"babel-plugin-react-compiler\", ReactCompilerConfig],          ],        },      }),    ],    // ...  };});"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Next.js ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-nextjs",
                                        "content": [
                                            "Please refer to the Next.js docs for more information."
                                        ]
                                    },
                                    {
                                        "sub_header": "Remix ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-remix",
                                        "content": [
                                            "Install vite-plugin-babel, and add the compiler’s Babel plugin to it:",
                                            " Terminal  Copynpm install vite-plugin-babel",
                                            {
                                                "code_example": "// vite.config.jsimport babel from \"vite-plugin-babel\";const ReactCompilerConfig = { /* ... */ };export default defineConfig({  plugins: [    remix({ /* ... */}),    babel({      filter: /\\.[jt]sx?$/,      babelConfig: {        presets: [\"@babel/preset-typescript\"], // if you use TypeScript        plugins: [          [\"babel-plugin-react-compiler\", ReactCompilerConfig],        ],      },    }),  ],});"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Webpack ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-webpack",
                                        "content": [
                                            "A community Webpack loader is now available here."
                                        ]
                                    },
                                    {
                                        "sub_header": "Expo ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-expo",
                                        "content": [
                                            "Please refer to Expo’s docs to enable and use the React Compiler in Expo apps."
                                        ]
                                    },
                                    {
                                        "sub_header": "Metro (React Native) ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-react-native-metro",
                                        "content": [
                                            "React Native uses Babel via Metro, so refer to the Usage with Babel section for installation instructions."
                                        ]
                                    },
                                    {
                                        "sub_header": "Rspack ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-rspack",
                                        "content": [
                                            "Please refer to Rspack’s docs to enable and use the React Compiler in Rspack apps."
                                        ]
                                    },
                                    {
                                        "sub_header": "Rsbuild ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#usage-with-rsbuild",
                                        "content": [
                                            "Please refer to Rsbuild’s docs to enable and use the React Compiler in Rsbuild apps."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Troubleshooting ",
                                "source": "react",
                                "url": "https://react.dev/learn/react-compiler/#troubleshooting",
                                "content": [
                                    "To report issues, please first create a minimal repro on the React Compiler Playground and include it in your bug report. You can open issues in the facebook/react repo.",
                                    "You can also provide feedback in the React Compiler Working Group by applying to be a member. Please see the README for more details on joining.",
                                    {
                                        "sub_header": "What does the compiler assume? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#what-does-the-compiler-assume",
                                        "content": [
                                            "React Compiler assumes that your code:",
                                            "  1.Is valid, semantic JavaScript.",
                                            "  2.Tests that nullable/optional values and properties are defined before accessing them (for example, by enabling strictNullChecks if using TypeScript), i.e., if (object.nullableProperty) { object.nullableProperty.foo } or with optional-chaining object.nullableProperty?.foo.",
                                            "  3.Follows the Rules of React.",
                                            "React Compiler can verify many of the Rules of React statically, and will safely skip compilation when it detects an error. To see the errors we recommend also installing eslint-plugin-react-compiler."
                                        ]
                                    },
                                    {
                                        "sub_header": "How do I know my components have been optimized? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#how-do-i-know-my-components-have-been-optimized",
                                        "content": [
                                            "React Devtools (v5.0+) has built-in support for React Compiler and will display a “Memo ✨” badge next to components that have been optimized by the compiler."
                                        ]
                                    },
                                    {
                                        "sub_header": "Something is not working after compilation ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#something-is-not-working-after-compilation",
                                        "content": [
                                            "If you have eslint-plugin-react-compiler installed, the compiler will display any violations of the rules of React in your editor. When it does this, it means that the compiler has skipped over optimizing that component or hook. This is perfectly okay, and the compiler can recover and continue optimizing other components in your codebase. You don’t have to fix all ESLint violations straight away. You can address them at your own pace to increase the amount of components and hooks being optimized.",
                                            "Due to the flexible and dynamic nature of JavaScript however, it’s not possible to comprehensively detect all cases. Bugs and undefined behavior such as infinite loops may occur in those cases.",
                                            "If your app doesn’t work properly after compilation and you aren’t seeing any ESLint errors, the compiler may be incorrectly compiling your code. To confirm this, try to make the issue go away by aggressively opting out any component or hook you think might be related via the \"use no memo\" directive.",
                                            {
                                                "code_example": "function SuspiciousComponent() {  \"use no memo\"; // opts out this component from being compiled by React Compiler  // ...}"
                                            },
                                            {
                                                "code_example": "\"use no memo\""
                                            },
                                            "When you make the error go away, confirm that removing the opt out directive makes the issue come back. Then share a bug report with us (you can try to reduce it to a small repro, or if it’s open source code you can also just paste the entire source) using the React Compiler Playground so we can identify and help fix the issue."
                                        ]
                                    },
                                    {
                                        "sub_header": "Other issues ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/react-compiler/#other-issues",
                                        "content": [
                                            "Please see https://github.com/reactwg/react-compiler/discussions/7."
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "Describing the UI",
        "source": "react",
        "url": "https://react.dev/learn/describing-the-ui",
        "sections": [
            "React is a JavaScript library for rendering user interfaces (UI). UI is built from small units like buttons, text, and images. React lets you combine them into reusable, nestable components. From web sites to phone apps, everything on the screen can be broken down into components. In this chapter, you’ll learn to create, customize, and conditionally display React components.",
            "  1.How to write your first React component",
            "  2.When and how to create multi-component files",
            "  3.How to add markup to JavaScript with JSX",
            "  4.How to use curly braces with JSX to access JavaScript functionality from your components",
            "  5.How to configure components with props",
            "  6.How to conditionally render components",
            "  7.How to render multiple components at a time",
            "  8.How to avoid confusing bugs by keeping components pure",
            "  9.Why understanding your UI as trees is useful",
            "In this chapter\nHow to write your first React component\nWhen and how to create multi-component files\nHow to add markup to JavaScript with JSX\nHow to use curly braces with JSX to access JavaScript functionality from your components\nHow to configure components with props\nHow to conditionally render components\nHow to render multiple components at a time\nHow to avoid confusing bugs by keeping components pure\nWhy understanding your UI as trees is useful\n",
            {
                "subHeader": "Your first component ",
                "url": "https://react.dev/learn/describing-the-ui/#your-first-component",
                "sections": [
                    "React applications are built from isolated pieces of UI called components. A React component is a JavaScript function that you can sprinkle with markup. Components can be as small as a button, or as large as an entire page. Here is a Gallery component rendering three Profile components:",
                    {
                        "code_sandbox": "function Profile() {  return (    <img      src=\"https://i.imgur.com/MK3eW3As.jpg\"      alt=\"Katherine Johnson\"    />  );}export default function Gallery() {  return (    <section>      <h1>Amazing scientists</h1>      <Profile />      <Profile />      <Profile />    </section>  );}"
                    },
                    "Ready to learn this topic?Read Your First Component to learn how to declare and use React components.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Importing and exporting components ",
                "url": "https://react.dev/learn/describing-the-ui/#importing-and-exporting-components",
                "sections": [
                    "You can declare many components in one file, but large files can get difficult to navigate. To solve this, you can export a component into its own file, and then import that component from another file:",
                    {
                        "code_sandbox": "Gallery.jsProfile.jsGallery.jsimport Profile from './Profile.js';export default function Gallery() {  return (    <section>      <h1>Amazing scientists</h1>      <Profile />      <Profile />      <Profile />    </section>  );}"
                    },
                    "Ready to learn this topic?Read Importing and Exporting Components to learn how to split components into their own files.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Writing markup with JSX ",
                "url": "https://react.dev/learn/describing-the-ui/#writing-markup-with-jsx",
                "sections": [
                    "Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information.",
                    "If we paste existing HTML markup into a React component, it won’t always work:",
                    {
                        "code_sandbox": "export default function TodoList() {  return (    // This doesn't quite work!    <h1>Hedy Lamarr's Todos</h1>    <img      src=\"https://i.imgur.com/yXOvdOSs.jpg\"      alt=\"Hedy Lamarr\"      class=\"photo\"    >    <ul>      <li>Invent new traffic lights      <li>Rehearse a movie scene      <li>Improve spectrum technology    </ul>"
                    },
                    "If you have existing HTML like this, you can fix it using a converter:",
                    {
                        "code_sandbox": "export default function TodoList() {  return (    <>      <h1>Hedy Lamarr's Todos</h1>      <img        src=\"https://i.imgur.com/yXOvdOSs.jpg\"        alt=\"Hedy Lamarr\"        className=\"photo\"      />      <ul>        <li>Invent new traffic lights</li>        <li>Rehearse a movie scene</li>        <li>Improve spectrum technology</li>      </ul>    </>  );}"
                    },
                    "Ready to learn this topic?Read Writing Markup with JSX to learn how to write valid JSX.Read More",
                    ""
                ]
            },
            {
                "subHeader": "JavaScript in JSX with curly braces ",
                "url": "https://react.dev/learn/describing-the-ui/#javascript-in-jsx-with-curly-braces",
                "sections": [
                    "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to “open a window” to JavaScript:",
                    {
                        "code_sandbox": "const person = {  name: 'Gregorio Y. Zara',  theme: {    backgroundColor: 'black',    color: 'pink'  }};export default function TodoList() {  return (    <div style={person.theme}>      <h1>{person.name}'s Todos</h1>      <img        className=\"avatar\"        src=\"https://i.imgur.com/7vQD0fPs.jpg\"        alt=\"Gregorio Y. Zara\"      />      <ul>        <li>Improve the videophone</li>        <li>Prepare aeronautics lectures</li>        <li>Work on the alcohol-fuelled engine</li>      </ul>    </div>  );}"
                    },
                    "Ready to learn this topic?Read JavaScript in JSX with Curly Braces to learn how to access JavaScript data from JSX.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Passing props to a component ",
                "url": "https://react.dev/learn/describing-the-ui/#passing-props-to-a-component",
                "sections": [
                    "React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, functions, and even JSX!",
                    {
                        "code_sandbox": "utils.jsimport { getImageUrl } from './utils.js'export default function Profile() {  return (    <Card>      <Avatar        size={100}        person={{          name: 'Katsuko Saruhashi',          imageId: 'YfeOqp2'        }}      />    </Card>  );}function Avatar({ person, size }) {  return (    <img      className=\"avatar\"      src={getImageUrl(person)}      alt={person.name}      width={size}      height={size}    />  );}function Card({ children }) {  return (    <div className=\"card\">      {children}    </div>  );}"
                    },
                    "Ready to learn this topic?Read Passing Props to a Component to learn how to pass and read props.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Conditional rendering ",
                "url": "https://react.dev/learn/describing-the-ui/#conditional-rendering",
                "sections": [
                    "Your components will often need to display different things depending on different conditions. In React, you can conditionally render JSX using JavaScript syntax like if statements, &&, and ? : operators.",
                    "In this example, the JavaScript && operator is used to conditionally render a checkmark:",
                    {
                        "code_sandbox": "function Item({ name, isPacked }) {  return (    <li className=\"item\">      {name} {isPacked && '✅'}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item          isPacked={true}          name=\"Space suit\"        />        <Item          isPacked={true}          name=\"Helmet with a golden leaf\"        />        <Item          isPacked={false}          name=\"Photo of Tam\"        />      </ul>    </section>  );}"
                    },
                    "Ready to learn this topic?Read Conditional Rendering to learn the different ways to render content conditionally.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Rendering lists ",
                "url": "https://react.dev/learn/describing-the-ui/#rendering-lists",
                "sections": [
                    "You will often want to display multiple similar components from a collection of data. You can use JavaScript’s filter() and map() with React to filter and transform your array of data into an array of components.",
                    "For each array item, you will need to specify a key. Usually, you will want to use an ID from the database as a key. Keys let React keep track of each item’s place in the list even if the list changes.",
                    {
                        "code_sandbox": "data.jsutils.jsimport { people } from './data.js';import { getImageUrl } from './utils.js';export default function List() {  const listItems = people.map(person =>    <li key={person.id}>      <img        src={getImageUrl(person)}        alt={person.name}      />      <p>        <b>{person.name}:</b>        {' ' + person.profession + ' '}        known for {person.accomplishment}      </p>    </li>  );  return (    <article>      <h1>Scientists</h1>      <ul>{listItems}</ul>    </article>  );}"
                    },
                    "Ready to learn this topic?Read Rendering Lists to learn how to render a list of components, and how to choose a key.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Keeping components pure ",
                "url": "https://react.dev/learn/describing-the-ui/#keeping-components-pure",
                "sections": [
                    "Some JavaScript functions are pure. A pure function:",
                    "  1.Minds its own business. It does not change any objects or variables that existed before it was called.",
                    "  2.Same inputs, same output. Given the same inputs, a pure function should always return the same result.",
                    "By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. Here is an example of an impure component:",
                    {
                        "code_sandbox": "let guest = 0;function Cup() {  // Bad: changing a preexisting variable!  guest = guest + 1;  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaSet() {  return (    <>      <Cup />      <Cup />      <Cup />    </>  );}"
                    },
                    "You can make this component pure by passing a prop instead of modifying a preexisting variable:",
                    {
                        "code_sandbox": "function Cup({ guest }) {  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaSet() {  return (    <>      <Cup guest={1} />      <Cup guest={2} />      <Cup guest={3} />    </>  );}"
                    },
                    "Ready to learn this topic?Read Keeping Components Pure to learn how to write components as pure, predictable functions.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Your UI as a tree ",
                "url": "https://react.dev/learn/describing-the-ui/#your-ui-as-a-tree",
                "sections": [
                    "React uses trees to model the relationships between components and modules.",
                    "A React render tree is a representation of the parent and child relationship between components.",
                    "An example React render tree.",
                    "Components near the top of the tree, near the root component, are considered top-level components. Components with no child components are leaf components. This categorization of components is useful for understanding data flow and rendering performance.",
                    "Modelling the relationship between JavaScript modules is another useful way to understand your app. We refer to it as a module dependency tree.",
                    "An example module dependency tree.",
                    "A dependency tree is often used by build tools to bundle all the relevant JavaScript code for the client to download and render. A large bundle size regresses user experience for React apps. Understanding the module dependency tree is helpful to debug such issues.",
                    "Ready to learn this topic?Read Your UI as a Tree to learn how to create a render and module dependency trees for a React app and how they’re useful mental models for improving user experience and performance.Read More",
                    ""
                ]
            },
            {
                "subHeader": "What’s next? ",
                "url": "https://react.dev/learn/describing-the-ui/#whats-next",
                "sections": [
                    "Head over to Your First Component to start reading this chapter page by page!",
                    "Or, if you’re already familiar with these topics, why not read about Adding Interactivity?"
                ]
            },
            {
                "subTopics": [
                    {
                        "headers": "Your First Component",
                        "url": "https://react.dev/learn/your-first-component",
                        "content": [
                            "Components are one of the core concepts of React. They are the foundation upon which you build user interfaces (UI), which makes them the perfect place to start your React journey!",
                            "  1.What a component is",
                            "  2.What role components play in a React application",
                            "  3.How to write your first React component",
                            "You will learn\nWhat a component is\nWhat role components play in a React application\nHow to write your first React component\n",
                            {
                                "sub_header": "Components: UI building blocks ",
                                "source": "react",
                                "url": "https://react.dev/learn/your-first-component/#components-ui-building-blocks",
                                "content": [
                                    "On the Web, HTML lets us create rich structured documents with its built-in set of tags like <h1> and <li>:",
                                    {
                                        "code_example": "<article>  <h1>My First Component</h1>  <ol>    <li>Components: UI Building Blocks</li>    <li>Defining a Component</li>    <li>Using a Component</li>  </ol></article>"
                                    },
                                    "This markup represents this article <article>, its heading <h1>, and an (abbreviated) table of contents as an ordered list <ol>. Markup like this, combined with CSS for style, and JavaScript for interactivity, lies behind every sidebar, avatar, modal, dropdown—every piece of UI you see on the Web.",
                                    "React lets you combine your markup, CSS, and JavaScript into custom “components”, reusable UI elements for your app. The table of contents code you saw above could be turned into a <TableOfContents /> component you could render on every page. Under the hood, it still uses the same HTML tags like <article>, <h1>, etc.",
                                    "Just like with HTML tags, you can compose, order and nest components to design whole pages. For example, the documentation page you’re reading is made out of React components:",
                                    {
                                        "code_example": "<PageLayout>  <NavigationHeader>    <SearchBar />    <Link to=\"/docs\">Docs</Link>  </NavigationHeader>  <Sidebar />  <PageContent>    <TableOfContents />    <DocumentationText />  </PageContent></PageLayout>"
                                    },
                                    "As your project grows, you will notice that many of your designs can be composed by reusing components you already wrote, speeding up your development. Our table of contents above could be added to any screen with <TableOfContents />! You can even jumpstart your project with the thousands of components shared by the React open source community like Chakra UI and Material UI."
                                ]
                            },
                            {
                                "sub_header": "Defining a component ",
                                "source": "react",
                                "url": "https://react.dev/learn/your-first-component/#defining-a-component",
                                "content": [
                                    "Traditionally when creating web pages, web developers marked up their content and then added interaction by sprinkling on some JavaScript. This worked great when interaction was a nice-to-have on the web. Now it is expected for many sites and all apps. React puts interactivity first while still using the same technology: a React component is a JavaScript function that you can sprinkle with markup. Here’s what that looks like (you can edit the example below):",
                                    {
                                        "code_sandbox": "export default function Profile() {  return (    <img      src=\"https://i.imgur.com/MK3eW3Am.jpg\"      alt=\"Katherine Johnson\"    />  )}"
                                    },
                                    "And here’s how to build a component:",
                                    {
                                        "sub_header": "Step 1: Export the component ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/your-first-component/#step-1-export-the-component",
                                        "content": [
                                            "The export default prefix is a standard JavaScript syntax (not specific to React). It lets you mark the main function in a file so that you can later import it from other files. (More on importing in Importing and Exporting Components!)"
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Define the function ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/your-first-component/#step-2-define-the-function",
                                        "content": [
                                            "With function Profile() { } you define a JavaScript function with the name Profile.",
                                            "PitfallReact components are regular JavaScript functions, but their names must start with a capital letter or they won’t work!"
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 3: Add markup ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/your-first-component/#step-3-add-markup",
                                        "content": [
                                            "The component returns an <img /> tag with src and alt attributes. <img /> is written like HTML, but it is actually JavaScript under the hood! This syntax is called JSX, and it lets you embed markup inside JavaScript.",
                                            "Return statements can be written all on one line, as in this component:",
                                            {
                                                "code_example": "return <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />;"
                                            },
                                            "But if your markup isn’t all on the same line as the return keyword, you must wrap it in a pair of parentheses:",
                                            {
                                                "code_example": "return (  <div>    <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />  </div>);"
                                            },
                                            {
                                                "code_example": "return"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Using a component ",
                                "source": "react",
                                "url": "https://react.dev/learn/your-first-component/#using-a-component",
                                "content": [
                                    "Now that you’ve defined your Profile component, you can nest it inside other components. For example, you can export a Gallery component that uses multiple Profile components:",
                                    {
                                        "code_sandbox": "function Profile() {  return (    <img      src=\"https://i.imgur.com/MK3eW3As.jpg\"      alt=\"Katherine Johnson\"    />  );}export default function Gallery() {  return (    <section>      <h1>Amazing scientists</h1>      <Profile />      <Profile />      <Profile />    </section>  );}"
                                    },
                                    {
                                        "sub_header": "What the browser sees ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/your-first-component/#what-the-browser-sees",
                                        "content": [
                                            "Notice the difference in casing:",
                                            "  1.<section> is lowercase, so React knows we refer to an HTML tag.",
                                            "  2.<Profile /> starts with a capital P, so React knows that we want to use our component called Profile.",
                                            "And Profile contains even more HTML: <img />. In the end, this is what the browser sees:",
                                            {
                                                "code_example": "<section>  <h1>Amazing scientists</h1>  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" />  <img src=\"https://i.imgur.com/MK3eW3As.jpg\" alt=\"Katherine Johnson\" /></section>"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Nesting and organizing components ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/your-first-component/#nesting-and-organizing-components",
                                        "content": [
                                            "Components are regular JavaScript functions, so you can keep multiple components in the same file. This is convenient when components are relatively small or tightly related to each other. If this file gets crowded, you can always move Profile to a separate file. You will learn how to do this shortly on the page about imports.",
                                            "Because the Profile components are rendered inside Gallery—even several times!—we can say that Gallery is a parent component, rendering each Profile as a “child”. This is part of the magic of React: you can define a component once, and then use it in as many places and as many times as you like.",
                                            {
                                                "code_example": "export default function Gallery() {  // 🔴 Never define a component inside another component!  function Profile() {    // ...  }  // ...}"
                                            },
                                            "Deep DiveComponents all the way down Show DetailsYour React application begins at a “root” component. Usually, it is created automatically when you start a new project. For example, if you use CodeSandbox or if you use the framework Next.js, the root component is defined in pages/index.js. In these examples, you’ve been exporting root components.Most React apps use components all the way down. This means that you won’t only use components for reusable pieces like buttons, but also for larger pieces like sidebars, lists, and ultimately, complete pages! Components are a handy way to organize UI code and markup, even if some of them are only used once.React-based frameworks take this a step further. Instead of using an empty HTML file and letting React “take over” managing the page with JavaScript, they also generate the HTML automatically from your React components. This allows your app to show some content before the JavaScript code loads.Still, many websites only use React to add interactivity to existing HTML pages. They have many root components instead of a single one for the entire page. You can use as much—or as little—React as you need.",
                                            "RecapYou’ve just gotten your first taste of React! Let’s recap some key points.\n\nReact lets you create components, reusable UI elements for your app.\n\n\nIn a React app, every piece of UI is a component.\n\n\nReact components are regular JavaScript functions except:\n\nTheir names always begin with a capital letter.\nThey return JSX markup.\n\n\n",
                                            "Try out some challenges1. Export the component 2. Fix the return statement 3. Spot the mistake 4. Your own component Challenge 1 of 4: Export the component This sandbox doesn’t work because the root component is not exported:App.jsApp.js ResetForkfunction Profile() {\n  return (\n    <img\n      src=\"https://i.imgur.com/lICfvbD.jpg\"\n      alt=\"Aklilu Lemma\"\n    />\n  );\n}\n\nTry to fix it yourself before looking at the solution! Show solutionNext Challenge"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Importing and Exporting Components",
                        "url": "https://react.dev/learn/importing-and-exporting-components",
                        "content": [
                            "The magic of components lies in their reusability: you can create components that are composed of other components. But as you nest more and more components, it often makes sense to start splitting them into different files. This lets you keep your files easy to scan and reuse components in more places.",
                            "  1.What a root component file is",
                            "  2.How to import and export a component",
                            "  3.When to use default and named imports and exports",
                            "  4.How to import and export multiple components from one file",
                            "  5.How to split components into multiple files",
                            "You will learn\nWhat a root component file is\nHow to import and export a component\nWhen to use default and named imports and exports\nHow to import and export multiple components from one file\nHow to split components into multiple files\n",
                            {
                                "sub_header": "The root component file ",
                                "source": "react",
                                "url": "https://react.dev/learn/importing-and-exporting-components/#the-root-component-file",
                                "content": [
                                    "In Your First Component, you made a Profile component and a Gallery component that renders it:",
                                    {
                                        "code_sandbox": "function Profile() {  return (    <img      src=\"https://i.imgur.com/MK3eW3As.jpg\"      alt=\"Katherine Johnson\"    />  );}export default function Gallery() {  return (    <section>      <h1>Amazing scientists</h1>      <Profile />      <Profile />      <Profile />    </section>  );}"
                                    },
                                    "These currently live in a root component file, named App.js in this example. Depending on your setup, your root component could be in another file, though. If you use a framework with file-based routing, such as Next.js, your root component will be different for every page."
                                ]
                            },
                            {
                                "sub_header": "Exporting and importing a component ",
                                "source": "react",
                                "url": "https://react.dev/learn/importing-and-exporting-components/#exporting-and-importing-a-component",
                                "content": [
                                    "What if you want to change the landing screen in the future and put a list of science books there? Or place all the profiles somewhere else? It makes sense to move Gallery and Profile out of the root component file. This will make them more modular and reusable in other files. You can move a component in three steps:",
                                    "  1.Make a new JS file to put the components in.",
                                    "  2.Export your function component from that file (using either default or named exports).",
                                    "  3.Import it in the file where you’ll use the component (using the corresponding technique for importing default or named exports).",
                                    "Here both Profile and Gallery have been moved out of App.js into a new file called Gallery.js. Now you can change App.js to import Gallery from Gallery.js:",
                                    {
                                        "code_sandbox": "Gallery.jsimport Gallery from './Gallery.js';export default function App() {  return (    <Gallery />  );}"
                                    },
                                    "Notice how this example is broken down into two component files now:",
                                    "  1.Gallery.js:\n\nDefines the Profile component which is only used within the same file and is not exported.\nExports the Gallery component as a default export.\n\n",
                                    "  2.Defines the Profile component which is only used within the same file and is not exported.",
                                    "  3.Exports the Gallery component as a default export.",
                                    "  4.App.js:\n\nImports Gallery as a default import from Gallery.js.\nExports the root App component as a default export.\n\n",
                                    "  5.Imports Gallery as a default import from Gallery.js.",
                                    "  6.Exports the root App component as a default export.",
                                    {
                                        "code_example": ".js"
                                    },
                                    "Deep DiveDefault vs named exports Show DetailsThere are two primary ways to export values with JavaScript: default exports and named exports. So far, our examples have only used default exports. But you can use one or both of them in the same file. A file can have no more than one default export, but it can have as many named exports as you like.How you export your component dictates how you must import it. You will get an error if you try to import a default export the same way you would a named export! This chart can help you keep track:SyntaxExport statementImport statementDefaultexport default function Button() {}import Button from './Button.js';Namedexport function Button() {}import { Button } from './Button.js';When you write a default import, you can put any name you want after import. For example, you could write import Banana from './Button.js' instead and it would still provide you with the same default export. In contrast, with named imports, the name has to match on both sides. That’s why they are called named imports!People often use default exports if the file exports only one component, and use named exports if it exports multiple components and values. Regardless of which coding style you prefer, always give meaningful names to your component functions and the files that contain them. Components without names, like export default () => {}, are discouraged because they make debugging harder."
                                ]
                            },
                            {
                                "sub_header": "Exporting and importing multiple components from the same file ",
                                "source": "react",
                                "url": "https://react.dev/learn/importing-and-exporting-components/#exporting-and-importing-multiple-components-from-the-same-file",
                                "content": [
                                    "What if you want to show just one Profile instead of a gallery? You can export the Profile component, too. But Gallery.js already has a default export, and you can’t have two default exports. You could create a new file with a default export, or you could add a named export for Profile. A file can only have one default export, but it can have numerous named exports!",
                                    "NoteTo reduce the potential confusion between default and named exports, some teams choose to only stick to one style (default or named), or avoid mixing them in a single file. Do what works best for you!",
                                    "First, export Profile from Gallery.js using a named export (no default keyword):",
                                    {
                                        "code_example": "export function Profile() {  // ...}"
                                    },
                                    "Then, import Profile from Gallery.js to App.js using a named import (with the curly braces):",
                                    {
                                        "code_example": "import { Profile } from './Gallery.js';"
                                    },
                                    "Finally, render <Profile /> from the App component:",
                                    {
                                        "code_example": "export default function App() {  return <Profile />;}"
                                    },
                                    "Now Gallery.js contains two exports: a default Gallery export, and a named Profile export. App.js imports both of them. Try editing <Profile /> to <Gallery /> and back in this example:",
                                    {
                                        "code_sandbox": "Gallery.jsimport Gallery from './Gallery.js';import { Profile } from './Gallery.js';export default function App() {  return (    <Profile />  );}"
                                    },
                                    "Now you’re using a mix of default and named exports:",
                                    "  1.Gallery.js:\n\nExports the Profile component as a named export called Profile.\nExports the Gallery component as a default export.\n\n",
                                    "  2.Exports the Profile component as a named export called Profile.",
                                    "  3.Exports the Gallery component as a default export.",
                                    "  4.App.js:\n\nImports Profile as a named import called Profile from Gallery.js.\nImports Gallery as a default import from Gallery.js.\nExports the root App component as a default export.\n\n",
                                    "  5.Imports Profile as a named import called Profile from Gallery.js.",
                                    "  6.Imports Gallery as a default import from Gallery.js.",
                                    "  7.Exports the root App component as a default export.",
                                    "RecapOn this page you learned:\nWhat a root component file is\nHow to import and export a component\nWhen and how to use default and named imports and exports\nHow to export multiple components from the same file\n",
                                    {
                                        "code_example": "Gallery.js"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Writing Markup with JSX",
                        "url": "https://react.dev/learn/writing-markup-with-jsx",
                        "content": [
                            "JSX is a syntax extension for JavaScript that lets you write HTML-like markup inside a JavaScript file. Although there are other ways to write components, most React developers prefer the conciseness of JSX, and most codebases use it.",
                            "  1.Why React mixes markup with rendering logic",
                            "  2.How JSX is different from HTML",
                            "  3.How to display information with JSX",
                            "You will learn\nWhy React mixes markup with rendering logic\nHow JSX is different from HTML\nHow to display information with JSX\n",
                            {
                                "sub_header": "JSX: Putting markup into JavaScript ",
                                "source": "react",
                                "url": "https://react.dev/learn/writing-markup-with-jsx/#jsx-putting-markup-into-javascript",
                                "content": [
                                    "The Web has been built on HTML, CSS, and JavaScript. For many years, web developers kept content in HTML, design in CSS, and logic in JavaScript—often in separate files! Content was marked up inside HTML while the page’s logic lived separately in JavaScript:",
                                    "But as the Web became more interactive, logic increasingly determined content. JavaScript was in charge of the HTML! This is why in React, rendering logic and markup live together in the same place—components.",
                                    {
                                        "code_example": "Sidebar.js"
                                    },
                                    "Keeping a button’s rendering logic and markup together ensures that they stay in sync with each other on every edit. Conversely, details that are unrelated, such as the button’s markup and a sidebar’s markup, are isolated from each other, making it safer to change either of them on their own.",
                                    "Each React component is a JavaScript function that may contain some markup that React renders into the browser. React components use a syntax extension called JSX to represent that markup. JSX looks a lot like HTML, but it is a bit stricter and can display dynamic information. The best way to understand this is to convert some HTML markup to JSX markup.",
                                    "NoteJSX and React are two separate things. They’re often used together, but you can use them independently of each other. JSX is a syntax extension, while React is a JavaScript library."
                                ]
                            },
                            {
                                "sub_header": "Converting HTML to JSX ",
                                "source": "react",
                                "url": "https://react.dev/learn/writing-markup-with-jsx/#converting-html-to-jsx",
                                "content": [
                                    "Suppose that you have some (perfectly valid) HTML:",
                                    {
                                        "code_example": "<h1>Hedy Lamarr's Todos</h1><img   src=\"https://i.imgur.com/yXOvdOSs.jpg\"   alt=\"Hedy Lamarr\"   class=\"photo\"><ul>    <li>Invent new traffic lights    <li>Rehearse a movie scene    <li>Improve the spectrum technology</ul>"
                                    },
                                    "And you want to put it into your component:",
                                    {
                                        "code_example": "export default function TodoList() {  return (    // ???  )}"
                                    },
                                    "If you copy and paste it as is, it will not work:",
                                    {
                                        "code_sandbox": "export default function TodoList() {  return (    // This doesn't quite work!    <h1>Hedy Lamarr's Todos</h1>    <img       src=\"https://i.imgur.com/yXOvdOSs.jpg\"       alt=\"Hedy Lamarr\"       class=\"photo\"    >    <ul>      <li>Invent new traffic lights      <li>Rehearse a movie scene      <li>Improve the spectrum technology    </ul>"
                                    },
                                    "This is because JSX is stricter and has a few more rules than HTML! If you read the error messages above, they’ll guide you to fix the markup, or you can follow the guide below.",
                                    "NoteMost of the time, React’s on-screen error messages will help you find where the problem is. Give them a read if you get stuck!"
                                ]
                            },
                            {
                                "sub_header": "The Rules of JSX ",
                                "source": "react",
                                "url": "https://react.dev/learn/writing-markup-with-jsx/#the-rules-of-jsx",
                                "content": [
                                    {
                                        "sub_header": "1. Return a single root element ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/writing-markup-with-jsx/#1-return-a-single-root-element",
                                        "content": [
                                            "To return multiple elements from a component, wrap them with a single parent tag.",
                                            "For example, you can use a <div>:",
                                            {
                                                "code_example": "<div>  <h1>Hedy Lamarr's Todos</h1>  <img     src=\"https://i.imgur.com/yXOvdOSs.jpg\"     alt=\"Hedy Lamarr\"     class=\"photo\"  >  <ul>    ...  </ul></div>"
                                            },
                                            "If you don’t want to add an extra <div> to your markup, you can write <> and </> instead:",
                                            {
                                                "code_example": "<>  <h1>Hedy Lamarr's Todos</h1>  <img     src=\"https://i.imgur.com/yXOvdOSs.jpg\"     alt=\"Hedy Lamarr\"     class=\"photo\"  >  <ul>    ...  </ul></>"
                                            },
                                            "This empty tag is called a Fragment. Fragments let you group things without leaving any trace in the browser HTML tree.",
                                            "Deep DiveWhy do multiple JSX tags need to be wrapped? Show DetailsJSX looks like HTML, but under the hood it is transformed into plain JavaScript objects. You can’t return two objects from a function without wrapping them into an array. This explains why you also can’t return two JSX tags without wrapping them into another tag or a Fragment."
                                        ]
                                    },
                                    {
                                        "sub_header": "2. Close all the tags ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/writing-markup-with-jsx/#2-close-all-the-tags",
                                        "content": [
                                            "JSX requires tags to be explicitly closed: self-closing tags like <img> must become <img />, and wrapping tags like <li>oranges must be written as <li>oranges</li>.",
                                            "This is how Hedy Lamarr’s image and list items look closed:",
                                            {
                                                "code_example": "<>  <img     src=\"https://i.imgur.com/yXOvdOSs.jpg\"     alt=\"Hedy Lamarr\"     class=\"photo\"   />  <ul>    <li>Invent new traffic lights</li>    <li>Rehearse a movie scene</li>    <li>Improve the spectrum technology</li>  </ul></>"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "3. camelCase all most of the things! ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/writing-markup-with-jsx/#3-camelcase-salls-most-of-the-things",
                                        "content": [
                                            "JSX turns into JavaScript and attributes written in JSX become keys of JavaScript objects. In your own components, you will often want to read those attributes into variables. But JavaScript has limitations on variable names. For example, their names can’t contain dashes or be reserved words like class.",
                                            "This is why, in React, many HTML and SVG attributes are written in camelCase. For example, instead of stroke-width you use strokeWidth. Since class is a reserved word, in React you write className instead, named after the corresponding DOM property:",
                                            {
                                                "code_example": "<img   src=\"https://i.imgur.com/yXOvdOSs.jpg\"   alt=\"Hedy Lamarr\"   className=\"photo\"/>"
                                            },
                                            "You can find all these attributes in the list of DOM component props. If you get one wrong, don’t worry—React will print a message with a possible correction to the browser console.",
                                            {
                                                "code_example": "aria-*"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Pro-tip: Use a JSX Converter ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/writing-markup-with-jsx/#pro-tip-use-a-jsx-converter",
                                        "content": [
                                            "Converting all these attributes in existing markup can be tedious! We recommend using a converter to translate your existing HTML and SVG to JSX. Converters are very useful in practice, but it’s still worth understanding what is going on so that you can comfortably write JSX on your own.",
                                            "Here is your final result:",
                                            {
                                                "code_sandbox": "export default function TodoList() {  return (    <>      <h1>Hedy Lamarr's Todos</h1>      <img         src=\"https://i.imgur.com/yXOvdOSs.jpg\"         alt=\"Hedy Lamarr\"         className=\"photo\"       />      <ul>        <li>Invent new traffic lights</li>        <li>Rehearse a movie scene</li>        <li>Improve the spectrum technology</li>      </ul>    </>  );}"
                                            },
                                            "RecapNow you know why JSX exists and how to use it in components:\nReact components group rendering logic together with markup because they are related.\nJSX is similar to HTML, with a few differences. You can use a converter if you need to.\nError messages will often point you in the right direction to fixing your markup.\n",
                                            "Try out some challengesChallenge 1 of 1: Convert some HTML to JSX This HTML was pasted into a component, but it’s not valid JSX. Fix it:App.jsApp.js ResetForkexport default function Bio() {\n  return (\n    <div class=\"intro\">\n      <h1>Welcome to my website!</h1>\n    </div>\n    <p class=\"summary\">\n      You can find my thoughts here.\n      <br><br>\n      <b>And <i>pictures</b></i> of scientists!\n    </p>\n  );\n}\n\nWhether to do it by hand or using the converter is up to you! Show solution"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "JavaScript in JSX with Curly Braces",
                        "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces",
                        "content": [
                            "JSX lets you write HTML-like markup inside a JavaScript file, keeping rendering logic and content in the same place. Sometimes you will want to add a little JavaScript logic or reference a dynamic property inside that markup. In this situation, you can use curly braces in your JSX to open a window to JavaScript.",
                            "  1.How to pass strings with quotes",
                            "  2.How to reference a JavaScript variable inside JSX with curly braces",
                            "  3.How to call a JavaScript function inside JSX with curly braces",
                            "  4.How to use a JavaScript object inside JSX with curly braces",
                            "You will learn\nHow to pass strings with quotes\nHow to reference a JavaScript variable inside JSX with curly braces\nHow to call a JavaScript function inside JSX with curly braces\nHow to use a JavaScript object inside JSX with curly braces\n",
                            {
                                "sub_header": "Passing strings with quotes ",
                                "source": "react",
                                "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces/#passing-strings-with-quotes",
                                "content": [
                                    "When you want to pass a string attribute to JSX, you put it in single or double quotes:",
                                    {
                                        "code_sandbox": "export default function Avatar() {  return (    <img      className=\"avatar\"      src=\"https://i.imgur.com/7vQD0fPs.jpg\"      alt=\"Gregorio Y. Zara\"    />  );}"
                                    },
                                    "Here, \"https://i.imgur.com/7vQD0fPs.jpg\" and \"Gregorio Y. Zara\" are being passed as strings.",
                                    "But what if you want to dynamically specify the src or alt text? You could use a value from JavaScript by replacing \" and \" with { and }:",
                                    {
                                        "code_sandbox": "export default function Avatar() {  const avatar = 'https://i.imgur.com/7vQD0fPs.jpg';  const description = 'Gregorio Y. Zara';  return (    <img      className=\"avatar\"      src={avatar}      alt={description}    />  );}"
                                    },
                                    "Notice the difference between className=\"avatar\", which specifies an \"avatar\" CSS class name that makes the image round, and src={avatar} that reads the value of the JavaScript variable called avatar. That’s because curly braces let you work with JavaScript right there in your markup!"
                                ]
                            },
                            {
                                "sub_header": "Using curly braces: A window into the JavaScript world ",
                                "source": "react",
                                "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces/#using-curly-braces-a-window-into-the-javascript-world",
                                "content": [
                                    "JSX is a special way of writing JavaScript. That means it’s possible to use JavaScript inside it—with curly braces { }. The example below first declares a name for the scientist, name, then embeds it with curly braces inside the <h1>:",
                                    {
                                        "code_sandbox": "export default function TodoList() {  const name = 'Gregorio Y. Zara';  return (    <h1>{name}'s To Do List</h1>  );}"
                                    },
                                    "Try changing the name’s value from 'Gregorio Y. Zara' to 'Hedy Lamarr'. See how the list title changes?",
                                    "Any JavaScript expression will work between curly braces, including function calls like formatDate():",
                                    {
                                        "code_sandbox": "const today = new Date();function formatDate(date) {  return new Intl.DateTimeFormat(    'en-US',    { weekday: 'long' }  ).format(date);}export default function TodoList() {  return (    <h1>To Do List for {formatDate(today)}</h1>  );}"
                                    },
                                    {
                                        "sub_header": "Where to use curly braces ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces/#where-to-use-curly-braces",
                                        "content": [
                                            "You can only use curly braces in two ways inside JSX:",
                                            "  1.As text directly inside a JSX tag: <h1>{name}'s To Do List</h1> works, but <{tag}>Gregorio Y. Zara's To Do List</{tag}>  will not.",
                                            "  2.As attributes immediately following the = sign: src={avatar} will read the avatar variable, but src=\"{avatar}\" will pass the string \"{avatar}\"."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Using “double curlies”: CSS and other objects in JSX ",
                                "source": "react",
                                "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces/#using-double-curlies-css-and-other-objects-in-jsx",
                                "content": [
                                    "In addition to strings, numbers, and other JavaScript expressions, you can even pass objects in JSX. Objects are also denoted with curly braces, like { name: \"Hedy Lamarr\", inventions: 5 }. Therefore, to pass a JS object in JSX, you must wrap the object in another pair of curly braces: person={{ name: \"Hedy Lamarr\", inventions: 5 }}.",
                                    "You may see this with inline CSS styles in JSX. React does not require you to use inline styles (CSS classes work great for most cases). But when you need an inline style, you pass an object to the style attribute:",
                                    {
                                        "code_sandbox": "export default function TodoList() {  return (    <ul style={{      backgroundColor: 'black',      color: 'pink'    }}>      <li>Improve the videophone</li>      <li>Prepare aeronautics lectures</li>      <li>Work on the alcohol-fuelled engine</li>    </ul>  );}"
                                    },
                                    "Try changing the values of backgroundColor and color.",
                                    "You can really see the JavaScript object inside the curly braces when you write it like this:",
                                    {
                                        "code_example": "<ul style={  {    backgroundColor: 'black',    color: 'pink'  }}>"
                                    },
                                    "The next time you see {{ and }} in JSX, know that it’s nothing more than an object inside the JSX curlies!",
                                    {
                                        "code_example": "style"
                                    }
                                ]
                            },
                            {
                                "sub_header": "More fun with JavaScript objects and curly braces ",
                                "source": "react",
                                "url": "https://react.dev/learn/javascript-in-jsx-with-curly-braces/#more-fun-with-javascript-objects-and-curly-braces",
                                "content": [
                                    "You can move several expressions into one object, and reference them in your JSX inside curly braces:",
                                    {
                                        "code_sandbox": "const person = {  name: 'Gregorio Y. Zara',  theme: {    backgroundColor: 'black',    color: 'pink'  }};export default function TodoList() {  return (    <div style={person.theme}>      <h1>{person.name}'s Todos</h1>      <img        className=\"avatar\"        src=\"https://i.imgur.com/7vQD0fPs.jpg\"        alt=\"Gregorio Y. Zara\"      />      <ul>        <li>Improve the videophone</li>        <li>Prepare aeronautics lectures</li>        <li>Work on the alcohol-fuelled engine</li>      </ul>    </div>  );}"
                                    },
                                    "In this example, the person JavaScript object contains a name string and a theme object:",
                                    {
                                        "code_example": "const person = {  name: 'Gregorio Y. Zara',  theme: {    backgroundColor: 'black',    color: 'pink'  }};"
                                    },
                                    "The component can use these values from person like so:",
                                    {
                                        "code_example": "<div style={person.theme}>  <h1>{person.name}'s Todos</h1>"
                                    },
                                    "JSX is very minimal as a templating language because it lets you organize data and logic using JavaScript.",
                                    "RecapNow you know almost everything about JSX:\nJSX attributes inside quotes are passed as strings.\nCurly braces let you bring JavaScript logic and variables into your markup.\nThey work inside the JSX tag content or immediately after = in attributes.\n{{ and }} is not special syntax: it’s a JavaScript object tucked inside JSX curly braces.\n",
                                    {
                                        "code_example": "Objects are not valid as a React child"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Passing Props to a Component",
                        "url": "https://react.dev/learn/passing-props-to-a-component",
                        "content": [
                            "React components use props to communicate with each other. Every parent component can pass some information to its child components by giving them props. Props might remind you of HTML attributes, but you can pass any JavaScript value through them, including objects, arrays, and functions.",
                            "  1.How to pass props to a component",
                            "  2.How to read props from a component",
                            "  3.How to specify default values for props",
                            "  4.How to pass some JSX to a component",
                            "  5.How props change over time",
                            "You will learn\nHow to pass props to a component\nHow to read props from a component\nHow to specify default values for props\nHow to pass some JSX to a component\nHow props change over time\n",
                            {
                                "sub_header": "Familiar props ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-props-to-a-component/#familiar-props",
                                "content": [
                                    "Props are the information that you pass to a JSX tag. For example, className, src, alt, width, and height are some of the props you can pass to an <img>:",
                                    {
                                        "code_sandbox": "function Avatar() {  return (    <img      className=\"avatar\"      src=\"https://i.imgur.com/1bX5QH6.jpg\"      alt=\"Lin Lanying\"      width={100}      height={100}    />  );}export default function Profile() {  return (    <Avatar />  );}"
                                    },
                                    "The props you can pass to an <img> tag are predefined (ReactDOM conforms to the HTML standard). But you can pass any props to your own components, such as <Avatar>, to customize them. Here’s how!"
                                ]
                            },
                            {
                                "sub_header": "Passing props to a component ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-props-to-a-component/#passing-props-to-a-component",
                                "content": [
                                    "In this code, the Profile component isn’t passing any props to its child component, Avatar:",
                                    {
                                        "code_example": "export default function Profile() {  return (    <Avatar />  );}"
                                    },
                                    "You can give Avatar some props in two steps.",
                                    {
                                        "sub_header": "Step 1: Pass props to the child component ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/passing-props-to-a-component/#step-1-pass-props-to-the-child-component",
                                        "content": [
                                            "First, pass some props to Avatar. For example, let’s pass two props: person (an object), and size (a number):",
                                            {
                                                "code_example": "export default function Profile() {  return (    <Avatar      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}      size={100}    />  );}"
                                            },
                                            {
                                                "code_example": "person="
                                            },
                                            "Now you can read these props inside the Avatar component."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Read props inside the child component ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/passing-props-to-a-component/#step-2-read-props-inside-the-child-component",
                                        "content": [
                                            "You can read these props by listing their names person, size separated by the commas inside ({ and }) directly after function Avatar. This lets you use them inside the Avatar code, like you would with a variable.",
                                            {
                                                "code_example": "function Avatar({ person, size }) {  // person and size are available here}"
                                            },
                                            "Add some logic to Avatar that uses the person and size props for rendering, and you’re done.",
                                            "Now you can configure Avatar to render in many different ways with different props. Try tweaking the values!",
                                            {
                                                "code_sandbox": "utils.jsimport { getImageUrl } from './utils.js';function Avatar({ person, size }) {  return (    <img      className=\"avatar\"      src={getImageUrl(person)}      alt={person.name}      width={size}      height={size}    />  );}export default function Profile() {  return (    <div>      <Avatar        size={100}        person={{           name: 'Katsuko Saruhashi',           imageId: 'YfeOqp2'        }}      />      <Avatar        size={80}        person={{          name: 'Aklilu Lemma',           imageId: 'OKS67lh'        }}      />      <Avatar        size={50}        person={{           name: 'Lin Lanying',          imageId: '1bX5QH6'        }}      />    </div>  );}"
                                            },
                                            "Props let you think about parent and child components independently. For example, you can change the person or the size props inside Profile without having to think about how Avatar uses them. Similarly, you can change how the Avatar uses these props, without looking at the Profile.",
                                            "You can think of props like “knobs” that you can adjust. They serve the same role as arguments serve for functions—in fact, props are the only argument to your component! React component functions accept a single argument, a props object:",
                                            {
                                                "code_example": "function Avatar(props) {  let person = props.person;  let size = props.size;  // ...}"
                                            },
                                            "Usually you don’t need the whole props object itself, so you destructure it into individual props.",
                                            {
                                                "code_example": "{"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Specifying a default value for a prop ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-props-to-a-component/#specifying-a-default-value-for-a-prop",
                                "content": [
                                    "If you want to give a prop a default value to fall back on when no value is specified, you can do it with the destructuring by putting = and the default value right after the parameter:",
                                    {
                                        "code_example": "function Avatar({ person, size = 100 }) {  // ...}"
                                    },
                                    "Now, if <Avatar person={...} /> is rendered with no size prop, the size will be set to 100.",
                                    "The default value is only used if the size prop is missing or if you pass size={undefined}. But if you pass size={null} or size={0}, the default value will not be used."
                                ]
                            },
                            {
                                "sub_header": "Forwarding props with the JSX spread syntax ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-props-to-a-component/#forwarding-props-with-the-jsx-spread-syntax",
                                "content": [
                                    "Sometimes, passing props gets very repetitive:",
                                    {
                                        "code_example": "function Profile({ person, size, isSepia, thickBorder }) {  return (    <div className=\"card\">      <Avatar        person={person}        size={size}        isSepia={isSepia}        thickBorder={thickBorder}      />    </div>  );}"
                                    },
                                    "There’s nothing wrong with repetitive code—it can be more legible. But at times you may value conciseness. Some components forward all of their props to their children, like how this Profile does with Avatar. Because they don’t use any of their props directly, it can make sense to use a more concise “spread” syntax:",
                                    {
                                        "code_example": "function Profile(props) {  return (    <div className=\"card\">      <Avatar {...props} />    </div>  );}"
                                    },
                                    "This forwards all of Profile’s props to the Avatar without listing each of their names.",
                                    "Use spread syntax with restraint. If you’re using it in every other component, something is wrong. Often, it indicates that you should split your components and pass children as JSX. More on that next!"
                                ]
                            },
                            {
                                "sub_header": "Passing JSX as children ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-props-to-a-component/#passing-jsx-as-children",
                                "content": [
                                    "It is common to nest built-in browser tags:",
                                    {
                                        "code_example": "<div>  <img /></div>"
                                    },
                                    "Sometimes you’ll want to nest your own components the same way:",
                                    {
                                        "code_example": "<Card>  <Avatar /></Card>"
                                    },
                                    "When you nest content inside a JSX tag, the parent component will receive that content in a prop called children. For example, the Card component below will receive a children prop set to <Avatar /> and render it in a wrapper div:",
                                    {
                                        "code_sandbox": "Avatar.jsutils.jsimport Avatar from './Avatar.js';function Card({ children }) {  return (    <div className=\"card\">      {children}    </div>  );}export default function Profile() {  return (    <Card>      <Avatar        size={100}        person={{           name: 'Katsuko Saruhashi',          imageId: 'YfeOqp2'        }}      />    </Card>  );}"
                                    },
                                    "Try replacing the <Avatar> inside <Card> with some text to see how the Card component can wrap any nested content. It doesn’t need to “know” what’s being rendered inside of it. You will see this flexible pattern in many places.",
                                    "You can think of a component with a children prop as having a “hole” that can be “filled in” by its parent components with arbitrary JSX. You will often use the children prop for visual wrappers: panels, grids, etc.",
                                    "",
                                    "Illustrated by Rachel Lee Nabors"
                                ]
                            },
                            {
                                "sub_header": "How props change over time ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-props-to-a-component/#how-props-change-over-time",
                                "content": [
                                    "The Clock component below receives two props from its parent component: color and time. (The parent component’s code is omitted because it uses state, which we won’t dive into just yet.)",
                                    "Try changing the color in the select box below:",
                                    {
                                        "code_sandbox": "Clock.jsClock.jsexport default function Clock({ color, time }) {  return (    <h1 style={{ color: color }}>      {time}    </h1>  );}"
                                    },
                                    "This example illustrates that a component may receive different props over time. Props are not always static! Here, the time prop changes every second, and the color prop changes when you select another color. Props reflect a component’s data at any point in time, rather than only in the beginning.",
                                    "However, props are immutable—a term from computer science meaning “unchangeable”. When a component needs to change its props (for example, in response to a user interaction or new data), it will have to “ask” its parent component to pass it different props—a new object! Its old props will then be cast aside, and eventually the JavaScript engine will reclaim the memory taken by them.",
                                    "Don’t try to “change props”. When you need to respond to the user input (like changing the selected color), you will need to “set state”, which you can learn about in State: A Component’s Memory.",
                                    "Recap\nTo pass props, add them to the JSX, just like you would with HTML attributes.\nTo read props, use the function Avatar({ person, size }) destructuring syntax.\nYou can specify a default value like size = 100, which is used for missing and undefined props.\nYou can forward all props with <Avatar {...props} /> JSX spread syntax, but don’t overuse it!\nNested JSX like <Card><Avatar /></Card> will appear as Card component’s children prop.\nProps are read-only snapshots in time: every render receives a new version of props.\nYou can’t change props. When you need interactivity, you’ll need to set state.\n",
                                    {
                                        "code_example": "children"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Conditional Rendering",
                        "url": "https://react.dev/learn/conditional-rendering",
                        "content": [
                            "  1.How to return different JSX depending on a condition",
                            "  2.How to conditionally include or exclude a piece of JSX",
                            "  3.Common conditional syntax shortcuts you’ll encounter in React codebases",
                            "You will learn\nHow to return different JSX depending on a condition\nHow to conditionally include or exclude a piece of JSX\nCommon conditional syntax shortcuts you’ll encounter in React codebases\n",
                            {
                                "sub_header": "Conditionally returning JSX ",
                                "source": "react",
                                "url": "https://react.dev/learn/conditional-rendering/#conditionally-returning-jsx",
                                "content": [
                                    "Let’s say you have a PackingList component rendering several Items, which can be marked as packed or not:",
                                    {
                                        "code_sandbox": "function Item({ name, isPacked }) {  return <li className=\"item\">{name}</li>;}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                    },
                                    "Notice that some of the Item components have their isPacked prop set to true instead of false. You want to add a checkmark (✅) to packed items if isPacked={true}.",
                                    "You can write this as an if/else statement like so:",
                                    {
                                        "code_example": "if (isPacked) {  return <li className=\"item\">{name} ✅</li>;}return <li className=\"item\">{name}</li>;"
                                    },
                                    "If the isPacked prop is true, this code returns a different JSX tree. With this change, some of the items get a checkmark at the end:",
                                    {
                                        "code_sandbox": "function Item({ name, isPacked }) {  if (isPacked) {    return <li className=\"item\">{name} ✅</li>;  }  return <li className=\"item\">{name}</li>;}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                    },
                                    "Try editing what gets returned in either case, and see how the result changes!",
                                    "Notice how you’re creating branching logic with JavaScript’s if and return statements. In React, control flow (like conditions) is handled by JavaScript.",
                                    {
                                        "sub_header": "Conditionally returning nothing with null ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/conditional-rendering/#conditionally-returning-nothing-with-null",
                                        "content": [
                                            "In some situations, you won’t want to render anything at all. For example, say you don’t want to show packed items at all. A component must return something. In this case, you can return null:",
                                            {
                                                "code_example": "if (isPacked) {  return null;}return <li className=\"item\">{name}</li>;"
                                            },
                                            "If isPacked is true, the component will return nothing, null. Otherwise, it will return JSX to render.",
                                            {
                                                "code_sandbox": "function Item({ name, isPacked }) {  if (isPacked) {    return null;  }  return <li className=\"item\">{name}</li>;}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                            },
                                            "In practice, returning null from a component isn’t common because it might surprise a developer trying to render it. More often, you would conditionally include or exclude the component in the parent component’s JSX. Here’s how to do that!"
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Conditionally including JSX ",
                                "source": "react",
                                "url": "https://react.dev/learn/conditional-rendering/#conditionally-including-jsx",
                                "content": [
                                    "In the previous example, you controlled which (if any!) JSX tree would be returned by the component. You may already have noticed some duplication in the render output:",
                                    {
                                        "code_example": "<li className=\"item\">{name} ✅</li>"
                                    },
                                    "is very similar to",
                                    {
                                        "code_example": "<li className=\"item\">{name}</li>"
                                    },
                                    "Both of the conditional branches return <li className=\"item\">...</li>:",
                                    {
                                        "code_example": "if (isPacked) {  return <li className=\"item\">{name} ✅</li>;}return <li className=\"item\">{name}</li>;"
                                    },
                                    "While this duplication isn’t harmful, it could make your code harder to maintain. What if you want to change the className? You’d have to do it in two places in your code! In such a situation, you could conditionally include a little JSX to make your code more DRY.",
                                    {
                                        "sub_header": "Conditional (ternary) operator (? :) ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/conditional-rendering/#conditional-ternary-operator--",
                                        "content": [
                                            "JavaScript has a compact syntax for writing a conditional expression — the conditional operator or “ternary operator”.",
                                            "Instead of this:",
                                            {
                                                "code_example": "if (isPacked) {  return <li className=\"item\">{name} ✅</li>;}return <li className=\"item\">{name}</li>;"
                                            },
                                            "You can write this:",
                                            {
                                                "code_example": "return (  <li className=\"item\">    {isPacked ? name + ' ✅' : name}  </li>);"
                                            },
                                            "You can read it as “if isPacked is true, then (?) render name + ' ✅', otherwise (:) render name”.",
                                            "Deep DiveAre these two examples fully equivalent? Show DetailsIf you’re coming from an object-oriented programming background, you might assume that the two examples above are subtly different because one of them may create two different “instances” of <li>. But JSX elements aren’t “instances” because they don’t hold any internal state and aren’t real DOM nodes. They’re lightweight descriptions, like blueprints. So these two examples, in fact, are completely equivalent. Preserving and Resetting State goes into detail about how this works.",
                                            "Now let’s say you want to wrap the completed item’s text into another HTML tag, like <del> to strike it out. You can add even more newlines and parentheses so that it’s easier to nest more JSX in each of the cases:",
                                            {
                                                "code_sandbox": "function Item({ name, isPacked }) {  return (    <li className=\"item\">      {isPacked ? (        <del>          {name + ' ✅'}        </del>      ) : (        name      )}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                            },
                                            "This style works well for simple conditions, but use it in moderation. If your components get messy with too much nested conditional markup, consider extracting child components to clean things up. In React, markup is a part of your code, so you can use tools like variables and functions to tidy up complex expressions."
                                        ]
                                    },
                                    {
                                        "sub_header": "Logical AND operator (&&) ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/conditional-rendering/#logical-and-operator-",
                                        "content": [
                                            "Another common shortcut you’ll encounter is the JavaScript logical AND (&&) operator. Inside React components, it often comes up when you want to render some JSX when the condition is true, or render nothing otherwise. With &&, you could conditionally render the checkmark only if isPacked is true:",
                                            {
                                                "code_example": "return (  <li className=\"item\">    {name} {isPacked && '✅'}  </li>);"
                                            },
                                            "You can read this as “if isPacked, then (&&) render the checkmark, otherwise, render nothing”.",
                                            "Here it is in action:",
                                            {
                                                "code_sandbox": "function Item({ name, isPacked }) {  return (    <li className=\"item\">      {name} {isPacked && '✅'}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                            },
                                            "A JavaScript && expression returns the value of its right side (in our case, the checkmark) if the left side (our condition) is true. But if the condition is false, the whole expression becomes false. React considers false as a “hole” in the JSX tree, just like null or undefined, and doesn’t render anything in its place.",
                                            {
                                                "code_example": "&&"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Conditionally assigning JSX to a variable ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/conditional-rendering/#conditionally-assigning-jsx-to-a-variable",
                                        "content": [
                                            "When the shortcuts get in the way of writing plain code, try using an if statement and a variable. You can reassign variables defined with let, so start by providing the default content you want to display, the name:",
                                            {
                                                "code_example": "let itemContent = name;"
                                            },
                                            "Use an if statement to reassign a JSX expression to itemContent if isPacked is true:",
                                            {
                                                "code_example": "if (isPacked) {  itemContent = name + \" ✅\";}"
                                            },
                                            "Curly braces open the “window into JavaScript”. Embed the variable with curly braces in the returned JSX tree, nesting the previously calculated expression inside of JSX:",
                                            {
                                                "code_example": "<li className=\"item\">  {itemContent}</li>"
                                            },
                                            "This style is the most verbose, but it’s also the most flexible. Here it is in action:",
                                            {
                                                "code_sandbox": "function Item({ name, isPacked }) {  let itemContent = name;  if (isPacked) {    itemContent = name + \" ✅\";  }  return (    <li className=\"item\">      {itemContent}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                            },
                                            "Like before, this works not only for text, but for arbitrary JSX too:",
                                            {
                                                "code_sandbox": "function Item({ name, isPacked }) {  let itemContent = name;  if (isPacked) {    itemContent = (      <del>        {name + \" ✅\"}      </del>    );  }  return (    <li className=\"item\">      {itemContent}    </li>  );}export default function PackingList() {  return (    <section>      <h1>Sally Ride's Packing List</h1>      <ul>        <Item           isPacked={true}           name=\"Space suit\"         />        <Item           isPacked={true}           name=\"Helmet with a golden leaf\"         />        <Item           isPacked={false}           name=\"Photo of Tam\"         />      </ul>    </section>  );}"
                                            },
                                            "If you’re not familiar with JavaScript, this variety of styles might seem overwhelming at first. However, learning them will help you read and write any JavaScript code — and not just React components! Pick the one you prefer for a start, and then consult this reference again if you forget how the other ones work.",
                                            "Recap\nIn React, you control branching logic with JavaScript.\nYou can return a JSX expression conditionally with an if statement.\nYou can conditionally save some JSX to a variable and then include it inside other JSX by using the curly braces.\nIn JSX, {cond ? <A /> : <B />} means “if cond, render <A />, otherwise <B />”.\nIn JSX, {cond && <A />} means “if cond, render <A />, otherwise nothing”.\nThe shortcuts are common, but you don’t have to use them if you prefer plain if.\n",
                                            {
                                                "code_example": "? :"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Rendering Lists",
                        "url": "https://react.dev/learn/rendering-lists",
                        "content": [
                            {
                                "sub_header": "Rendering data from arrays ",
                                "source": "react",
                                "url": "https://react.dev/learn/rendering-lists/#rendering-data-from-arrays",
                                "content": [
                                    "Say that you have a list of content.",
                                    {
                                        "code_example": "<ul>  <li>Creola Katherine Johnson: mathematician</li>  <li>Mario José Molina-Pasquel Henríquez: chemist</li>  <li>Mohammad Abdus Salam: physicist</li>  <li>Percy Lavon Julian: chemist</li>  <li>Subrahmanyan Chandrasekhar: astrophysicist</li></ul>"
                                    },
                                    "The only difference among those list items is their contents, their data. You will often need to show several instances of the same component using different data when building interfaces: from lists of comments to galleries of profile images. In these situations, you can store that data in JavaScript objects and arrays and use methods like map() and filter() to render lists of components from them.",
                                    "Here’s a short example of how to generate a list of items from an array:",
                                    "  1.Move the data into an array:",
                                    {
                                        "code_example": "const people = [  'Creola Katherine Johnson: mathematician',  'Mario José Molina-Pasquel Henríquez: chemist',  'Mohammad Abdus Salam: physicist',  'Percy Lavon Julian: chemist',  'Subrahmanyan Chandrasekhar: astrophysicist'];"
                                    },
                                    "  1.Map the people members into a new array of JSX nodes, listItems:",
                                    {
                                        "code_example": "const listItems = people.map(person => <li>{person}</li>);"
                                    },
                                    "  1.Return listItems from your component wrapped in a <ul>:",
                                    {
                                        "code_example": "return <ul>{listItems}</ul>;"
                                    },
                                    "Here is the result:",
                                    {
                                        "code_sandbox": "const people = [  'Creola Katherine Johnson: mathematician',  'Mario José Molina-Pasquel Henríquez: chemist',  'Mohammad Abdus Salam: physicist',  'Percy Lavon Julian: chemist',  'Subrahmanyan Chandrasekhar: astrophysicist'];export default function List() {  const listItems = people.map(person =>    <li>{person}</li>  );  return <ul>{listItems}</ul>;}"
                                    },
                                    "Notice the sandbox above displays a console error:",
                                    "ConsoleWarning: Each child in a list should have a unique “key” prop.",
                                    "You’ll learn how to fix this error later on this page. Before we get to that, let’s add some structure to your data."
                                ]
                            },
                            {
                                "sub_header": "Filtering arrays of items ",
                                "source": "react",
                                "url": "https://react.dev/learn/rendering-lists/#filtering-arrays-of-items",
                                "content": [
                                    "This data can be structured even more.",
                                    {
                                        "code_example": "const people = [{  id: 0,  name: 'Creola Katherine Johnson',  profession: 'mathematician',}, {  id: 1,  name: 'Mario José Molina-Pasquel Henríquez',  profession: 'chemist',}, {  id: 2,  name: 'Mohammad Abdus Salam',  profession: 'physicist',}, {  id: 3,  name: 'Percy Lavon Julian',  profession: 'chemist',  }, {  id: 4,  name: 'Subrahmanyan Chandrasekhar',  profession: 'astrophysicist',}];"
                                    },
                                    "Let’s say you want a way to only show people whose profession is 'chemist'. You can use JavaScript’s filter() method to return just those people. This method takes an array of items, passes them through a “test” (a function that returns true or false), and returns a new array of only those items that passed the test (returned true).",
                                    "You only want the items where profession is 'chemist'. The “test” function for this looks like (person) => person.profession === 'chemist'. Here’s how to put it together:",
                                    "  1.Create a new array of just “chemist” people, chemists, by calling filter() on the people filtering by person.profession === 'chemist':",
                                    {
                                        "code_example": "const chemists = people.filter(person =>  person.profession === 'chemist');"
                                    },
                                    "  1.Now map over chemists:",
                                    {
                                        "code_example": "const listItems = chemists.map(person =>  <li>     <img       src={getImageUrl(person)}       alt={person.name}     />     <p>       <b>{person.name}:</b>       {' ' + person.profession + ' '}       known for {person.accomplishment}     </p>  </li>);"
                                    },
                                    "  1.Lastly, return the listItems from your component:",
                                    {
                                        "code_example": "return <ul>{listItems}</ul>;"
                                    },
                                    {
                                        "code_sandbox": "data.jsutils.jsimport { people } from './data.js';import { getImageUrl } from './utils.js';export default function List() {  const chemists = people.filter(person =>    person.profession === 'chemist'  );  const listItems = chemists.map(person =>    <li>      <img        src={getImageUrl(person)}        alt={person.name}      />      <p>        <b>{person.name}:</b>        {' ' + person.profession + ' '}        known for {person.accomplishment}      </p>    </li>  );  return <ul>{listItems}</ul>;}"
                                    },
                                    {
                                        "code_example": "=>"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Keeping list items in order with key ",
                                "source": "react",
                                "url": "https://react.dev/learn/rendering-lists/#keeping-list-items-in-order-with-key",
                                "content": [
                                    "Notice that all the sandboxes above show an error in the console:",
                                    "ConsoleWarning: Each child in a list should have a unique “key” prop.",
                                    "You need to give each array item a key — a string or a number that uniquely identifies it among other items in that array:",
                                    {
                                        "code_example": "<li key={person.id}>...</li>"
                                    },
                                    {
                                        "code_example": "map()"
                                    },
                                    "Keys tell React which array item each component corresponds to, so that it can match them up later. This becomes important if your array items can move (e.g. due to sorting), get inserted, or get deleted. A well-chosen key helps React infer what exactly has happened, and make the correct updates to the DOM tree.",
                                    "Rather than generating keys on the fly, you should include them in your data:",
                                    {
                                        "code_sandbox": "data.jsutils.jsdata.jsexport const people = [{  id: 0, // Used in JSX as a key  name: 'Creola Katherine Johnson',  profession: 'mathematician',  accomplishment: 'spaceflight calculations',  imageId: 'MK3eW3A'}, {  id: 1, // Used in JSX as a key  name: 'Mario José Molina-Pasquel Henríquez',  profession: 'chemist',  accomplishment: 'discovery of Arctic ozone hole',  imageId: 'mynHUSa'}, {  id: 2, // Used in JSX as a key  name: 'Mohammad Abdus Salam',  profession: 'physicist',  accomplishment: 'electromagnetism theory',  imageId: 'bE7W1ji'}, {  id: 3, // Used in JSX as a key  name: 'Percy Lavon Julian',  profession: 'chemist',  accomplishment: 'pioneering cortisone drugs, steroids and birth control pills',  imageId: 'IOjWm71'}, {  id: 4, // Used in JSX as a key  name: 'Subrahmanyan Chandrasekhar',  profession: 'astrophysicist',  accomplishment: 'white dwarf star mass calculations',  imageId: 'lrWQx8l'}];"
                                    },
                                    "Deep DiveDisplaying several DOM nodes for each list item Show DetailsWhat do you do when each item needs to render not one, but several DOM nodes?The short <>...</> Fragment syntax won’t let you pass a key, so you need to either group them into a single <div>, or use the slightly longer and more explicit <Fragment> syntax:import { Fragment } from 'react';// ...const listItems = people.map(person =>  <Fragment key={person.id}>    <h1>{person.name}</h1>    <p>{person.bio}</p>  </Fragment>);Fragments disappear from the DOM, so this will produce a flat list of <h1>, <p>, <h1>, <p>, and so on.",
                                    {
                                        "sub_header": "Where to get your key ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/rendering-lists/#where-to-get-your-key",
                                        "content": [
                                            "Different sources of data provide different sources of keys:",
                                            "  1.Data from a database: If your data is coming from a database, you can use the database keys/IDs, which are unique by nature.",
                                            "  2.Locally generated data: If your data is generated and persisted locally (e.g. notes in a note-taking app), use an incrementing counter, crypto.randomUUID() or a package like uuid when creating items."
                                        ]
                                    },
                                    {
                                        "sub_header": "Rules of keys ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/rendering-lists/#rules-of-keys",
                                        "content": [
                                            "  1.Keys must be unique among siblings. However, it’s okay to use the same keys for JSX nodes in different arrays.",
                                            "  2.Keys must not change or that defeats their purpose! Don’t generate them while rendering."
                                        ]
                                    },
                                    {
                                        "sub_header": "Why does React need keys? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/rendering-lists/#why-does-react-need-keys",
                                        "content": [
                                            "Imagine that files on your desktop didn’t have names. Instead, you’d refer to them by their order — the first file, the second file, and so on. You could get used to it, but once you delete a file, it would get confusing. The second file would become the first file, the third file would be the second file, and so on.",
                                            "File names in a folder and JSX keys in an array serve a similar purpose. They let us uniquely identify an item between its siblings. A well-chosen key provides more information than the position within the array. Even if the position changes due to reordering, the key lets React identify the item throughout its lifetime.",
                                            {
                                                "code_example": "key"
                                            },
                                            "RecapOn this page you learned:\nHow to move data out of components and into data structures like arrays and objects.\nHow to generate sets of similar components with JavaScript’s map().\nHow to create arrays of filtered items with JavaScript’s filter().\nWhy and how to set key on each component in a collection so React can keep track of each of them even if their position or data changes.\n",
                                            {
                                                "code_example": "person.profession === 'chemist'"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Keeping Components Pure",
                        "url": "https://react.dev/learn/keeping-components-pure",
                        "content": [
                            "Some JavaScript functions are pure. Pure functions only perform a calculation and nothing more. By strictly only writing your components as pure functions, you can avoid an entire class of baffling bugs and unpredictable behavior as your codebase grows. To get these benefits, though, there are a few rules you must follow.",
                            "  1.What purity is and how it helps you avoid bugs",
                            "  2.How to keep components pure by keeping changes out of the render phase",
                            "  3.How to use Strict Mode to find mistakes in your components",
                            "You will learn\nWhat purity is and how it helps you avoid bugs\nHow to keep components pure by keeping changes out of the render phase\nHow to use Strict Mode to find mistakes in your components\n",
                            {
                                "sub_header": "Purity: Components as formulas ",
                                "source": "react",
                                "url": "https://react.dev/learn/keeping-components-pure/#purity-components-as-formulas",
                                "content": [
                                    "In computer science (and especially the world of functional programming), a pure function is a function with the following characteristics:",
                                    "  1.It minds its own business. It does not change any objects or variables that existed before it was called.",
                                    "  2.Same inputs, same output. Given the same inputs, a pure function should always return the same result.",
                                    "You might already be familiar with one example of pure functions: formulas in math.",
                                    "Consider this math formula: y = 2x.",
                                    "If x = 2 then y = 4. Always.",
                                    "If x = 3 then y = 6. Always.",
                                    "If x = 3, y won’t sometimes be 9 or –1 or 2.5 depending on the time of day or the state of the stock market.",
                                    "If y = 2x and x = 3, y will always be 6.",
                                    "If we made this into a JavaScript function, it would look like this:",
                                    {
                                        "code_example": "function double(number) {  return 2 * number;}"
                                    },
                                    "In the above example, double is a pure function. If you pass it 3, it will return 6. Always.",
                                    "React is designed around this concept. React assumes that every component you write is a pure function. This means that React components you write must always return the same JSX given the same inputs:",
                                    {
                                        "code_sandbox": "function Recipe({ drinkers }) {  return (    <ol>          <li>Boil {drinkers} cups of water.</li>      <li>Add {drinkers} spoons of tea and {0.5 * drinkers} spoons of spice.</li>      <li>Add {0.5 * drinkers} cups of milk to boil and sugar to taste.</li>    </ol>  );}export default function App() {  return (    <section>      <h1>Spiced Chai Recipe</h1>      <h2>For two</h2>      <Recipe drinkers={2} />      <h2>For a gathering</h2>      <Recipe drinkers={4} />    </section>  );}"
                                    },
                                    "When you pass drinkers={2} to Recipe, it will return JSX containing 2 cups of water. Always.",
                                    "If you pass drinkers={4}, it will return JSX containing 4 cups of water. Always.",
                                    "Just like a math formula.",
                                    "You could think of your components as recipes: if you follow them and don’t introduce new ingredients during the cooking process, you will get the same dish every time. That “dish” is the JSX that the component serves to React to render.",
                                    "",
                                    "Illustrated by Rachel Lee Nabors"
                                ]
                            },
                            {
                                "sub_header": "Side Effects: (un)intended consequences ",
                                "source": "react",
                                "url": "https://react.dev/learn/keeping-components-pure/#side-effects-unintended-consequences",
                                "content": [
                                    "React’s rendering process must always be pure. Components should only return their JSX, and not change any objects or variables that existed before rendering—that would make them impure!",
                                    "Here is a component that breaks this rule:",
                                    {
                                        "code_sandbox": "let guest = 0;function Cup() {  // Bad: changing a preexisting variable!  guest = guest + 1;  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaSet() {  return (    <>      <Cup />      <Cup />      <Cup />    </>  );}"
                                    },
                                    "This component is reading and writing a guest variable declared outside of it. This means that calling this component multiple times will produce different JSX! And what’s more, if other components read guest, they will produce different JSX, too, depending on when they were rendered! That’s not predictable.",
                                    "Going back to our formula y = 2x, now even if x = 2, we cannot trust that y = 4. Our tests could fail, our users would be baffled, planes would fall out of the sky—you can see how this would lead to confusing bugs!",
                                    "You can fix this component by passing guest as a prop instead:",
                                    {
                                        "code_sandbox": "function Cup({ guest }) {  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaSet() {  return (    <>      <Cup guest={1} />      <Cup guest={2} />      <Cup guest={3} />    </>  );}"
                                    },
                                    "Now your component is pure, as the JSX it returns only depends on the guest prop.",
                                    "In general, you should not expect your components to be rendered in any particular order. It doesn’t matter if you call y = 2x before or after y = 5x: both formulas will resolve independently of each other. In the same way, each component should only “think for itself”, and not attempt to coordinate with or depend upon others during rendering. Rendering is like a school exam: each component should calculate JSX on their own!",
                                    "Deep DiveDetecting impure calculations with StrictMode Show DetailsAlthough you might not have used them all yet, in React there are three kinds of inputs that you can read while rendering: props, state, and context. You should always treat these inputs as read-only.When you want to change something in response to user input, you should set state instead of writing to a variable. You should never change preexisting variables or objects while your component is rendering.React offers a “Strict Mode” in which it calls each component’s function twice during development. By calling the component functions twice, Strict Mode helps find components that break these rules.Notice how the original example displayed “Guest #2”, “Guest #4”, and “Guest #6” instead of “Guest #1”, “Guest #2”, and “Guest #3”. The original function was impure, so calling it twice broke it. But the fixed pure version works even if the function is called twice every time. Pure functions only calculate, so calling them twice won’t change anything—just like calling double(2) twice doesn’t change what’s returned, and solving y = 2x twice doesn’t change what y is. Same inputs, same outputs. Always.Strict Mode has no effect in production, so it won’t slow down the app for your users. To opt into Strict Mode, you can wrap your root component into <React.StrictMode>. Some frameworks do this by default.",
                                    {
                                        "sub_header": "Local mutation: Your component’s little secret ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/keeping-components-pure/#local-mutation-your-components-little-secret",
                                        "content": [
                                            "In the above example, the problem was that the component changed a preexisting variable while rendering. This is often called a “mutation” to make it sound a bit scarier. Pure functions don’t mutate variables outside of the function’s scope or objects that were created before the call—that makes them impure!",
                                            "However, it’s completely fine to change variables and objects that you’ve just created while rendering. In this example, you create an [] array, assign it to a cups variable, and then push a dozen cups into it:",
                                            {
                                                "code_sandbox": "function Cup({ guest }) {  return <h2>Tea cup for guest #{guest}</h2>;}export default function TeaGathering() {  let cups = [];  for (let i = 1; i <= 12; i++) {    cups.push(<Cup key={i} guest={i} />);  }  return cups;}"
                                            },
                                            "If the cups variable or the [] array were created outside the TeaGathering function, this would be a huge problem! You would be changing a preexisting object by pushing items into that array.",
                                            "However, it’s fine because you’ve created them during the same render, inside TeaGathering. No code outside of TeaGathering will ever know that this happened. This is called “local mutation”—it’s like your component’s little secret."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Where you can cause side effects ",
                                "source": "react",
                                "url": "https://react.dev/learn/keeping-components-pure/#where-you-_can_-cause-side-effects",
                                "content": [
                                    "While functional programming relies heavily on purity, at some point, somewhere, something has to change. That’s kind of the point of programming! These changes—updating the screen, starting an animation, changing the data—are called side effects. They’re things that happen “on the side”, not during rendering.",
                                    "In React, side effects usually belong inside event handlers. Event handlers are functions that React runs when you perform some action—for example, when you click a button. Even though event handlers are defined inside your component, they don’t run during rendering! So event handlers don’t need to be pure.",
                                    "If you’ve exhausted all other options and can’t find the right event handler for your side effect, you can still attach it to your returned JSX with a useEffect call in your component. This tells React to execute it later, after rendering, when side effects are allowed. However, this approach should be your last resort.",
                                    "When possible, try to express your logic with rendering alone. You’ll be surprised how far this can take you!",
                                    "Deep DiveWhy does React care about purity? Show DetailsWriting pure functions takes some habit and discipline. But it also unlocks marvelous opportunities:\nYour components could run in a different environment—for example, on the server! Since they return the same result for the same inputs, one component can serve many user requests.\nYou can improve performance by skipping rendering components whose inputs have not changed. This is safe because pure functions always return the same results, so they are safe to cache.\nIf some data changes in the middle of rendering a deep component tree, React can restart rendering without wasting time to finish the outdated render. Purity makes it safe to stop calculating at any time.\nEvery new React feature we’re building takes advantage of purity. From data fetching to animations to performance, keeping components pure unlocks the power of the React paradigm.",
                                    "Recap\nA component must be pure, meaning:\n\nIt minds its own business. It should not change any objects or variables that existed before rendering.\nSame inputs, same output. Given the same inputs, a component should always return the same JSX.\n\n\nRendering can happen at any time, so components should not depend on each others’ rendering sequence.\nYou should not mutate any of the inputs that your components use for rendering. That includes props, state, and context. To update the screen, “set” state instead of mutating preexisting objects.\nStrive to express your component’s logic in the JSX you return. When you need to “change things”, you’ll usually want to do it in an event handler. As a last resort, you can useEffect.\nWriting pure functions takes a bit of practice, but it unlocks the power of React’s paradigm.\n",
                                    {
                                        "code_example": "<h1>"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Understanding Your UI as a Tree",
                        "url": "https://react.dev/learn/understanding-your-ui-as-a-tree",
                        "content": [
                            "Your React app is taking shape with many components being nested within each other. How does React keep track of your app’s component structure?React, and many other UI libraries, model UI as a tree. Thinking of your app as a tree is useful for understanding the relationship between components. This understanding will help you debug future concepts like performance and state management.",
                            "  1.How React “sees” component structures",
                            "  2.What a render tree is and what it is useful for",
                            "  3.What a module dependency tree is and what it is useful for",
                            "You will learn\nHow React “sees” component structures\nWhat a render tree is and what it is useful for\nWhat a module dependency tree is and what it is useful for\n",
                            {
                                "sub_header": "Your UI as a tree ",
                                "source": "react",
                                "url": "https://react.dev/learn/understanding-your-ui-as-a-tree/#your-ui-as-a-tree",
                                "content": [
                                    "Trees are a relationship model between items and UI is often represented using tree structures. For example, browsers use tree structures to model HTML (DOM) and CSS (CSSOM). Mobile platforms also use trees to represent their view hierarchy.",
                                    "React creates a UI tree from your components. In this example, the UI tree is then used to render to the DOM.",
                                    "Like browsers and mobile platforms, React also uses tree structures to manage and model the relationship between components in a React app. These trees are useful tools to understand how data flows through a React app and how to optimize rendering and app size."
                                ]
                            },
                            {
                                "sub_header": "The Render Tree ",
                                "source": "react",
                                "url": "https://react.dev/learn/understanding-your-ui-as-a-tree/#the-render-tree",
                                "content": [
                                    "A major feature of components is the ability to compose components of other components. As we nest components, we have the concept of parent and child components, where each parent component may itself be a child of another component.",
                                    "When we render a React app, we can model this relationship in a tree, known as the render tree.",
                                    "Here is a React app that renders inspirational quotes.",
                                    {
                                        "code_sandbox": "FancyText.jsInspirationGenerator.jsCopyright.jsquotes.jsimport FancyText from './FancyText';import InspirationGenerator from './InspirationGenerator';import Copyright from './Copyright';export default function App() {  return (    <>      <FancyText title text=\"Get Inspired App\" />      <InspirationGenerator>        <Copyright year={2004} />      </InspirationGenerator>    </>  );}"
                                    },
                                    "React creates a render tree, a UI tree, composed of the rendered components.",
                                    "From the example app, we can construct the above render tree.",
                                    "The tree is composed of nodes, each of which represents a component. App, FancyText, Copyright, to name a few, are all nodes in our tree.",
                                    "The root node in a React render tree is the root component of the app. In this case, the root component is App and it is the first component React renders. Each arrow in the tree points from a parent component to a child component.",
                                    "Deep DiveWhere are the HTML tags in the render tree? Show DetailsYou’ll notice in the above render tree, there is no mention of the HTML tags that each component renders. This is because the render tree is only composed of React components.React, as a UI framework, is platform agnostic. On react.dev, we showcase examples that render to the web, which uses HTML markup as its UI primitives. But a React app could just as likely render to a mobile or desktop platform, which may use different UI primitives like UIView or FrameworkElement.These platform UI primitives are not a part of React. React render trees can provide insight to our React app regardless of what platform your app renders to.",
                                    "A render tree represents a single render pass of a React application. With conditional rendering, a parent component may render different children depending on the data passed.",
                                    "We can update the app to conditionally render either an inspirational quote or color.",
                                    {
                                        "code_sandbox": "FancyText.jsColor.jsInspirationGenerator.jsCopyright.jsinspirations.jsimport FancyText from './FancyText';import InspirationGenerator from './InspirationGenerator';import Copyright from './Copyright';export default function App() {  return (    <>      <FancyText title text=\"Get Inspired App\" />      <InspirationGenerator>        <Copyright year={2004} />      </InspirationGenerator>    </>  );}"
                                    },
                                    "With conditional rendering, across different renders, the render tree may render different components.",
                                    "In this example, depending on what inspiration.type is, we may render <FancyText> or <Color>. The render tree may be different for each render pass.",
                                    "Although render trees may differ across render passes, these trees are generally helpful for identifying what the top-level and leaf components are in a React app. Top-level components are the components nearest to the root component and affect the rendering performance of all the components beneath them and often contain the most complexity. Leaf components are near the bottom of the tree and have no child components and are often frequently re-rendered.",
                                    "Identifying these categories of components are useful for understanding data flow and performance of your app."
                                ]
                            },
                            {
                                "sub_header": "The Module Dependency Tree ",
                                "source": "react",
                                "url": "https://react.dev/learn/understanding-your-ui-as-a-tree/#the-module-dependency-tree",
                                "content": [
                                    "Another relationship in a React app that can be modeled with a tree are an app’s module dependencies. As we break up our components and logic into separate files, we create JS modules where we may export components, functions, or constants.",
                                    "Each node in a module dependency tree is a module and each branch represents an import statement in that module.",
                                    "If we take the previous Inspirations app, we can build a module dependency tree, or dependency tree for short.",
                                    "The module dependency tree for the Inspirations app.",
                                    "The root node of the tree is the root module, also known as the entrypoint file. It often is the module that contains the root component.",
                                    "Comparing to the render tree of the same app, there are similar structures but some notable differences:",
                                    "  1.The nodes that make-up the tree represent modules, not components.",
                                    "  2.Non-component modules, like inspirations.js, are also represented in this tree. The render tree only encapsulates components.",
                                    "  3.Copyright.js appears under App.js but in the render tree, Copyright, the component, appears as a child of InspirationGenerator. This is because InspirationGenerator accepts JSX as children props, so it renders Copyright as a child component but does not import the module.",
                                    "Dependency trees are useful to determine what modules are necessary to run your React app. When building a React app for production, there is typically a build step that will bundle all the necessary JavaScript to ship to the client. The tool responsible for this is called a bundler, and bundlers will use the dependency tree to determine what modules should be included.",
                                    "As your app grows, often the bundle size does too. Large bundle sizes are expensive for a client to download and run. Large bundle sizes can delay the time for your UI to get drawn. Getting a sense of your app’s dependency tree may help with debugging these issues.",
                                    "Recap\nTrees are a common way to represent the relationship between entities. They are often used to model UI.\nRender trees represent the nested relationship between React components across a single render.\nWith conditional rendering, the render tree may change across different renders. With different prop values, components may render different children components.\nRender trees help identify what the top-level and leaf components are. Top-level components affect the rendering performance of all components beneath them and leaf components are often re-rendered frequently. Identifying them is useful for understanding and debugging rendering performance.\nDependency trees represent the module dependencies in a React app.\nDependency trees are used by build tools to bundle the necessary code to ship an app.\nDependency trees are useful for debugging large bundle sizes that slow time to paint and expose opportunities for optimizing what code is bundled.\n"
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "Adding Interactivity",
        "source": "react",
        "url": "https://react.dev/learn/adding-interactivity",
        "sections": [
            "Some things on the screen update in response to user input. For example, clicking an image gallery switches the active image. In React, data that changes over time is called state. You can add state to any component, and update it as needed. In this chapter, you’ll learn how to write components that handle interactions, update their state, and display different output over time.",
            "  1.How to handle user-initiated events",
            "  2.How to make components “remember” information with state",
            "  3.How React updates the UI in two phases",
            "  4.Why state doesn’t update right after you change it",
            "  5.How to queue multiple state updates",
            "  6.How to update an object in state",
            "  7.How to update an array in state",
            "In this chapter\nHow to handle user-initiated events\nHow to make components “remember” information with state\nHow React updates the UI in two phases\nWhy state doesn’t update right after you change it\nHow to queue multiple state updates\nHow to update an object in state\nHow to update an array in state\n",
            {
                "subHeader": "Responding to events ",
                "url": "https://react.dev/learn/adding-interactivity/#responding-to-events",
                "sections": [
                    "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to user interactions like clicking, hovering, focusing on form inputs, and so on.",
                    "Built-in components like <button> only support built-in browser events like onClick. However, you can also create your own components, and give their event handler props any application-specific names that you like.",
                    {
                        "code_sandbox": "export default function App() {  return (    <Toolbar      onPlayMovie={() => alert('Playing!')}      onUploadImage={() => alert('Uploading!')}    />  );}function Toolbar({ onPlayMovie, onUploadImage }) {  return (    <div>      <Button onClick={onPlayMovie}>        Play Movie      </Button>      <Button onClick={onUploadImage}>        Upload Image      </Button>    </div>  );}function Button({ onClick, children }) {  return (    <button onClick={onClick}>      {children}    </button>  );}"
                    },
                    "Ready to learn this topic?Read Responding to Events to learn how to add event handlers.Read More",
                    ""
                ]
            },
            {
                "subHeader": "State: a component’s memory ",
                "url": "https://react.dev/learn/adding-interactivity/#state-a-components-memory",
                "sections": [
                    "Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” puts a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.",
                    "You can add state to a component with a useState Hook. Hooks are special functions that let your components use React features (state is one of those features). The useState Hook lets you declare a state variable. It takes the initial state and returns a pair of values: the current state, and a state setter function that lets you update it.",
                    {
                        "code_example": "const [index, setIndex] = useState(0);const [showMore, setShowMore] = useState(false);"
                    },
                    "Here is how an image gallery uses and updates state on click:",
                    {
                        "code_sandbox": "data.jsimport { useState } from 'react';import { sculptureList } from './data.js';export default function Gallery() {  const [index, setIndex] = useState(0);  const [showMore, setShowMore] = useState(false);  const hasNext = index < sculptureList.length - 1;  function handleNextClick() {    if (hasNext) {      setIndex(index + 1);    } else {      setIndex(0);    }  }  function handleMoreClick() {    setShowMore(!showMore);  }  let sculpture = sculptureList[index];  return (    <>      <button onClick={handleNextClick}>        Next      </button>      <h2>        <i>{sculpture.name} </i>        by {sculpture.artist}      </h2>      <h3>        ({index + 1} of {sculptureList.length})      </h3>      <button onClick={handleMoreClick}>        {showMore ? 'Hide' : 'Show'} details      </button>      {showMore && <p>{sculpture.description}</p>}      <img        src={sculpture.url}        alt={sculpture.alt}      />    </>  );}"
                    },
                    "Ready to learn this topic?Read State: A Component’s Memory to learn how to remember a value and update it on interaction.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Render and commit ",
                "url": "https://react.dev/learn/adding-interactivity/#render-and-commit",
                "sections": [
                    "Before your components are displayed on the screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.",
                    "Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:",
                    "  1.Triggering a render (delivering the diner’s order to the kitchen)",
                    "  2.Rendering the component (preparing the order in the kitchen)",
                    "  3.Committing to the DOM (placing the order on the table)",
                    "  1.Trigger",
                    "  2.Render",
                    "  3.Commit",
                    "Illustrated by Rachel Lee Nabors",
                    "Ready to learn this topic?Read Render and Commit to learn the lifecycle of a UI update.Read More",
                    ""
                ]
            },
            {
                "subHeader": "State as a snapshot ",
                "url": "https://react.dev/learn/adding-interactivity/#state-as-a-snapshot",
                "sections": [
                    "Unlike regular JavaScript variables, React state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render. This can be surprising at first!",
                    {
                        "code_example": "console.log(count);  // 0setCount(count + 1); // Request a re-render with 1console.log(count);  // Still 0!"
                    },
                    "This behavior helps you avoid subtle bugs. Here is a little chat app. Try to guess what happens if you press “Send” first and then change the recipient to Bob. Whose name will appear in the alert five seconds later?",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [to, setTo] = useState('Alice');  const [message, setMessage] = useState('Hello');  function handleSubmit(e) {    e.preventDefault();    setTimeout(() => {      alert(`You said ${message} to ${to}`);    }, 5000);  }  return (    <form onSubmit={handleSubmit}>      <label>        To:{' '}        <select          value={to}          onChange={e => setTo(e.target.value)}>          <option value=\"Alice\">Alice</option>          <option value=\"Bob\">Bob</option>        </select>      </label>      <textarea        placeholder=\"Message\"        value={message}        onChange={e => setMessage(e.target.value)}      />      <button type=\"submit\">Send</button>    </form>  );}"
                    },
                    "Ready to learn this topic?Read State as a Snapshot to learn why state appears “fixed” and unchanging inside the event handlers.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Queueing a series of state updates ",
                "url": "https://react.dev/learn/adding-interactivity/#queueing-a-series-of-state-updates",
                "sections": [
                    "This component is buggy: clicking “+3” increments the score only once.",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [score, setScore] = useState(0);  function increment() {    setScore(score + 1);  }  return (    <>      <button onClick={() => increment()}>+1</button>      <button onClick={() => {        increment();        increment();        increment();      }}>+3</button>      <h1>Score: {score}</h1>    </>  )}"
                    },
                    "State as a Snapshot explains why this is happening. Setting state requests a new re-render, but does not change it in the already running code. So score continues to be 0 right after you call setScore(score + 1).",
                    {
                        "code_example": "console.log(score);  // 0setScore(score + 1); // setScore(0 + 1);console.log(score);  // 0setScore(score + 1); // setScore(0 + 1);console.log(score);  // 0setScore(score + 1); // setScore(0 + 1);console.log(score);  // 0"
                    },
                    "You can fix this by passing an updater function when setting state. Notice how replacing setScore(score + 1) with setScore(s => s + 1) fixes the “+3” button. This lets you queue multiple state updates.",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [score, setScore] = useState(0);  function increment() {    setScore(s => s + 1);  }  return (    <>      <button onClick={() => increment()}>+1</button>      <button onClick={() => {        increment();        increment();        increment();      }}>+3</button>      <h1>Score: {score}</h1>    </>  )}"
                    },
                    "Ready to learn this topic?Read Queueing a Series of State Updates to learn how to queue a sequence of state updates.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Updating objects in state ",
                "url": "https://react.dev/learn/adding-interactivity/#updating-objects-in-state",
                "sections": [
                    "State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects and arrays that you hold in the React state directly. Instead, when you want to update an object and array, you need to create a new one (or make a copy of an existing one), and then update the state to use that copy.",
                    "Usually, you will use the ... spread syntax to copy objects and arrays that you want to change. For example, updating a nested object could look like this:",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [person, setPerson] = useState({    name: 'Niki de Saint Phalle',    artwork: {      title: 'Blue Nana',      city: 'Hamburg',      image: 'https://i.imgur.com/Sd1AgUOm.jpg',    }  });  function handleNameChange(e) {    setPerson({      ...person,      name: e.target.value    });  }  function handleTitleChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        title: e.target.value      }    });  }  function handleCityChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        city: e.target.value      }    });  }  function handleImageChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        image: e.target.value      }    });  }  return (    <>      <label>        Name:        <input          value={person.name}          onChange={handleNameChange}        />      </label>      <label>        Title:        <input          value={person.artwork.title}          onChange={handleTitleChange}        />      </label>      <label>        City:        <input          value={person.artwork.city}          onChange={handleCityChange}        />      </label>      <label>        Image:        <input          value={person.artwork.image}          onChange={handleImageChange}        />      </label>      <p>        <i>{person.artwork.title}</i>        {' by '}        {person.name}        <br />        (located in {person.artwork.city})      </p>      <img        src={person.artwork.image}        alt={person.artwork.title}      />    </>  );}"
                    },
                    "If copying objects in code gets tedious, you can use a library like Immer to reduce repetitive code:",
                    {
                        "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                    },
                    "Ready to learn this topic?Read Updating Objects in State to learn how to update objects correctly.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Updating arrays in state ",
                "url": "https://react.dev/learn/adding-interactivity/#updating-arrays-in-state",
                "sections": [
                    "Arrays are another type of mutable JavaScript objects you can store in state and should treat as read-only. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array:",
                    {
                        "code_sandbox": "import { useState } from 'react';const initialList = [  { id: 0, title: 'Big Bellies', seen: false },  { id: 1, title: 'Lunar Landscape', seen: false },  { id: 2, title: 'Terracotta Army', seen: true },];export default function BucketList() {  const [list, setList] = useState(    initialList  );  function handleToggle(artworkId, nextSeen) {    setList(list.map(artwork => {      if (artwork.id === artworkId) {        return { ...artwork, seen: nextSeen };      } else {        return artwork;      }    }));  }  return (    <>      <h1>Art Bucket List</h1>      <h2>My list of art to see:</h2>      <ItemList        artworks={list}        onToggle={handleToggle} />    </>  );}function ItemList({ artworks, onToggle }) {  return (    <ul>      {artworks.map(artwork => (        <li key={artwork.id}>          <label>            <input              type=\"checkbox\"              checked={artwork.seen}              onChange={e => {                onToggle(                  artwork.id,                  e.target.checked                );              }}            />            {artwork.title}          </label>        </li>      ))}    </ul>  );}"
                    },
                    "If copying arrays in code gets tedious, you can use a library like Immer to reduce repetitive code:",
                    {
                        "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                    },
                    "Ready to learn this topic?Read Updating Arrays in State to learn how to update arrays correctly.Read More",
                    ""
                ]
            },
            {
                "subHeader": "What’s next? ",
                "url": "https://react.dev/learn/adding-interactivity/#whats-next",
                "sections": [
                    "Head over to Responding to Events to start reading this chapter page by page!",
                    "Or, if you’re already familiar with these topics, why not read about Managing State?"
                ]
            },
            {
                "subTopics": [
                    {
                        "headers": "Responding to Events",
                        "url": "https://react.dev/learn/responding-to-events",
                        "content": [
                            "React lets you add event handlers to your JSX. Event handlers are your own functions that will be triggered in response to interactions like clicking, hovering, focusing form inputs, and so on.",
                            "  1.Different ways to write an event handler",
                            "  2.How to pass event handling logic from a parent component",
                            "  3.How events propagate and how to stop them",
                            "You will learn\nDifferent ways to write an event handler\nHow to pass event handling logic from a parent component\nHow events propagate and how to stop them\n",
                            {
                                "sub_header": "Adding event handlers ",
                                "source": "react",
                                "url": "https://react.dev/learn/responding-to-events/#adding-event-handlers",
                                "content": [
                                    "To add an event handler, you will first define a function and then pass it as a prop to the appropriate JSX tag. For example, here is a button that doesn’t do anything yet:",
                                    {
                                        "code_sandbox": "export default function Button() {  return (    <button>      I don't do anything    </button>  );}"
                                    },
                                    "You can make it show a message when a user clicks by following these three steps:",
                                    "  1.Declare a function called handleClick inside your Button component.",
                                    "  2.Implement the logic inside that function (use alert to show the message).",
                                    "  3.Add onClick={handleClick} to the <button> JSX.",
                                    {
                                        "code_sandbox": "export default function Button() {  function handleClick() {    alert('You clicked me!');  }  return (    <button onClick={handleClick}>      Click me    </button>  );}"
                                    },
                                    "You defined the handleClick function and then passed it as a prop to <button>.  handleClick is an event handler. Event handler functions:",
                                    "  1.Are usually defined inside your components.",
                                    "  2.Have names that start with handle, followed by the name of the event.",
                                    "By convention, it is common to name event handlers as handle followed by the event name. You’ll often see onClick={handleClick}, onMouseEnter={handleMouseEnter}, and so on.",
                                    "Alternatively, you can define an event handler inline in the JSX:",
                                    {
                                        "code_example": "<button onClick={function handleClick() {  alert('You clicked me!');}}>"
                                    },
                                    "Or, more concisely, using an arrow function:",
                                    {
                                        "code_example": "<button onClick={() => {  alert('You clicked me!');}}>"
                                    },
                                    "All of these styles are equivalent. Inline event handlers are convenient for short functions.",
                                    {
                                        "code_example": "<button onClick={handleClick}>"
                                    },
                                    "  1.<button onClick={handleClick}> passes the handleClick function.",
                                    "  2.<button onClick={() => alert('...')}> passes the () => alert('...') function.",
                                    {
                                        "sub_header": "Reading props in event handlers ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/responding-to-events/#reading-props-in-event-handlers",
                                        "content": [
                                            "Because event handlers are declared inside of a component, they have access to the component’s props. Here is a button that, when clicked, shows an alert with its message prop:",
                                            {
                                                "code_sandbox": "function AlertButton({ message, children }) {  return (    <button onClick={() => alert(message)}>      {children}    </button>  );}export default function Toolbar() {  return (    <div>      <AlertButton message=\"Playing!\">        Play Movie      </AlertButton>      <AlertButton message=\"Uploading!\">        Upload Image      </AlertButton>    </div>  );}"
                                            },
                                            "This lets these two buttons show different messages. Try changing the messages passed to them."
                                        ]
                                    },
                                    {
                                        "sub_header": "Passing event handlers as props ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/responding-to-events/#passing-event-handlers-as-props",
                                        "content": [
                                            "Often you’ll want the parent component to specify a child’s event handler. Consider buttons: depending on where you’re using a Button component, you might want to execute a different function—perhaps one plays a movie and another uploads an image.",
                                            "To do this, pass a prop the component receives from its parent as the event handler like so:",
                                            {
                                                "code_sandbox": "function Button({ onClick, children }) {  return (    <button onClick={onClick}>      {children}    </button>  );}function PlayButton({ movieName }) {  function handlePlayClick() {    alert(`Playing ${movieName}!`);  }  return (    <Button onClick={handlePlayClick}>      Play \"{movieName}\"    </Button>  );}function UploadButton() {  return (    <Button onClick={() => alert('Uploading!')}>      Upload Image    </Button>  );}export default function Toolbar() {  return (    <div>      <PlayButton movieName=\"Kiki's Delivery Service\" />      <UploadButton />    </div>  );}"
                                            },
                                            "Here, the Toolbar component renders a PlayButton and an UploadButton:",
                                            "  1.PlayButton passes handlePlayClick as the onClick prop to the Button inside.",
                                            "  2.UploadButton passes () => alert('Uploading!') as the onClick prop to the Button inside.",
                                            "Finally, your Button component accepts a prop called onClick. It passes that prop directly to the built-in browser <button> with onClick={onClick}. This tells React to call the passed function on click.",
                                            "If you use a design system, it’s common for components like buttons to contain styling but not specify behavior. Instead, components like PlayButton and UploadButton will pass event handlers down."
                                        ]
                                    },
                                    {
                                        "sub_header": "Naming event handler props ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/responding-to-events/#naming-event-handler-props",
                                        "content": [
                                            "Built-in components like <button> and <div> only support browser event names like onClick. However, when you’re building your own components, you can name their event handler props any way that you like.",
                                            "By convention, event handler props should start with on, followed by a capital letter.",
                                            "For example, the Button component’s onClick prop could have been called onSmash:",
                                            {
                                                "code_sandbox": "function Button({ onSmash, children }) {  return (    <button onClick={onSmash}>      {children}    </button>  );}export default function App() {  return (    <div>      <Button onSmash={() => alert('Playing!')}>        Play Movie      </Button>      <Button onSmash={() => alert('Uploading!')}>        Upload Image      </Button>    </div>  );}"
                                            },
                                            "In this example, <button onClick={onSmash}> shows that the browser <button> (lowercase) still needs a prop called onClick, but the prop name received by your custom Button component is up to you!",
                                            "When your component supports multiple interactions, you might name event handler props for app-specific concepts. For example, this Toolbar component receives onPlayMovie and onUploadImage event handlers:",
                                            {
                                                "code_sandbox": "export default function App() {  return (    <Toolbar      onPlayMovie={() => alert('Playing!')}      onUploadImage={() => alert('Uploading!')}    />  );}function Toolbar({ onPlayMovie, onUploadImage }) {  return (    <div>      <Button onClick={onPlayMovie}>        Play Movie      </Button>      <Button onClick={onUploadImage}>        Upload Image      </Button>    </div>  );}function Button({ onClick, children }) {  return (    <button onClick={onClick}>      {children}    </button>  );}"
                                            },
                                            "Notice how the App component does not need to know what Toolbar will do with onPlayMovie or onUploadImage. That’s an implementation detail of the Toolbar. Here, Toolbar passes them down as onClick handlers to its Buttons, but it could later also trigger them on a keyboard shortcut. Naming props after app-specific interactions like onPlayMovie gives you the flexibility to change how they’re used later.",
                                            {
                                                "code_example": "<button onClick={handleClick}>"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Event propagation ",
                                "source": "react",
                                "url": "https://react.dev/learn/responding-to-events/#event-propagation",
                                "content": [
                                    "Event handlers will also catch events from any children your component might have. We say that an event “bubbles” or “propagates” up the tree: it starts with where the event happened, and then goes up the tree.",
                                    "This <div> contains two buttons. Both the <div> and each button have their own onClick handlers. Which handlers do you think will fire when you click a button?",
                                    {
                                        "code_sandbox": "export default function Toolbar() {  return (    <div className=\"Toolbar\" onClick={() => {      alert('You clicked on the toolbar!');    }}>      <button onClick={() => alert('Playing!')}>        Play Movie      </button>      <button onClick={() => alert('Uploading!')}>        Upload Image      </button>    </div>  );}"
                                    },
                                    "If you click on either button, its onClick will run first, followed by the parent <div>’s onClick. So two messages will appear. If you click the toolbar itself, only the parent <div>’s onClick will run.",
                                    {
                                        "code_example": "onScroll"
                                    },
                                    {
                                        "sub_header": "Stopping propagation ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/responding-to-events/#stopping-propagation",
                                        "content": [
                                            "Event handlers receive an event object as their only argument. By convention, it’s usually called e, which stands for “event”. You can use this object to read information about the event.",
                                            "That event object also lets you stop the propagation. If you want to prevent an event from reaching parent components, you need to call e.stopPropagation() like this Button component does:",
                                            {
                                                "code_sandbox": "function Button({ onClick, children }) {  return (    <button onClick={e => {      e.stopPropagation();      onClick();    }}>      {children}    </button>  );}export default function Toolbar() {  return (    <div className=\"Toolbar\" onClick={() => {      alert('You clicked on the toolbar!');    }}>      <Button onClick={() => alert('Playing!')}>        Play Movie      </Button>      <Button onClick={() => alert('Uploading!')}>        Upload Image      </Button>    </div>  );}"
                                            },
                                            "When you click on a button:",
                                            "  1.React calls the onClick handler passed to <button>.",
                                            "  2.That handler, defined in Button, does the following:\n\nCalls e.stopPropagation(), preventing the event from bubbling further.\nCalls the onClick function, which is a prop passed from the Toolbar component.\n\n",
                                            "  3.Calls e.stopPropagation(), preventing the event from bubbling further.",
                                            "  4.Calls the onClick function, which is a prop passed from the Toolbar component.",
                                            "  5.That function, defined in the Toolbar component, displays the button’s own alert.",
                                            "  6.Since the propagation was stopped, the parent <div>’s onClick handler does not run.",
                                            "As a result of e.stopPropagation(), clicking on the buttons now only shows a single alert (from the <button>) rather than the two of them (from the <button> and the parent toolbar <div>). Clicking a button is not the same thing as clicking the surrounding toolbar, so stopping the propagation makes sense for this UI.",
                                            "Deep DiveCapture phase events Show DetailsIn rare cases, you might need to catch all events on child elements, even if they stopped propagation. For example, maybe you want to log every click to analytics, regardless of the propagation logic. You can do this by adding Capture at the end of the event name:<div onClickCapture={() => { /* this runs first */ }}>  <button onClick={e => e.stopPropagation()} />  <button onClick={e => e.stopPropagation()} /></div>Each event propagates in three phases:\nIt travels down, calling all onClickCapture handlers.\nIt runs the clicked element’s onClick handler.\nIt travels upwards, calling all onClick handlers.\nCapture events are useful for code like routers or analytics, but you probably won’t use them in app code."
                                        ]
                                    },
                                    {
                                        "sub_header": "Passing handlers as alternative to propagation ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/responding-to-events/#passing-handlers-as-alternative-to-propagation",
                                        "content": [
                                            "Notice how this click handler runs a line of code and then calls the onClick prop passed by the parent:",
                                            {
                                                "code_example": "function Button({ onClick, children }) {  return (    <button onClick={e => {      e.stopPropagation();      onClick();    }}>      {children}    </button>  );}"
                                            },
                                            "You could add more code to this handler before calling the parent onClick event handler, too. This pattern provides an alternative to propagation. It lets the child component handle the event, while also letting the parent component specify some additional behavior. Unlike propagation, it’s not automatic. But the benefit of this pattern is that you can clearly follow the whole chain of code that executes as a result of some event.",
                                            "If you rely on propagation and it’s difficult to trace which handlers execute and why, try this approach instead."
                                        ]
                                    },
                                    {
                                        "sub_header": "Preventing default behavior ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/responding-to-events/#preventing-default-behavior",
                                        "content": [
                                            "Some browser events have default behavior associated with them. For example, a <form> submit event, which happens when a button inside of it is clicked, will reload the whole page by default:",
                                            {
                                                "code_sandbox": "export default function Signup() {  return (    <form onSubmit={() => alert('Submitting!')}>      <input />      <button>Send</button>    </form>  );}"
                                            },
                                            "You can call e.preventDefault() on the event object to stop this from happening:",
                                            {
                                                "code_sandbox": "export default function Signup() {  return (    <form onSubmit={e => {      e.preventDefault();      alert('Submitting!');    }}>      <input />      <button>Send</button>    </form>  );}"
                                            },
                                            "Don’t confuse e.stopPropagation() and e.preventDefault(). They are both useful, but are unrelated:",
                                            "  1.e.stopPropagation() stops the event handlers attached to the tags above from firing.",
                                            "  2.e.preventDefault()  prevents the default browser behavior for the few events that have it."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Can event handlers have side effects? ",
                                "source": "react",
                                "url": "https://react.dev/learn/responding-to-events/#can-event-handlers-have-side-effects",
                                "content": [
                                    "Absolutely! Event handlers are the best place for side effects.",
                                    "Unlike rendering functions, event handlers don’t need to be pure, so it’s a great place to change something—for example, change an input’s value in response to typing, or change a list in response to a button press. However, in order to change some information, you first need some way to store it. In React, this is done by using state, a component’s memory. You will learn all about it on the next page.",
                                    "Recap\nYou can handle events by passing a function as a prop to an element like <button>.\nEvent handlers must be passed, not called! onClick={handleClick}, not onClick={handleClick()}.\nYou can define an event handler function separately or inline.\nEvent handlers are defined inside a component, so they can access props.\nYou can declare an event handler in a parent and pass it as a prop to a child.\nYou can define your own event handler props with application-specific names.\nEvents propagate upwards. Call e.stopPropagation() on the first argument to prevent that.\nEvents may have unwanted default browser behavior. Call e.preventDefault() to prevent that.\nExplicitly calling an event handler prop from a child handler is a good alternative to propagation.\n",
                                    {
                                        "code_example": "handleClick"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "State: A Component's Memory",
                        "url": "https://react.dev/learn/state-a-components-memory",
                        "content": [
                            "Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” should put a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.",
                            {
                                "code_example": "useState"
                            },
                            "  1.How to add a state variable with the useState Hook",
                            "  2.What pair of values the useState Hook returns",
                            "  3.How to add more than one state variable",
                            "  4.Why state is called local",
                            {
                                "sub_header": "When a regular variable isn’t enough ",
                                "source": "react",
                                "url": "https://react.dev/learn/state-a-components-memory/#when-a-regular-variable-isnt-enough",
                                "content": [
                                    "Here’s a component that renders a sculpture image. Clicking the “Next” button should show the next sculpture by changing the index to 1, then 2, and so on. However, this won’t work (you can try it!):",
                                    {
                                        "code_sandbox": "data.jsimport { sculptureList } from './data.js';export default function Gallery() {  let index = 0;  function handleClick() {    index = index + 1;  }  let sculpture = sculptureList[index];  return (    <>      <button onClick={handleClick}>        Next      </button>      <h2>        <i>{sculpture.name} </i>         by {sculpture.artist}      </h2>      <h3>          ({index + 1} of {sculptureList.length})      </h3>      <img         src={sculpture.url}         alt={sculpture.alt}      />      <p>        {sculpture.description}      </p>    </>  );}"
                                    },
                                    "The handleClick event handler is updating a local variable, index. But two things prevent that change from being visible:",
                                    "  1.Local variables don’t persist between renders. When React renders this component a second time, it renders it from scratch—it doesn’t consider any changes to the local variables.",
                                    "  2.Changes to local variables won’t trigger renders. React doesn’t realize it needs to render the component again with the new data.",
                                    "To update a component with new data, two things need to happen:",
                                    "  1.Retain the data between renders.",
                                    "  2.Trigger React to render the component with new data (re-rendering).",
                                    "The useState Hook provides those two things:",
                                    "  1.A state variable to retain the data between renders.",
                                    "  2.A state setter function to update the variable and trigger React to render the component again."
                                ]
                            },
                            {
                                "sub_header": "Adding a state variable ",
                                "source": "react",
                                "url": "https://react.dev/learn/state-a-components-memory/#adding-a-state-variable",
                                "content": [
                                    "To add a state variable, import useState from React at the top of the file:",
                                    {
                                        "code_example": "import { useState } from 'react';"
                                    },
                                    "Then, replace this line:",
                                    {
                                        "code_example": "let index = 0;"
                                    },
                                    "with",
                                    {
                                        "code_example": "const [index, setIndex] = useState(0);"
                                    },
                                    "index is a state variable and setIndex is the setter function.",
                                    "\nThe [ and ] syntax here is called array destructuring and it lets you read values from an array. The array returned by useState always has exactly two items.\n",
                                    "This is how they work together in handleClick:",
                                    {
                                        "code_example": "function handleClick() {  setIndex(index + 1);}"
                                    },
                                    "Now clicking the “Next” button switches the current sculpture:",
                                    {
                                        "code_sandbox": "data.jsimport { useState } from 'react';import { sculptureList } from './data.js';export default function Gallery() {  const [index, setIndex] = useState(0);  function handleClick() {    setIndex(index + 1);  }  let sculpture = sculptureList[index];  return (    <>      <button onClick={handleClick}>        Next      </button>      <h2>        <i>{sculpture.name} </i>         by {sculpture.artist}      </h2>      <h3>          ({index + 1} of {sculptureList.length})      </h3>      <img         src={sculpture.url}         alt={sculpture.alt}      />      <p>        {sculpture.description}      </p>    </>  );}"
                                    },
                                    {
                                        "sub_header": "Meet your first Hook ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/state-a-components-memory/#meet-your-first-hook",
                                        "content": [
                                            "In React, useState, as well as any other function starting with “use”, is called a Hook.",
                                            "Hooks are special functions that are only available while React is rendering (which we’ll get into in more detail on the next page). They let you “hook into” different React features.",
                                            "State is just one of those features, but you will meet the other Hooks later.",
                                            {
                                                "code_example": "use"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Anatomy of useState ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/state-a-components-memory/#anatomy-of-usestate",
                                        "content": [
                                            "When you call useState, you are telling React that you want this component to remember something:",
                                            {
                                                "code_example": "const [index, setIndex] = useState(0);"
                                            },
                                            "In this case, you want React to remember index.",
                                            {
                                                "code_example": "const [something, setSomething]"
                                            },
                                            "The only argument to useState is the initial value of your state variable. In this example, the index’s initial value is set to 0 with useState(0).",
                                            "Every time your component renders, useState gives you an array containing two values:",
                                            "  1.The state variable (index) with the value you stored.",
                                            "  2.The state setter function (setIndex) which can update the state variable and trigger React to render the component again.",
                                            "Here’s how that happens in action:",
                                            {
                                                "code_example": "const [index, setIndex] = useState(0);"
                                            },
                                            "  1.Your component renders the first time. Because you passed 0 to useState as the initial value for index, it will return [0, setIndex]. React remembers 0 is the latest state value.",
                                            "  2.You update the state. When a user clicks the button, it calls setIndex(index + 1). index is 0, so it’s setIndex(1). This tells React to remember index is 1 now and triggers another render.",
                                            "  3.Your component’s second render. React still sees useState(0), but because React remembers that you set index to 1, it returns [1, setIndex] instead.",
                                            "  4.And so on!"
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Giving a component multiple state variables ",
                                "source": "react",
                                "url": "https://react.dev/learn/state-a-components-memory/#giving-a-component-multiple-state-variables",
                                "content": [
                                    "You can have as many state variables of as many types as you like in one component. This component has two state variables, a number index and a boolean showMore that’s toggled when you click “Show details”:",
                                    {
                                        "code_sandbox": "data.jsimport { useState } from 'react';import { sculptureList } from './data.js';export default function Gallery() {  const [index, setIndex] = useState(0);  const [showMore, setShowMore] = useState(false);  function handleNextClick() {    setIndex(index + 1);  }  function handleMoreClick() {    setShowMore(!showMore);  }  let sculpture = sculptureList[index];  return (    <>      <button onClick={handleNextClick}>        Next      </button>      <h2>        <i>{sculpture.name} </i>         by {sculpture.artist}      </h2>      <h3>          ({index + 1} of {sculptureList.length})      </h3>      <button onClick={handleMoreClick}>        {showMore ? 'Hide' : 'Show'} details      </button>      {showMore && <p>{sculpture.description}</p>}      <img         src={sculpture.url}         alt={sculpture.alt}      />    </>  );}"
                                    },
                                    "It is a good idea to have multiple state variables if their state is unrelated, like index and showMore in this example. But if you find that you often change two state variables together, it might be easier to combine them into one. For example, if you have a form with many fields, it’s more convenient to have a single state variable that holds an object than state variable per field. Read Choosing the State Structure for more tips.",
                                    "Deep DiveHow does React know which state to return? Show DetailsYou might have noticed that the useState call does not receive any information about which state variable it refers to. There is no “identifier” that is passed to useState, so how does it know which of the state variables to return? Does it rely on some magic like parsing your functions? The answer is no.Instead, to enable their concise syntax, Hooks rely on a stable call order on every render of the same component. This works well in practice because if you follow the rule above (“only call Hooks at the top level”), Hooks will always be called in the same order. Additionally, a linter plugin catches most mistakes.Internally, React holds an array of state pairs for every component. It also maintains the current pair index, which is set to 0 before rendering. Each time you call useState, React gives you the next state pair and increments the index. You can read more about this mechanism in React Hooks: Not Magic, Just Arrays.This example doesn’t use React but it gives you an idea of how useState works internally:index.jsindex.htmlindex.js ResetForklet componentHooks = [];\nlet currentHookIndex = 0;\n\n// How useState works inside React (simplified).\nfunction useState(initialState) {\n  let pair = componentHooks[currentHookIndex];\n  if (pair) {\n    // This is not the first render,\n    // so the state pair already exists.\n    // Return it and prepare for next Hook call.\n    currentHookIndex++;\n    return pair;\n  }\n\n  // This is the first time we're rendering,\n  // so create a state pair and store it.\n  pair = [initialState, setState];\n\n  function setState(nextState) {\n    // When the user requests a state change,\n    // put the new value into the pair.\n    pair[0] = nextState;\n    updateDOM();\n  }\n\n  // Store the pair for future renders\n  // and prepare for the next Hook call.\n  componentHooks[currentHookIndex] = pair;\n  currentHookIndex++;\n  return pair;\n}\n\nfunction Gallery() {\n  // Each useState() call will get the next pair.\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  // This example doesn't use React, so\n  // return an output object instead of JSX.\n  return {\n    onNextClick: handleNextClick,\n    onMoreClick: handleMoreClick,\n    header: `${sculpture.name} by ${sculpture.artist}`,\n    counter: `${index + 1} of ${sculptureList.length}`,\n    more: `${showMore ? 'Hide' : 'Show'} details`,\n    description: showMore ? sculpture.description : null,\n    imageSrc: sculpture.url,\n    imageAlt: sculpture.alt\n  };\n}\n\nfunction updateDOM() {\n  // Reset the current Hook index\n  // before rendering the component.\n  currentHookIndex = 0;\n  let output = Gallery();\n\n  // Update the DOM to match the output.\n  // This is the part React does for you.\n  nextButton.onclick = output.onNextClick;\n  header.textContent = output.header;\n  moreButton.onclick = output.onMoreClick;\n  moreButton.textContent = output.more;\n  image.src = output.imageSrc;\n  image.alt = output.imageAlt;\n  if (output.description !== null) {\n    description.textContent = output.description;\n    description.style.display = '';\n  } else {\n    description.style.display = 'none';\n  }\n}\n\nlet nextButton = document.getElementById('nextButton');\nlet header = document.getElementById('header');\nlet moreButton = document.getElementById('moreButton');\nlet description = document.getElementById('description');\nlet image = document.getElementById('image');\nlet sculptureList = [{\n  name: 'Homenaje a la Neurocirugía',\n  artist: 'Marta Colvin Andrade',\n  description: 'Although Colvin is predominantly known for abstract themes that allude to pre-Hispanic symbols, this gigantic sculpture, an homage to neurosurgery, is one of her most recognizable public art pieces.',\n  url: 'https://i.imgur.com/Mx7dA2Y.jpg',\n  alt: 'A bronze statue of two crossed hands delicately holding a human brain in their fingertips.'  \n}, {\n  name: 'Floralis Genérica',\n  artist: 'Eduardo Catalano',\n  description: 'This enormous (75 ft. or 23m) silver flower is located in Buenos Aires. It is designed to move, closing its petals in the evening or when strong winds blow and opening them in the morning.',\n  url: 'https://i.imgur.com/ZF6s192m.jpg',\n  alt: 'A gigantic metallic flower sculpture with reflective mirror-like petals and strong stamens.'\n}, {\n  name: 'Eternal Presence',\n  artist: 'John Woodrow Wilson',\n  description: 'Wilson was known for his preoccupation with equality, social justice, as well as the essential and spiritual qualities of humankind. This massive (7ft. or 2,13m) bronze represents what he described as \"a symbolic Black presence infused with a sense of universal humanity.\"',\n  url: 'https://i.imgur.com/aTtVpES.jpg',\n  alt: 'The sculpture depicting a human head seems ever-present and solemn. It radiates calm and serenity.'\n}, {\n  name: 'Moai',\n  artist: 'Unknown Artist',\n  description: 'Located on the Easter Island, there are 1,000 moai, or extant monumental statues, created by the early Rapa Nui people, which some believe represented deified ancestors.',\n  url: 'https://i.imgur.com/RCwLEoQm.jpg',\n  alt: 'Three monumental stone busts with the heads that are disproportionately large with somber faces.'\n}, {\n  name: 'Blue Nana',\n  artist: 'Niki de Saint Phalle',\n  description: 'The Nanas are triumphant creatures, symbols of femininity and maternity. Initially, Saint Phalle used fabric and found objects for the Nanas, and later on introduced polyester to achieve a more vibrant effect.',\n  url: 'https://i.imgur.com/Sd1AgUOm.jpg',\n  alt: 'A large mosaic sculpture of a whimsical dancing female figure in a colorful costume emanating joy.'\n}, {\n  name: 'Ultimate Form',\n  artist: 'Barbara Hepworth',\n  description: 'This abstract bronze sculpture is a part of The Family of Man series located at Yorkshire Sculpture Park. Hepworth chose not to create literal representations of the world but developed abstract forms inspired by people and landscapes.',\n  url: 'https://i.imgur.com/2heNQDcm.jpg',\n  alt: 'A tall sculpture made of three elements stacked on each other reminding of a human figure.'\n}, {\n  name: 'Cavaliere',\n  artist: 'Lamidi Olonade Fakeye',\n  description: \"Descended from four generations of woodcarvers, Fakeye's work blended traditional and contemporary Yoruba themes.\",\n  url: 'https://i.imgur.com/wIdGuZwm.png',\n  alt: 'An intricate wood sculpture of a warrior with a focused face on a horse adorned with patterns.'\n}, {\n  name: 'Big Bellies',\n  artist: 'Alina Szapocznikow',\n  description: \"Szapocznikow is known for her sculptures of the fragmented body as a metaphor for the fragility and impermanence of youth and beauty. This sculpture depicts two very realistic large bellies stacked on top of each other, each around five feet (1,5m) tall.\",\n  url: 'https://i.imgur.com/AlHTAdDm.jpg',\n  alt: 'The sculpture reminds a cascade of folds, quite different from bellies in classical sculptures.'\n}, {\n  name: 'Terracotta Army',\n  artist: 'Unknown Artist',\n  description: 'The Terracotta Army is a collection of terracotta sculptures depicting the armies of Qin Shi Huang, the first Emperor of China. The army consisted of more than 8,000 soldiers, 130 chariots with 520 horses, and 150 cavalry horses.',\n  url: 'https://i.imgur.com/HMFmH6m.jpg',\n  alt: '12 terracotta sculptures of solemn warriors, each with a unique facial expression and armor.'\n}, {\n  name: 'Lunar Landscape',\n  artist: 'Louise Nevelson',\n  description: 'Nevelson was known for scavenging objects from New York City debris, which she would later assemble into monumental constructions. In this one, she used disparate parts like a bedpost, juggling pin, and seat fragment, nailing and gluing them into boxes that reflect the influence of Cubism’s geometric abstraction of space and form.',\n  url: 'https://i.imgur.com/rN7hY6om.jpg',\n  alt: 'A black matte sculpture where the individual elements are initially indistinguishable.'\n}, {\n  name: 'Aureole',\n  artist: 'Ranjani Shettar',\n  description: 'Shettar merges the traditional and the modern, the natural and the industrial. Her art focuses on the relationship between man and nature. Her work was described as compelling both abstractly and figuratively, gravity defying, and a \"fine synthesis of unlikely materials.\"',\n  url: 'https://i.imgur.com/okTpbHhm.jpg',\n  alt: 'A pale wire-like sculpture mounted on concrete wall and descending on the floor. It appears light.'\n}, {\n  name: 'Hippos',\n  artist: 'Taipei Zoo',\n  description: 'The Taipei Zoo commissioned a Hippo Square featuring submerged hippos at play.',\n  url: 'https://i.imgur.com/6o5Vuyu.jpg',\n  alt: 'A group of bronze hippo sculptures emerging from the sett sidewalk as if they were swimming.'\n}];\n\n// Make UI match the initial state.\nupdateDOM();\n\nShow moreYou don’t have to understand it to use React, but you might find this a helpful mental model."
                                ]
                            },
                            {
                                "sub_header": "State is isolated and private ",
                                "source": "react",
                                "url": "https://react.dev/learn/state-a-components-memory/#state-is-isolated-and-private",
                                "content": [
                                    "State is local to a component instance on the screen. In other words, if you render the same component twice, each copy will have completely isolated state! Changing one of them will not affect the other.",
                                    "In this example, the Gallery component from earlier is rendered twice with no changes to its logic. Try clicking the buttons inside each of the galleries. Notice that their state is independent:",
                                    {
                                        "code_sandbox": "Gallery.jsdata.jsimport Gallery from './Gallery.js';export default function Page() {  return (    <div className=\"Page\">      <Gallery />      <Gallery />    </div>  );}"
                                    },
                                    "This is what makes state different from regular variables that you might declare at the top of your module. State is not tied to a particular function call or a place in the code, but it’s “local” to the specific place on the screen. You rendered two <Gallery /> components, so their state is stored separately.",
                                    "Also notice how the Page component doesn’t “know” anything about the Gallery state or even whether it has any. Unlike props, state is fully private to the component declaring it. The parent component can’t change it. This lets you add state to any component or remove it without impacting the rest of the components.",
                                    "What if you wanted both galleries to keep their states in sync? The right way to do it in React is to remove state from child components and add it to their closest shared parent. The next few pages will focus on organizing state of a single component, but we will return to this topic in Sharing State Between Components.",
                                    "Recap\nUse a state variable when a component needs to “remember” some information between renders.\nState variables are declared by calling the useState Hook.\nHooks are special functions that start with use. They let you “hook into” React features like state.\nHooks might remind you of imports: they need to be called unconditionally. Calling Hooks, including useState, is only valid at the top level of a component or another Hook.\nThe useState Hook returns a pair of values: the current state and the function to update it.\nYou can have more than one state variable. Internally, React matches them up by their order.\nState is private to the component. If you render it in two places, each copy gets its own state.\n",
                                    "Try out some challenges1. Complete the gallery 2. Fix stuck form inputs 3. Fix a crash 4. Remove unnecessary state Challenge 1 of 4: Complete the gallery When you press “Next” on the last sculpture, the code crashes. Fix the logic to prevent the crash. You may do this by adding extra logic to event handler or by disabling the button when the action is not possible.After fixing the crash, add a “Previous” button that shows the previous sculpture. It shouldn’t crash on the first sculpture.App.jsdata.jsApp.js ResetForkimport { useState } from 'react';\nimport { sculptureList } from './data.js';\n\nexport default function Gallery() {\n  const [index, setIndex] = useState(0);\n  const [showMore, setShowMore] = useState(false);\n\n  function handleNextClick() {\n    setIndex(index + 1);\n  }\n\n  function handleMoreClick() {\n    setShowMore(!showMore);\n  }\n\n  let sculpture = sculptureList[index];\n  return (\n    <>\n      <button onClick={handleNextClick}>\n        Next\n      </button>\n      <h2>\n        <i>{sculpture.name} </i> \n        by {sculpture.artist}\n      </h2>\n      <h3>  \n        ({index + 1} of {sculptureList.length})\n      </h3>\n      <button onClick={handleMoreClick}>\n        {showMore ? 'Hide' : 'Show'} details\n      </button>\n      {showMore && <p>{sculpture.description}</p>}\n      <img \n        src={sculpture.url} \n        alt={sculpture.alt}\n      />\n    </>\n  );\n}\n\nShow more Show solutionNext Challenge"
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Render and Commit",
                        "url": "https://react.dev/learn/render-and-commit",
                        "content": [
                            "Before your components are displayed on screen, they must be rendered by React. Understanding the steps in this process will help you think about how your code executes and explain its behavior.",
                            "  1.What rendering means in React",
                            "  2.When and why React renders a component",
                            "  3.The steps involved in displaying a component on screen",
                            "  4.Why rendering does not always produce a DOM update",
                            "You will learn\nWhat rendering means in React\nWhen and why React renders a component\nThe steps involved in displaying a component on screen\nWhy rendering does not always produce a DOM update\n",
                            "Imagine that your components are cooks in the kitchen, assembling tasty dishes from ingredients. In this scenario, React is the waiter who puts in requests from customers and brings them their orders. This process of requesting and serving UI has three steps:",
                            "  1.Triggering a render (delivering the guest’s order to the kitchen)",
                            "  2.Rendering the component (preparing the order in the kitchen)",
                            "  3.Committing to the DOM (placing the order on the table)",
                            "  1.Trigger",
                            "  2.Render",
                            "  3.Commit",
                            "Illustrated by Rachel Lee Nabors",
                            {
                                "sub_header": "Step 1: Trigger a render ",
                                "source": "react",
                                "url": "https://react.dev/learn/render-and-commit/#step-1-trigger-a-render",
                                "content": [
                                    "There are two reasons for a component to render:",
                                    "  1.It’s the component’s initial render.",
                                    "  2.The component’s (or one of its ancestors’) state has been updated.",
                                    {
                                        "sub_header": "Initial render ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/render-and-commit/#initial-render",
                                        "content": [
                                            "When your app starts, you need to trigger the initial render. Frameworks and sandboxes sometimes hide this code, but it’s done by calling createRoot with the target DOM node, and then calling its render method with your component:",
                                            {
                                                "code_sandbox": "Image.jsimport Image from './Image.js';import { createRoot } from 'react-dom/client';const root = createRoot(document.getElementById('root'))root.render(<Image />);"
                                            },
                                            "Try commenting out the root.render() call and see the component disappear!"
                                        ]
                                    },
                                    {
                                        "sub_header": "Re-renders when state updates ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/render-and-commit/#re-renders-when-state-updates",
                                        "content": [
                                            "Once the component has been initially rendered, you can trigger further renders by updating its state with the set function. Updating your component’s state automatically queues a render. (You can imagine these as a restaurant guest ordering tea, dessert, and all sorts of things after putting in their first order, depending on the state of their thirst or hunger.)",
                                            "  1.State update...",
                                            "  2....triggers...",
                                            "  3....render!",
                                            "Illustrated by Rachel Lee Nabors"
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Step 2: React renders your components ",
                                "source": "react",
                                "url": "https://react.dev/learn/render-and-commit/#step-2-react-renders-your-components",
                                "content": [
                                    "After you trigger a render, React calls your components to figure out what to display on screen. “Rendering” is React calling your components.",
                                    "  1.On initial render, React will call the root component.",
                                    "  2.For subsequent renders, React will call the function component whose state update triggered the render.",
                                    "This process is recursive: if the updated component returns some other component, React will render that component next, and if that component also returns something, it will render that component next, and so on. The process will continue until there are no more nested components and React knows exactly what should be displayed on screen.",
                                    "In the following example, React will call Gallery() and  Image() several times:",
                                    {
                                        "code_sandbox": "Gallery.jsGallery.jsexport default function Gallery() {  return (    <section>      <h1>Inspiring Sculptures</h1>      <Image />      <Image />      <Image />    </section>  );}function Image() {  return (    <img      src=\"https://i.imgur.com/ZF6s192.jpg\"      alt=\"'Floralis Genérica' by Eduardo Catalano: a gigantic metallic flower sculpture with reflective petals\"    />  );}"
                                    },
                                    "  1.During the initial render, React will create the DOM nodes for <section>, <h1>, and three <img> tags.",
                                    "  2.During a re-render, React will calculate which of their properties, if any, have changed since the previous render. It won’t do anything with that information until the next step, the commit phase.",
                                    "  1.Same inputs, same output. Given the same inputs, a component should always return the same JSX. (When someone orders a salad with tomatoes, they should not receive a salad with onions!)",
                                    "  2.It minds its own business. It should not change any objects or variables that existed before rendering. (One order should not change anyone else’s order.)",
                                    "PitfallRendering must always be a pure calculation:\nSame inputs, same output. Given the same inputs, a component should always return the same JSX. (When someone orders a salad with tomatoes, they should not receive a salad with onions!)\nIt minds its own business. It should not change any objects or variables that existed before rendering. (One order should not change anyone else’s order.)\nOtherwise, you can encounter confusing bugs and unpredictable behavior as your codebase grows in complexity. When developing in “Strict Mode”, React calls each component’s function twice, which can help surface mistakes caused by impure functions.",
                                    "Deep DiveOptimizing performance Show DetailsThe default behavior of rendering all components nested within the updated component is not optimal for performance if the updated component is very high in the tree. If you run into a performance issue, there are several opt-in ways to solve it described in the Performance section. Don’t optimize prematurely!"
                                ]
                            },
                            {
                                "sub_header": "Step 3: React commits changes to the DOM ",
                                "source": "react",
                                "url": "https://react.dev/learn/render-and-commit/#step-3-react-commits-changes-to-the-dom",
                                "content": [
                                    "After rendering (calling) your components, React will modify the DOM.",
                                    "  1.For the initial render, React will use the appendChild() DOM API to put all the DOM nodes it has created on screen.",
                                    "  2.For re-renders, React will apply the minimal necessary operations (calculated while rendering!) to make the DOM match the latest rendering output.",
                                    "React only changes the DOM nodes if there’s a difference between renders. For example, here is a component that re-renders with different props passed from its parent every second. Notice how you can add some text into the <input>, updating its value, but the text doesn’t disappear when the component re-renders:",
                                    {
                                        "code_sandbox": "Clock.jsClock.jsexport default function Clock({ time }) {  return (    <>      <h1>{time}</h1>      <input />    </>  );}"
                                    },
                                    "This works because during this last step, React only updates the content of <h1> with the new time. It sees that the <input> appears in the JSX in the same place as last time, so React doesn’t touch the <input>—or its value!"
                                ]
                            },
                            {
                                "sub_header": "Epilogue: Browser paint ",
                                "source": "react",
                                "url": "https://react.dev/learn/render-and-commit/#epilogue-browser-paint",
                                "content": [
                                    "After rendering is done and React updated the DOM, the browser will repaint the screen. Although this process is known as “browser rendering”, we’ll refer to it as “painting” to avoid confusion throughout the docs.",
                                    "",
                                    "Illustrated by Rachel Lee Nabors",
                                    "Recap\nAny screen update in a React app happens in three steps:\n\nTrigger\nRender\nCommit\n\n\nYou can use Strict Mode to find mistakes in your components\nReact does not touch the DOM if the rendering result is the same as last time\n"
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "State as a Snapshot",
                        "url": "https://react.dev/learn/state-as-a-snapshot",
                        "content": [
                            "State variables might look like regular JavaScript variables that you can read and write to. However, state behaves more like a snapshot. Setting it does not change the state variable you already have, but instead triggers a re-render.",
                            "  1.How setting state triggers re-renders",
                            "  2.When and how state updates",
                            "  3.Why state does not update immediately after you set it",
                            "  4.How event handlers access a “snapshot” of the state",
                            "You will learn\nHow setting state triggers re-renders\nWhen and how state updates\nWhy state does not update immediately after you set it\nHow event handlers access a “snapshot” of the state\n",
                            {
                                "sub_header": "Setting state triggers renders ",
                                "source": "react",
                                "url": "https://react.dev/learn/state-as-a-snapshot/#setting-state-triggers-renders",
                                "content": [
                                    "You might think of your user interface as changing directly in response to the user event like a click. In React, it works a little differently from this mental model. On the previous page, you saw that setting state requests a re-render from React. This means that for an interface to react to the event, you need to update the state.",
                                    "In this example, when you press “send”, setIsSent(true) tells React to re-render the UI:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [isSent, setIsSent] = useState(false);  const [message, setMessage] = useState('Hi!');  if (isSent) {    return <h1>Your message is on its way!</h1>  }  return (    <form onSubmit={(e) => {      e.preventDefault();      setIsSent(true);      sendMessage(message);    }}>      <textarea        placeholder=\"Message\"        value={message}        onChange={e => setMessage(e.target.value)}      />      <button type=\"submit\">Send</button>    </form>  );}function sendMessage(message) {  // ...}"
                                    },
                                    "Here’s what happens when you click the button:",
                                    "  1.The onSubmit event handler executes.",
                                    "  2.setIsSent(true) sets isSent to true and queues a new render.",
                                    "  3.React re-renders the component according to the new isSent value.",
                                    "Let’s take a closer look at the relationship between state and rendering."
                                ]
                            },
                            {
                                "sub_header": "Rendering takes a snapshot in time ",
                                "source": "react",
                                "url": "https://react.dev/learn/state-as-a-snapshot/#rendering-takes-a-snapshot-in-time",
                                "content": [
                                    "“Rendering” means that React is calling your component, which is a function. The JSX you return from that function is like a snapshot of the UI in time. Its props, event handlers, and local variables were all calculated using its state at the time of the render.",
                                    "Unlike a photograph or a movie frame, the UI “snapshot” you return is interactive. It includes logic like event handlers that specify what happens in response to inputs. React updates the screen to match this snapshot and connects the event handlers. As a result, pressing a button will trigger the click handler from your JSX.",
                                    "When React re-renders a component:",
                                    "  1.React calls your function again.",
                                    "  2.Your function returns a new JSX snapshot.",
                                    "  3.React then updates the screen to match the snapshot your function returned.",
                                    "  1.React executing the function",
                                    "  2.Calculating the snapshot",
                                    "  3.Updating the DOM tree",
                                    "Illustrated by Rachel Lee Nabors",
                                    "As a component’s memory, state is not like a regular variable that disappears after your function returns. State actually “lives” in React itself—as if on a shelf!—outside of your function. When React calls your component, it gives you a snapshot of the state for that particular render. Your component returns a snapshot of the UI with a fresh set of props and event handlers in its JSX, all calculated using the state values from that render!",
                                    "  1.You tell React to update the state",
                                    "  2.React updates the state value",
                                    "  3.React passes a snapshot of the state value into the component",
                                    "Illustrated by Rachel Lee Nabors",
                                    "Here’s a little experiment to show you how this works. In this example, you might expect that clicking the “+3” button would increment the counter three times because it calls setNumber(number + 1) three times.",
                                    "See what happens when you click the “+3” button:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 1);        setNumber(number + 1);        setNumber(number + 1);      }}>+3</button>    </>  )}"
                                    },
                                    "Notice that number only increments once per click!",
                                    "Setting state only changes it for the next render. During the first render, number was 0. This is why, in that render’s onClick handler, the value of number is still 0 even after setNumber(number + 1) was called:",
                                    {
                                        "code_example": "<button onClick={() => {  setNumber(number + 1);  setNumber(number + 1);  setNumber(number + 1);}}>+3</button>"
                                    },
                                    "Here is what this button’s click handler tells React to do:",
                                    "  1.setNumber(number + 1): number is 0 so setNumber(0 + 1).\n\nReact prepares to change number to 1 on the next render.\n\n",
                                    "  2.React prepares to change number to 1 on the next render.",
                                    "  3.setNumber(number + 1): number is 0 so setNumber(0 + 1).\n\nReact prepares to change number to 1 on the next render.\n\n",
                                    "  4.React prepares to change number to 1 on the next render.",
                                    "  5.setNumber(number + 1): number is 0 so setNumber(0 + 1).\n\nReact prepares to change number to 1 on the next render.\n\n",
                                    "  6.React prepares to change number to 1 on the next render.",
                                    "Even though you called setNumber(number + 1) three times, in this render’s event handler number is always 0, so you set the state to 1 three times. This is why, after your event handler finishes, React re-renders the component with number equal to 1 rather than 3.",
                                    "You can also visualize this by mentally substituting state variables with their values in your code. Since the number state variable is 0 for this render, its event handler looks like this:",
                                    {
                                        "code_example": "<button onClick={() => {  setNumber(0 + 1);  setNumber(0 + 1);  setNumber(0 + 1);}}>+3</button>"
                                    },
                                    "For the next render, number is 1, so that render’s click handler looks like this:",
                                    {
                                        "code_example": "<button onClick={() => {  setNumber(1 + 1);  setNumber(1 + 1);  setNumber(1 + 1);}}>+3</button>"
                                    },
                                    "This is why clicking the button again will set the counter to 2, then to 3 on the next click, and so on."
                                ]
                            },
                            {
                                "sub_header": "State over time ",
                                "source": "react",
                                "url": "https://react.dev/learn/state-as-a-snapshot/#state-over-time",
                                "content": [
                                    "Well, that was fun. Try to guess what clicking this button will alert:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 5);        alert(number);      }}>+5</button>    </>  )}"
                                    },
                                    "If you use the substitution method from before, you can guess that the alert shows “0”:",
                                    {
                                        "code_example": "setNumber(0 + 5);alert(0);"
                                    },
                                    "But what if you put a timer on the alert, so it only fires after the component re-rendered? Would it say “0” or “5”? Have a guess!",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 5);        setTimeout(() => {          alert(number);        }, 3000);      }}>+5</button>    </>  )}"
                                    },
                                    "Surprised? If you use the substitution method, you can see the “snapshot” of the state passed to the alert.",
                                    {
                                        "code_example": "setNumber(0 + 5);setTimeout(() => {  alert(0);}, 3000);"
                                    },
                                    "The state stored in React may have changed by the time the alert runs, but it was scheduled using a snapshot of the state at the time the user interacted with it!",
                                    "A state variable’s value never changes within a render, even if its event handler’s code is asynchronous. Inside that render’s onClick, the value of number continues to be 0 even after setNumber(number + 5) was called. Its value was “fixed” when React “took the snapshot” of the UI by calling your component.",
                                    "Here is an example of how that makes your event handlers less prone to timing mistakes. Below is a form that sends a message with a five-second delay. Imagine this scenario:",
                                    "  1.You press the “Send” button, sending “Hello” to Alice.",
                                    "  2.Before the five-second delay ends, you change the value of the “To” field to “Bob”.",
                                    "What do you expect the alert to display? Would it display, “You said Hello to Alice”? Or would it display, “You said Hello to Bob”? Make a guess based on what you know, and then try it:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [to, setTo] = useState('Alice');  const [message, setMessage] = useState('Hello');  function handleSubmit(e) {    e.preventDefault();    setTimeout(() => {      alert(`You said ${message} to ${to}`);    }, 5000);  }  return (    <form onSubmit={handleSubmit}>      <label>        To:{' '}        <select          value={to}          onChange={e => setTo(e.target.value)}>          <option value=\"Alice\">Alice</option>          <option value=\"Bob\">Bob</option>        </select>      </label>      <textarea        placeholder=\"Message\"        value={message}        onChange={e => setMessage(e.target.value)}      />      <button type=\"submit\">Send</button>    </form>  );}"
                                    },
                                    "React keeps the state values “fixed” within one render’s event handlers. You don’t need to worry whether the state has changed while the code is running.",
                                    "But what if you wanted to read the latest state before a re-render? You’ll want to use a state updater function, covered on the next page!",
                                    "Recap\nSetting state requests a new render.\nReact stores state outside of your component, as if on a shelf.\nWhen you call useState, React gives you a snapshot of the state for that render.\nVariables and event handlers don’t “survive” re-renders. Every render has its own event handlers.\nEvery render (and functions inside it) will always “see” the snapshot of the state that React gave to that render.\nYou can mentally substitute state in event handlers, similarly to how you think about the rendered JSX.\nEvent handlers created in the past have the state values from the render in which they were created.\n",
                                    {
                                        "code_example": "alert"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Queueing a Series of State Updates",
                        "url": "https://react.dev/learn/queueing-a-series-of-state-updates",
                        "content": [
                            "Setting a state variable will queue another render. But sometimes you might want to perform multiple operations on the value before queueing the next render. To do this, it helps to understand how React batches state updates.",
                            "  1.What “batching” is and how React uses it to process multiple state updates",
                            "  2.How to apply several updates to the same state variable in a row",
                            "You will learn\nWhat “batching” is and how React uses it to process multiple state updates\nHow to apply several updates to the same state variable in a row\n",
                            {
                                "sub_header": "React batches state updates ",
                                "source": "react",
                                "url": "https://react.dev/learn/queueing-a-series-of-state-updates/#react-batches-state-updates",
                                "content": [
                                    "You might expect that clicking the “+3” button will increment the counter three times because it calls setNumber(number + 1) three times:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 1);        setNumber(number + 1);        setNumber(number + 1);      }}>+3</button>    </>  )}"
                                    },
                                    "However, as you might recall from the previous section, each render’s state values are fixed, so the value of number inside the first render’s event handler is always 0, no matter how many times you call setNumber(1):",
                                    {
                                        "code_example": "setNumber(0 + 1);setNumber(0 + 1);setNumber(0 + 1);"
                                    },
                                    "But there is one other factor at play here. React waits until all code in the event handlers has run before processing your state updates. This is why the re-render only happens after all these setNumber() calls.",
                                    "This might remind you of a waiter taking an order at the restaurant. A waiter doesn’t run to the kitchen at the mention of your first dish! Instead, they let you finish your order, let you make changes to it, and even take orders from other people at the table.",
                                    "",
                                    "Illustrated by Rachel Lee Nabors",
                                    "This lets you update multiple state variables—even from multiple components—without triggering too many re-renders. But this also means that the UI won’t be updated until after your event handler, and any code in it, completes. This behavior, also known as batching, makes your React app run much faster. It also avoids dealing with confusing “half-finished” renders where only some of the variables have been updated.",
                                    "React does not batch across multiple intentional events like clicks—each click is handled separately. Rest assured that React only does batching when it’s generally safe to do. This ensures that, for example, if the first button click disables a form, the second click would not submit it again."
                                ]
                            },
                            {
                                "sub_header": "Updating the same state multiple times before the next render ",
                                "source": "react",
                                "url": "https://react.dev/learn/queueing-a-series-of-state-updates/#updating-the-same-state-multiple-times-before-the-next-render",
                                "content": [
                                    "It is an uncommon use case, but if you would like to update the same state variable multiple times before the next render, instead of passing the next state value like setNumber(number + 1), you can pass a function that calculates the next state based on the previous one in the queue, like setNumber(n => n + 1). It is a way to tell React to “do something with the state value” instead of just replacing it.",
                                    "Try incrementing the counter now:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(n => n + 1);        setNumber(n => n + 1);        setNumber(n => n + 1);      }}>+3</button>    </>  )}"
                                    },
                                    "Here, n => n + 1 is called an updater function. When you pass it to a state setter:",
                                    "  1.React queues this function to be processed after all the other code in the event handler has run.",
                                    "  2.During the next render, React goes through the queue and gives you the final updated state.",
                                    {
                                        "code_example": "setNumber(n => n + 1);setNumber(n => n + 1);setNumber(n => n + 1);"
                                    },
                                    "Here’s how React works through these lines of code while executing the event handler:",
                                    "  1.setNumber(n => n + 1): n => n + 1 is a function. React adds it to a queue.",
                                    "  2.setNumber(n => n + 1): n => n + 1 is a function. React adds it to a queue.",
                                    "  3.setNumber(n => n + 1): n => n + 1 is a function. React adds it to a queue.",
                                    "When you call useState during the next render, React goes through the queue. The previous number state was 0, so that’s what React passes to the first updater function as the n argument. Then React takes the return value of your previous updater function and passes it to the next updater as n, and so on:",
                                    "queued updatenreturnsn => n + 100 + 1 = 1n => n + 111 + 1 = 2n => n + 122 + 1 = 3",
                                    "React stores 3 as the final result and returns it from useState.",
                                    "This is why clicking “+3” in the above example correctly increments the value by 3.",
                                    {
                                        "sub_header": "What happens if you update state after replacing it ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/queueing-a-series-of-state-updates/#what-happens-if-you-update-state-after-replacing-it",
                                        "content": [
                                            "What about this event handler? What do you think number will be in the next render?",
                                            {
                                                "code_example": "<button onClick={() => {  setNumber(number + 5);  setNumber(n => n + 1);}}>"
                                            },
                                            {
                                                "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 5);        setNumber(n => n + 1);      }}>Increase the number</button>    </>  )}"
                                            },
                                            "Here’s what this event handler tells React to do:",
                                            "  1.setNumber(number + 5): number is 0, so setNumber(0 + 5). React adds “replace with 5” to its queue.",
                                            "  2.setNumber(n => n + 1): n => n + 1 is an updater function. React adds that function to its queue.",
                                            "During the next render, React goes through the state queue:",
                                            "queued updatenreturns”replace with 5”0 (unused)5n => n + 155 + 1 = 6",
                                            "React stores 6 as the final result and returns it from useState.",
                                            {
                                                "code_example": "setState(5)"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "What happens if you replace state after updating it ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/queueing-a-series-of-state-updates/#what-happens-if-you-replace-state-after-updating-it",
                                        "content": [
                                            "Let’s try one more example. What do you think number will be in the next render?",
                                            {
                                                "code_example": "<button onClick={() => {  setNumber(number + 5);  setNumber(n => n + 1);  setNumber(42);}}>"
                                            },
                                            {
                                                "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [number, setNumber] = useState(0);  return (    <>      <h1>{number}</h1>      <button onClick={() => {        setNumber(number + 5);        setNumber(n => n + 1);        setNumber(42);      }}>Increase the number</button>    </>  )}"
                                            },
                                            "Here’s how React works through these lines of code while executing this event handler:",
                                            "  1.setNumber(number + 5): number is 0, so setNumber(0 + 5). React adds “replace with 5” to its queue.",
                                            "  2.setNumber(n => n + 1): n => n + 1 is an updater function. React adds that function to its queue.",
                                            "  3.setNumber(42): React adds “replace with 42” to its queue.",
                                            "During the next render, React goes through the state queue:",
                                            "queued updatenreturns”replace with 5”0 (unused)5n => n + 155 + 1 = 6”replace with 42”6 (unused)42",
                                            "Then React stores 42 as the final result and returns it from useState.",
                                            "To summarize, here’s how you can think of what you’re passing to the setNumber state setter:",
                                            "  1.An updater function (e.g. n => n + 1) gets added to the queue.",
                                            "  2.Any other value (e.g. number 5) adds “replace with 5” to the queue, ignoring what’s already queued.",
                                            "After the event handler completes, React will trigger a re-render. During the re-render, React will process the queue. Updater functions run during rendering, so updater functions must be pure and only return the result. Don’t try to set state from inside of them or run other side effects. In Strict Mode, React will run each updater function twice (but discard the second result) to help you find mistakes."
                                        ]
                                    },
                                    {
                                        "sub_header": "Naming conventions ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/queueing-a-series-of-state-updates/#naming-conventions",
                                        "content": [
                                            "It’s common to name the updater function argument by the first letters of the corresponding state variable:",
                                            {
                                                "code_example": "setEnabled(e => !e);setLastName(ln => ln.reverse());setFriendCount(fc => fc * 2);"
                                            },
                                            "If you prefer more verbose code, another common convention is to repeat the full state variable name, like setEnabled(enabled => !enabled), or to use a prefix like setEnabled(prevEnabled => !prevEnabled).",
                                            "Recap\nSetting state does not change the variable in the existing render, but it requests a new render.\nReact processes state updates after event handlers have finished running. This is called batching.\nTo update some state multiple times in one event, you can use setNumber(n => n + 1) updater function.\n",
                                            {
                                                "code_example": "-1"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Updating Objects in State",
                        "url": "https://react.dev/learn/updating-objects-in-state",
                        "content": [
                            "State can hold any kind of JavaScript value, including objects. But you shouldn’t change objects that you hold in the React state directly. Instead, when you want to update an object, you need to create a new one (or make a copy of an existing one), and then set the state to use that copy.",
                            "  1.How to correctly update an object in React state",
                            "  2.How to update a nested object without mutating it",
                            "  3.What immutability is, and how not to break it",
                            "  4.How to make object copying less repetitive with Immer",
                            "You will learn\nHow to correctly update an object in React state\nHow to update a nested object without mutating it\nWhat immutability is, and how not to break it\nHow to make object copying less repetitive with Immer\n",
                            {
                                "sub_header": "What’s a mutation? ",
                                "source": "react",
                                "url": "https://react.dev/learn/updating-objects-in-state/#whats-a-mutation",
                                "content": [
                                    "You can store any kind of JavaScript value in state.",
                                    {
                                        "code_example": "const [x, setX] = useState(0);"
                                    },
                                    "So far you’ve been working with numbers, strings, and booleans. These kinds of JavaScript values are “immutable”, meaning unchangeable or “read-only”. You can trigger a re-render to replace a value:",
                                    {
                                        "code_example": "setX(5);"
                                    },
                                    "The x state changed from 0 to 5, but the number 0 itself did not change. It’s not possible to make any changes to the built-in primitive values like numbers, strings, and booleans in JavaScript.",
                                    "Now consider an object in state:",
                                    {
                                        "code_example": "const [position, setPosition] = useState({ x: 0, y: 0 });"
                                    },
                                    "Technically, it is possible to change the contents of the object itself. This is called a mutation:",
                                    {
                                        "code_example": "position.x = 5;"
                                    },
                                    "However, although objects in React state are technically mutable, you should treat them as if they were immutable—like numbers, booleans, and strings. Instead of mutating them, you should always replace them."
                                ]
                            },
                            {
                                "sub_header": "Treat state as read-only ",
                                "source": "react",
                                "url": "https://react.dev/learn/updating-objects-in-state/#treat-state-as-read-only",
                                "content": [
                                    "In other words, you should treat any JavaScript object that you put into state as read-only.",
                                    "This example holds an object in state to represent the current pointer position. The red dot is supposed to move when you touch or move the cursor over the preview area. But the dot stays in the initial position:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function MovingDot() {  const [position, setPosition] = useState({    x: 0,    y: 0  });  return (    <div      onPointerMove={e => {        position.x = e.clientX;        position.y = e.clientY;      }}      style={{        position: 'relative',        width: '100vw',        height: '100vh',      }}>      <div style={{        position: 'absolute',        backgroundColor: 'red',        borderRadius: '50%',        transform: `translate(${position.x}px, ${position.y}px)`,        left: -10,        top: -10,        width: 20,        height: 20,      }} />    </div>  );}"
                                    },
                                    "The problem is with this bit of code.",
                                    {
                                        "code_example": "onPointerMove={e => {  position.x = e.clientX;  position.y = e.clientY;}}"
                                    },
                                    "This code modifies the object assigned to position from the previous render. But without using the state setting function, React has no idea that object has changed. So React does not do anything in response. It’s like trying to change the order after you’ve already eaten the meal. While mutating state can work in some cases, we don’t recommend it. You should treat the state value you have access to in a render as read-only.",
                                    "To actually trigger a re-render in this case, create a new object and pass it to the state setting function:",
                                    {
                                        "code_example": "onPointerMove={e => {  setPosition({    x: e.clientX,    y: e.clientY  });}}"
                                    },
                                    "With setPosition, you’re telling React:",
                                    "  1.Replace position with this new object",
                                    "  2.And render this component again",
                                    "Notice how the red dot now follows your pointer when you touch or hover over the preview area:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function MovingDot() {  const [position, setPosition] = useState({    x: 0,    y: 0  });  return (    <div      onPointerMove={e => {        setPosition({          x: e.clientX,          y: e.clientY        });      }}      style={{        position: 'relative',        width: '100vw',        height: '100vh',      }}>      <div style={{        position: 'absolute',        backgroundColor: 'red',        borderRadius: '50%',        transform: `translate(${position.x}px, ${position.y}px)`,        left: -10,        top: -10,        width: 20,        height: 20,      }} />    </div>  );}"
                                    },
                                    "Deep DiveLocal mutation is fine Show DetailsCode like this is a problem because it modifies an existing object in state:position.x = e.clientX;position.y = e.clientY;But code like this is absolutely fine because you’re mutating a fresh object you have just created:const nextPosition = {};nextPosition.x = e.clientX;nextPosition.y = e.clientY;setPosition(nextPosition);In fact, it is completely equivalent to writing this:setPosition({  x: e.clientX,  y: e.clientY});Mutation is only a problem when you change existing objects that are already in state. Mutating an object you’ve just created is okay because no other code references it yet. Changing it isn’t going to accidentally impact something that depends on it. This is called a “local mutation”. You can even do local mutation while rendering. Very convenient and completely okay!"
                                ]
                            },
                            {
                                "sub_header": "Copying objects with the spread syntax ",
                                "source": "react",
                                "url": "https://react.dev/learn/updating-objects-in-state/#copying-objects-with-the-spread-syntax",
                                "content": [
                                    "In the previous example, the position object is always created fresh from the current cursor position. But often, you will want to include existing data as a part of the new object you’re creating. For example, you may want to update only one field in a form, but keep the previous values for all other fields.",
                                    "These input fields don’t work because the onChange handlers mutate the state:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [person, setPerson] = useState({    firstName: 'Barbara',    lastName: 'Hepworth',    email: 'bhepworth@sculpture.com'  });  function handleFirstNameChange(e) {    person.firstName = e.target.value;  }  function handleLastNameChange(e) {    person.lastName = e.target.value;  }  function handleEmailChange(e) {    person.email = e.target.value;  }  return (    <>      <label>        First name:        <input          value={person.firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:        <input          value={person.lastName}          onChange={handleLastNameChange}        />      </label>      <label>        Email:        <input          value={person.email}          onChange={handleEmailChange}        />      </label>      <p>        {person.firstName}{' '}        {person.lastName}{' '}        ({person.email})      </p>    </>  );}"
                                    },
                                    "For example, this line mutates the state from a past render:",
                                    {
                                        "code_example": "person.firstName = e.target.value;"
                                    },
                                    "The reliable way to get the behavior you’re looking for is to create a new object and pass it to setPerson. But here, you want to also copy the existing data into it because only one of the fields has changed:",
                                    {
                                        "code_example": "setPerson({  firstName: e.target.value, // New first name from the input  lastName: person.lastName,  email: person.email});"
                                    },
                                    "You can use the ... object spread syntax so that you don’t need to copy every property separately.",
                                    {
                                        "code_example": "setPerson({  ...person, // Copy the old fields  firstName: e.target.value // But override this one});"
                                    },
                                    "Now the form works!",
                                    "Notice how you didn’t declare a separate state variable for each input field. For large forms, keeping all data grouped in an object is very convenient—as long as you update it correctly!",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [person, setPerson] = useState({    firstName: 'Barbara',    lastName: 'Hepworth',    email: 'bhepworth@sculpture.com'  });  function handleFirstNameChange(e) {    setPerson({      ...person,      firstName: e.target.value    });  }  function handleLastNameChange(e) {    setPerson({      ...person,      lastName: e.target.value    });  }  function handleEmailChange(e) {    setPerson({      ...person,      email: e.target.value    });  }  return (    <>      <label>        First name:        <input          value={person.firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:        <input          value={person.lastName}          onChange={handleLastNameChange}        />      </label>      <label>        Email:        <input          value={person.email}          onChange={handleEmailChange}        />      </label>      <p>        {person.firstName}{' '}        {person.lastName}{' '}        ({person.email})      </p>    </>  );}"
                                    },
                                    "Note that the ... spread syntax is “shallow”—it only copies things one level deep. This makes it fast, but it also means that if you want to update a nested property, you’ll have to use it more than once.",
                                    "Deep DiveUsing a single event handler for multiple fields Show DetailsYou can also use the [ and ] braces inside your object definition to specify a property with a dynamic name. Here is the same example, but with a single event handler instead of three different ones:App.jsApp.js ResetForkimport { useState } from 'react';\n\nexport default function Form() {\n  const [person, setPerson] = useState({\n    firstName: 'Barbara',\n    lastName: 'Hepworth',\n    email: 'bhepworth@sculpture.com'\n  });\n\n  function handleChange(e) {\n    setPerson({\n      ...person,\n      [e.target.name]: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        First name:\n        <input\n          name=\"firstName\"\n          value={person.firstName}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          name=\"lastName\"\n          value={person.lastName}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Email:\n        <input\n          name=\"email\"\n          value={person.email}\n          onChange={handleChange}\n        />\n      </label>\n      <p>\n        {person.firstName}{' '}\n        {person.lastName}{' '}\n        ({person.email})\n      </p>\n    </>\n  );\n}\n\nShow moreHere, e.target.name refers to the name property given to the <input> DOM element."
                                ]
                            },
                            {
                                "sub_header": "Updating a nested object ",
                                "source": "react",
                                "url": "https://react.dev/learn/updating-objects-in-state/#updating-a-nested-object",
                                "content": [
                                    "Consider a nested object structure like this:",
                                    {
                                        "code_example": "const [person, setPerson] = useState({  name: 'Niki de Saint Phalle',  artwork: {    title: 'Blue Nana',    city: 'Hamburg',    image: 'https://i.imgur.com/Sd1AgUOm.jpg',  }});"
                                    },
                                    "If you wanted to update person.artwork.city, it’s clear how to do it with mutation:",
                                    {
                                        "code_example": "person.artwork.city = 'New Delhi';"
                                    },
                                    "But in React, you treat state as immutable! In order to change city, you would first need to produce the new artwork object (pre-populated with data from the previous one), and then produce the new person object which points at the new artwork:",
                                    {
                                        "code_example": "const nextArtwork = { ...person.artwork, city: 'New Delhi' };const nextPerson = { ...person, artwork: nextArtwork };setPerson(nextPerson);"
                                    },
                                    "Or, written as a single function call:",
                                    {
                                        "code_example": "setPerson({  ...person, // Copy other fields  artwork: { // but replace the artwork    ...person.artwork, // with the same one    city: 'New Delhi' // but in New Delhi!  }});"
                                    },
                                    "This gets a bit wordy, but it works fine for many cases:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [person, setPerson] = useState({    name: 'Niki de Saint Phalle',    artwork: {      title: 'Blue Nana',      city: 'Hamburg',      image: 'https://i.imgur.com/Sd1AgUOm.jpg',    }  });  function handleNameChange(e) {    setPerson({      ...person,      name: e.target.value    });  }  function handleTitleChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        title: e.target.value      }    });  }  function handleCityChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        city: e.target.value      }    });  }  function handleImageChange(e) {    setPerson({      ...person,      artwork: {        ...person.artwork,        image: e.target.value      }    });  }  return (    <>      <label>        Name:        <input          value={person.name}          onChange={handleNameChange}        />      </label>      <label>        Title:        <input          value={person.artwork.title}          onChange={handleTitleChange}        />      </label>      <label>        City:        <input          value={person.artwork.city}          onChange={handleCityChange}        />      </label>      <label>        Image:        <input          value={person.artwork.image}          onChange={handleImageChange}        />      </label>      <p>        <i>{person.artwork.title}</i>        {' by '}        {person.name}        <br />        (located in {person.artwork.city})      </p>      <img         src={person.artwork.image}         alt={person.artwork.title}      />    </>  );}"
                                    },
                                    "Deep DiveObjects are not really nested Show DetailsAn object like this appears “nested” in code:let obj = {  name: 'Niki de Saint Phalle',  artwork: {    title: 'Blue Nana',    city: 'Hamburg',    image: 'https://i.imgur.com/Sd1AgUOm.jpg',  }};However, “nesting” is an inaccurate way to think about how objects behave. When the code executes, there is no such thing as a “nested” object. You are really looking at two different objects:let obj1 = {  title: 'Blue Nana',  city: 'Hamburg',  image: 'https://i.imgur.com/Sd1AgUOm.jpg',};let obj2 = {  name: 'Niki de Saint Phalle',  artwork: obj1};The obj1 object is not “inside” obj2. For example, obj3 could “point” at obj1 too:let obj1 = {  title: 'Blue Nana',  city: 'Hamburg',  image: 'https://i.imgur.com/Sd1AgUOm.jpg',};let obj2 = {  name: 'Niki de Saint Phalle',  artwork: obj1};let obj3 = {  name: 'Copycat',  artwork: obj1};If you were to mutate obj3.artwork.city, it would affect both obj2.artwork.city and obj1.city. This is because obj3.artwork, obj2.artwork, and obj1 are the same object. This is difficult to see when you think of objects as “nested”. Instead, they are separate objects “pointing” at each other with properties.",
                                    {
                                        "sub_header": "Write concise update logic with Immer ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/updating-objects-in-state/#write-concise-update-logic-with-immer",
                                        "content": [
                                            "If your state is deeply nested, you might want to consider flattening it. But, if you don’t want to change your state structure, you might prefer a shortcut to nested spreads. Immer is a popular library that lets you write using the convenient but mutating syntax and takes care of producing the copies for you. With Immer, the code you write looks like you are “breaking the rules” and mutating an object:",
                                            {
                                                "code_example": "updatePerson(draft => {  draft.artwork.city = 'Lagos';});"
                                            },
                                            "But unlike a regular mutation, it doesn’t overwrite the past state!",
                                            "Deep DiveHow does Immer work? Show DetailsThe draft provided by Immer is a special type of object, called a Proxy, that “records” what you do with it. This is why you can mutate it freely as much as you like! Under the hood, Immer figures out which parts of the draft have been changed, and produces a completely new object that contains your edits.",
                                            "To try Immer:",
                                            "  1.Run npm install use-immer to add Immer as a dependency",
                                            "  2.Then replace import { useState } from 'react' with import { useImmer } from 'use-immer'",
                                            "Here is the above example converted to Immer:",
                                            {
                                                "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                                            },
                                            "Notice how much more concise the event handlers have become. You can mix and match useState and useImmer in a single component as much as you like. Immer is a great way to keep the update handlers concise, especially if there’s nesting in your state, and copying objects leads to repetitive code.",
                                            "Deep DiveWhy is mutating state not recommended in React? Show DetailsThere are a few reasons:\nDebugging: If you use console.log and don’t mutate state, your past logs won’t get clobbered by the more recent state changes. So you can clearly see how state has changed between renders.\nOptimizations: Common React optimization strategies rely on skipping work if previous props or state are the same as the next ones. If you never mutate state, it is very fast to check whether there were any changes. If prevObj === obj, you can be sure that nothing could have changed inside of it.\nNew Features: The new React features we’re building rely on state being treated like a snapshot. If you’re mutating past versions of state, that may prevent you from using the new features.\nRequirement Changes: Some application features, like implementing Undo/Redo, showing a history of changes, or letting the user reset a form to earlier values, are easier to do when nothing is mutated. This is because you can keep past copies of state in memory, and reuse them when appropriate. If you start with a mutative approach, features like this can be difficult to add later on.\nSimpler Implementation: Because React does not rely on mutation, it does not need to do anything special with your objects. It does not need to hijack their properties, always wrap them into Proxies, or do other work at initialization as many “reactive” solutions do. This is also why React lets you put any object into state—no matter how large—without additional performance or correctness pitfalls.\nIn practice, you can often “get away” with mutating state in React, but we strongly advise you not to do that so that you can use new React features developed with this approach in mind. Future contributors and perhaps even your future self will thank you!",
                                            "Recap\nTreat all state in React as immutable.\nWhen you store objects in state, mutating them will not trigger renders and will change the state in previous render “snapshots”.\nInstead of mutating an object, create a new version of it, and trigger a re-render by setting state to it.\nYou can use the {...obj, something: 'newValue'} object spread syntax to create copies of objects.\nSpread syntax is shallow: it only copies one level deep.\nTo update a nested object, you need to create copies all the way up from the place you’re updating.\nTo reduce repetitive copying code, use Immer.\n",
                                            "Try out some challenges1. Fix incorrect state updates 2. Find and fix the mutation 3. Update an object with Immer Challenge 1 of 3: Fix incorrect state updates This form has a few bugs. Click the button that increases the score a few times. Notice that it does not increase. Then edit the first name, and notice that the score has suddenly “caught up” with your changes. Finally, edit the last name, and notice that the score has disappeared completely.Your task is to fix all of these bugs. As you fix them, explain why each of them happens.App.jsApp.js ResetForkimport { useState } from 'react';\n\nexport default function Scoreboard() {\n  const [player, setPlayer] = useState({\n    firstName: 'Ranjani',\n    lastName: 'Shettar',\n    score: 10,\n  });\n\n  function handlePlusClick() {\n    player.score++;\n  }\n\n  function handleFirstNameChange(e) {\n    setPlayer({\n      ...player,\n      firstName: e.target.value,\n    });\n  }\n\n  function handleLastNameChange(e) {\n    setPlayer({\n      lastName: e.target.value\n    });\n  }\n\n  return (\n    <>\n      <label>\n        Score: <b>{player.score}</b>\n        {' '}\n        <button onClick={handlePlusClick}>\n          +1\n        </button>\n      </label>\n      <label>\n        First name:\n        <input\n          value={player.firstName}\n          onChange={handleFirstNameChange}\n        />\n      </label>\n      <label>\n        Last name:\n        <input\n          value={player.lastName}\n          onChange={handleLastNameChange}\n        />\n      </label>\n    </>\n  );\n}\n\nShow more Show solutionNext Challenge"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Updating Arrays in State",
                        "url": "https://react.dev/learn/updating-arrays-in-state",
                        "content": [
                            "Arrays are mutable in JavaScript, but you should treat them as immutable when you store them in state. Just like with objects, when you want to update an array stored in state, you need to create a new one (or make a copy of an existing one), and then set state to use the new array.",
                            "  1.How to add, remove, or change items in an array in React state",
                            "  2.How to update an object inside of an array",
                            "  3.How to make array copying less repetitive with Immer",
                            "You will learn\nHow to add, remove, or change items in an array in React state\nHow to update an object inside of an array\nHow to make array copying less repetitive with Immer\n",
                            {
                                "sub_header": "Updating arrays without mutation ",
                                "source": "react",
                                "url": "https://react.dev/learn/updating-arrays-in-state/#updating-arrays-without-mutation",
                                "content": [
                                    "In JavaScript, arrays are just another kind of object. Like with objects, you should treat arrays in React state as read-only. This means that you shouldn’t reassign items inside an array like arr[0] = 'bird', and you also shouldn’t use methods that mutate the array, such as push() and pop().",
                                    "Instead, every time you want to update an array, you’ll want to pass a new array to your state setting function. To do that, you can create a new array from the original array in your state by calling its non-mutating methods like filter() and map(). Then you can set your state to the resulting new array.",
                                    "Here is a reference table of common array operations. When dealing with arrays inside React state, you will need to avoid the methods in the left column, and instead prefer the methods in the right column:",
                                    "avoid (mutates the array)prefer (returns a new array)addingpush, unshiftconcat, [...arr] spread syntax (example)removingpop, shift, splicefilter, slice (example)replacingsplice, arr[i] = ... assignmentmap (example)sortingreverse, sortcopy the array first (example)",
                                    "Alternatively, you can use Immer which lets you use methods from both columns.",
                                    {
                                        "code_example": "slice"
                                    },
                                    "  1.slice lets you copy an array or a part of it.",
                                    "  2.splice mutates the array (to insert or delete items).",
                                    {
                                        "sub_header": "Adding to an array ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/updating-arrays-in-state/#adding-to-an-array",
                                        "content": [
                                            "push() will mutate an array, which you don’t want:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';let nextId = 0;export default function List() {  const [name, setName] = useState('');  const [artists, setArtists] = useState([]);  return (    <>      <h1>Inspiring sculptors:</h1>      <input        value={name}        onChange={e => setName(e.target.value)}      />      <button onClick={() => {        artists.push({          id: nextId++,          name: name,        });      }}>Add</button>      <ul>        {artists.map(artist => (          <li key={artist.id}>{artist.name}</li>        ))}      </ul>    </>  );}"
                                            },
                                            "Instead, create a new array which contains the existing items and a new item at the end. There are multiple ways to do this, but the easiest one is to use the ... array spread syntax:",
                                            {
                                                "code_example": "setArtists( // Replace the state  [ // with a new array    ...artists, // that contains all the old items    { id: nextId++, name: name } // and one new item at the end  ]);"
                                            },
                                            "Now it works correctly:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';let nextId = 0;export default function List() {  const [name, setName] = useState('');  const [artists, setArtists] = useState([]);  return (    <>      <h1>Inspiring sculptors:</h1>      <input        value={name}        onChange={e => setName(e.target.value)}      />      <button onClick={() => {        setArtists([          ...artists,          { id: nextId++, name: name }        ]);      }}>Add</button>      <ul>        {artists.map(artist => (          <li key={artist.id}>{artist.name}</li>        ))}      </ul>    </>  );}"
                                            },
                                            "The array spread syntax also lets you prepend an item by placing it before the original ...artists:",
                                            {
                                                "code_example": "setArtists([  { id: nextId++, name: name },  ...artists // Put old items at the end]);"
                                            },
                                            "In this way, spread can do the job of both push() by adding to the end of an array and unshift() by adding to the beginning of an array. Try it in the sandbox above!"
                                        ]
                                    },
                                    {
                                        "sub_header": "Removing from an array ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/updating-arrays-in-state/#removing-from-an-array",
                                        "content": [
                                            "The easiest way to remove an item from an array is to filter it out. In other words, you will produce a new array that will not contain that item. To do this, use the filter method, for example:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';let initialArtists = [  { id: 0, name: 'Marta Colvin Andrade' },  { id: 1, name: 'Lamidi Olonade Fakeye'},  { id: 2, name: 'Louise Nevelson'},];export default function List() {  const [artists, setArtists] = useState(    initialArtists  );  return (    <>      <h1>Inspiring sculptors:</h1>      <ul>        {artists.map(artist => (          <li key={artist.id}>            {artist.name}{' '}            <button onClick={() => {              setArtists(                artists.filter(a =>                  a.id !== artist.id                )              );            }}>              Delete            </button>          </li>        ))}      </ul>    </>  );}"
                                            },
                                            "Click the “Delete” button a few times, and look at its click handler.",
                                            {
                                                "code_example": "setArtists(  artists.filter(a => a.id !== artist.id));"
                                            },
                                            "Here, artists.filter(a => a.id !== artist.id) means “create an array that consists of those artists whose IDs are different from artist.id”. In other words, each artist’s “Delete” button will filter that artist out of the array, and then request a re-render with the resulting array. Note that filter does not modify the original array."
                                        ]
                                    },
                                    {
                                        "sub_header": "Transforming an array ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/updating-arrays-in-state/#transforming-an-array",
                                        "content": [
                                            "If you want to change some or all items of the array, you can use map() to create a new array. The function you will pass to map can decide what to do with each item, based on its data or its index (or both).",
                                            "In this example, an array holds coordinates of two circles and a square. When you press the button, it moves only the circles down by 50 pixels. It does this by producing a new array of data using map():",
                                            {
                                                "code_sandbox": "import { useState } from 'react';let initialShapes = [  { id: 0, type: 'circle', x: 50, y: 100 },  { id: 1, type: 'square', x: 150, y: 100 },  { id: 2, type: 'circle', x: 250, y: 100 },];export default function ShapeEditor() {  const [shapes, setShapes] = useState(    initialShapes  );  function handleClick() {    const nextShapes = shapes.map(shape => {      if (shape.type === 'square') {        // No change        return shape;      } else {        // Return a new circle 50px below        return {          ...shape,          y: shape.y + 50,        };      }    });    // Re-render with the new array    setShapes(nextShapes);  }  return (    <>      <button onClick={handleClick}>        Move circles down!      </button>      {shapes.map(shape => (        <div          key={shape.id}          style={{          background: 'purple',          position: 'absolute',          left: shape.x,          top: shape.y,          borderRadius:            shape.type === 'circle'              ? '50%' : '',          width: 20,          height: 20,        }} />      ))}    </>  );}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Replacing items in an array ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/updating-arrays-in-state/#replacing-items-in-an-array",
                                        "content": [
                                            "It is particularly common to want to replace one or more items in an array. Assignments like arr[0] = 'bird' are mutating the original array, so instead you’ll want to use map for this as well.",
                                            "To replace an item, create a new array with map. Inside your map call, you will receive the item index as the second argument. Use it to decide whether to return the original item (the first argument) or something else:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';let initialCounters = [  0, 0, 0];export default function CounterList() {  const [counters, setCounters] = useState(    initialCounters  );  function handleIncrementClick(index) {    const nextCounters = counters.map((c, i) => {      if (i === index) {        // Increment the clicked counter        return c + 1;      } else {        // The rest haven't changed        return c;      }    });    setCounters(nextCounters);  }  return (    <ul>      {counters.map((counter, i) => (        <li key={i}>          {counter}          <button onClick={() => {            handleIncrementClick(i);          }}>+1</button>        </li>      ))}    </ul>  );}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Inserting into an array ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/updating-arrays-in-state/#inserting-into-an-array",
                                        "content": [
                                            "Sometimes, you may want to insert an item at a particular position that’s neither at the beginning nor at the end. To do this, you can use the ... array spread syntax together with the slice() method. The slice() method lets you cut a “slice” of the array. To insert an item, you will create an array that spreads the slice before the insertion point, then the new item, and then the rest of the original array.",
                                            "In this example, the Insert button always inserts at the index 1:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';let nextId = 3;const initialArtists = [  { id: 0, name: 'Marta Colvin Andrade' },  { id: 1, name: 'Lamidi Olonade Fakeye'},  { id: 2, name: 'Louise Nevelson'},];export default function List() {  const [name, setName] = useState('');  const [artists, setArtists] = useState(    initialArtists  );  function handleClick() {    const insertAt = 1; // Could be any index    const nextArtists = [      // Items before the insertion point:      ...artists.slice(0, insertAt),      // New item:      { id: nextId++, name: name },      // Items after the insertion point:      ...artists.slice(insertAt)    ];    setArtists(nextArtists);    setName('');  }  return (    <>      <h1>Inspiring sculptors:</h1>      <input        value={name}        onChange={e => setName(e.target.value)}      />      <button onClick={handleClick}>        Insert      </button>      <ul>        {artists.map(artist => (          <li key={artist.id}>{artist.name}</li>        ))}      </ul>    </>  );}"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Making other changes to an array ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/updating-arrays-in-state/#making-other-changes-to-an-array",
                                        "content": [
                                            "There are some things you can’t do with the spread syntax and non-mutating methods like map() and filter() alone. For example, you may want to reverse or sort an array. The JavaScript reverse() and sort() methods are mutating the original array, so you can’t use them directly.",
                                            "However, you can copy the array first, and then make changes to it.",
                                            "For example:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';const initialList = [  { id: 0, title: 'Big Bellies' },  { id: 1, title: 'Lunar Landscape' },  { id: 2, title: 'Terracotta Army' },];export default function List() {  const [list, setList] = useState(initialList);  function handleClick() {    const nextList = [...list];    nextList.reverse();    setList(nextList);  }  return (    <>      <button onClick={handleClick}>        Reverse      </button>      <ul>        {list.map(artwork => (          <li key={artwork.id}>{artwork.title}</li>        ))}      </ul>    </>  );}"
                                            },
                                            "Here, you use the [...list] spread syntax to create a copy of the original array first. Now that you have a copy, you can use mutating methods like nextList.reverse() or nextList.sort(), or even assign individual items with nextList[0] = \"something\".",
                                            "However, even if you copy an array, you can’t mutate existing items inside of it directly. This is because copying is shallow—the new array will contain the same items as the original one. So if you modify an object inside the copied array, you are mutating the existing state. For example, code like this is a problem.",
                                            {
                                                "code_example": "const nextList = [...list];nextList[0].seen = true; // Problem: mutates list[0]setList(nextList);"
                                            },
                                            "Although nextList and list are two different arrays, nextList[0] and list[0] point to the same object. So by changing nextList[0].seen, you are also changing list[0].seen. This is a state mutation, which you should avoid! You can solve this issue in a similar way to updating nested JavaScript objects—by copying individual items you want to change instead of mutating them. Here’s how."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Updating objects inside arrays ",
                                "source": "react",
                                "url": "https://react.dev/learn/updating-arrays-in-state/#updating-objects-inside-arrays",
                                "content": [
                                    "Objects are not really located “inside” arrays. They might appear to be “inside” in code, but each object in an array is a separate value, to which the array “points”. This is why you need to be careful when changing nested fields like list[0]. Another person’s artwork list may point to the same element of the array!",
                                    "When updating nested state, you need to create copies from the point where you want to update, and all the way up to the top level. Let’s see how this works.",
                                    "In this example, two separate artwork lists have the same initial state. They are supposed to be isolated, but because of a mutation, their state is accidentally shared, and checking a box in one list affects the other list:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';let nextId = 3;const initialList = [  { id: 0, title: 'Big Bellies', seen: false },  { id: 1, title: 'Lunar Landscape', seen: false },  { id: 2, title: 'Terracotta Army', seen: true },];export default function BucketList() {  const [myList, setMyList] = useState(initialList);  const [yourList, setYourList] = useState(    initialList  );  function handleToggleMyList(artworkId, nextSeen) {    const myNextList = [...myList];    const artwork = myNextList.find(      a => a.id === artworkId    );    artwork.seen = nextSeen;    setMyList(myNextList);  }  function handleToggleYourList(artworkId, nextSeen) {    const yourNextList = [...yourList];    const artwork = yourNextList.find(      a => a.id === artworkId    );    artwork.seen = nextSeen;    setYourList(yourNextList);  }  return (    <>      <h1>Art Bucket List</h1>      <h2>My list of art to see:</h2>      <ItemList        artworks={myList}        onToggle={handleToggleMyList} />      <h2>Your list of art to see:</h2>      <ItemList        artworks={yourList}        onToggle={handleToggleYourList} />    </>  );}function ItemList({ artworks, onToggle }) {  return (    <ul>      {artworks.map(artwork => (        <li key={artwork.id}>          <label>            <input              type=\"checkbox\"              checked={artwork.seen}              onChange={e => {                onToggle(                  artwork.id,                  e.target.checked                );              }}            />            {artwork.title}          </label>        </li>      ))}    </ul>  );}"
                                    },
                                    "The problem is in code like this:",
                                    {
                                        "code_example": "const myNextList = [...myList];const artwork = myNextList.find(a => a.id === artworkId);artwork.seen = nextSeen; // Problem: mutates an existing itemsetMyList(myNextList);"
                                    },
                                    "Although the myNextList array itself is new, the items themselves are the same as in the original myList array. So changing artwork.seen changes the original artwork item. That artwork item is also in yourList, which causes the bug. Bugs like this can be difficult to think about, but thankfully they disappear if you avoid mutating state.",
                                    "You can use map to substitute an old item with its updated version without mutation.",
                                    {
                                        "code_example": "setMyList(myList.map(artwork => {  if (artwork.id === artworkId) {    // Create a *new* object with changes    return { ...artwork, seen: nextSeen };  } else {    // No changes    return artwork;  }}));"
                                    },
                                    "Here, ... is the object spread syntax used to create a copy of an object.",
                                    "With this approach, none of the existing state items are being mutated, and the bug is fixed:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';let nextId = 3;const initialList = [  { id: 0, title: 'Big Bellies', seen: false },  { id: 1, title: 'Lunar Landscape', seen: false },  { id: 2, title: 'Terracotta Army', seen: true },];export default function BucketList() {  const [myList, setMyList] = useState(initialList);  const [yourList, setYourList] = useState(    initialList  );  function handleToggleMyList(artworkId, nextSeen) {    setMyList(myList.map(artwork => {      if (artwork.id === artworkId) {        // Create a *new* object with changes        return { ...artwork, seen: nextSeen };      } else {        // No changes        return artwork;      }    }));  }  function handleToggleYourList(artworkId, nextSeen) {    setYourList(yourList.map(artwork => {      if (artwork.id === artworkId) {        // Create a *new* object with changes        return { ...artwork, seen: nextSeen };      } else {        // No changes        return artwork;      }    }));  }  return (    <>      <h1>Art Bucket List</h1>      <h2>My list of art to see:</h2>      <ItemList        artworks={myList}        onToggle={handleToggleMyList} />      <h2>Your list of art to see:</h2>      <ItemList        artworks={yourList}        onToggle={handleToggleYourList} />    </>  );}function ItemList({ artworks, onToggle }) {  return (    <ul>      {artworks.map(artwork => (        <li key={artwork.id}>          <label>            <input              type=\"checkbox\"              checked={artwork.seen}              onChange={e => {                onToggle(                  artwork.id,                  e.target.checked                );              }}            />            {artwork.title}          </label>        </li>      ))}    </ul>  );}"
                                    },
                                    "In general, you should only mutate objects that you have just created. If you were inserting a new artwork, you could mutate it, but if you’re dealing with something that’s already in state, you need to make a copy.",
                                    {
                                        "sub_header": "Write concise update logic with Immer ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/updating-arrays-in-state/#write-concise-update-logic-with-immer",
                                        "content": [
                                            "Updating nested arrays without mutation can get a little bit repetitive. Just as with objects:",
                                            "  1.Generally, you shouldn’t need to update state more than a couple of levels deep. If your state objects are very deep, you might want to restructure them differently so that they are flat.",
                                            "  2.If you don’t want to change your state structure, you might prefer to use Immer, which lets you write using the convenient but mutating syntax and takes care of producing the copies for you.",
                                            "Here is the Art Bucket List example rewritten with Immer:",
                                            {
                                                "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                                            },
                                            "Note how with Immer, mutation like artwork.seen = nextSeen is now okay:",
                                            {
                                                "code_example": "updateMyTodos(draft => {  const artwork = draft.find(a => a.id === artworkId);  artwork.seen = nextSeen;});"
                                            },
                                            "This is because you’re not mutating the original state, but you’re mutating a special draft object provided by Immer. Similarly, you can apply mutating methods like push() and pop() to the content of the draft.",
                                            "Behind the scenes, Immer always constructs the next state from scratch according to the changes that you’ve done to the draft. This keeps your event handlers very concise without ever mutating state.",
                                            "Recap\nYou can put arrays into state, but you can’t change them.\nInstead of mutating an array, create a new version of it, and update the state to it.\nYou can use the [...arr, newItem] array spread syntax to create arrays with new items.\nYou can use filter() and map() to create new arrays with filtered or transformed items.\nYou can use Immer to keep your code concise.\n",
                                            {
                                                "code_example": "handleIncreaseClick"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "Managing State",
        "source": "react",
        "url": "https://react.dev/learn/managing-state",
        "sections": [
            "As your application grows, it helps to be more intentional about how your state is organized and how the data flows between your components. Redundant or duplicate state is a common source of bugs. In this chapter, you’ll learn how to structure your state well, how to keep your state update logic maintainable, and how to share state between distant components.",
            "  1.How to think about UI changes as state changes",
            "  2.How to structure state well",
            "  3.How to “lift state up” to share it between components",
            "  4.How to control whether the state gets preserved or reset",
            "  5.How to consolidate complex state logic in a function",
            "  6.How to pass information without “prop drilling”",
            "  7.How to scale state management as your app grows",
            "In this chapter\nHow to think about UI changes as state changes\nHow to structure state well\nHow to “lift state up” to share it between components\nHow to control whether the state gets preserved or reset\nHow to consolidate complex state logic in a function\nHow to pass information without “prop drilling”\nHow to scale state management as your app grows\n",
            {
                "subHeader": "Reacting to input with state ",
                "url": "https://react.dev/learn/managing-state/#reacting-to-input-with-state",
                "sections": [
                    "With React, you won’t modify the UI from code directly. For example, you won’t write commands like “disable the button”, “enable the button”, “show the success message”, etc. Instead, you will describe the UI you want to see for the different visual states of your component (“initial state”, “typing state”, “success state”), and then trigger the state changes in response to user input. This is similar to how designers think about UI.",
                    "Here is a quiz form built using React. Note how it uses the status state variable to determine whether to enable or disable the submit button, and whether to show the success message instead.",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [answer, setAnswer] = useState('');  const [error, setError] = useState(null);  const [status, setStatus] = useState('typing');  if (status === 'success') {    return <h1>That's right!</h1>  }  async function handleSubmit(e) {    e.preventDefault();    setStatus('submitting');    try {      await submitForm(answer);      setStatus('success');    } catch (err) {      setStatus('typing');      setError(err);    }  }  function handleTextareaChange(e) {    setAnswer(e.target.value);  }  return (    <>      <h2>City quiz</h2>      <p>        In which city is there a billboard that turns air into drinkable water?      </p>      <form onSubmit={handleSubmit}>        <textarea          value={answer}          onChange={handleTextareaChange}          disabled={status === 'submitting'}        />        <br />        <button disabled={          answer.length === 0 ||          status === 'submitting'        }>          Submit        </button>        {error !== null &&          <p className=\"Error\">            {error.message}          </p>        }      </form>    </>  );}function submitForm(answer) {  // Pretend it's hitting the network.  return new Promise((resolve, reject) => {    setTimeout(() => {      let shouldError = answer.toLowerCase() !== 'lima'      if (shouldError) {        reject(new Error('Good guess but a wrong answer. Try again!'));      } else {        resolve();      }    }, 1500);  });}"
                    },
                    "Ready to learn this topic?Read Reacting to Input with State to learn how to approach interactions with a state-driven mindset.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Choosing the state structure ",
                "url": "https://react.dev/learn/managing-state/#choosing-the-state-structure",
                "sections": [
                    "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. The most important principle is that state shouldn’t contain redundant or duplicated information. If there’s unnecessary state, it’s easy to forget to update it, and introduce bugs!",
                    "For example, this form has a redundant fullName state variable:",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  const [fullName, setFullName] = useState('');  function handleFirstNameChange(e) {    setFirstName(e.target.value);    setFullName(e.target.value + ' ' + lastName);  }  function handleLastNameChange(e) {    setLastName(e.target.value);    setFullName(firstName + ' ' + e.target.value);  }  return (    <>      <h2>Let’s check you in</h2>      <label>        First name:{' '}        <input          value={firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:{' '}        <input          value={lastName}          onChange={handleLastNameChange}        />      </label>      <p>        Your ticket will be issued to: <b>{fullName}</b>      </p>    </>  );}"
                    },
                    "You can remove it and simplify the code by calculating fullName while the component is rendering:",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  const fullName = firstName + ' ' + lastName;  function handleFirstNameChange(e) {    setFirstName(e.target.value);  }  function handleLastNameChange(e) {    setLastName(e.target.value);  }  return (    <>      <h2>Let’s check you in</h2>      <label>        First name:{' '}        <input          value={firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:{' '}        <input          value={lastName}          onChange={handleLastNameChange}        />      </label>      <p>        Your ticket will be issued to: <b>{fullName}</b>      </p>    </>  );}"
                    },
                    "This might seem like a small change, but many bugs in React apps are fixed this way.",
                    "Ready to learn this topic?Read Choosing the State Structure to learn how to design the state shape to avoid bugs.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Sharing state between components ",
                "url": "https://react.dev/learn/managing-state/#sharing-state-between-components",
                "sections": [
                    "Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as “lifting state up”, and it’s one of the most common things you will do writing React code.",
                    "In this example, only one panel should be active at a time. To achieve this, instead of keeping the active state inside each individual panel, the parent component holds the state and specifies the props for its children.",
                    {
                        "code_sandbox": "import { useState } from 'react';export default function Accordion() {  const [activeIndex, setActiveIndex] = useState(0);  return (    <>      <h2>Almaty, Kazakhstan</h2>      <Panel        title=\"About\"        isActive={activeIndex === 0}        onShow={() => setActiveIndex(0)}      >        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.      </Panel>      <Panel        title=\"Etymology\"        isActive={activeIndex === 1}        onShow={() => setActiveIndex(1)}      >        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.      </Panel>    </>  );}function Panel({  title,  children,  isActive,  onShow}) {  return (    <section className=\"panel\">      <h3>{title}</h3>      {isActive ? (        <p>{children}</p>      ) : (        <button onClick={onShow}>          Show        </button>      )}    </section>  );}"
                    },
                    "Ready to learn this topic?Read Sharing State Between Components to learn how to lift state up and keep components in sync.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Preserving and resetting state ",
                "url": "https://react.dev/learn/managing-state/#preserving-and-resetting-state",
                "sections": [
                    "When you re-render a component, React needs to decide which parts of the tree to keep (and update), and which parts to discard or re-create from scratch. In most cases, React’s automatic behavior works well enough. By default, React preserves the parts of the tree that “match up” with the previously rendered component tree.",
                    "However, sometimes this is not what you want. In this chat app, typing a message and then switching the recipient does not reset the input. This can make the user accidentally send a message to the wrong person:",
                    {
                        "code_sandbox": "ContactList.jsChat.jsimport { useState } from 'react';import Chat from './Chat.js';import ContactList from './ContactList.js';export default function Messenger() {  const [to, setTo] = useState(contacts[0]);  return (    <div>      <ContactList        contacts={contacts}        selectedContact={to}        onSelect={contact => setTo(contact)}      />      <Chat contact={to} />    </div>  )}const contacts = [  { name: 'Taylor', email: 'taylor@mail.com' },  { name: 'Alice', email: 'alice@mail.com' },  { name: 'Bob', email: 'bob@mail.com' }];"
                    },
                    "React lets you override the default behavior, and force a component to reset its state by passing it a different key, like <Chat key={email} />. This tells React that if the recipient is different, it should be considered a different Chat component that needs to be re-created from scratch with the new data (and UI like inputs). Now switching between the recipients resets the input field—even though you render the same component.",
                    {
                        "code_sandbox": "ContactList.jsChat.jsimport { useState } from 'react';import Chat from './Chat.js';import ContactList from './ContactList.js';export default function Messenger() {  const [to, setTo] = useState(contacts[0]);  return (    <div>      <ContactList        contacts={contacts}        selectedContact={to}        onSelect={contact => setTo(contact)}      />      <Chat key={to.email} contact={to} />    </div>  )}const contacts = [  { name: 'Taylor', email: 'taylor@mail.com' },  { name: 'Alice', email: 'alice@mail.com' },  { name: 'Bob', email: 'bob@mail.com' }];"
                    },
                    "Ready to learn this topic?Read Preserving and Resetting State to learn the lifetime of state and how to control it.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Extracting state logic into a reducer ",
                "url": "https://react.dev/learn/managing-state/#extracting-state-logic-into-a-reducer",
                "sections": [
                    "Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called “reducer”. Your event handlers become concise because they only specify the user “actions”. At the bottom of the file, the reducer function specifies how the state should update in response to each action!",
                    {
                        "code_sandbox": "import { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(    tasksReducer,    initialTasks  );  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId    });  }  return (    <>      <h1>Prague itinerary</h1>      <AddTask        onAddTask={handleAddTask}      />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [...tasks, {        id: action.id,        text: action.text,        done: false      }];    }    case 'changed': {      return tasks.map(t => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter(t => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}let nextId = 3;const initialTasks = [  { id: 0, text: 'Visit Kafka Museum', done: true },  { id: 1, text: 'Watch a puppet show', done: false },  { id: 2, text: 'Lennon Wall pic', done: false }];"
                    },
                    "Ready to learn this topic?Read Extracting State Logic into a Reducer to learn how to consolidate logic in the reducer function.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Passing data deeply with context ",
                "url": "https://react.dev/learn/managing-state/#passing-data-deeply-with-context",
                "sections": [
                    "Usually, you will pass information from a parent component to a child component via props. But passing props can become inconvenient if you need to pass some prop through many components, or if many components need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep it is—without passing it explicitly through props.",
                    "Here, the Heading component determines its heading level by “asking” the closest Section for its level. Each Section tracks its own level by asking the parent Section and adding one to it. Every Section provides information to all components below it without passing props—it does that through context.",
                    {
                        "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section>      <Heading>Title</Heading>      <Section>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Section>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Section>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                    },
                    "Ready to learn this topic?Read Passing Data Deeply with Context to learn about using context as an alternative to passing props.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Scaling up with reducer and context ",
                "url": "https://react.dev/learn/managing-state/#scaling-up-with-reducer-and-context",
                "sections": [
                    "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.",
                    "With this approach, a parent component with complex state manages it with a reducer. Other components anywhere deep in the tree can read its state via context. They can also dispatch actions to update that state.",
                    {
                        "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsimport AddTask from './AddTask.js';import TaskList from './TaskList.js';import { TasksProvider } from './TasksContext.js';export default function TaskApp() {  return (    <TasksProvider>      <h1>Day off in Kyoto</h1>      <AddTask />      <TaskList />    </TasksProvider>  );}"
                    },
                    "Ready to learn this topic?Read Scaling Up with Reducer and Context to learn how state management scales in a growing app.Read More",
                    ""
                ]
            },
            {
                "subHeader": "What’s next? ",
                "url": "https://react.dev/learn/managing-state/#whats-next",
                "sections": [
                    "Head over to Reacting to Input with State to start reading this chapter page by page!",
                    "Or, if you’re already familiar with these topics, why not read about Escape Hatches?"
                ]
            },
            {
                "subTopics": [
                    {
                        "headers": "Reacting to Input with State",
                        "url": "https://react.dev/learn/reacting-to-input-with-state",
                        "content": [
                            "React provides a declarative way to manipulate the UI. Instead of manipulating individual pieces of the UI directly, you describe the different states that your component can be in, and switch between them in response to the user input. This is similar to how designers think about the UI.",
                            "  1.How declarative UI programming differs from imperative UI programming",
                            "  2.How to enumerate the different visual states your component can be in",
                            "  3.How to trigger the changes between the different visual states from code",
                            "You will learn\nHow declarative UI programming differs from imperative UI programming\nHow to enumerate the different visual states your component can be in\nHow to trigger the changes between the different visual states from code\n",
                            {
                                "sub_header": "How declarative UI compares to imperative ",
                                "source": "react",
                                "url": "https://react.dev/learn/reacting-to-input-with-state/#how-declarative-ui-compares-to-imperative",
                                "content": [
                                    "When you design UI interactions, you probably think about how the UI changes in response to user actions. Consider a form that lets the user submit an answer:",
                                    "  1.When you type something into the form, the “Submit” button becomes enabled.",
                                    "  2.When you press “Submit”, both the form and the button become disabled, and a spinner appears.",
                                    "  3.If the network request succeeds, the form gets hidden, and the “Thank you” message appears.",
                                    "  4.If the network request fails, an error message appears, and the form becomes enabled again.",
                                    "In imperative programming, the above corresponds directly to how you implement interaction. You have to write the exact instructions to manipulate the UI depending on what just happened. Here’s another way to think about this: imagine riding next to someone in a car and telling them turn by turn where to go.",
                                    "",
                                    "Illustrated by Rachel Lee Nabors",
                                    "They don’t know where you want to go, they just follow your commands. (And if you get the directions wrong, you end up in the wrong place!) It’s called imperative because you have to “command” each element, from the spinner to the button, telling the computer how to update the UI.",
                                    "In this example of imperative UI programming, the form is built without React. It only uses the browser DOM:",
                                    {
                                        "code_sandbox": "async function handleFormSubmit(e) {  e.preventDefault();  disable(textarea);  disable(button);  show(loadingMessage);  hide(errorMessage);  try {    await submitForm(textarea.value);    show(successMessage);    hide(form);  } catch (err) {    show(errorMessage);    errorMessage.textContent = err.message;  } finally {    hide(loadingMessage);    enable(textarea);    enable(button);  }}function handleTextareaChange() {  if (textarea.value.length === 0) {    disable(button);  } else {    enable(button);  }}function hide(el) {  el.style.display = 'none';}function show(el) {  el.style.display = '';}function enable(el) {  el.disabled = false;}function disable(el) {  el.disabled = true;}function submitForm(answer) {  // Pretend it's hitting the network.  return new Promise((resolve, reject) => {    setTimeout(() => {      if (answer.toLowerCase() === 'istanbul') {        resolve();      } else {        reject(new Error('Good guess but a wrong answer. Try again!'));      }    }, 1500);  });}let form = document.getElementById('form');let textarea = document.getElementById('textarea');let button = document.getElementById('button');let loadingMessage = document.getElementById('loading');let errorMessage = document.getElementById('error');let successMessage = document.getElementById('success');form.onsubmit = handleFormSubmit;textarea.oninput = handleTextareaChange;"
                                    },
                                    "Manipulating the UI imperatively works well enough for isolated examples, but it gets exponentially more difficult to manage in more complex systems. Imagine updating a page full of different forms like this one. Adding a new UI element or a new interaction would require carefully checking all existing code to make sure you haven’t introduced a bug (for example, forgetting to show or hide something).",
                                    "React was built to solve this problem.",
                                    "In React, you don’t directly manipulate the UI—meaning you don’t enable, disable, show, or hide components directly. Instead, you declare what you want to show, and React figures out how to update the UI. Think of getting into a taxi and telling the driver where you want to go instead of telling them exactly where to turn. It’s the driver’s job to get you there, and they might even know some shortcuts you haven’t considered!",
                                    "",
                                    "Illustrated by Rachel Lee Nabors"
                                ]
                            },
                            {
                                "sub_header": "Thinking about UI declaratively ",
                                "source": "react",
                                "url": "https://react.dev/learn/reacting-to-input-with-state/#thinking-about-ui-declaratively",
                                "content": [
                                    "You’ve seen how to implement a form imperatively above. To better understand how to think in React, you’ll walk through reimplementing this UI in React below:",
                                    "  1.Identify your component’s different visual states",
                                    "  2.Determine what triggers those state changes",
                                    "  3.Represent the state in memory using useState",
                                    "  4.Remove any non-essential state variables",
                                    "  5.Connect the event handlers to set the state",
                                    {
                                        "sub_header": "Step 1: Identify your component’s different visual states ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reacting-to-input-with-state/#step-1-identify-your-components-different-visual-states",
                                        "content": [
                                            "In computer science, you may hear about a “state machine” being in one of several “states”. If you work with a designer, you may have seen mockups for different “visual states”. React stands at the intersection of design and computer science, so both of these ideas are sources of inspiration.",
                                            "First, you need to visualize all the different “states” of the UI the user might see:",
                                            "  1.Empty: Form has a disabled “Submit” button.",
                                            "  2.Typing: Form has an enabled “Submit” button.",
                                            "  3.Submitting: Form is completely disabled. Spinner is shown.",
                                            "  4.Success: “Thank you” message is shown instead of a form.",
                                            "  5.Error: Same as Typing state, but with an extra error message.",
                                            "Just like a designer, you’ll want to “mock up” or create “mocks” for the different states before you add logic. For example, here is a mock for just the visual part of the form. This mock is controlled by a prop called status with a default value of 'empty':",
                                            {
                                                "code_sandbox": "export default function Form({  status = 'empty'}) {  if (status === 'success') {    return <h1>That's right!</h1>  }  return (    <>      <h2>City quiz</h2>      <p>        In which city is there a billboard that turns air into drinkable water?      </p>      <form>        <textarea />        <br />        <button>          Submit        </button>      </form>    </>  )}"
                                            },
                                            "You could call that prop anything you like, the naming is not important. Try editing status = 'empty' to status = 'success' to see the success message appear. Mocking lets you quickly iterate on the UI before you wire up any logic. Here is a more fleshed out prototype of the same component, still “controlled” by the status prop:",
                                            {
                                                "code_sandbox": "export default function Form({  // Try 'submitting', 'error', 'success':  status = 'empty'}) {  if (status === 'success') {    return <h1>That's right!</h1>  }  return (    <>      <h2>City quiz</h2>      <p>        In which city is there a billboard that turns air into drinkable water?      </p>      <form>        <textarea disabled={          status === 'submitting'        } />        <br />        <button disabled={          status === 'empty' ||          status === 'submitting'        }>          Submit        </button>        {status === 'error' &&          <p className=\"Error\">            Good guess but a wrong answer. Try again!          </p>        }      </form>      </>  );}"
                                            },
                                            "Deep DiveDisplaying many visual states at once Show DetailsIf a component has a lot of visual states, it can be convenient to show them all on one page:App.jsForm.jsApp.js ResetForkimport Form from './Form.js';\n\nlet statuses = [\n  'empty',\n  'typing',\n  'submitting',\n  'success',\n  'error',\n];\n\nexport default function App() {\n  return (\n    <>\n      {statuses.map(status => (\n        <section key={status}>\n          <h4>Form ({status}):</h4>\n          <Form status={status} />\n        </section>\n      ))}\n    </>\n  );\n}\n\nShow morePages like this are often called “living styleguides” or “storybooks”."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Determine what triggers those state changes ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reacting-to-input-with-state/#step-2-determine-what-triggers-those-state-changes",
                                        "content": [
                                            "You can trigger state updates in response to two kinds of inputs:",
                                            "  1.Human inputs, like clicking a button, typing in a field, navigating a link.",
                                            "  2.Computer inputs, like a network response arriving, a timeout completing, an image loading.",
                                            "Illustrated by Rachel Lee Nabors",
                                            "In both cases, you must set state variables to update the UI. For the form you’re developing, you will need to change state in response to a few different inputs:",
                                            "  1.Changing the text input (human) should switch it from the Empty state to the Typing state or back, depending on whether the text box is empty or not.",
                                            "  2.Clicking the Submit button (human) should switch it to the Submitting state.",
                                            "  3.Successful network response (computer) should switch it to the Success state.",
                                            "  4.Failed network response (computer) should switch it to the Error state with the matching error message.",
                                            "NoteNotice that human inputs often require event handlers!",
                                            "To help visualize this flow, try drawing each state on paper as a labeled circle, and each change between two states as an arrow. You can sketch out many flows this way and sort out bugs long before implementation."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 3: Represent the state in memory with useState ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reacting-to-input-with-state/#step-3-represent-the-state-in-memory-with-usestate",
                                        "content": [
                                            "Next you’ll need to represent the visual states of your component in memory with useState. Simplicity is key: each piece of state is a “moving piece”, and you want as few “moving pieces” as possible. More complexity leads to more bugs!",
                                            "Start with the state that absolutely must be there. For example, you’ll need to store the answer for the input, and the error (if it exists) to store the last error:",
                                            {
                                                "code_example": "const [answer, setAnswer] = useState('');const [error, setError] = useState(null);"
                                            },
                                            "Then, you’ll need a state variable representing which one of the visual states that you want to display. There’s usually more than a single way to represent that in memory, so you’ll need to experiment with it.",
                                            "If you struggle to think of the best way immediately, start by adding enough state that you’re definitely sure that all the possible visual states are covered:",
                                            {
                                                "code_example": "const [isEmpty, setIsEmpty] = useState(true);const [isTyping, setIsTyping] = useState(false);const [isSubmitting, setIsSubmitting] = useState(false);const [isSuccess, setIsSuccess] = useState(false);const [isError, setIsError] = useState(false);"
                                            },
                                            "Your first idea likely won’t be the best, but that’s ok—refactoring state is a part of the process!"
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 4: Remove any non-essential state variables ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reacting-to-input-with-state/#step-4-remove-any-non-essential-state-variables",
                                        "content": [
                                            "You want to avoid duplication in the state content so you’re only tracking what is essential. Spending a little time on refactoring your state structure will make your components easier to understand, reduce duplication, and avoid unintended meanings. Your goal is to prevent the cases where the state in memory doesn’t represent any valid UI that you’d want a user to see. (For example, you never want to show an error message and disable the input at the same time, or the user won’t be able to correct the error!)",
                                            "Here are some questions you can ask about your state variables:",
                                            "  1.Does this state cause a paradox? For example, isTyping and isSubmitting can’t both be true. A paradox usually means that the state is not constrained enough. There are four possible combinations of two booleans, but only three correspond to valid states. To remove the “impossible” state, you can combine these into a status that must be one of three values: 'typing', 'submitting', or 'success'.",
                                            "  2.Is the same information available in another state variable already? Another paradox: isEmpty and isTyping can’t be true at the same time. By making them separate state variables, you risk them going out of sync and causing bugs. Fortunately, you can remove isEmpty and instead check answer.length === 0.",
                                            "  3.Can you get the same information from the inverse of another state variable? isError is not needed because you can check error !== null instead.",
                                            "After this clean-up, you’re left with 3 (down from 7!) essential state variables:",
                                            {
                                                "code_example": "const [answer, setAnswer] = useState('');const [error, setError] = useState(null);const [status, setStatus] = useState('typing'); // 'typing', 'submitting', or 'success'"
                                            },
                                            "You know they are essential, because you can’t remove any of them without breaking the functionality.",
                                            "Deep DiveEliminating “impossible” states with a reducer Show DetailsThese three variables are a good enough representation of this form’s state. However, there are still some intermediate states that don’t fully make sense. For example, a non-null error doesn’t make sense when status is 'success'. To model the state more precisely, you can extract it into a reducer. Reducers let you unify multiple state variables into a single object and consolidate all the related logic!"
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 5: Connect the event handlers to set state ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reacting-to-input-with-state/#step-5-connect-the-event-handlers-to-set-state",
                                        "content": [
                                            "Lastly, create event handlers that update the state. Below is the final form, with all event handlers wired up:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';export default function Form() {  const [answer, setAnswer] = useState('');  const [error, setError] = useState(null);  const [status, setStatus] = useState('typing');  if (status === 'success') {    return <h1>That's right!</h1>  }  async function handleSubmit(e) {    e.preventDefault();    setStatus('submitting');    try {      await submitForm(answer);      setStatus('success');    } catch (err) {      setStatus('typing');      setError(err);    }  }  function handleTextareaChange(e) {    setAnswer(e.target.value);  }  return (    <>      <h2>City quiz</h2>      <p>        In which city is there a billboard that turns air into drinkable water?      </p>      <form onSubmit={handleSubmit}>        <textarea          value={answer}          onChange={handleTextareaChange}          disabled={status === 'submitting'}        />        <br />        <button disabled={          answer.length === 0 ||          status === 'submitting'        }>          Submit        </button>        {error !== null &&          <p className=\"Error\">            {error.message}          </p>        }      </form>    </>  );}function submitForm(answer) {  // Pretend it's hitting the network.  return new Promise((resolve, reject) => {    setTimeout(() => {      let shouldError = answer.toLowerCase() !== 'lima'      if (shouldError) {        reject(new Error('Good guess but a wrong answer. Try again!'));      } else {        resolve();      }    }, 1500);  });}"
                                            },
                                            "Although this code is longer than the original imperative example, it is much less fragile. Expressing all interactions as state changes lets you later introduce new visual states without breaking existing ones. It also lets you change what should be displayed in each state without changing the logic of the interaction itself.",
                                            "Recap\nDeclarative programming means describing the UI for each visual state rather than micromanaging the UI (imperative).\nWhen developing a component:\n\nIdentify all its visual states.\nDetermine the human and computer triggers for state changes.\nModel the state with useState.\nRemove non-essential state to avoid bugs and paradoxes.\nConnect the event handlers to set state.\n\n\n",
                                            {
                                                "code_example": "background--active"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Choosing the State Structure",
                        "url": "https://react.dev/learn/choosing-the-state-structure",
                        "content": [
                            "Structuring state well can make a difference between a component that is pleasant to modify and debug, and one that is a constant source of bugs. Here are some tips you should consider when structuring state.",
                            "  1.When to use a single vs multiple state variables",
                            "  2.What to avoid when organizing state",
                            "  3.How to fix common issues with the state structure",
                            "You will learn\nWhen to use a single vs multiple state variables\nWhat to avoid when organizing state\nHow to fix common issues with the state structure\n",
                            {
                                "sub_header": "Principles for structuring state ",
                                "source": "react",
                                "url": "https://react.dev/learn/choosing-the-state-structure/#principles-for-structuring-state",
                                "content": [
                                    "When you write a component that holds some state, you’ll have to make choices about how many state variables to use and what the shape of their data should be. While it’s possible to write correct programs even with a suboptimal state structure, there are a few principles that can guide you to make better choices:",
                                    "  1.Group related state. If you always update two or more state variables at the same time, consider merging them into a single state variable.",
                                    "  2.Avoid contradictions in state. When the state is structured in a way that several pieces of state may contradict and “disagree” with each other, you leave room for mistakes. Try to avoid this.",
                                    "  3.Avoid redundant state. If you can calculate some information from the component’s props or its existing state variables during rendering, you should not put that information into that component’s state.",
                                    "  4.Avoid duplication in state. When the same data is duplicated between multiple state variables, or within nested objects, it is difficult to keep them in sync. Reduce duplication when you can.",
                                    "  5.Avoid deeply nested state. Deeply hierarchical state is not very convenient to update. When possible, prefer to structure state in a flat way.",
                                    "The goal behind these principles is to make state easy to update without introducing mistakes. Removing redundant and duplicate data from state helps ensure that all its pieces stay in sync. This is similar to how a database engineer might want to “normalize” the database structure to reduce the chance of bugs. To paraphrase Albert Einstein, “Make your state as simple as it can be—but no simpler.”",
                                    "Now let’s see how these principles apply in action."
                                ]
                            },
                            {
                                "sub_header": "Group related state ",
                                "source": "react",
                                "url": "https://react.dev/learn/choosing-the-state-structure/#group-related-state",
                                "content": [
                                    "You might sometimes be unsure between using a single or multiple state variables.",
                                    "Should you do this?",
                                    {
                                        "code_example": "const [x, setX] = useState(0);const [y, setY] = useState(0);"
                                    },
                                    "Or this?",
                                    {
                                        "code_example": "const [position, setPosition] = useState({ x: 0, y: 0 });"
                                    },
                                    "Technically, you can use either of these approaches. But if some two state variables always change together, it might be a good idea to unify them into a single state variable. Then you won’t forget to always keep them in sync, like in this example where moving the cursor updates both coordinates of the red dot:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function MovingDot() {  const [position, setPosition] = useState({    x: 0,    y: 0  });  return (    <div      onPointerMove={e => {        setPosition({          x: e.clientX,          y: e.clientY        });      }}      style={{        position: 'relative',        width: '100vw',        height: '100vh',      }}>      <div style={{        position: 'absolute',        backgroundColor: 'red',        borderRadius: '50%',        transform: `translate(${position.x}px, ${position.y}px)`,        left: -10,        top: -10,        width: 20,        height: 20,      }} />    </div>  )}"
                                    },
                                    "Another case where you’ll group data into an object or an array is when you don’t know how many pieces of state you’ll need. For example, it’s helpful when you have a form where the user can add custom fields.",
                                    {
                                        "code_example": "setPosition({ x: 100 })"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Avoid contradictions in state ",
                                "source": "react",
                                "url": "https://react.dev/learn/choosing-the-state-structure/#avoid-contradictions-in-state",
                                "content": [
                                    "Here is a hotel feedback form with isSending and isSent state variables:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function FeedbackForm() {  const [text, setText] = useState('');  const [isSending, setIsSending] = useState(false);  const [isSent, setIsSent] = useState(false);  async function handleSubmit(e) {    e.preventDefault();    setIsSending(true);    await sendMessage(text);    setIsSending(false);    setIsSent(true);  }  if (isSent) {    return <h1>Thanks for feedback!</h1>  }  return (    <form onSubmit={handleSubmit}>      <p>How was your stay at The Prancing Pony?</p>      <textarea        disabled={isSending}        value={text}        onChange={e => setText(e.target.value)}      />      <br />      <button        disabled={isSending}        type=\"submit\"      >        Send      </button>      {isSending && <p>Sending...</p>}    </form>  );}// Pretend to send a message.function sendMessage(text) {  return new Promise(resolve => {    setTimeout(resolve, 2000);  });}"
                                    },
                                    "While this code works, it leaves the door open for “impossible” states. For example, if you forget to call setIsSent and setIsSending together, you may end up in a situation where both isSending and isSent are true at the same time. The more complex your component is, the harder it is to understand what happened.",
                                    "Since isSending and isSent should never be true at the same time, it is better to replace them with one status state variable that may take one of three valid states: 'typing' (initial), 'sending', and 'sent':",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function FeedbackForm() {  const [text, setText] = useState('');  const [status, setStatus] = useState('typing');  async function handleSubmit(e) {    e.preventDefault();    setStatus('sending');    await sendMessage(text);    setStatus('sent');  }  const isSending = status === 'sending';  const isSent = status === 'sent';  if (isSent) {    return <h1>Thanks for feedback!</h1>  }  return (    <form onSubmit={handleSubmit}>      <p>How was your stay at The Prancing Pony?</p>      <textarea        disabled={isSending}        value={text}        onChange={e => setText(e.target.value)}      />      <br />      <button        disabled={isSending}        type=\"submit\"      >        Send      </button>      {isSending && <p>Sending...</p>}    </form>  );}// Pretend to send a message.function sendMessage(text) {  return new Promise(resolve => {    setTimeout(resolve, 2000);  });}"
                                    },
                                    "You can still declare some constants for readability:",
                                    {
                                        "code_example": "const isSending = status === 'sending';const isSent = status === 'sent';"
                                    },
                                    "But they’re not state variables, so you don’t need to worry about them getting out of sync with each other."
                                ]
                            },
                            {
                                "sub_header": "Avoid redundant state ",
                                "source": "react",
                                "url": "https://react.dev/learn/choosing-the-state-structure/#avoid-redundant-state",
                                "content": [
                                    "If you can calculate some information from the component’s props or its existing state variables during rendering, you should not put that information into that component’s state.",
                                    "For example, take this form. It works, but can you find any redundant state in it?",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  const [fullName, setFullName] = useState('');  function handleFirstNameChange(e) {    setFirstName(e.target.value);    setFullName(e.target.value + ' ' + lastName);  }  function handleLastNameChange(e) {    setLastName(e.target.value);    setFullName(firstName + ' ' + e.target.value);  }  return (    <>      <h2>Let’s check you in</h2>      <label>        First name:{' '}        <input          value={firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:{' '}        <input          value={lastName}          onChange={handleLastNameChange}        />      </label>      <p>        Your ticket will be issued to: <b>{fullName}</b>      </p>    </>  );}"
                                    },
                                    "This form has three state variables: firstName, lastName, and fullName. However, fullName is redundant. You can always calculate fullName from firstName and lastName during render, so remove it from state.",
                                    "This is how you can do it:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  const fullName = firstName + ' ' + lastName;  function handleFirstNameChange(e) {    setFirstName(e.target.value);  }  function handleLastNameChange(e) {    setLastName(e.target.value);  }  return (    <>      <h2>Let’s check you in</h2>      <label>        First name:{' '}        <input          value={firstName}          onChange={handleFirstNameChange}        />      </label>      <label>        Last name:{' '}        <input          value={lastName}          onChange={handleLastNameChange}        />      </label>      <p>        Your ticket will be issued to: <b>{fullName}</b>      </p>    </>  );}"
                                    },
                                    "Here, fullName is not a state variable. Instead, it’s calculated during render:",
                                    {
                                        "code_example": "const fullName = firstName + ' ' + lastName;"
                                    },
                                    "As a result, the change handlers don’t need to do anything special to update it. When you call setFirstName or setLastName, you trigger a re-render, and then the next fullName will be calculated from the fresh data.",
                                    "Deep DiveDon’t mirror props in state Show DetailsA common example of redundant state is code like this:function Message({ messageColor }) {  const [color, setColor] = useState(messageColor);Here, a color state variable is initialized to the messageColor prop. The problem is that if the parent component passes a different value of messageColor later (for example, 'red' instead of 'blue'), the color state variable would not be updated! The state is only initialized during the first render.This is why “mirroring” some prop in a state variable can lead to confusion. Instead, use the messageColor prop directly in your code. If you want to give it a shorter name, use a constant:function Message({ messageColor }) {  const color = messageColor;This way it won’t get out of sync with the prop passed from the parent component.”Mirroring” props into state only makes sense when you want to ignore all updates for a specific prop. By convention, start the prop name with initial or default to clarify that its new values are ignored:function Message({ initialColor }) {  // The `color` state variable holds the *first* value of `initialColor`.  // Further changes to the `initialColor` prop are ignored.  const [color, setColor] = useState(initialColor);"
                                ]
                            },
                            {
                                "sub_header": "Avoid duplication in state ",
                                "source": "react",
                                "url": "https://react.dev/learn/choosing-the-state-structure/#avoid-duplication-in-state",
                                "content": [
                                    "This menu list component lets you choose a single travel snack out of several:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';const initialItems = [  { title: 'pretzels', id: 0 },  { title: 'crispy seaweed', id: 1 },  { title: 'granola bar', id: 2 },];export default function Menu() {  const [items, setItems] = useState(initialItems);  const [selectedItem, setSelectedItem] = useState(    items[0]  );  return (    <>      <h2>What's your travel snack?</h2>      <ul>        {items.map(item => (          <li key={item.id}>            {item.title}            {' '}            <button onClick={() => {              setSelectedItem(item);            }}>Choose</button>          </li>        ))}      </ul>      <p>You picked {selectedItem.title}.</p>    </>  );}"
                                    },
                                    "Currently, it stores the selected item as an object in the selectedItem state variable. However, this is not great: the contents of the selectedItem is the same object as one of the items inside the items list. This means that the information about the item itself is duplicated in two places.",
                                    "Why is this a problem? Let’s make each item editable:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';const initialItems = [  { title: 'pretzels', id: 0 },  { title: 'crispy seaweed', id: 1 },  { title: 'granola bar', id: 2 },];export default function Menu() {  const [items, setItems] = useState(initialItems);  const [selectedItem, setSelectedItem] = useState(    items[0]  );  function handleItemChange(id, e) {    setItems(items.map(item => {      if (item.id === id) {        return {          ...item,          title: e.target.value,        };      } else {        return item;      }    }));  }  return (    <>      <h2>What's your travel snack?</h2>       <ul>        {items.map((item, index) => (          <li key={item.id}>            <input              value={item.title}              onChange={e => {                handleItemChange(item.id, e)              }}            />            {' '}            <button onClick={() => {              setSelectedItem(item);            }}>Choose</button>          </li>        ))}      </ul>      <p>You picked {selectedItem.title}.</p>    </>  );}"
                                    },
                                    "Notice how if you first click “Choose” on an item and then edit it, the input updates but the label at the bottom does not reflect the edits. This is because you have duplicated state, and you forgot to update selectedItem.",
                                    "Although you could update selectedItem too, an easier fix is to remove duplication. In this example, instead of a selectedItem object (which creates a duplication with objects inside items), you hold the selectedId in state, and then get the selectedItem by searching the items array for an item with that ID:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';const initialItems = [  { title: 'pretzels', id: 0 },  { title: 'crispy seaweed', id: 1 },  { title: 'granola bar', id: 2 },];export default function Menu() {  const [items, setItems] = useState(initialItems);  const [selectedId, setSelectedId] = useState(0);  const selectedItem = items.find(item =>    item.id === selectedId  );  function handleItemChange(id, e) {    setItems(items.map(item => {      if (item.id === id) {        return {          ...item,          title: e.target.value,        };      } else {        return item;      }    }));  }  return (    <>      <h2>What's your travel snack?</h2>      <ul>        {items.map((item, index) => (          <li key={item.id}>            <input              value={item.title}              onChange={e => {                handleItemChange(item.id, e)              }}            />            {' '}            <button onClick={() => {              setSelectedId(item.id);            }}>Choose</button>          </li>        ))}      </ul>      <p>You picked {selectedItem.title}.</p>    </>  );}"
                                    },
                                    "The state used to be duplicated like this:",
                                    "  1.items = [{ id: 0, title: 'pretzels'}, ...]",
                                    "  2.selectedItem = {id: 0, title: 'pretzels'}",
                                    "But after the change it’s like this:",
                                    "  1.items = [{ id: 0, title: 'pretzels'}, ...]",
                                    "  2.selectedId = 0",
                                    "The duplication is gone, and you only keep the essential state!",
                                    "Now if you edit the selected item, the message below will update immediately. This is because setItems triggers a re-render, and items.find(...) would find the item with the updated title. You didn’t need to hold the selected item in state, because only the selected ID is essential. The rest could be calculated during render."
                                ]
                            },
                            {
                                "sub_header": "Avoid deeply nested state ",
                                "source": "react",
                                "url": "https://react.dev/learn/choosing-the-state-structure/#avoid-deeply-nested-state",
                                "content": [
                                    "Imagine a travel plan consisting of planets, continents, and countries. You might be tempted to structure its state using nested objects and arrays, like in this example:",
                                    {
                                        "code_sandbox": "places.jsplaces.jsexport const initialTravelPlan = {  id: 0,  title: '(Root)',  childPlaces: [{    id: 1,    title: 'Earth',    childPlaces: [{      id: 2,      title: 'Africa',      childPlaces: [{        id: 3,        title: 'Botswana',        childPlaces: []      }, {        id: 4,        title: 'Egypt',        childPlaces: []      }, {        id: 5,        title: 'Kenya',        childPlaces: []      }, {        id: 6,        title: 'Madagascar',        childPlaces: []      }, {        id: 7,        title: 'Morocco',        childPlaces: []      }, {        id: 8,        title: 'Nigeria',        childPlaces: []      }, {        id: 9,        title: 'South Africa',        childPlaces: []      }]    }, {      id: 10,      title: 'Americas',      childPlaces: [{        id: 11,        title: 'Argentina',        childPlaces: []      }, {        id: 12,        title: 'Brazil',        childPlaces: []      }, {        id: 13,        title: 'Barbados',        childPlaces: []      }, {        id: 14,        title: 'Canada',        childPlaces: []      }, {        id: 15,        title: 'Jamaica',        childPlaces: []      }, {        id: 16,        title: 'Mexico',        childPlaces: []      }, {        id: 17,        title: 'Trinidad and Tobago',        childPlaces: []      }, {        id: 18,        title: 'Venezuela',        childPlaces: []      }]    }, {      id: 19,      title: 'Asia',      childPlaces: [{        id: 20,        title: 'China',        childPlaces: []      }, {        id: 21,        title: 'India',        childPlaces: []      }, {        id: 22,        title: 'Singapore',        childPlaces: []      }, {        id: 23,        title: 'South Korea',        childPlaces: []      }, {        id: 24,        title: 'Thailand',        childPlaces: []      }, {        id: 25,        title: 'Vietnam',        childPlaces: []      }]    }, {      id: 26,      title: 'Europe',      childPlaces: [{        id: 27,        title: 'Croatia',        childPlaces: [],      }, {        id: 28,        title: 'France',        childPlaces: [],      }, {        id: 29,        title: 'Germany',        childPlaces: [],      }, {        id: 30,        title: 'Italy',        childPlaces: [],      }, {        id: 31,        title: 'Portugal',        childPlaces: [],      }, {        id: 32,        title: 'Spain',        childPlaces: [],      }, {        id: 33,        title: 'Turkey',        childPlaces: [],      }]    }, {      id: 34,      title: 'Oceania',      childPlaces: [{        id: 35,        title: 'Australia',        childPlaces: [],      }, {        id: 36,        title: 'Bora Bora (French Polynesia)',        childPlaces: [],      }, {        id: 37,        title: 'Easter Island (Chile)',        childPlaces: [],      }, {        id: 38,        title: 'Fiji',        childPlaces: [],      }, {        id: 39,        title: 'Hawaii (the USA)',        childPlaces: [],      }, {        id: 40,        title: 'New Zealand',        childPlaces: [],      }, {        id: 41,        title: 'Vanuatu',        childPlaces: [],      }]    }]  }, {    id: 42,    title: 'Moon',    childPlaces: [{      id: 43,      title: 'Rheita',      childPlaces: []    }, {      id: 44,      title: 'Piccolomini',      childPlaces: []    }, {      id: 45,      title: 'Tycho',      childPlaces: []    }]  }, {    id: 46,    title: 'Mars',    childPlaces: [{      id: 47,      title: 'Corn Town',      childPlaces: []    }, {      id: 48,      title: 'Green Hill',      childPlaces: []          }]  }]};"
                                    },
                                    "Now let’s say you want to add a button to delete a place you’ve already visited. How would you go about it? Updating nested state involves making copies of objects all the way up from the part that changed. Deleting a deeply nested place would involve copying its entire parent place chain. Such code can be very verbose.",
                                    "If the state is too nested to update easily, consider making it “flat”. Here is one way you can restructure this data. Instead of a tree-like structure where each place has an array of its child places, you can have each place hold an array of its child place IDs. Then store a mapping from each place ID to the corresponding place.",
                                    "This data restructuring might remind you of seeing a database table:",
                                    {
                                        "code_sandbox": "places.jsplaces.jsexport const initialTravelPlan = {  0: {    id: 0,    title: '(Root)',    childIds: [1, 42, 46],  },  1: {    id: 1,    title: 'Earth',    childIds: [2, 10, 19, 26, 34]  },  2: {    id: 2,    title: 'Africa',    childIds: [3, 4, 5, 6 , 7, 8, 9]  },   3: {    id: 3,    title: 'Botswana',    childIds: []  },  4: {    id: 4,    title: 'Egypt',    childIds: []  },  5: {    id: 5,    title: 'Kenya',    childIds: []  },  6: {    id: 6,    title: 'Madagascar',    childIds: []  },   7: {    id: 7,    title: 'Morocco',    childIds: []  },  8: {    id: 8,    title: 'Nigeria',    childIds: []  },  9: {    id: 9,    title: 'South Africa',    childIds: []  },  10: {    id: 10,    title: 'Americas',    childIds: [11, 12, 13, 14, 15, 16, 17, 18],     },  11: {    id: 11,    title: 'Argentina',    childIds: []  },  12: {    id: 12,    title: 'Brazil',    childIds: []  },  13: {    id: 13,    title: 'Barbados',    childIds: []  },   14: {    id: 14,    title: 'Canada',    childIds: []  },  15: {    id: 15,    title: 'Jamaica',    childIds: []  },  16: {    id: 16,    title: 'Mexico',    childIds: []  },  17: {    id: 17,    title: 'Trinidad and Tobago',    childIds: []  },  18: {    id: 18,    title: 'Venezuela',    childIds: []  },  19: {    id: 19,    title: 'Asia',    childIds: [20, 21, 22, 23, 24, 25],     },  20: {    id: 20,    title: 'China',    childIds: []  },  21: {    id: 21,    title: 'India',    childIds: []  },  22: {    id: 22,    title: 'Singapore',    childIds: []  },  23: {    id: 23,    title: 'South Korea',    childIds: []  },  24: {    id: 24,    title: 'Thailand',    childIds: []  },  25: {    id: 25,    title: 'Vietnam',    childIds: []  },  26: {    id: 26,    title: 'Europe',    childIds: [27, 28, 29, 30, 31, 32, 33],     },  27: {    id: 27,    title: 'Croatia',    childIds: []  },  28: {    id: 28,    title: 'France',    childIds: []  },  29: {    id: 29,    title: 'Germany',    childIds: []  },  30: {    id: 30,    title: 'Italy',    childIds: []  },  31: {    id: 31,    title: 'Portugal',    childIds: []  },  32: {    id: 32,    title: 'Spain',    childIds: []  },  33: {    id: 33,    title: 'Turkey',    childIds: []  },  34: {    id: 34,    title: 'Oceania',    childIds: [35, 36, 37, 38, 39, 40, 41],     },  35: {    id: 35,    title: 'Australia',    childIds: []  },  36: {    id: 36,    title: 'Bora Bora (French Polynesia)',    childIds: []  },  37: {    id: 37,    title: 'Easter Island (Chile)',    childIds: []  },  38: {    id: 38,    title: 'Fiji',    childIds: []  },  39: {    id: 40,    title: 'Hawaii (the USA)',    childIds: []  },  40: {    id: 40,    title: 'New Zealand',    childIds: []  },  41: {    id: 41,    title: 'Vanuatu',    childIds: []  },  42: {    id: 42,    title: 'Moon',    childIds: [43, 44, 45]  },  43: {    id: 43,    title: 'Rheita',    childIds: []  },  44: {    id: 44,    title: 'Piccolomini',    childIds: []  },  45: {    id: 45,    title: 'Tycho',    childIds: []  },  46: {    id: 46,    title: 'Mars',    childIds: [47, 48]  },  47: {    id: 47,    title: 'Corn Town',    childIds: []  },  48: {    id: 48,    title: 'Green Hill',    childIds: []  }};"
                                    },
                                    "Now that the state is “flat” (also known as “normalized”), updating nested items becomes easier.",
                                    "In order to remove a place now, you only need to update two levels of state:",
                                    "  1.The updated version of its parent place should exclude the removed ID from its childIds array.",
                                    "  2.The updated version of the root “table” object should include the updated version of the parent place.",
                                    "Here is an example of how you could go about it:",
                                    {
                                        "code_sandbox": "places.jsimport { useState } from 'react';import { initialTravelPlan } from './places.js';export default function TravelPlan() {  const [plan, setPlan] = useState(initialTravelPlan);  function handleComplete(parentId, childId) {    const parent = plan[parentId];    // Create a new version of the parent place    // that doesn't include this child ID.    const nextParent = {      ...parent,      childIds: parent.childIds        .filter(id => id !== childId)    };    // Update the root state object...    setPlan({      ...plan,      // ...so that it has the updated parent.      [parentId]: nextParent    });  }  const root = plan[0];  const planetIds = root.childIds;  return (    <>      <h2>Places to visit</h2>      <ol>        {planetIds.map(id => (          <PlaceTree            key={id}            id={id}            parentId={0}            placesById={plan}            onComplete={handleComplete}          />        ))}      </ol>    </>  );}function PlaceTree({ id, parentId, placesById, onComplete }) {  const place = placesById[id];  const childIds = place.childIds;  return (    <li>      {place.title}      <button onClick={() => {        onComplete(parentId, id);      }}>        Complete      </button>      {childIds.length > 0 &&        <ol>          {childIds.map(childId => (            <PlaceTree              key={childId}              id={childId}              parentId={id}              placesById={placesById}              onComplete={onComplete}            />          ))}        </ol>      }    </li>  );}"
                                    },
                                    "You can nest state as much as you like, but making it “flat” can solve numerous problems. It makes state easier to update, and it helps ensure you don’t have duplication in different parts of a nested object.",
                                    "Deep DiveImproving memory usage Show DetailsIdeally, you would also remove the deleted items (and their children!) from the “table” object to improve memory usage. This version does that. It also uses Immer to make the update logic more concise.package.jsonApp.jsplaces.jspackage.json ResetFork{\n  \"dependencies\": {\n    \"immer\": \"1.7.3\",\n    \"react\": \"latest\",\n    \"react-dom\": \"latest\",\n    \"react-scripts\": \"latest\",\n    \"use-immer\": \"0.5.1\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"test\": \"react-scripts test --env=jsdom\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"devDependencies\": {}\n}",
                                    "Sometimes, you can also reduce state nesting by moving some of the nested state into the child components. This works well for ephemeral UI state that doesn’t need to be stored, like whether an item is hovered.",
                                    "Recap\nIf two state variables always update together, consider merging them into one.\nChoose your state variables carefully to avoid creating “impossible” states.\nStructure your state in a way that reduces the chances that you’ll make a mistake updating it.\nAvoid redundant and duplicate state so that you don’t need to keep it in sync.\nDon’t put props into state unless you specifically want to prevent updates.\nFor UI patterns like selection, keep ID or index in state instead of the object itself.\nIf updating deeply nested state is complicated, try flattening it.\n",
                                    {
                                        "code_example": "Clock"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Sharing State Between Components",
                        "url": "https://react.dev/learn/sharing-state-between-components",
                        "content": [
                            "Sometimes, you want the state of two components to always change together. To do it, remove state from both of them, move it to their closest common parent, and then pass it down to them via props. This is known as lifting state up, and it’s one of the most common things you will do writing React code.",
                            "  1.How to share state between components by lifting it up",
                            "  2.What are controlled and uncontrolled components",
                            "You will learn\nHow to share state between components by lifting it up\nWhat are controlled and uncontrolled components\n",
                            {
                                "sub_header": "Lifting state up by example ",
                                "source": "react",
                                "url": "https://react.dev/learn/sharing-state-between-components/#lifting-state-up-by-example",
                                "content": [
                                    "In this example, a parent Accordion component renders two separate Panels:",
                                    "  1.Accordion\n\nPanel\nPanel\n\n",
                                    "  2.Panel",
                                    "  3.Panel",
                                    "Each Panel component has a boolean isActive state that determines whether its content is visible.",
                                    "Press the Show button for both panels:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';function Panel({ title, children }) {  const [isActive, setIsActive] = useState(false);  return (    <section className=\"panel\">      <h3>{title}</h3>      {isActive ? (        <p>{children}</p>      ) : (        <button onClick={() => setIsActive(true)}>          Show        </button>      )}    </section>  );}export default function Accordion() {  return (    <>      <h2>Almaty, Kazakhstan</h2>      <Panel title=\"About\">        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.      </Panel>      <Panel title=\"Etymology\">        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.      </Panel>    </>  );}"
                                    },
                                    "Notice how pressing one panel’s button does not affect the other panel—they are independent.",
                                    {
                                        "code_example": "Panel"
                                    },
                                    "But now let’s say you want to change it so that only one panel is expanded at any given time. With that design, expanding the second panel should collapse the first one. How would you do that?",
                                    "To coordinate these two panels, you need to “lift their state up” to a parent component in three steps:",
                                    "  1.Remove state from the child components.",
                                    "  2.Pass hardcoded data from the common parent.",
                                    "  3.Add state to the common parent and pass it down together with the event handlers.",
                                    "This will allow the Accordion component to coordinate both Panels and only expand one at a time.",
                                    {
                                        "sub_header": "Step 1: Remove state from the child components ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/sharing-state-between-components/#step-1-remove-state-from-the-child-components",
                                        "content": [
                                            "You will give control of the Panel’s isActive to its parent component. This means that the parent component will pass isActive to Panel as a prop instead. Start by removing this line from the Panel component:",
                                            {
                                                "code_example": "const [isActive, setIsActive] = useState(false);"
                                            },
                                            "And instead, add isActive to the Panel’s list of props:",
                                            {
                                                "code_example": "function Panel({ title, children, isActive }) {"
                                            },
                                            "Now the Panel’s parent component can control isActive by passing it down as a prop. Conversely, the Panel component now has no control over the value of isActive—it’s now up to the parent component!"
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Pass hardcoded data from the common parent ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/sharing-state-between-components/#step-2-pass-hardcoded-data-from-the-common-parent",
                                        "content": [
                                            "To lift state up, you must locate the closest common parent component of both of the child components that you want to coordinate:",
                                            "  1.Accordion (closest common parent)\n\nPanel\nPanel\n\n",
                                            "  2.Panel",
                                            "  3.Panel",
                                            "In this example, it’s the Accordion component. Since it’s above both panels and can control their props, it will become the “source of truth” for which panel is currently active. Make the Accordion component pass a hardcoded value of isActive (for example, true) to both panels:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';export default function Accordion() {  return (    <>      <h2>Almaty, Kazakhstan</h2>      <Panel title=\"About\" isActive={true}>        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.      </Panel>      <Panel title=\"Etymology\" isActive={true}>        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.      </Panel>    </>  );}function Panel({ title, children, isActive }) {  return (    <section className=\"panel\">      <h3>{title}</h3>      {isActive ? (        <p>{children}</p>      ) : (        <button onClick={() => setIsActive(true)}>          Show        </button>      )}    </section>  );}"
                                            },
                                            "Try editing the hardcoded isActive values in the Accordion component and see the result on the screen."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 3: Add state to the common parent ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/sharing-state-between-components/#step-3-add-state-to-the-common-parent",
                                        "content": [
                                            "Lifting state up often changes the nature of what you’re storing as state.",
                                            "In this case, only one panel should be active at a time. This means that the Accordion common parent component needs to keep track of which panel is the active one. Instead of a boolean value, it could use a number as the index of the active Panel for the state variable:",
                                            {
                                                "code_example": "const [activeIndex, setActiveIndex] = useState(0);"
                                            },
                                            "When the activeIndex is 0, the first panel is active, and when it’s 1, it’s the second one.",
                                            "Clicking the “Show” button in either Panel needs to change the active index in Accordion. A Panel can’t set the activeIndex state directly because it’s defined inside the Accordion. The Accordion component needs to explicitly allow the Panel component to change its state by passing an event handler down as a prop:",
                                            {
                                                "code_example": "<>  <Panel    isActive={activeIndex === 0}    onShow={() => setActiveIndex(0)}  >    ...  </Panel>  <Panel    isActive={activeIndex === 1}    onShow={() => setActiveIndex(1)}  >    ...  </Panel></>"
                                            },
                                            "The <button> inside the Panel will now use the onShow prop as its click event handler:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';export default function Accordion() {  const [activeIndex, setActiveIndex] = useState(0);  return (    <>      <h2>Almaty, Kazakhstan</h2>      <Panel        title=\"About\"        isActive={activeIndex === 0}        onShow={() => setActiveIndex(0)}      >        With a population of about 2 million, Almaty is Kazakhstan's largest city. From 1929 to 1997, it was its capital city.      </Panel>      <Panel        title=\"Etymology\"        isActive={activeIndex === 1}        onShow={() => setActiveIndex(1)}      >        The name comes from <span lang=\"kk-KZ\">алма</span>, the Kazakh word for \"apple\" and is often translated as \"full of apples\". In fact, the region surrounding Almaty is thought to be the ancestral home of the apple, and the wild <i lang=\"la\">Malus sieversii</i> is considered a likely candidate for the ancestor of the modern domestic apple.      </Panel>    </>  );}function Panel({  title,  children,  isActive,  onShow}) {  return (    <section className=\"panel\">      <h3>{title}</h3>      {isActive ? (        <p>{children}</p>      ) : (        <button onClick={onShow}>          Show        </button>      )}    </section>  );}"
                                            },
                                            "This completes lifting state up! Moving state into the common parent component allowed you to coordinate the two panels. Using the active index instead of two “is shown” flags ensured that only one panel is active at a given time. And passing down the event handler to the child allowed the child to change the parent’s state.",
                                            {
                                                "code_example": "Accordion"
                                            },
                                            "Deep DiveControlled and uncontrolled components Show DetailsIt is common to call a component with some local state “uncontrolled”. For example, the original Panel component with an isActive state variable is uncontrolled because its parent cannot influence whether the panel is active or not.In contrast, you might say a component is “controlled” when the important information in it is driven by props rather than its own local state. This lets the parent component fully specify its behavior. The final Panel component with the isActive prop is controlled by the Accordion component.Uncontrolled components are easier to use within their parents because they require less configuration. But they’re less flexible when you want to coordinate them together. Controlled components are maximally flexible, but they require the parent components to fully configure them with props.In practice, “controlled” and “uncontrolled” aren’t strict technical terms—each component usually has some mix of both local state and props. However, this is a useful way to talk about how components are designed and what capabilities they offer.When writing a component, consider which information in it should be controlled (via props), and which information should be uncontrolled (via state). But you can always change your mind and refactor later."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "A single source of truth for each state ",
                                "source": "react",
                                "url": "https://react.dev/learn/sharing-state-between-components/#a-single-source-of-truth-for-each-state",
                                "content": [
                                    "In a React application, many components will have their own state. Some state may “live” close to the leaf components (components at the bottom of the tree) like inputs. Other state may “live” closer to the top of the app. For example, even client-side routing libraries are usually implemented by storing the current route in the React state, and passing it down by props!",
                                    "For each unique piece of state, you will choose the component that “owns” it. This principle is also known as having a “single source of truth”. It doesn’t mean that all state lives in one place—but that for each piece of state, there is a specific component that holds that piece of information. Instead of duplicating shared state between components, lift it up to their common shared parent, and pass it down to the children that need it.",
                                    "Your app will change as you work on it. It is common that you will move state down or back up while you’re still figuring out where each piece of the state “lives”. This is all part of the process!",
                                    "To see what this feels like in practice with a few more components, read Thinking in React.",
                                    "Recap\nWhen you want to coordinate two components, move their state to their common parent.\nThen pass the information down through props from their common parent.\nFinally, pass the event handlers down so that the children can change the parent’s state.\nIt’s useful to consider components as “controlled” (driven by props) or “uncontrolled” (driven by state).\n",
                                    "Try out some challenges1. Synced inputs 2. Filtering a list Challenge 1 of 2: Synced inputs These two inputs are independent. Make them stay in sync: editing one input should update the other input with the same text, and vice versa.App.jsApp.js ResetForkimport { useState } from 'react';\n\nexport default function SyncedInputs() {\n  return (\n    <>\n      <Input label=\"First input\" />\n      <Input label=\"Second input\" />\n    </>\n  );\n}\n\nfunction Input({ label }) {\n  const [text, setText] = useState('');\n\n  function handleChange(e) {\n    setText(e.target.value);\n  }\n\n  return (\n    <label>\n      {label}\n      {' '}\n      <input\n        value={text}\n        onChange={handleChange}\n      />\n    </label>\n  );\n}\n\nShow more Show hint Show solutionNext Challenge"
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Preserving and Resetting State",
                        "url": "https://react.dev/learn/preserving-and-resetting-state",
                        "content": [
                            "State is isolated between components. React keeps track of which state belongs to which component based on their place in the UI tree. You can control when to preserve state and when to reset it between re-renders.",
                            "  1.When React chooses to preserve or reset the state",
                            "  2.How to force React to reset component’s state",
                            "  3.How keys and types affect whether the state is preserved",
                            "You will learn\nWhen React chooses to preserve or reset the state\nHow to force React to reset component’s state\nHow keys and types affect whether the state is preserved\n",
                            {
                                "sub_header": "State is tied to a position in the render tree ",
                                "source": "react",
                                "url": "https://react.dev/learn/preserving-and-resetting-state/#state-is-tied-to-a-position-in-the-tree",
                                "content": [
                                    "React builds render trees for the component structure in your UI.",
                                    "When you give a component state, you might think the state “lives” inside the component. But the state is actually held inside React. React associates each piece of state it’s holding with the correct component by where that component sits in the render tree.",
                                    "Here, there is only one <Counter /> JSX tag, but it’s rendered at two different positions:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function App() {  const counter = <Counter />;  return (    <div>      {counter}      {counter}    </div>  );}function Counter() {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                    },
                                    "Here’s how these look as a tree:",
                                    "These are two separate counters because each is rendered at its own position in the tree. You don’t usually have to think about these positions to use React, but it can be useful to understand how it works.",
                                    "In React, each component on the screen has fully isolated state. For example, if you render two Counter components side by side, each of them will get its own, independent, score and hover states.",
                                    "Try clicking both counters and notice they don’t affect each other:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function App() {  return (    <div>      <Counter />      <Counter />    </div>  );}function Counter() {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                    },
                                    "As you can see, when one counter is updated, only the state for that component is updated:",
                                    "React will keep the state around for as long as you render the same component at the same position in the tree. To see this, increment both counters, then remove the second component by unchecking “Render the second counter” checkbox, and then add it back by ticking it again:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function App() {  const [showB, setShowB] = useState(true);  return (    <div>      <Counter />      {showB && <Counter />}       <label>        <input          type=\"checkbox\"          checked={showB}          onChange={e => {            setShowB(e.target.checked)          }}        />        Render the second counter      </label>    </div>  );}function Counter() {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                    },
                                    "Notice how the moment you stop rendering the second counter, its state disappears completely. That’s because when React removes a component, it destroys its state.",
                                    "When you tick “Render the second counter”, a second Counter and its state are initialized from scratch (score = 0) and added to the DOM.",
                                    "React preserves a component’s state for as long as it’s being rendered at its position in the UI tree. If it gets removed, or a different component gets rendered at the same position, React discards its state."
                                ]
                            },
                            {
                                "sub_header": "Same component at the same position preserves state ",
                                "source": "react",
                                "url": "https://react.dev/learn/preserving-and-resetting-state/#same-component-at-the-same-position-preserves-state",
                                "content": [
                                    "In this example, there are two different <Counter /> tags:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function App() {  const [isFancy, setIsFancy] = useState(false);  return (    <div>      {isFancy ? (        <Counter isFancy={true} />       ) : (        <Counter isFancy={false} />       )}      <label>        <input          type=\"checkbox\"          checked={isFancy}          onChange={e => {            setIsFancy(e.target.checked)          }}        />        Use fancy styling      </label>    </div>  );}function Counter({ isFancy }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  if (isFancy) {    className += ' fancy';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                    },
                                    "When you tick or clear the checkbox, the counter state does not get reset. Whether isFancy is true or false, you always have a <Counter /> as the first child of the div returned from the root App component:",
                                    {
                                        "code_example": "App"
                                    },
                                    "It’s the same component at the same position, so from React’s perspective, it’s the same counter.",
                                    {
                                        "code_example": "return"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Different components at the same position reset state ",
                                "source": "react",
                                "url": "https://react.dev/learn/preserving-and-resetting-state/#different-components-at-the-same-position-reset-state",
                                "content": [
                                    "In this example, ticking the checkbox will replace <Counter> with a <p>:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function App() {  const [isPaused, setIsPaused] = useState(false);  return (    <div>      {isPaused ? (        <p>See you later!</p>       ) : (        <Counter />       )}      <label>        <input          type=\"checkbox\"          checked={isPaused}          onChange={e => {            setIsPaused(e.target.checked)          }}        />        Take a break      </label>    </div>  );}function Counter() {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                    },
                                    "Here, you switch between different component types at the same position. Initially, the first child of the <div> contained a Counter. But when you swapped in a p, React removed the Counter from the UI tree and destroyed its state.",
                                    {
                                        "code_example": "Counter"
                                    },
                                    {
                                        "code_example": "p"
                                    },
                                    "Also, when you render a different component in the same position, it resets the state of its entire subtree. To see how this works, increment the counter and then tick the checkbox:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function App() {  const [isFancy, setIsFancy] = useState(false);  return (    <div>      {isFancy ? (        <div>          <Counter isFancy={true} />         </div>      ) : (        <section>          <Counter isFancy={false} />        </section>      )}      <label>        <input          type=\"checkbox\"          checked={isFancy}          onChange={e => {            setIsFancy(e.target.checked)          }}        />        Use fancy styling      </label>    </div>  );}function Counter({ isFancy }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  if (isFancy) {    className += ' fancy';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                    },
                                    "The counter state gets reset when you click the checkbox. Although you render a Counter, the first child of the div changes from a div to a section. When the child div was removed from the DOM, the whole tree below it (including the Counter and its state) was destroyed as well.",
                                    {
                                        "code_example": "section"
                                    },
                                    {
                                        "code_example": "div"
                                    },
                                    "As a rule of thumb, if you want to preserve the state between re-renders, the structure of your tree needs to “match up” from one render to another. If the structure is different, the state gets destroyed because React destroys state when it removes a component from the tree.",
                                    {
                                        "code_example": "MyTextField"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Resetting state at the same position ",
                                "source": "react",
                                "url": "https://react.dev/learn/preserving-and-resetting-state/#resetting-state-at-the-same-position",
                                "content": [
                                    "By default, React preserves state of a component while it stays at the same position. Usually, this is exactly what you want, so it makes sense as the default behavior. But sometimes, you may want to reset a component’s state. Consider this app that lets two players keep track of their scores during each turn:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Scoreboard() {  const [isPlayerA, setIsPlayerA] = useState(true);  return (    <div>      {isPlayerA ? (        <Counter person=\"Taylor\" />      ) : (        <Counter person=\"Sarah\" />      )}      <button onClick={() => {        setIsPlayerA(!isPlayerA);      }}>        Next player!      </button>    </div>  );}function Counter({ person }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{person}'s score: {score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                    },
                                    "Currently, when you change the player, the score is preserved. The two Counters appear in the same position, so React sees them as the same Counter whose person prop has changed.",
                                    "But conceptually, in this app they should be two separate counters. They might appear in the same place in the UI, but one is a counter for Taylor, and another is a counter for Sarah.",
                                    "There are two ways to reset state when switching between them:",
                                    "  1.Render components in different positions",
                                    "  2.Give each component an explicit identity with key",
                                    {
                                        "sub_header": "Option 1: Rendering a component in different positions ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/preserving-and-resetting-state/#option-1-rendering-a-component-in-different-positions",
                                        "content": [
                                            "If you want these two Counters to be independent, you can render them in two different positions:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';export default function Scoreboard() {  const [isPlayerA, setIsPlayerA] = useState(true);  return (    <div>      {isPlayerA &&        <Counter person=\"Taylor\" />      }      {!isPlayerA &&        <Counter person=\"Sarah\" />      }      <button onClick={() => {        setIsPlayerA(!isPlayerA);      }}>        Next player!      </button>    </div>  );}function Counter({ person }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{person}'s score: {score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                            },
                                            "  1.Initially, isPlayerA is true. So the first position contains Counter state, and the second one is empty.",
                                            "  2.When you click the “Next player” button the first position clears but the second one now contains a Counter.",
                                            "Each Counter’s state gets destroyed each time it’s removed from the DOM. This is why they reset every time you click the button.",
                                            "This solution is convenient when you only have a few independent components rendered in the same place. In this example, you only have two, so it’s not a hassle to render both separately in the JSX."
                                        ]
                                    },
                                    {
                                        "sub_header": "Option 2: Resetting state with a key ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/preserving-and-resetting-state/#option-2-resetting-state-with-a-key",
                                        "content": [
                                            "There is also another, more generic, way to reset a component’s state.",
                                            "You might have seen keys when rendering lists. Keys aren’t just for lists! You can use keys to make React distinguish between any components. By default, React uses order within the parent (“first counter”, “second counter”) to discern between components. But keys let you tell React that this is not just a first counter, or a second counter, but a specific counter—for example, Taylor’s counter. This way, React will know Taylor’s counter wherever it appears in the tree!",
                                            "In this example, the two <Counter />s don’t share state even though they appear in the same place in JSX:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';export default function Scoreboard() {  const [isPlayerA, setIsPlayerA] = useState(true);  return (    <div>      {isPlayerA ? (        <Counter key=\"Taylor\" person=\"Taylor\" />      ) : (        <Counter key=\"Sarah\" person=\"Sarah\" />      )}      <button onClick={() => {        setIsPlayerA(!isPlayerA);      }}>        Next player!      </button>    </div>  );}function Counter({ person }) {  const [score, setScore] = useState(0);  const [hover, setHover] = useState(false);  let className = 'counter';  if (hover) {    className += ' hover';  }  return (    <div      className={className}      onPointerEnter={() => setHover(true)}      onPointerLeave={() => setHover(false)}    >      <h1>{person}'s score: {score}</h1>      <button onClick={() => setScore(score + 1)}>        Add one      </button>    </div>  );}"
                                            },
                                            "Switching between Taylor and Sarah does not preserve the state. This is because you gave them different keys:",
                                            {
                                                "code_example": "{isPlayerA ? (  <Counter key=\"Taylor\" person=\"Taylor\" />) : (  <Counter key=\"Sarah\" person=\"Sarah\" />)}"
                                            },
                                            "Specifying a key tells React to use the key itself as part of the position, instead of their order within the parent. This is why, even though you render them in the same place in JSX, React sees them as two different counters, and so they will never share state. Every time a counter appears on the screen, its state is created. Every time it is removed, its state is destroyed. Toggling between them resets their state over and over.",
                                            "NoteRemember that keys are not globally unique. They only specify the position within the parent."
                                        ]
                                    },
                                    {
                                        "sub_header": "Resetting a form with a key ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/preserving-and-resetting-state/#resetting-a-form-with-a-key",
                                        "content": [
                                            "Resetting state with a key is particularly useful when dealing with forms.",
                                            "In this chat app, the <Chat> component contains the text input state:",
                                            {
                                                "code_sandbox": "ContactList.jsChat.jsimport { useState } from 'react';import Chat from './Chat.js';import ContactList from './ContactList.js';export default function Messenger() {  const [to, setTo] = useState(contacts[0]);  return (    <div>      <ContactList        contacts={contacts}        selectedContact={to}        onSelect={contact => setTo(contact)}      />      <Chat contact={to} />    </div>  )}const contacts = [  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },  { id: 1, name: 'Alice', email: 'alice@mail.com' },  { id: 2, name: 'Bob', email: 'bob@mail.com' }];"
                                            },
                                            "Try entering something into the input, and then press “Alice” or “Bob” to choose a different recipient. You will notice that the input state is preserved because the <Chat> is rendered at the same position in the tree.",
                                            "In many apps, this may be the desired behavior, but not in a chat app! You don’t want to let the user send a message they already typed to a wrong person due to an accidental click. To fix it, add a key:",
                                            {
                                                "code_example": "<Chat key={to.id} contact={to} />"
                                            },
                                            "This ensures that when you select a different recipient, the Chat component will be recreated from scratch, including any state in the tree below it. React will also re-create the DOM elements instead of reusing them.",
                                            "Now switching the recipient always clears the text field:",
                                            {
                                                "code_sandbox": "ContactList.jsChat.jsimport { useState } from 'react';import Chat from './Chat.js';import ContactList from './ContactList.js';export default function Messenger() {  const [to, setTo] = useState(contacts[0]);  return (    <div>      <ContactList        contacts={contacts}        selectedContact={to}        onSelect={contact => setTo(contact)}      />      <Chat key={to.id} contact={to} />    </div>  )}const contacts = [  { id: 0, name: 'Taylor', email: 'taylor@mail.com' },  { id: 1, name: 'Alice', email: 'alice@mail.com' },  { id: 2, name: 'Bob', email: 'bob@mail.com' }];"
                                            },
                                            "Deep DivePreserving state for removed components Show DetailsIn a real chat app, you’d probably want to recover the input state when the user selects the previous recipient again. There are a few ways to keep the state “alive” for a component that’s no longer visible:\nYou could render all chats instead of just the current one, but hide all the others with CSS. The chats would not get removed from the tree, so their local state would be preserved. This solution works great for simple UIs. But it can get very slow if the hidden trees are large and contain a lot of DOM nodes.\nYou could lift the state up and hold the pending message for each recipient in the parent component. This way, when the child components get removed, it doesn’t matter, because it’s the parent that keeps the important information. This is the most common solution.\nYou might also use a different source in addition to React state. For example, you probably want a message draft to persist even if the user accidentally closes the page. To implement this, you could have the Chat component initialize its state by reading from the localStorage, and save the drafts there too.\nNo matter which strategy you pick, a chat with Alice is conceptually distinct from a chat with Bob, so it makes sense to give a key to the <Chat> tree based on the current recipient.",
                                            "Recap\nReact keeps state for as long as the same component is rendered at the same position.\nState is not kept in JSX tags. It’s associated with the tree position in which you put that JSX.\nYou can force a subtree to reset its state by giving it a different key.\nDon’t nest component definitions, or you’ll reset state by accident.\n",
                                            "Try out some challenges1. Fix disappearing input text 2. Swap two form fields 3. Reset a detail form 4. Clear an image while it’s loading 5. Fix misplaced state in the list Challenge 1 of 5: Fix disappearing input text This example shows a message when you press the button. However, pressing the button also accidentally resets the input. Why does this happen? Fix it so that pressing the button does not reset the input text.App.jsApp.js ResetForkimport { useState } from 'react';\n\nexport default function App() {\n  const [showHint, setShowHint] = useState(false);\n  if (showHint) {\n    return (\n      <div>\n        <p><i>Hint: Your favorite city?</i></p>\n        <Form />\n        <button onClick={() => {\n          setShowHint(false);\n        }}>Hide hint</button>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <Form />\n      <button onClick={() => {\n        setShowHint(true);\n      }}>Show hint</button>\n    </div>\n  );\n}\n\nfunction Form() {\n  const [text, setText] = useState('');\n  return (\n    <textarea\n      value={text}\n      onChange={e => setText(e.target.value)}\n    />\n  );\n}\n\nShow more Show solutionNext Challenge"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Extracting State Logic into a Reducer",
                        "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer",
                        "content": [
                            "Components with many state updates spread across many event handlers can get overwhelming. For these cases, you can consolidate all the state update logic outside your component in a single function, called a reducer.",
                            {
                                "code_example": "useState"
                            },
                            "  1.What a reducer function is",
                            "  2.How to refactor useState to useReducer",
                            "  3.When to use a reducer",
                            "  4.How to write one well",
                            {
                                "sub_header": "Consolidate state logic with a reducer ",
                                "source": "react",
                                "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer/#consolidate-state-logic-with-a-reducer",
                                "content": [
                                    "As your components grow in complexity, it can get harder to see at a glance all the different ways in which a component’s state gets updated. For example, the TaskApp component below holds an array of tasks in state and uses three different event handlers to add, remove, and edit tasks:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';export default function TaskApp() {  const [tasks, setTasks] = useState(initialTasks);  function handleAddTask(text) {    setTasks([      ...tasks,      {        id: nextId++,        text: text,        done: false,      },    ]);  }  function handleChangeTask(task) {    setTasks(      tasks.map((t) => {        if (t.id === task.id) {          return task;        } else {          return t;        }      })    );  }  function handleDeleteTask(taskId) {    setTasks(tasks.filter((t) => t.id !== taskId));  }  return (    <>      <h1>Prague itinerary</h1>      <AddTask onAddTask={handleAddTask} />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}let nextId = 3;const initialTasks = [  {id: 0, text: 'Visit Kafka Museum', done: true},  {id: 1, text: 'Watch a puppet show', done: false},  {id: 2, text: 'Lennon Wall pic', done: false},];"
                                    },
                                    "Each of its event handlers calls setTasks in order to update the state. As this component grows, so does the amount of state logic sprinkled throughout it. To reduce this complexity and keep all your logic in one easy-to-access place, you can move that state logic into a single function outside your component, called a “reducer”.",
                                    "Reducers are a different way to handle state. You can migrate from useState to useReducer in three steps:",
                                    "  1.Move from setting state to dispatching actions.",
                                    "  2.Write a reducer function.",
                                    "  3.Use the reducer from your component.",
                                    {
                                        "sub_header": "Step 1: Move from setting state to dispatching actions ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer/#step-1-move-from-setting-state-to-dispatching-actions",
                                        "content": [
                                            "Your event handlers currently specify what to do by setting state:",
                                            {
                                                "code_example": "function handleAddTask(text) {  setTasks([    ...tasks,    {      id: nextId++,      text: text,      done: false,    },  ]);}function handleChangeTask(task) {  setTasks(    tasks.map((t) => {      if (t.id === task.id) {        return task;      } else {        return t;      }    })  );}function handleDeleteTask(taskId) {  setTasks(tasks.filter((t) => t.id !== taskId));}"
                                            },
                                            "Remove all the state setting logic. What you are left with are three event handlers:",
                                            "  1.handleAddTask(text) is called when the user presses “Add”.",
                                            "  2.handleChangeTask(task) is called when the user toggles a task or presses “Save”.",
                                            "  3.handleDeleteTask(taskId) is called when the user presses “Delete”.",
                                            "Managing state with reducers is slightly different from directly setting state. Instead of telling React “what to do” by setting state, you specify “what the user just did” by dispatching “actions” from your event handlers. (The state update logic will live elsewhere!) So instead of “setting tasks” via an event handler, you’re dispatching an “added/changed/deleted a task” action. This is more descriptive of the user’s intent.",
                                            {
                                                "code_example": "function handleAddTask(text) {  dispatch({    type: 'added',    id: nextId++,    text: text,  });}function handleChangeTask(task) {  dispatch({    type: 'changed',    task: task,  });}function handleDeleteTask(taskId) {  dispatch({    type: 'deleted',    id: taskId,  });}"
                                            },
                                            "The object you pass to dispatch is called an “action”:",
                                            {
                                                "code_example": "function handleDeleteTask(taskId) {  dispatch(    // \"action\" object:    {      type: 'deleted',      id: taskId,    }  );}"
                                            },
                                            "It is a regular JavaScript object. You decide what to put in it, but generally it should contain the minimal information about what happened. (You will add the dispatch function itself in a later step.)",
                                            {
                                                "code_example": "type"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Write a reducer function ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer/#step-2-write-a-reducer-function",
                                        "content": [
                                            "A reducer function is where you will put your state logic. It takes two arguments, the current state and the action object, and it returns the next state:",
                                            {
                                                "code_example": "function yourReducer(state, action) {  // return next state for React to set}"
                                            },
                                            "React will set the state to what you return from the reducer.",
                                            "To move your state setting logic from your event handlers to a reducer function in this example, you will:",
                                            "  1.Declare the current state (tasks) as the first argument.",
                                            "  2.Declare the action object as the second argument.",
                                            "  3.Return the next state from the reducer (which React will set the state to).",
                                            "Here is all the state setting logic migrated to a reducer function:",
                                            {
                                                "code_example": "function tasksReducer(tasks, action) {  if (action.type === 'added') {    return [      ...tasks,      {        id: action.id,        text: action.text,        done: false,      },    ];  } else if (action.type === 'changed') {    return tasks.map((t) => {      if (t.id === action.task.id) {        return action.task;      } else {        return t;      }    });  } else if (action.type === 'deleted') {    return tasks.filter((t) => t.id !== action.id);  } else {    throw Error('Unknown action: ' + action.type);  }}"
                                            },
                                            "Because the reducer function takes state (tasks) as an argument, you can declare it outside of your component. This decreases the indentation level and can make your code easier to read.",
                                            {
                                                "code_example": "function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [        ...tasks,        {          id: action.id,          text: action.text,          done: false,        },      ];    }    case 'changed': {      return tasks.map((t) => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter((t) => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}"
                                            },
                                            "Deep DiveWhy are reducers called this way? Show DetailsAlthough reducers can “reduce” the amount of code inside your component, they are actually named after the reduce() operation that you can perform on arrays.The reduce() operation lets you take an array and “accumulate” a single value out of many:const arr = [1, 2, 3, 4, 5];const sum = arr.reduce(  (result, number) => result + number); // 1 + 2 + 3 + 4 + 5The function you pass to reduce is known as a “reducer”. It takes the result so far and the current item, then it returns the next result. React reducers are an example of the same idea: they take the state so far and the action, and return the next state. In this way, they accumulate actions over time into state.You could even use the reduce() method with an initialState and an array of actions to calculate the final state by passing your reducer function to it:index.jsindex.htmltasksReducer.jsindex.js ResetForkimport tasksReducer from './tasksReducer.js';\n\nlet initialState = [];\nlet actions = [\n  {type: 'added', id: 1, text: 'Visit Kafka Museum'},\n  {type: 'added', id: 2, text: 'Watch a puppet show'},\n  {type: 'deleted', id: 1},\n  {type: 'added', id: 3, text: 'Lennon Wall pic'},\n];\n\nlet finalState = actions.reduce(tasksReducer, initialState);\n\nconst output = document.getElementById('output');\noutput.textContent = JSON.stringify(finalState, null, 2);\n\nYou probably won’t need to do this yourself, but this is similar to what React does!"
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 3: Use the reducer from your component ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer/#step-3-use-the-reducer-from-your-component",
                                        "content": [
                                            "Finally, you need to hook up the tasksReducer to your component. Import the useReducer Hook from React:",
                                            {
                                                "code_example": "import { useReducer } from 'react';"
                                            },
                                            "Then you can replace useState:",
                                            {
                                                "code_example": "const [tasks, setTasks] = useState(initialTasks);"
                                            },
                                            "with useReducer like so:",
                                            {
                                                "code_example": "const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);"
                                            },
                                            "The useReducer Hook is similar to useState—you must pass it an initial state and it returns a stateful value and a way to set state (in this case, the dispatch function). But it’s a little different.",
                                            "The useReducer Hook takes two arguments:",
                                            "  1.A reducer function",
                                            "  2.An initial state",
                                            "And it returns:",
                                            "  1.A stateful value",
                                            "  2.A dispatch function (to “dispatch” user actions to the reducer)",
                                            "Now it’s fully wired up! Here, the reducer is declared at the bottom of the component file:",
                                            {
                                                "code_sandbox": "import { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task,    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId,    });  }  return (    <>      <h1>Prague itinerary</h1>      <AddTask onAddTask={handleAddTask} />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [        ...tasks,        {          id: action.id,          text: action.text,          done: false,        },      ];    }    case 'changed': {      return tasks.map((t) => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter((t) => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}let nextId = 3;const initialTasks = [  {id: 0, text: 'Visit Kafka Museum', done: true},  {id: 1, text: 'Watch a puppet show', done: false},  {id: 2, text: 'Lennon Wall pic', done: false},];"
                                            },
                                            "If you want, you can even move the reducer to a different file:",
                                            {
                                                "code_sandbox": "tasksReducer.jsimport { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';import tasksReducer from './tasksReducer.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task,    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId,    });  }  return (    <>      <h1>Prague itinerary</h1>      <AddTask onAddTask={handleAddTask} />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}let nextId = 3;const initialTasks = [  {id: 0, text: 'Visit Kafka Museum', done: true},  {id: 1, text: 'Watch a puppet show', done: false},  {id: 2, text: 'Lennon Wall pic', done: false},];"
                                            },
                                            "Component logic can be easier to read when you separate concerns like this. Now the event handlers only specify what happened by dispatching actions, and the reducer function determines how the state updates in response to them."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Comparing useState and useReducer ",
                                "source": "react",
                                "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer/#comparing-usestate-and-usereducer",
                                "content": [
                                    "Reducers are not without downsides! Here’s a few ways you can compare them:",
                                    "  1.Code size: Generally, with useState you have to write less code upfront. With useReducer, you have to write both a reducer function and dispatch actions. However, useReducer can help cut down on the code if many event handlers modify state in a similar way.",
                                    "  2.Readability: useState is very easy to read when the state updates are simple. When they get more complex, they can bloat your component’s code and make it difficult to scan. In this case, useReducer lets you cleanly separate the how of update logic from the what happened of event handlers.",
                                    "  3.Debugging: When you have a bug with useState, it can be difficult to tell where the state was set incorrectly, and why. With useReducer, you can add a console log into your reducer to see every state update, and why it happened (due to which action). If each action is correct, you’ll know that the mistake is in the reducer logic itself. However, you have to step through more code than with useState.",
                                    "  4.Testing: A reducer is a pure function that doesn’t depend on your component. This means that you can export and test it separately in isolation. While generally it’s best to test components in a more realistic environment, for complex state update logic it can be useful to assert that your reducer returns a particular state for a particular initial state and action.",
                                    "  5.Personal preference: Some people like reducers, others don’t. That’s okay. It’s a matter of preference. You can always convert between useState and useReducer back and forth: they are equivalent!",
                                    "We recommend using a reducer if you often encounter bugs due to incorrect state updates in some component, and want to introduce more structure to its code. You don’t have to use reducers for everything: feel free to mix and match! You can even useState and useReducer in the same component."
                                ]
                            },
                            {
                                "sub_header": "Writing reducers well ",
                                "source": "react",
                                "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer/#writing-reducers-well",
                                "content": [
                                    "Keep these two tips in mind when writing reducers:",
                                    "  1.Reducers must be pure. Similar to state updater functions, reducers run during rendering! (Actions are queued until the next render.) This means that reducers must be pure—same inputs always result in the same output. They should not send requests, schedule timeouts, or perform any side effects (operations that impact things outside the component). They should update objects and arrays without mutations.",
                                    "  2.Each action describes a single user interaction, even if that leads to multiple changes in the data. For example, if a user presses “Reset” on a form with five fields managed by a reducer, it makes more sense to dispatch one reset_form action rather than five separate set_field actions. If you log every action in a reducer, that log should be clear enough for you to reconstruct what interactions or responses happened in what order. This helps with debugging!"
                                ]
                            },
                            {
                                "sub_header": "Writing concise reducers with Immer ",
                                "source": "react",
                                "url": "https://react.dev/learn/extracting-state-logic-into-a-reducer/#writing-concise-reducers-with-immer",
                                "content": [
                                    "Just like with updating objects and arrays in regular state, you can use the Immer library to make reducers more concise. Here, useImmerReducer lets you mutate the state with push or arr[i] = assignment:",
                                    {
                                        "code_sandbox": "package.jsonpackage.json{  \"dependencies\": {    \"immer\": \"1.7.3\",    \"react\": \"latest\",    \"react-dom\": \"latest\",    \"react-scripts\": \"latest\",    \"use-immer\": \"0.5.1\"  },  \"scripts\": {    \"start\": \"react-scripts start\",    \"build\": \"react-scripts build\",    \"test\": \"react-scripts test --env=jsdom\",    \"eject\": \"react-scripts eject\"  },  \"devDependencies\": {}}"
                                    },
                                    "Reducers must be pure, so they shouldn’t mutate state. But Immer provides you with a special draft object which is safe to mutate. Under the hood, Immer will create a copy of your state with the changes you made to the draft. This is why reducers managed by useImmerReducer can mutate their first argument and don’t need to return state.",
                                    "Recap\nTo convert from useState to useReducer:\n\nDispatch actions from event handlers.\nWrite a reducer function that returns the next state for a given state and action.\nReplace useState with useReducer.\n\n\nReducers require you to write a bit more code, but they help with debugging and testing.\nReducers must be pure.\nEach action describes a single user interaction.\nUse Immer if you want to write reducers in a mutating style.\n",
                                    {
                                        "code_example": "useReducer"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Passing Data Deeply with Context",
                        "url": "https://react.dev/learn/passing-data-deeply-with-context",
                        "content": [
                            "Usually, you will pass information from a parent component to a child component via props. But passing props can become verbose and inconvenient if you have to pass them through many components in the middle, or if many components in your app need the same information. Context lets the parent component make some information available to any component in the tree below it—no matter how deep—without passing it explicitly through props.",
                            "  1.What “prop drilling” is",
                            "  2.How to replace repetitive prop passing with context",
                            "  3.Common use cases for context",
                            "  4.Common alternatives to context",
                            "You will learn\nWhat “prop drilling” is\nHow to replace repetitive prop passing with context\nCommon use cases for context\nCommon alternatives to context\n",
                            {
                                "sub_header": "The problem with passing props ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-data-deeply-with-context/#the-problem-with-passing-props",
                                "content": [
                                    "Passing props is a great way to explicitly pipe data through your UI tree to the components that use it.",
                                    "But passing props can become verbose and inconvenient when you need to pass some prop deeply through the tree, or if many components need the same prop. The nearest common ancestor could be far removed from the components that need data, and lifting state up that high can lead to a situation called “prop drilling”.",
                                    "Wouldn’t it be great if there were a way to “teleport” data to the components in the tree that need it without passing props? With React’s context feature, there is!"
                                ]
                            },
                            {
                                "sub_header": "Context: an alternative to passing props ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-data-deeply-with-context/#context-an-alternative-to-passing-props",
                                "content": [
                                    "Context lets a parent component provide data to the entire tree below it. There are many uses for context. Here is one example. Consider this Heading component that accepts a level for its size:",
                                    {
                                        "code_sandbox": "Section.jsHeading.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section>      <Heading level={1}>Title</Heading>      <Heading level={2}>Heading</Heading>      <Heading level={3}>Sub-heading</Heading>      <Heading level={4}>Sub-sub-heading</Heading>      <Heading level={5}>Sub-sub-sub-heading</Heading>      <Heading level={6}>Sub-sub-sub-sub-heading</Heading>    </Section>  );}"
                                    },
                                    "Let’s say you want multiple headings within the same Section to always have the same size:",
                                    {
                                        "code_sandbox": "Section.jsHeading.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section>      <Heading level={1}>Title</Heading>      <Section>        <Heading level={2}>Heading</Heading>        <Heading level={2}>Heading</Heading>        <Heading level={2}>Heading</Heading>        <Section>          <Heading level={3}>Sub-heading</Heading>          <Heading level={3}>Sub-heading</Heading>          <Heading level={3}>Sub-heading</Heading>          <Section>            <Heading level={4}>Sub-sub-heading</Heading>            <Heading level={4}>Sub-sub-heading</Heading>            <Heading level={4}>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                                    },
                                    "Currently, you pass the level prop to each <Heading> separately:",
                                    {
                                        "code_example": "<Section>  <Heading level={3}>About</Heading>  <Heading level={3}>Photos</Heading>  <Heading level={3}>Videos</Heading></Section>"
                                    },
                                    "It would be nice if you could pass the level prop to the <Section> component instead and remove it from the <Heading>. This way you could enforce that all headings in the same section have the same size:",
                                    {
                                        "code_example": "<Section level={3}>  <Heading>About</Heading>  <Heading>Photos</Heading>  <Heading>Videos</Heading></Section>"
                                    },
                                    "But how can the <Heading> component know the level of its closest <Section>? That would require some way for a child to “ask” for data from somewhere above in the tree.",
                                    "You can’t do it with props alone. This is where context comes into play. You will do it in three steps:",
                                    "  1.Create a context. (You can call it LevelContext, since it’s for the heading level.)",
                                    "  2.Use that context from the component that needs the data. (Heading will use LevelContext.)",
                                    "  3.Provide that context from the component that specifies the data. (Section will provide LevelContext.)",
                                    "Context lets a parent—even a distant one!—provide some data to the entire tree inside of it.",
                                    {
                                        "sub_header": "Step 1: Create the context ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/passing-data-deeply-with-context/#step-1-create-the-context",
                                        "content": [
                                            "First, you need to create the context. You’ll need to export it from a file so that your components can use it:",
                                            {
                                                "code_sandbox": "Section.jsHeading.jsLevelContext.jsLevelContext.jsimport { createContext } from 'react';export const LevelContext = createContext(1);"
                                            },
                                            "The only argument to createContext is the default value. Here, 1 refers to the biggest heading level, but you could pass any kind of value (even an object). You will see the significance of the default value in the next step."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Use the context ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/passing-data-deeply-with-context/#step-2-use-the-context",
                                        "content": [
                                            "Import the useContext Hook from React and your context:",
                                            {
                                                "code_example": "import { useContext } from 'react';import { LevelContext } from './LevelContext.js';"
                                            },
                                            "Currently, the Heading component reads level from props:",
                                            {
                                                "code_example": "export default function Heading({ level, children }) {  // ...}"
                                            },
                                            "Instead, remove the level prop and read the value from the context you just imported, LevelContext:",
                                            {
                                                "code_example": "export default function Heading({ children }) {  const level = useContext(LevelContext);  // ...}"
                                            },
                                            "useContext is a Hook. Just like useState and useReducer, you can only call a Hook immediately inside a React component (not inside loops or conditions). useContext tells React that the Heading component wants to read the LevelContext.",
                                            "Now that the Heading component doesn’t have a level prop, you don’t need to pass the level prop to Heading in your JSX like this anymore:",
                                            {
                                                "code_example": "<Section>  <Heading level={4}>Sub-sub-heading</Heading>  <Heading level={4}>Sub-sub-heading</Heading>  <Heading level={4}>Sub-sub-heading</Heading></Section>"
                                            },
                                            "Update the JSX so that it’s the Section that receives it instead:",
                                            {
                                                "code_example": "<Section level={4}>  <Heading>Sub-sub-heading</Heading>  <Heading>Sub-sub-heading</Heading>  <Heading>Sub-sub-heading</Heading></Section>"
                                            },
                                            "As a reminder, this is the markup that you were trying to get working:",
                                            {
                                                "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section level={1}>      <Heading>Title</Heading>      <Section level={2}>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Section level={3}>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Section level={4}>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                                            },
                                            "Notice this example doesn’t quite work, yet! All the headings have the same size because even though you’re using the context, you have not provided it yet. React doesn’t know where to get it!",
                                            "If you don’t provide the context, React will use the default value you’ve specified in the previous step. In this example, you specified 1 as the argument to createContext, so useContext(LevelContext) returns 1, setting all those headings to <h1>. Let’s fix this problem by having each Section provide its own context."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 3: Provide the context ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/passing-data-deeply-with-context/#step-3-provide-the-context",
                                        "content": [
                                            "The Section component currently renders its children:",
                                            {
                                                "code_example": "export default function Section({ children }) {  return (    <section className=\"section\">      {children}    </section>  );}"
                                            },
                                            "Wrap them with a context provider to provide the LevelContext to them:",
                                            {
                                                "code_example": "import { LevelContext } from './LevelContext.js';export default function Section({ level, children }) {  return (    <section className=\"section\">      <LevelContext.Provider value={level}>        {children}      </LevelContext.Provider>    </section>  );}"
                                            },
                                            "This tells React: “if any component inside this <Section> asks for LevelContext, give them this level.” The component will use the value of the nearest <LevelContext.Provider> in the UI tree above it.",
                                            {
                                                "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section level={1}>      <Heading>Title</Heading>      <Section level={2}>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Section level={3}>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Section level={4}>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                                            },
                                            "It’s the same result as the original code, but you did not need to pass the level prop to each Heading component! Instead, it “figures out” its heading level by asking the closest Section above:",
                                            "  1.You pass a level prop to the <Section>.",
                                            "  2.Section wraps its children into <LevelContext.Provider value={level}>.",
                                            "  3.Heading asks the closest value of LevelContext above with useContext(LevelContext)."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Using and providing context from the same component ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-data-deeply-with-context/#using-and-providing-context-from-the-same-component",
                                "content": [
                                    "Currently, you still have to specify each section’s level manually:",
                                    {
                                        "code_example": "export default function Page() {  return (    <Section level={1}>      ...      <Section level={2}>        ...        <Section level={3}>          ..."
                                    },
                                    "Since context lets you read information from a component above, each Section could read the level from the Section above, and pass level + 1 down automatically. Here is how you could do it:",
                                    {
                                        "code_example": "import { useContext } from 'react';import { LevelContext } from './LevelContext.js';export default function Section({ children }) {  const level = useContext(LevelContext);  return (    <section className=\"section\">      <LevelContext.Provider value={level + 1}>        {children}      </LevelContext.Provider>    </section>  );}"
                                    },
                                    "With this change, you don’t need to pass the level prop either to the <Section> or to the <Heading>:",
                                    {
                                        "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function Page() {  return (    <Section>      <Heading>Title</Heading>      <Section>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Heading>Heading</Heading>        <Section>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Heading>Sub-heading</Heading>          <Section>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>            <Heading>Sub-sub-heading</Heading>          </Section>        </Section>      </Section>    </Section>  );}"
                                    },
                                    "Now both Heading and Section read the LevelContext to figure out how “deep” they are. And the Section wraps its children into the LevelContext to specify that anything inside of it is at a “deeper” level.",
                                    "NoteThis example uses heading levels because they show visually how nested components can override context. But context is useful for many other use cases too. You can pass down any information needed by the entire subtree: the current color theme, the currently logged in user, and so on."
                                ]
                            },
                            {
                                "sub_header": "Context passes through intermediate components ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-data-deeply-with-context/#context-passes-through-intermediate-components",
                                "content": [
                                    "You can insert as many components as you like between the component that provides context and the one that uses it. This includes both built-in components like <div> and components you might build yourself.",
                                    "In this example, the same Post component (with a dashed border) is rendered at two different nesting levels. Notice that the <Heading> inside of it gets its level automatically from the closest <Section>:",
                                    {
                                        "code_sandbox": "Section.jsHeading.jsLevelContext.jsimport Heading from './Heading.js';import Section from './Section.js';export default function ProfilePage() {  return (    <Section>      <Heading>My Profile</Heading>      <Post        title=\"Hello traveller!\"        body=\"Read about my adventures.\"      />      <AllPosts />    </Section>  );}function AllPosts() {  return (    <Section>      <Heading>Posts</Heading>      <RecentPosts />    </Section>  );}function RecentPosts() {  return (    <Section>      <Heading>Recent Posts</Heading>      <Post        title=\"Flavors of Lisbon\"        body=\"...those pastéis de nata!\"      />      <Post        title=\"Buenos Aires in the rhythm of tango\"        body=\"I loved it!\"      />    </Section>  );}function Post({ title, body }) {  return (    <Section isFancy={true}>      <Heading>        {title}      </Heading>      <p><i>{body}</i></p>    </Section>  );}"
                                    },
                                    "You didn’t do anything special for this to work. A Section specifies the context for the tree inside it, so you can insert a <Heading> anywhere, and it will have the correct size. Try it in the sandbox above!",
                                    "Context lets you write components that “adapt to their surroundings” and display themselves differently depending on where (or, in other words, in which context) they are being rendered.",
                                    "How context works might remind you of CSS property inheritance. In CSS, you can specify color: blue for a <div>, and any DOM node inside of it, no matter how deep, will inherit that color unless some other DOM node in the middle overrides it with color: green. Similarly, in React, the only way to override some context coming from above is to wrap children into a context provider with a different value.",
                                    "In CSS, different properties like color and background-color don’t override each other. You can set all  <div>’s color to red without impacting background-color. Similarly, different React contexts don’t override each other. Each context that you make with createContext() is completely separate from other ones, and ties together components using and providing that particular context. One component may use or provide many different contexts without a problem."
                                ]
                            },
                            {
                                "sub_header": "Before you use context ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-data-deeply-with-context/#before-you-use-context",
                                "content": [
                                    "Context is very tempting to use! However, this also means it’s too easy to overuse it. Just because you need to pass some props several levels deep doesn’t mean you should put that information into context.",
                                    "Here’s a few alternatives you should consider before using context:",
                                    "  1.Start by passing props. If your components are not trivial, it’s not unusual to pass a dozen props down through a dozen components. It may feel like a slog, but it makes it very clear which components use which data! The person maintaining your code will be glad you’ve made the data flow explicit with props.",
                                    "  2.Extract components and pass JSX as children to them. If you pass some data through many layers of intermediate components that don’t use that data (and only pass it further down), this often means that you forgot to extract some components along the way. For example, maybe you pass data props like posts to visual components that don’t use them directly, like <Layout posts={posts} />. Instead, make Layout take children as a prop, and render <Layout><Posts posts={posts} /></Layout>. This reduces the number of layers between the component specifying the data and the one that needs it.",
                                    "If neither of these approaches works well for you, consider context."
                                ]
                            },
                            {
                                "sub_header": "Use cases for context ",
                                "source": "react",
                                "url": "https://react.dev/learn/passing-data-deeply-with-context/#use-cases-for-context",
                                "content": [
                                    "  1.Theming: If your app lets the user change its appearance (e.g. dark mode), you can put a context provider at the top of your app, and use that context in components that need to adjust their visual look.",
                                    "  2.Current account: Many components might need to know the currently logged in user. Putting it in context makes it convenient to read it anywhere in the tree. Some apps also let you operate multiple accounts at the same time (e.g. to leave a comment as a different user). In those cases, it can be convenient to wrap a part of the UI into a nested provider with a different current account value.",
                                    "  3.Routing: Most routing solutions use context internally to hold the current route. This is how every link “knows” whether it’s active or not. If you build your own router, you might want to do it too.",
                                    "  4.Managing state: As your app grows, you might end up with a lot of state closer to the top of your app. Many distant components below may want to change it. It is common to use a reducer together with context to manage complex state and pass it down to distant components without too much hassle.",
                                    "Context is not limited to static values. If you pass a different value on the next render, React will update all the components reading it below! This is why context is often used in combination with state.",
                                    "In general, if some information is needed by distant components in different parts of the tree, it’s a good indication that context will help you.",
                                    "Recap\nContext lets a component provide some information to the entire tree below it.\nTo pass context:\n\nCreate and export it with export const MyContext = createContext(defaultValue).\nPass it to the useContext(MyContext) Hook to read it in any child component, no matter how deep.\nWrap children into <MyContext.Provider value={...}> to provide it from a parent.\n\n\nContext passes through any components in the middle.\nContext lets you write components that “adapt to their surroundings”.\nBefore you use context, try passing props or passing JSX as children.\n",
                                    {
                                        "code_example": "imageSize"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Scaling Up with Reducer and Context",
                        "url": "https://react.dev/learn/scaling-up-with-reducer-and-context",
                        "content": [
                            "Reducers let you consolidate a component’s state update logic. Context lets you pass information deep down to other components. You can combine reducers and context together to manage state of a complex screen.",
                            "  1.How to combine a reducer with context",
                            "  2.How to avoid passing state and dispatch through props",
                            "  3.How to keep context and state logic in a separate file",
                            "You will learn\nHow to combine a reducer with context\nHow to avoid passing state and dispatch through props\nHow to keep context and state logic in a separate file\n",
                            {
                                "sub_header": "Combining a reducer with context ",
                                "source": "react",
                                "url": "https://react.dev/learn/scaling-up-with-reducer-and-context/#combining-a-reducer-with-context",
                                "content": [
                                    "In this example from the introduction to reducers, the state is managed by a reducer. The reducer function contains all of the state update logic and is declared at the bottom of this file:",
                                    {
                                        "code_sandbox": "AddTask.jsTaskList.jsimport { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(    tasksReducer,    initialTasks  );  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId    });  }  return (    <>      <h1>Day off in Kyoto</h1>      <AddTask        onAddTask={handleAddTask}      />      <TaskList        tasks={tasks}        onChangeTask={handleChangeTask}        onDeleteTask={handleDeleteTask}      />    </>  );}function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [...tasks, {        id: action.id,        text: action.text,        done: false      }];    }    case 'changed': {      return tasks.map(t => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter(t => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}let nextId = 3;const initialTasks = [  { id: 0, text: 'Philosopher’s Path', done: true },  { id: 1, text: 'Visit the temple', done: false },  { id: 2, text: 'Drink matcha', done: false }];"
                                    },
                                    "A reducer helps keep the event handlers short and concise. However, as your app grows, you might run into another difficulty. Currently, the tasks state and the dispatch function are only available in the top-level TaskApp component. To let other components read the list of tasks or change it, you have to explicitly pass down the current state and the event handlers that change it as props.",
                                    "For example, TaskApp passes a list of tasks and the event handlers to TaskList:",
                                    {
                                        "code_example": "<TaskList  tasks={tasks}  onChangeTask={handleChangeTask}  onDeleteTask={handleDeleteTask}/>"
                                    },
                                    "And TaskList passes the event handlers to Task:",
                                    {
                                        "code_example": "<Task  task={task}  onChange={onChangeTask}  onDelete={onDeleteTask}/>"
                                    },
                                    "In a small example like this, this works well, but if you have tens or hundreds of components in the middle, passing down all state and functions can be quite frustrating!",
                                    "This is why, as an alternative to passing them through props, you might want to put both the tasks state and the dispatch function into context. This way, any component below TaskApp in the tree can read the tasks and dispatch actions without the repetitive “prop drilling”.",
                                    "Here is how you can combine a reducer with context:",
                                    "  1.Create the context.",
                                    "  2.Put state and dispatch into context.",
                                    "  3.Use context anywhere in the tree.",
                                    {
                                        "sub_header": "Step 1: Create the context ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/scaling-up-with-reducer-and-context/#step-1-create-the-context",
                                        "content": [
                                            "The useReducer Hook returns the current tasks and the dispatch function that lets you update them:",
                                            {
                                                "code_example": "const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);"
                                            },
                                            "To pass them down the tree, you will create two separate contexts:",
                                            "  1.TasksContext provides the current list of tasks.",
                                            "  2.TasksDispatchContext provides the function that lets components dispatch actions.",
                                            "Export them from a separate file so that you can later import them from other files:",
                                            {
                                                "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsTasksContext.jsimport { createContext } from 'react';export const TasksContext = createContext(null);export const TasksDispatchContext = createContext(null);"
                                            },
                                            "Here, you’re passing null as the default value to both contexts. The actual values will be provided by the TaskApp component."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Put state and dispatch into context ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/scaling-up-with-reducer-and-context/#step-2-put-state-and-dispatch-into-context",
                                        "content": [
                                            "Now you can import both contexts in your TaskApp component. Take the tasks and dispatch returned by useReducer() and provide them to the entire tree below:",
                                            {
                                                "code_example": "import { TasksContext, TasksDispatchContext } from './TasksContext.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);  // ...  return (    <TasksContext.Provider value={tasks}>      <TasksDispatchContext.Provider value={dispatch}>        ...      </TasksDispatchContext.Provider>    </TasksContext.Provider>  );}"
                                            },
                                            "For now, you pass the information both via props and in context:",
                                            {
                                                "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsimport { useReducer } from 'react';import AddTask from './AddTask.js';import TaskList from './TaskList.js';import { TasksContext, TasksDispatchContext } from './TasksContext.js';export default function TaskApp() {  const [tasks, dispatch] = useReducer(    tasksReducer,    initialTasks  );  function handleAddTask(text) {    dispatch({      type: 'added',      id: nextId++,      text: text,    });  }  function handleChangeTask(task) {    dispatch({      type: 'changed',      task: task    });  }  function handleDeleteTask(taskId) {    dispatch({      type: 'deleted',      id: taskId    });  }  return (    <TasksContext.Provider value={tasks}>      <TasksDispatchContext.Provider value={dispatch}>        <h1>Day off in Kyoto</h1>        <AddTask          onAddTask={handleAddTask}        />        <TaskList          tasks={tasks}          onChangeTask={handleChangeTask}          onDeleteTask={handleDeleteTask}        />      </TasksDispatchContext.Provider>    </TasksContext.Provider>  );}function tasksReducer(tasks, action) {  switch (action.type) {    case 'added': {      return [...tasks, {        id: action.id,        text: action.text,        done: false      }];    }    case 'changed': {      return tasks.map(t => {        if (t.id === action.task.id) {          return action.task;        } else {          return t;        }      });    }    case 'deleted': {      return tasks.filter(t => t.id !== action.id);    }    default: {      throw Error('Unknown action: ' + action.type);    }  }}let nextId = 3;const initialTasks = [  { id: 0, text: 'Philosopher’s Path', done: true },  { id: 1, text: 'Visit the temple', done: false },  { id: 2, text: 'Drink matcha', done: false }];"
                                            },
                                            "In the next step, you will remove prop passing."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 3: Use context anywhere in the tree ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/scaling-up-with-reducer-and-context/#step-3-use-context-anywhere-in-the-tree",
                                        "content": [
                                            "Now you don’t need to pass the list of tasks or the event handlers down the tree:",
                                            {
                                                "code_example": "<TasksContext.Provider value={tasks}>  <TasksDispatchContext.Provider value={dispatch}>    <h1>Day off in Kyoto</h1>    <AddTask />    <TaskList />  </TasksDispatchContext.Provider></TasksContext.Provider>"
                                            },
                                            "Instead, any component that needs the task list can read it from the TaskContext:",
                                            {
                                                "code_example": "export default function TaskList() {  const tasks = useContext(TasksContext);  // ..."
                                            },
                                            "To update the task list, any component can read the dispatch function from context and call it:",
                                            {
                                                "code_example": "export default function AddTask() {  const [text, setText] = useState('');  const dispatch = useContext(TasksDispatchContext);  // ...  return (    // ...    <button onClick={() => {      setText('');      dispatch({        type: 'added',        id: nextId++,        text: text,      });    }}>Add</button>    // ..."
                                            },
                                            "The TaskApp component does not pass any event handlers down, and the TaskList does not pass any event handlers to the Task component either. Each component reads the context that it needs:",
                                            {
                                                "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsTaskList.jsimport { useState, useContext } from 'react';import { TasksContext, TasksDispatchContext } from './TasksContext.js';export default function TaskList() {  const tasks = useContext(TasksContext);  return (    <ul>      {tasks.map(task => (        <li key={task.id}>          <Task task={task} />        </li>      ))}    </ul>  );}function Task({ task }) {  const [isEditing, setIsEditing] = useState(false);  const dispatch = useContext(TasksDispatchContext);  let taskContent;  if (isEditing) {    taskContent = (      <>        <input          value={task.text}          onChange={e => {            dispatch({              type: 'changed',              task: {                ...task,                text: e.target.value              }            });          }} />        <button onClick={() => setIsEditing(false)}>          Save        </button>      </>    );  } else {    taskContent = (      <>        {task.text}        <button onClick={() => setIsEditing(true)}>          Edit        </button>      </>    );  }  return (    <label>      <input        type=\"checkbox\"        checked={task.done}        onChange={e => {          dispatch({            type: 'changed',            task: {              ...task,              done: e.target.checked            }          });        }}      />      {taskContent}      <button onClick={() => {        dispatch({          type: 'deleted',          id: task.id        });      }}>        Delete      </button>    </label>  );}"
                                            },
                                            "The state still “lives” in the top-level TaskApp component, managed with useReducer. But its tasks and dispatch are now available to every component below in the tree by importing and using these contexts."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Moving all wiring into a single file ",
                                "source": "react",
                                "url": "https://react.dev/learn/scaling-up-with-reducer-and-context/#moving-all-wiring-into-a-single-file",
                                "content": [
                                    "You don’t have to do this, but you could further declutter the components by moving both reducer and context into a single file. Currently, TasksContext.js contains only two context declarations:",
                                    {
                                        "code_example": "import { createContext } from 'react';export const TasksContext = createContext(null);export const TasksDispatchContext = createContext(null);"
                                    },
                                    "This file is about to get crowded! You’ll move the reducer into that same file. Then you’ll declare a new TasksProvider component in the same file. This component will tie all the pieces together:",
                                    "  1.It will manage the state with a reducer.",
                                    "  2.It will provide both contexts to components below.",
                                    "  3.It will take children as a prop so you can pass JSX to it.",
                                    {
                                        "code_example": "export function TasksProvider({ children }) {  const [tasks, dispatch] = useReducer(tasksReducer, initialTasks);  return (    <TasksContext.Provider value={tasks}>      <TasksDispatchContext.Provider value={dispatch}>        {children}      </TasksDispatchContext.Provider>    </TasksContext.Provider>  );}"
                                    },
                                    "This removes all the complexity and wiring from your TaskApp component:",
                                    {
                                        "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsimport AddTask from './AddTask.js';import TaskList from './TaskList.js';import { TasksProvider } from './TasksContext.js';export default function TaskApp() {  return (    <TasksProvider>      <h1>Day off in Kyoto</h1>      <AddTask />      <TaskList />    </TasksProvider>  );}"
                                    },
                                    "You can also export functions that use the context from TasksContext.js:",
                                    {
                                        "code_example": "export function useTasks() {  return useContext(TasksContext);}export function useTasksDispatch() {  return useContext(TasksDispatchContext);}"
                                    },
                                    "When a component needs to read context, it can do it through these functions:",
                                    {
                                        "code_example": "const tasks = useTasks();const dispatch = useTasksDispatch();"
                                    },
                                    "This doesn’t change the behavior in any way, but it lets you later split these contexts further or add some logic to these functions. Now all of the context and reducer wiring is in TasksContext.js. This keeps the components clean and uncluttered, focused on what they display rather than where they get the data:",
                                    {
                                        "code_sandbox": "TasksContext.jsAddTask.jsTaskList.jsTaskList.jsimport { useState } from 'react';import { useTasks, useTasksDispatch } from './TasksContext.js';export default function TaskList() {  const tasks = useTasks();  return (    <ul>      {tasks.map(task => (        <li key={task.id}>          <Task task={task} />        </li>      ))}    </ul>  );}function Task({ task }) {  const [isEditing, setIsEditing] = useState(false);  const dispatch = useTasksDispatch();  let taskContent;  if (isEditing) {    taskContent = (      <>        <input          value={task.text}          onChange={e => {            dispatch({              type: 'changed',              task: {                ...task,                text: e.target.value              }            });          }} />        <button onClick={() => setIsEditing(false)}>          Save        </button>      </>    );  } else {    taskContent = (      <>        {task.text}        <button onClick={() => setIsEditing(true)}>          Edit        </button>      </>    );  }  return (    <label>      <input        type=\"checkbox\"        checked={task.done}        onChange={e => {          dispatch({            type: 'changed',            task: {              ...task,              done: e.target.checked            }          });        }}      />      {taskContent}      <button onClick={() => {        dispatch({          type: 'deleted',          id: task.id        });      }}>        Delete      </button>    </label>  );}"
                                    },
                                    "You can think of TasksProvider as a part of the screen that knows how to deal with tasks, useTasks as a way to read them, and useTasksDispatch as a way to update them from any component below in the tree.",
                                    {
                                        "code_example": "useTasks"
                                    },
                                    "As your app grows, you may have many context-reducer pairs like this. This is a powerful way to scale your app and lift state up without too much work whenever you want to access the data deep in the tree.",
                                    "Recap\nYou can combine reducer with context to let any component read and update state above it.\nTo provide state and the dispatch function to components below:\n\nCreate two contexts (for state and for dispatch functions).\nProvide both contexts from the component that uses the reducer.\nUse either context from components that need to read them.\n\n\nYou can further declutter the components by moving all wiring into one file.\n\nYou can export a component like TasksProvider that provides context.\nYou can also export custom Hooks like useTasks and useTasksDispatch to read it.\n\n\nYou can have many context-reducer pairs like this in your app.\n"
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "Escape Hatches",
        "source": "react",
        "url": "https://react.dev/learn/escape-hatches",
        "sections": [
            "Some of your components may need to control and synchronize with systems outside of React. For example, you might need to focus an input using the browser API, play and pause a video player implemented without React, or connect and listen to messages from a remote server. In this chapter, you’ll learn the escape hatches that let you “step outside” React and connect to external systems. Most of your application logic and data flow should not rely on these features.",
            "  1.How to “remember” information without re-rendering",
            "  2.How to access DOM elements managed by React",
            "  3.How to synchronize components with external systems",
            "  4.How to remove unnecessary Effects from your components",
            "  5.How an Effect’s lifecycle is different from a component’s",
            "  6.How to prevent some values from re-triggering Effects",
            "  7.How to make your Effect re-run less often",
            "  8.How to share logic between components",
            "In this chapter\nHow to “remember” information without re-rendering\nHow to access DOM elements managed by React\nHow to synchronize components with external systems\nHow to remove unnecessary Effects from your components\nHow an Effect’s lifecycle is different from a component’s\nHow to prevent some values from re-triggering Effects\nHow to make your Effect re-run less often\nHow to share logic between components\n",
            {
                "subHeader": "Referencing values with refs ",
                "url": "https://react.dev/learn/escape-hatches/#referencing-values-with-refs",
                "sections": [
                    "When you want a component to “remember” some information, but you don’t want that information to trigger new renders, you can use a ref:",
                    {
                        "code_example": "const ref = useRef(0);"
                    },
                    "Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not! You can access the current value of that ref through the ref.current property.",
                    {
                        "code_sandbox": "import { useRef } from 'react';export default function Counter() {  let ref = useRef(0);  function handleClick() {    ref.current = ref.current + 1;    alert('You clicked ' + ref.current + ' times!');  }  return (    <button onClick={handleClick}>      Click me!    </button>  );}"
                    },
                    "A ref is like a secret pocket of your component that React doesn’t track. For example, you can use refs to store timeout IDs, DOM elements, and other objects that don’t impact the component’s rendering output.",
                    "Ready to learn this topic?Read Referencing Values with Refs to learn how to use refs to remember information.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Manipulating the DOM with refs ",
                "url": "https://react.dev/learn/escape-hatches/#manipulating-the-dom-with-refs",
                "sections": [
                    "React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node. For example, clicking the button will focus the input using a ref:",
                    {
                        "code_sandbox": "import { useRef } from 'react';export default function Form() {  const inputRef = useRef(null);  function handleClick() {    inputRef.current.focus();  }  return (    <>      <input ref={inputRef} />      <button onClick={handleClick}>        Focus the input      </button>    </>  );}"
                    },
                    "Ready to learn this topic?Read Manipulating the DOM with Refs to learn how to access DOM elements managed by React.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Synchronizing with Effects ",
                "url": "https://react.dev/learn/escape-hatches/#synchronizing-with-effects",
                "sections": [
                    "Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Unlike event handlers, which let you handle particular events, Effects let you run some code after rendering. Use them to synchronize your component with a system outside of React.",
                    "Press Play/Pause a few times and see how the video player stays synchronized to the isPlaying prop value:",
                    {
                        "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  }, [isPlaying]);  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  return (    <>      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                    },
                    "Many Effects also “clean up” after themselves. For example, an Effect that sets up a connection to a chat server should return a cleanup function that tells React how to disconnect your component from that server:",
                    {
                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';export default function ChatRoom() {  useEffect(() => {    const connection = createConnection();    connection.connect();    return () => connection.disconnect();  }, []);  return <h1>Welcome to the chat!</h1>;}"
                    },
                    "In development, React will immediately run and clean up your Effect one extra time. This is why you see \"✅ Connecting...\" printed twice. This ensures that you don’t forget to implement the cleanup function.",
                    "Ready to learn this topic?Read Synchronizing with Effects to learn how to synchronize components with external systems.Read More",
                    ""
                ]
            },
            {
                "subHeader": "You Might Not Need An Effect ",
                "url": "https://react.dev/learn/escape-hatches/#you-might-not-need-an-effect",
                "sections": [
                    "Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.",
                    "There are two common cases in which you don’t need Effects:",
                    "  1.You don’t need Effects to transform data for rendering.",
                    "  2.You don’t need Effects to handle user events.",
                    "For example, you don’t need an Effect to adjust some state based on other state:",
                    {
                        "code_example": "function Form() {  const [firstName, setFirstName] = useState('Taylor');  const [lastName, setLastName] = useState('Swift');  // 🔴 Avoid: redundant state and unnecessary Effect  const [fullName, setFullName] = useState('');  useEffect(() => {    setFullName(firstName + ' ' + lastName);  }, [firstName, lastName]);  // ...}"
                    },
                    "Instead, calculate as much as you can while rendering:",
                    {
                        "code_example": "function Form() {  const [firstName, setFirstName] = useState('Taylor');  const [lastName, setLastName] = useState('Swift');  // ✅ Good: calculated during rendering  const fullName = firstName + ' ' + lastName;  // ...}"
                    },
                    "However, you do need Effects to synchronize with external systems.",
                    "Ready to learn this topic?Read You Might Not Need an Effect to learn how to remove unnecessary Effects.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Lifecycle of reactive effects ",
                "url": "https://react.dev/learn/escape-hatches/#lifecycle-of-reactive-effects",
                "sections": [
                    "Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time.",
                    "This Effect depends on the value of the roomId prop. Props are reactive values, which means they can change on a re-render. Notice that the Effect re-synchronizes (and re-connects to the server) if roomId changes:",
                    {
                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                    },
                    "React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. If you forget to specify roomId in the list of dependencies in the above example, the linter will find that bug automatically.",
                    "Ready to learn this topic?Read Lifecycle of Reactive Events to learn how an Effect’s lifecycle is different from a component’s.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Separating events from Effects ",
                "url": "https://react.dev/learn/escape-hatches/#separating-events-from-effects",
                "sections": [
                    "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                    "Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if any of the values they read, like props or state, are different than during last render. Sometimes, you want a mix of both behaviors: an Effect that re-runs in response to some values but not others.",
                    "All code inside Effects is reactive. It will run again if some reactive value it reads has changed due to a re-render. For example, this Effect will re-connect to the chat if either roomId or theme have changed:",
                    {
                        "code_sandbox": "chat.jsnotifications.jsimport { useState, useEffect } from 'react';import { createConnection, sendMessage } from './chat.js';import { showNotification } from './notifications.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId, theme }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      showNotification('Connected!', theme);    });    connection.connect();    return () => connection.disconnect();  }, [roomId, theme]);  return <h1>Welcome to the {roomId} room!</h1>}export default function App() {  const [roomId, setRoomId] = useState('general');  const [isDark, setIsDark] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <label>        <input          type=\"checkbox\"          checked={isDark}          onChange={e => setIsDark(e.target.checked)}        />        Use dark theme      </label>      <hr />      <ChatRoom        roomId={roomId}        theme={isDark ? 'dark' : 'light'}       />    </>  );}"
                    },
                    "This is not ideal. You want to re-connect to the chat only if the roomId has changed. Switching the theme shouldn’t re-connect to the chat! Move the code reading theme out of your Effect into an Effect Event:",
                    {
                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { experimental_useEffectEvent as useEffectEvent } from 'react';import { createConnection, sendMessage } from './chat.js';import { showNotification } from './notifications.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId, theme }) {  const onConnected = useEffectEvent(() => {    showNotification('Connected!', theme);  });  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      onConnected();    });    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>}export default function App() {  const [roomId, setRoomId] = useState('general');  const [isDark, setIsDark] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <label>        <input          type=\"checkbox\"          checked={isDark}          onChange={e => setIsDark(e.target.checked)}        />        Use dark theme      </label>      <hr />      <ChatRoom        roomId={roomId}        theme={isDark ? 'dark' : 'light'}       />    </>  );}"
                    },
                    "Code inside Effect Events isn’t reactive, so changing the theme no longer makes your Effect re-connect.",
                    "Ready to learn this topic?Read Separating Events from Effects to learn how to prevent some values from re-triggering Effects.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Removing Effect dependencies ",
                "url": "https://react.dev/learn/escape-hatches/#removing-effect-dependencies",
                "sections": [
                    "When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. The way you remove them depends on the case.",
                    "For example, this Effect depends on the options object which gets re-created every time you edit the input:",
                    {
                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  const options = {    serverUrl: serverUrl,    roomId: roomId  };  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [options]);  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                    },
                    "You don’t want the chat to re-connect every time you start typing a message in that chat. To fix this problem, move creation of the options object inside the Effect so that the Effect only depends on the roomId string:",
                    {
                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                    },
                    "Notice that you didn’t start by editing the dependency list to remove the options dependency. That would be wrong. Instead, you changed the surrounding code so that the dependency became unnecessary. Think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t intentionally choose what to put on that list. The list describes your code. To change the dependency list, change the code.",
                    "Ready to learn this topic?Read Removing Effect Dependencies to learn how to make your Effect re-run less often.Read More",
                    ""
                ]
            },
            {
                "subHeader": "Reusing logic with custom Hooks ",
                "url": "https://react.dev/learn/escape-hatches/#reusing-logic-with-custom-hooks",
                "sections": [
                    "React comes with built-in Hooks like useState, useContext, and useEffect. Sometimes, you’ll wish that there was a Hook for some more specific purpose: for example, to fetch data, to keep track of whether the user is online, or to connect to a chat room. To do this, you can create your own Hooks for your application’s needs.",
                    "In this example, the usePointerPosition custom Hook tracks the cursor position, while useDelayedValue custom Hook returns a value that’s “lagging behind” the value you passed by a certain number of milliseconds. Move the cursor over the sandbox preview area to see a moving trail of dots following the cursor:",
                    {
                        "code_sandbox": "usePointerPosition.jsuseDelayedValue.jsimport { usePointerPosition } from './usePointerPosition.js';import { useDelayedValue } from './useDelayedValue.js';export default function Canvas() {  const pos1 = usePointerPosition();  const pos2 = useDelayedValue(pos1, 100);  const pos3 = useDelayedValue(pos2, 200);  const pos4 = useDelayedValue(pos3, 100);  const pos5 = useDelayedValue(pos4, 50);  return (    <>      <Dot position={pos1} opacity={1} />      <Dot position={pos2} opacity={0.8} />      <Dot position={pos3} opacity={0.6} />      <Dot position={pos4} opacity={0.4} />      <Dot position={pos5} opacity={0.2} />    </>  );}function Dot({ position, opacity }) {  return (    <div style={{      position: 'absolute',      backgroundColor: 'pink',      borderRadius: '50%',      opacity,      transform: `translate(${position.x}px, ${position.y}px)`,      pointerEvents: 'none',      left: -20,      top: -20,      width: 40,      height: 40,    }} />  );}"
                    },
                    "You can create custom Hooks, compose them together, pass data between them, and reuse them between components. As your app grows, you will write fewer Effects by hand because you’ll be able to reuse custom Hooks you already wrote. There are also many excellent custom Hooks maintained by the React community.",
                    "Ready to learn this topic?Read Reusing Logic with Custom Hooks to learn how to share logic between components.Read More",
                    ""
                ]
            },
            {
                "subHeader": "What’s next? ",
                "url": "https://react.dev/learn/escape-hatches/#whats-next",
                "sections": [
                    "Head over to Referencing Values with Refs to start reading this chapter page by page!"
                ]
            },
            {
                "subTopics": [
                    {
                        "headers": "Referencing Values with Refs",
                        "url": "https://react.dev/learn/referencing-values-with-refs",
                        "content": [
                            "When you want a component to “remember” some information, but you don’t want that information to trigger new renders, you can use a ref.",
                            "  1.How to add a ref to your component",
                            "  2.How to update a ref’s value",
                            "  3.How refs are different from state",
                            "  4.How to use refs safely",
                            "You will learn\nHow to add a ref to your component\nHow to update a ref’s value\nHow refs are different from state\nHow to use refs safely\n",
                            {
                                "sub_header": "Adding a ref to your component ",
                                "source": "react",
                                "url": "https://react.dev/learn/referencing-values-with-refs/#adding-a-ref-to-your-component",
                                "content": [
                                    "You can add a ref to your component by importing the useRef Hook from React:",
                                    {
                                        "code_example": "import { useRef } from 'react';"
                                    },
                                    "Inside your component, call the useRef Hook and pass the initial value that you want to reference as the only argument. For example, here is a ref to the value 0:",
                                    {
                                        "code_example": "const ref = useRef(0);"
                                    },
                                    "useRef returns an object like this:",
                                    {
                                        "code_example": "{   current: 0 // The value you passed to useRef}"
                                    },
                                    "",
                                    "Illustrated by Rachel Lee Nabors",
                                    "You can access the current value of that ref through the ref.current property. This value is intentionally mutable, meaning you can both read and write to it. It’s like a secret pocket of your component that React doesn’t track. (This is what makes it an “escape hatch” from React’s one-way data flow—more on that below!)",
                                    "Here, a button will increment ref.current on every click:",
                                    {
                                        "code_sandbox": "import { useRef } from 'react';export default function Counter() {  let ref = useRef(0);  function handleClick() {    ref.current = ref.current + 1;    alert('You clicked ' + ref.current + ' times!');  }  return (    <button onClick={handleClick}>      Click me!    </button>  );}"
                                    },
                                    "The ref points to a number, but, like state, you could point to anything: a string, an object, or even a function. Unlike state, ref is a plain JavaScript object with the current property that you can read and modify.",
                                    "Note that the component doesn’t re-render with every increment. Like state, refs are retained by React between re-renders. However, setting state re-renders a component. Changing a ref does not!"
                                ]
                            },
                            {
                                "sub_header": "Example: building a stopwatch ",
                                "source": "react",
                                "url": "https://react.dev/learn/referencing-values-with-refs/#example-building-a-stopwatch",
                                "content": [
                                    "You can combine refs and state in a single component. For example, let’s make a stopwatch that the user can start or stop by pressing a button. In order to display how much time has passed since the user pressed “Start”, you will need to keep track of when the Start button was pressed and what the current time is. This information is used for rendering, so you’ll keep it in state:",
                                    {
                                        "code_example": "const [startTime, setStartTime] = useState(null);const [now, setNow] = useState(null);"
                                    },
                                    "When the user presses “Start”, you’ll use setInterval in order to update the time every 10 milliseconds:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Stopwatch() {  const [startTime, setStartTime] = useState(null);  const [now, setNow] = useState(null);  function handleStart() {    // Start counting.    setStartTime(Date.now());    setNow(Date.now());    setInterval(() => {      // Update the current time every 10ms.      setNow(Date.now());    }, 10);  }  let secondsPassed = 0;  if (startTime != null && now != null) {    secondsPassed = (now - startTime) / 1000;  }  return (    <>      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>      <button onClick={handleStart}>        Start      </button>    </>  );}"
                                    },
                                    "When the “Stop” button is pressed, you need to cancel the existing interval so that it stops updating the now state variable. You can do this by calling clearInterval, but you need to give it the interval ID that was previously returned by the setInterval call when the user pressed Start. You need to keep the interval ID somewhere. Since the interval ID is not used for rendering, you can keep it in a ref:",
                                    {
                                        "code_sandbox": "import { useState, useRef } from 'react';export default function Stopwatch() {  const [startTime, setStartTime] = useState(null);  const [now, setNow] = useState(null);  const intervalRef = useRef(null);  function handleStart() {    setStartTime(Date.now());    setNow(Date.now());    clearInterval(intervalRef.current);    intervalRef.current = setInterval(() => {      setNow(Date.now());    }, 10);  }  function handleStop() {    clearInterval(intervalRef.current);  }  let secondsPassed = 0;  if (startTime != null && now != null) {    secondsPassed = (now - startTime) / 1000;  }  return (    <>      <h1>Time passed: {secondsPassed.toFixed(3)}</h1>      <button onClick={handleStart}>        Start      </button>      <button onClick={handleStop}>        Stop      </button>    </>  );}"
                                    },
                                    "When a piece of information is used for rendering, keep it in state. When a piece of information is only needed by event handlers and changing it doesn’t require a re-render, using a ref may be more efficient."
                                ]
                            },
                            {
                                "sub_header": "Differences between refs and state ",
                                "source": "react",
                                "url": "https://react.dev/learn/referencing-values-with-refs/#differences-between-refs-and-state",
                                "content": [
                                    "Perhaps you’re thinking refs seem less “strict” than state—you can mutate them instead of always having to use a state setting function, for instance. But in most cases, you’ll want to use state. Refs are an “escape hatch” you won’t need often. Here’s how state and refs compare:",
                                    "refsstateuseRef(initialValue) returns { current: initialValue }useState(initialValue) returns the current value of a state variable and a state setter function ( [value, setValue])Doesn’t trigger re-render when you change it.Triggers re-render when you change it.Mutable—you can modify and update current’s value outside of the rendering process.”Immutable”—you must use the state setting function to modify state variables to queue a re-render.You shouldn’t read (or write) the current value during rendering.You can read state at any time. However, each render has its own snapshot of state which does not change.",
                                    "Here is a counter button that’s implemented with state:",
                                    {
                                        "code_sandbox": "import { useState } from 'react';export default function Counter() {  const [count, setCount] = useState(0);  function handleClick() {    setCount(count + 1);  }  return (    <button onClick={handleClick}>      You clicked {count} times    </button>  );}"
                                    },
                                    "Because the count value is displayed, it makes sense to use a state value for it. When the counter’s value is set with setCount(), React re-renders the component and the screen updates to reflect the new count.",
                                    "If you tried to implement this with a ref, React would never re-render the component, so you’d never see the count change! See how clicking this button does not update its text:",
                                    {
                                        "code_sandbox": "import { useRef } from 'react';export default function Counter() {  let countRef = useRef(0);  function handleClick() {    // This doesn't re-render the component!    countRef.current = countRef.current + 1;  }  return (    <button onClick={handleClick}>      You clicked {countRef.current} times    </button>  );}"
                                    },
                                    "This is why reading ref.current during render leads to unreliable code. If you need that, use state instead.",
                                    "Deep DiveHow does useRef work inside? Show DetailsAlthough both useState and useRef are provided by React, in principle useRef could be implemented on top of useState. You can imagine that inside of React, useRef is implemented like this:// Inside of Reactfunction useRef(initialValue) {  const [ref, unused] = useState({ current: initialValue });  return ref;}During the first render, useRef returns { current: initialValue }. This object is stored by React, so during the next render the same object will be returned. Note how the state setter is unused in this example. It is unnecessary because useRef always needs to return the same object!React provides a built-in version of useRef because it is common enough in practice. But you can think of it as a regular state variable without a setter. If you’re familiar with object-oriented programming, refs might remind you of instance fields—but instead of this.something you write somethingRef.current."
                                ]
                            },
                            {
                                "sub_header": "When to use refs ",
                                "source": "react",
                                "url": "https://react.dev/learn/referencing-values-with-refs/#when-to-use-refs",
                                "content": [
                                    "Typically, you will use a ref when your component needs to “step outside” React and communicate with external APIs—often a browser API that won’t impact the appearance of the component. Here are a few of these rare situations:",
                                    "  1.Storing timeout IDs",
                                    "  2.Storing and manipulating DOM elements, which we cover on the next page",
                                    "  3.Storing other objects that aren’t necessary to calculate the JSX.",
                                    "If your component needs to store some value, but it doesn’t impact the rendering logic, choose refs."
                                ]
                            },
                            {
                                "sub_header": "Best practices for refs ",
                                "source": "react",
                                "url": "https://react.dev/learn/referencing-values-with-refs/#best-practices-for-refs",
                                "content": [
                                    "Following these principles will make your components more predictable:",
                                    "  1.Treat refs as an escape hatch. Refs are useful when you work with external systems or browser APIs. If much of your application logic and data flow relies on refs, you might want to rethink your approach.",
                                    "  2.Don’t read or write ref.current during rendering. If some information is needed during rendering, use state instead. Since React doesn’t know when ref.current changes, even reading it while rendering makes your component’s behavior difficult to predict. (The only exception to this is code like if (!ref.current) ref.current = new Thing() which only sets the ref once during the first render.)",
                                    "Limitations of React state don’t apply to refs. For example, state acts like a snapshot for every render and doesn’t update synchronously. But when you mutate the current value of a ref, it changes immediately:",
                                    {
                                        "code_example": "ref.current = 5;console.log(ref.current); // 5"
                                    },
                                    "This is because the ref itself is a regular JavaScript object, and so it behaves like one.",
                                    "You also don’t need to worry about avoiding mutation when you work with a ref. As long as the object you’re mutating isn’t used for rendering, React doesn’t care what you do with the ref or its contents."
                                ]
                            },
                            {
                                "sub_header": "Refs and the DOM ",
                                "source": "react",
                                "url": "https://react.dev/learn/referencing-values-with-refs/#refs-and-the-dom",
                                "content": [
                                    "You can point a ref to any value. However, the most common use case for a ref is to access a DOM element. For example, this is handy if you want to focus an input programmatically. When you pass a ref to a ref attribute in JSX, like <div ref={myRef}>, React will put the corresponding DOM element into myRef.current. Once the element is removed from the DOM, React will update myRef.current to be null. You can read more about this in Manipulating the DOM with Refs.",
                                    "Recap\nRefs are an escape hatch to hold onto values that aren’t used for rendering. You won’t need them often.\nA ref is a plain JavaScript object with a single property called current, which you can read or set.\nYou can ask React to give you a ref by calling the useRef Hook.\nLike state, refs let you retain information between re-renders of a component.\nUnlike state, setting the ref’s current value does not trigger a re-render.\nDon’t read or write ref.current during rendering. This makes your component hard to predict.\n",
                                    {
                                        "code_example": "clearTimeout"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Manipulating the DOM with Refs",
                        "url": "https://react.dev/learn/manipulating-the-dom-with-refs",
                        "content": [
                            "React automatically updates the DOM to match your render output, so your components won’t often need to manipulate it. However, sometimes you might need access to the DOM elements managed by React—for example, to focus a node, scroll to it, or measure its size and position. There is no built-in way to do those things in React, so you will need a ref to the DOM node.",
                            {
                                "code_example": "ref"
                            },
                            "  1.How to access a DOM node managed by React with the ref attribute",
                            "  2.How the ref JSX attribute relates to the useRef Hook",
                            "  3.How to access another component’s DOM node",
                            "  4.In which cases it’s safe to modify the DOM managed by React",
                            {
                                "sub_header": "Getting a ref to the node ",
                                "source": "react",
                                "url": "https://react.dev/learn/manipulating-the-dom-with-refs/#getting-a-ref-to-the-node",
                                "content": [
                                    "To access a DOM node managed by React, first, import the useRef Hook:",
                                    {
                                        "code_example": "import { useRef } from 'react';"
                                    },
                                    "Then, use it to declare a ref inside your component:",
                                    {
                                        "code_example": "const myRef = useRef(null);"
                                    },
                                    "Finally, pass your ref as the ref attribute to the JSX tag for which you want to get the DOM node:",
                                    {
                                        "code_example": "<div ref={myRef}>"
                                    },
                                    "The useRef Hook returns an object with a single property called current. Initially, myRef.current will be null. When React creates a DOM node for this <div>, React will put a reference to this node into myRef.current. You can then access this DOM node from your event handlers and use the built-in browser APIs defined on it.",
                                    {
                                        "code_example": "// You can use any browser APIs, for example:myRef.current.scrollIntoView();"
                                    },
                                    {
                                        "sub_header": "Example: Focusing a text input ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/manipulating-the-dom-with-refs/#example-focusing-a-text-input",
                                        "content": [
                                            "In this example, clicking the button will focus the input:",
                                            {
                                                "code_sandbox": "import { useRef } from 'react';export default function Form() {  const inputRef = useRef(null);  function handleClick() {    inputRef.current.focus();  }  return (    <>      <input ref={inputRef} />      <button onClick={handleClick}>        Focus the input      </button>    </>  );}"
                                            },
                                            "To implement this:",
                                            "  1.Declare inputRef with the useRef Hook.",
                                            "  2.Pass it as <input ref={inputRef}>. This tells React to put this <input>’s DOM node into inputRef.current.",
                                            "  3.In the handleClick function, read the input DOM node from inputRef.current and call focus() on it with inputRef.current.focus().",
                                            "  4.Pass the handleClick event handler to <button> with onClick.",
                                            "While DOM manipulation is the most common use case for refs, the useRef Hook can be used for storing other things outside React, like timer IDs. Similarly to state, refs remain between renders. Refs are like state variables that don’t trigger re-renders when you set them. Read about refs in Referencing Values with Refs."
                                        ]
                                    },
                                    {
                                        "sub_header": "Example: Scrolling to an element ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/manipulating-the-dom-with-refs/#example-scrolling-to-an-element",
                                        "content": [
                                            "You can have more than a single ref in a component. In this example, there is a carousel of three images. Each button centers an image by calling the browser scrollIntoView() method on the corresponding DOM node:",
                                            {
                                                "code_sandbox": "import { useRef } from 'react';export default function CatFriends() {  const firstCatRef = useRef(null);  const secondCatRef = useRef(null);  const thirdCatRef = useRef(null);  function handleScrollToFirstCat() {    firstCatRef.current.scrollIntoView({      behavior: 'smooth',      block: 'nearest',      inline: 'center'    });  }  function handleScrollToSecondCat() {    secondCatRef.current.scrollIntoView({      behavior: 'smooth',      block: 'nearest',      inline: 'center'    });  }  function handleScrollToThirdCat() {    thirdCatRef.current.scrollIntoView({      behavior: 'smooth',      block: 'nearest',      inline: 'center'    });  }  return (    <>      <nav>        <button onClick={handleScrollToFirstCat}>          Neo        </button>        <button onClick={handleScrollToSecondCat}>          Millie        </button>        <button onClick={handleScrollToThirdCat}>          Bella        </button>      </nav>      <div>        <ul>          <li>            <img              src=\"https://placecats.com/neo/300/200\"              alt=\"Neo\"              ref={firstCatRef}            />          </li>          <li>            <img              src=\"https://placecats.com/millie/200/200\"              alt=\"Millie\"              ref={secondCatRef}            />          </li>          <li>            <img              src=\"https://placecats.com/bella/199/200\"              alt=\"Bella\"              ref={thirdCatRef}            />          </li>        </ul>      </div>    </>  );}"
                                            },
                                            "Deep DiveHow to manage a list of refs using a ref callback Show DetailsIn the above examples, there is a predefined number of refs. However, sometimes you might need a ref to each item in the list, and you don’t know how many you will have. Something like this wouldn’t work:<ul>  {items.map((item) => {    // Doesn't work!    const ref = useRef(null);    return <li ref={ref} />;  })}</ul>This is because Hooks must only be called at the top-level of your component. You can’t call useRef in a loop, in a condition, or inside a map() call.One possible way around this is to get a single ref to their parent element, and then use DOM manipulation methods like querySelectorAll to “find” the individual child nodes from it. However, this is brittle and can break if your DOM structure changes.Another solution is to pass a function to the ref attribute. This is called a ref callback. React will call your ref callback with the DOM node when it’s time to set the ref, and with null when it’s time to clear it. This lets you maintain your own array or a Map, and access any ref by its index or some kind of ID.This example shows how you can use this approach to scroll to an arbitrary node in a long list:App.jsApp.js ResetForkimport { useRef, useState } from \"react\";\n\nexport default function CatFriends() {\n  const itemsRef = useRef(null);\n  const [catList, setCatList] = useState(setupCatList);\n\n  function scrollToCat(cat) {\n    const map = getMap();\n    const node = map.get(cat);\n    node.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"nearest\",\n      inline: \"center\",\n    });\n  }\n\n  function getMap() {\n    if (!itemsRef.current) {\n      // Initialize the Map on first usage.\n      itemsRef.current = new Map();\n    }\n    return itemsRef.current;\n  }\n\n  return (\n    <>\n      <nav>\n        <button onClick={() => scrollToCat(catList[0])}>Neo</button>\n        <button onClick={() => scrollToCat(catList[5])}>Millie</button>\n        <button onClick={() => scrollToCat(catList[9])}>Bella</button>\n      </nav>\n      <div>\n        <ul>\n          {catList.map((cat) => (\n            <li\n              key={cat}\n              ref={(node) => {\n                const map = getMap();\n                if (node) {\n                  map.set(cat, node);\n                } else {\n                  map.delete(cat);\n                }\n              }}\n            >\n              <img src={cat} />\n            </li>\n          ))}\n        </ul>\n      </div>\n    </>\n  );\n}\n\nfunction setupCatList() {\n  const catList = [];\n  for (let i = 0; i < 10; i++) {\n    catList.push(\"https://loremflickr.com/320/240/cat?lock=\" + i);\n  }\n\n  return catList;\n}\n\nShow moreIn this example, itemsRef doesn’t hold a single DOM node. Instead, it holds a Map from item ID to a DOM node. (Refs can hold any values!) The ref callback on every list item takes care to update the Map:<li  key={cat.id}  ref={node => {    const map = getMap();    if (node) {      // Add to the Map      map.set(cat, node);    } else {      // Remove from the Map      map.delete(cat);    }  }}>This lets you read individual DOM nodes from the Map later.CanaryThis example shows another approach for managing the Map with a ref callback cleanup function.<li  key={cat.id}  ref={node => {    const map = getMap();    // Add to the Map    map.set(cat, node);    return () => {      // Remove from the Map      map.delete(cat);    };  }}>"
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Accessing another component’s DOM nodes ",
                                "source": "react",
                                "url": "https://react.dev/learn/manipulating-the-dom-with-refs/#accessing-another-components-dom-nodes",
                                "content": [
                                    "When you put a ref on a built-in component that outputs a browser element like <input />, React will set that ref’s current property to the corresponding DOM node (such as the actual <input /> in the browser).",
                                    "However, if you try to put a ref on your own component, like <MyInput />, by default you will get null. Here is an example demonstrating it. Notice how clicking the button does not focus the input:",
                                    {
                                        "code_sandbox": "import { useRef } from 'react';function MyInput(props) {  return <input {...props} />;}export default function MyForm() {  const inputRef = useRef(null);  function handleClick() {    inputRef.current.focus();  }  return (    <>      <MyInput ref={inputRef} />      <button onClick={handleClick}>        Focus the input      </button>    </>  );}"
                                    },
                                    "To help you notice the issue, React also prints an error to the console:",
                                    "ConsoleWarning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?",
                                    "This happens because by default React does not let a component access the DOM nodes of other components. Not even for its own children! This is intentional. Refs are an escape hatch that should be used sparingly. Manually manipulating another component’s DOM nodes makes your code even more fragile.",
                                    "Instead, components that want to expose their DOM nodes have to opt in to that behavior. A component can specify that it “forwards” its ref to one of its children. Here’s how MyInput can use the forwardRef API:",
                                    {
                                        "code_example": "const MyInput = forwardRef((props, ref) => {  return <input {...props} ref={ref} />;});"
                                    },
                                    "This is how it works:",
                                    "  1.<MyInput ref={inputRef} /> tells React to put the corresponding DOM node into inputRef.current. However, it’s up to the MyInput component to opt into that—by default, it doesn’t.",
                                    "  2.The MyInput component is declared using forwardRef. This opts it into receiving the inputRef from above as the second ref argument which is declared after props.",
                                    "  3.MyInput itself passes the ref it received to the <input> inside of it.",
                                    "Now clicking the button to focus the input works:",
                                    {
                                        "code_sandbox": "import { forwardRef, useRef } from 'react';const MyInput = forwardRef((props, ref) => {  return <input {...props} ref={ref} />;});export default function Form() {  const inputRef = useRef(null);  function handleClick() {    inputRef.current.focus();  }  return (    <>      <MyInput ref={inputRef} />      <button onClick={handleClick}>        Focus the input      </button>    </>  );}"
                                    },
                                    "In design systems, it is a common pattern for low-level components like buttons, inputs, and so on, to forward their refs to their DOM nodes. On the other hand, high-level components like forms, lists, or page sections usually won’t expose their DOM nodes to avoid accidental dependencies on the DOM structure.",
                                    "Deep DiveExposing a subset of the API with an imperative handle Show DetailsIn the above example, MyInput exposes the original DOM input element. This lets the parent component call focus() on it. However, this also lets the parent component do something else—for example, change its CSS styles. In uncommon cases, you may want to restrict the exposed functionality. You can do that with useImperativeHandle:App.jsApp.js ResetForkimport {\n  forwardRef, \n  useRef, \n  useImperativeHandle\n} from 'react';\n\nconst MyInput = forwardRef((props, ref) => {\n  const realInputRef = useRef(null);\n  useImperativeHandle(ref, () => ({\n    // Only expose focus and nothing else\n    focus() {\n      realInputRef.current.focus();\n    },\n  }));\n  return <input {...props} ref={realInputRef} />;\n});\n\nexport default function Form() {\n  const inputRef = useRef(null);\n\n  function handleClick() {\n    inputRef.current.focus();\n  }\n\n  return (\n    <>\n      <MyInput ref={inputRef} />\n      <button onClick={handleClick}>\n        Focus the input\n      </button>\n    </>\n  );\n}\n\nShow moreHere, realInputRef inside MyInput holds the actual input DOM node. However, useImperativeHandle instructs React to provide your own special object as the value of a ref to the parent component. So inputRef.current inside the Form component will only have the focus method. In this case, the ref “handle” is not the DOM node, but the custom object you create inside useImperativeHandle call."
                                ]
                            },
                            {
                                "sub_header": "When React attaches the refs ",
                                "source": "react",
                                "url": "https://react.dev/learn/manipulating-the-dom-with-refs/#when-react-attaches-the-refs",
                                "content": [
                                    "In React, every update is split in two phases:",
                                    "  1.During render, React calls your components to figure out what should be on the screen.",
                                    "  2.During commit, React applies changes to the DOM.",
                                    "In general, you don’t want to access refs during rendering. That goes for refs holding DOM nodes as well. During the first render, the DOM nodes have not yet been created, so ref.current will be null. And during the rendering of updates, the DOM nodes haven’t been updated yet. So it’s too early to read them.",
                                    "React sets ref.current during the commit. Before updating the DOM, React sets the affected ref.current values to null. After updating the DOM, React immediately sets them to the corresponding DOM nodes.",
                                    "Usually, you will access refs from event handlers. If you want to do something with a ref, but there is no particular event to do it in, you might need an Effect. We will discuss Effects on the next pages.",
                                    "Deep DiveFlushing state updates synchronously with flushSync Show DetailsConsider code like this, which adds a new todo and scrolls the screen down to the last child of the list. Notice how, for some reason, it always scrolls to the todo that was just before the last added one:App.jsApp.js ResetForkimport { useState, useRef } from 'react';\n\nexport default function TodoList() {\n  const listRef = useRef(null);\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState(\n    initialTodos\n  );\n\n  function handleAdd() {\n    const newTodo = { id: nextId++, text: text };\n    setText('');\n    setTodos([ ...todos, newTodo]);\n    listRef.current.lastChild.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest'\n    });\n  }\n\n  return (\n    <>\n      <button onClick={handleAdd}>\n        Add\n      </button>\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <ul ref={listRef}>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nlet nextId = 0;\nlet initialTodos = [];\nfor (let i = 0; i < 20; i++) {\n  initialTodos.push({\n    id: nextId++,\n    text: 'Todo #' + (i + 1)\n  });\n}\n\nShow moreThe issue is with these two lines:setTodos([ ...todos, newTodo]);listRef.current.lastChild.scrollIntoView();In React, state updates are queued. Usually, this is what you want. However, here it causes a problem because setTodos does not immediately update the DOM. So the time you scroll the list to its last element, the todo has not yet been added. This is why scrolling always “lags behind” by one item.To fix this issue, you can force React to update (“flush”) the DOM synchronously. To do this, import flushSync from react-dom and wrap the state update into a flushSync call:flushSync(() => {  setTodos([ ...todos, newTodo]);});listRef.current.lastChild.scrollIntoView();This will instruct React to update the DOM synchronously right after the code wrapped in flushSync executes. As a result, the last todo will already be in the DOM by the time you try to scroll to it:App.jsApp.js ResetForkimport { useState, useRef } from 'react';\nimport { flushSync } from 'react-dom';\n\nexport default function TodoList() {\n  const listRef = useRef(null);\n  const [text, setText] = useState('');\n  const [todos, setTodos] = useState(\n    initialTodos\n  );\n\n  function handleAdd() {\n    const newTodo = { id: nextId++, text: text };\n    flushSync(() => {\n      setText('');\n      setTodos([ ...todos, newTodo]);      \n    });\n    listRef.current.lastChild.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest'\n    });\n  }\n\n  return (\n    <>\n      <button onClick={handleAdd}>\n        Add\n      </button>\n      <input\n        value={text}\n        onChange={e => setText(e.target.value)}\n      />\n      <ul ref={listRef}>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n    </>\n  );\n}\n\nlet nextId = 0;\nlet initialTodos = [];\nfor (let i = 0; i < 20; i++) {\n  initialTodos.push({\n    id: nextId++,\n    text: 'Todo #' + (i + 1)\n  });\n}\n\nShow more"
                                ]
                            },
                            {
                                "sub_header": "Best practices for DOM manipulation with refs ",
                                "source": "react",
                                "url": "https://react.dev/learn/manipulating-the-dom-with-refs/#best-practices-for-dom-manipulation-with-refs",
                                "content": [
                                    "Refs are an escape hatch. You should only use them when you have to “step outside React”. Common examples of this include managing focus, scroll position, or calling browser APIs that React does not expose.",
                                    "If you stick to non-destructive actions like focusing and scrolling, you shouldn’t encounter any problems. However, if you try to modify the DOM manually, you can risk conflicting with the changes React is making.",
                                    "To illustrate this problem, this example includes a welcome message and two buttons. The first button toggles its presence using conditional rendering and state, as you would usually do in React. The second button uses the remove() DOM API to forcefully remove it from the DOM outside of React’s control.",
                                    "Try pressing “Toggle with setState” a few times. The message should disappear and appear again. Then press “Remove from the DOM”. This will forcefully remove it. Finally, press “Toggle with setState”:",
                                    {
                                        "code_sandbox": "import { useState, useRef } from 'react';export default function Counter() {  const [show, setShow] = useState(true);  const ref = useRef(null);  return (    <div>      <button        onClick={() => {          setShow(!show);        }}>        Toggle with setState      </button>      <button        onClick={() => {          ref.current.remove();        }}>        Remove from the DOM      </button>      {show && <p ref={ref}>Hello world</p>}    </div>  );}"
                                    },
                                    "After you’ve manually removed the DOM element, trying to use setState to show it again will lead to a crash. This is because you’ve changed the DOM, and React doesn’t know how to continue managing it correctly.",
                                    "Avoid changing DOM nodes managed by React. Modifying, adding children to, or removing children from elements that are managed by React can lead to inconsistent visual results or crashes like above.",
                                    "However, this doesn’t mean that you can’t do it at all. It requires caution. You can safely modify parts of the DOM that React has no reason to update. For example, if some <div> is always empty in the JSX, React won’t have a reason to touch its children list. Therefore, it is safe to manually add or remove elements there.",
                                    "Recap\nRefs are a generic concept, but most often you’ll use them to hold DOM elements.\nYou instruct React to put a DOM node into myRef.current by passing <div ref={myRef}>.\nUsually, you will use refs for non-destructive actions like focusing, scrolling, or measuring DOM elements.\nA component doesn’t expose its DOM nodes by default. You can opt into exposing a DOM node by using forwardRef and passing the second ref argument down to a specific node.\nAvoid changing DOM nodes managed by React.\nIf you do modify DOM nodes managed by React, modify parts that React has no reason to update.\n",
                                    {
                                        "code_example": "play()"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Synchronizing with Effects",
                        "url": "https://react.dev/learn/synchronizing-with-effects",
                        "content": [
                            "Some components need to synchronize with external systems. For example, you might want to control a non-React component based on the React state, set up a server connection, or send an analytics log when a component appears on the screen. Effects let you run some code after rendering so that you can synchronize your component with some system outside of React.",
                            "  1.What Effects are",
                            "  2.How Effects are different from events",
                            "  3.How to declare an Effect in your component",
                            "  4.How to skip re-running an Effect unnecessarily",
                            "  5.Why Effects run twice in development and how to fix them",
                            "You will learn\nWhat Effects are\nHow Effects are different from events\nHow to declare an Effect in your component\nHow to skip re-running an Effect unnecessarily\nWhy Effects run twice in development and how to fix them\n",
                            {
                                "sub_header": "What are Effects and how are they different from events? ",
                                "source": "react",
                                "url": "https://react.dev/learn/synchronizing-with-effects/#what-are-effects-and-how-are-they-different-from-events",
                                "content": [
                                    "Before getting to Effects, you need to be familiar with two types of logic inside React components:",
                                    "  1.\nRendering code (introduced in Describing the UI) lives at the top level of your component. This is where you take the props and state, transform them, and return the JSX you want to see on the screen. Rendering code must be pure. Like a math formula, it should only calculate the result, but not do anything else.\n",
                                    "  2.\nEvent handlers (introduced in Adding Interactivity) are nested functions inside your components that do things rather than just calculate them. An event handler might update an input field, submit an HTTP POST request to buy a product, or navigate the user to another screen. Event handlers contain “side effects” (they change the program’s state) caused by a specific user action (for example, a button click or typing).\n",
                                    "Sometimes this isn’t enough. Consider a ChatRoom component that must connect to the chat server whenever it’s visible on the screen. Connecting to a server is not a pure calculation (it’s a side effect) so it can’t happen during rendering. However, there is no single particular event like a click that causes ChatRoom to be displayed.",
                                    "Effects let you specify side effects that are caused by rendering itself, rather than by a particular event. Sending a message in the chat is an event because it is directly caused by the user clicking a specific button. However, setting up a server connection is an Effect because it should happen no matter which interaction caused the component to appear. Effects run at the end of a commit after the screen updates. This is a good time to synchronize the React components with some external system (like network or a third-party library).",
                                    "NoteHere and later in this text, capitalized “Effect” refers to the React-specific definition above, i.e. a side effect caused by rendering. To refer to the broader programming concept, we’ll say “side effect”."
                                ]
                            },
                            {
                                "sub_header": "You might not need an Effect ",
                                "source": "react",
                                "url": "https://react.dev/learn/synchronizing-with-effects/#you-might-not-need-an-effect",
                                "content": [
                                    "Don’t rush to add Effects to your components. Keep in mind that Effects are typically used to “step out” of your React code and synchronize with some external system. This includes browser APIs, third-party widgets, network, and so on. If your Effect only adjusts some state based on other state, you might not need an Effect."
                                ]
                            },
                            {
                                "sub_header": "How to write an Effect ",
                                "source": "react",
                                "url": "https://react.dev/learn/synchronizing-with-effects/#how-to-write-an-effect",
                                "content": [
                                    "To write an Effect, follow these three steps:",
                                    "  1.Declare an Effect. By default, your Effect will run after every commit.",
                                    "  2.Specify the Effect dependencies. Most Effects should only re-run when needed rather than after every render. For example, a fade-in animation should only trigger when a component appears. Connecting and disconnecting to a chat room should only happen when the component appears and disappears, or when the chat room changes. You will learn how to control this by specifying dependencies.",
                                    "  3.Add cleanup if needed. Some Effects need to specify how to stop, undo, or clean up whatever they were doing. For example, “connect” needs “disconnect”, “subscribe” needs “unsubscribe”, and “fetch” needs either “cancel” or “ignore”. You will learn how to do this by returning a cleanup function.",
                                    "Let’s look at each of these steps in detail.",
                                    {
                                        "sub_header": "Step 1: Declare an Effect ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#step-1-declare-an-effect",
                                        "content": [
                                            "To declare an Effect in your component, import the useEffect Hook from React:",
                                            {
                                                "code_example": "import { useEffect } from 'react';"
                                            },
                                            "Then, call it at the top level of your component and put some code inside your Effect:",
                                            {
                                                "code_example": "function MyComponent() {  useEffect(() => {    // Code here will run after *every* render  });  return <div />;}"
                                            },
                                            "Every time your component renders, React will update the screen and then run the code inside useEffect. In other words, useEffect “delays” a piece of code from running until that render is reflected on the screen.",
                                            "Let’s see how you can use an Effect to synchronize with an external system. Consider a <VideoPlayer> React component. It would be nice to control whether it’s playing or paused by passing an isPlaying prop to it:",
                                            {
                                                "code_example": "<VideoPlayer isPlaying={isPlaying} />;"
                                            },
                                            "Your custom VideoPlayer component renders the built-in browser <video> tag:",
                                            {
                                                "code_example": "function VideoPlayer({ src, isPlaying }) {  // TODO: do something with isPlaying  return <video src={src} />;}"
                                            },
                                            "However, the browser <video> tag does not have an isPlaying prop. The only way to control it is to manually call the play() and pause() methods on the DOM element. You need to synchronize the value of isPlaying prop, which tells whether the video should currently be playing, with calls like play() and pause().",
                                            "We’ll need to first get a ref to the <video> DOM node.",
                                            "You might be tempted to try to call play() or pause() during rendering, but that isn’t correct:",
                                            {
                                                "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  if (isPlaying) {    ref.current.play();  // Calling these while rendering isn't allowed.  } else {    ref.current.pause(); // Also, this crashes.  }  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  return (    <>      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                            },
                                            "The reason this code isn’t correct is that it tries to do something with the DOM node during rendering. In React, rendering should be a pure calculation of JSX and should not contain side effects like modifying the DOM.",
                                            "Moreover, when VideoPlayer is called for the first time, its DOM does not exist yet! There isn’t a DOM node yet to call play() or pause() on, because React doesn’t know what DOM to create until you return the JSX.",
                                            "The solution here is to wrap the side effect with useEffect to move it out of the rendering calculation:",
                                            {
                                                "code_example": "import { useEffect, useRef } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  });  return <video ref={ref} src={src} loop playsInline />;}"
                                            },
                                            "By wrapping the DOM update in an Effect, you let React update the screen first. Then your Effect runs.",
                                            "When your VideoPlayer component renders (either the first time or if it re-renders), a few things will happen. First, React will update the screen, ensuring the <video> tag is in the DOM with the right props. Then React will run your Effect. Finally, your Effect will call play() or pause() depending on the value of isPlaying.",
                                            "Press Play/Pause multiple times and see how the video player stays synchronized to the isPlaying value:",
                                            {
                                                "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  });  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  return (    <>      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                            },
                                            "In this example, the “external system” you synchronized to React state was the browser media API. You can use a similar approach to wrap legacy non-React code (like jQuery plugins) into declarative React components.",
                                            "Note that controlling a video player is much more complex in practice. Calling play() may fail, the user might play or pause using the built-in browser controls, and so on. This example is very simplified and incomplete.",
                                            {
                                                "code_example": "const [count, setCount] = useState(0);useEffect(() => {  setCount(count + 1);});"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 2: Specify the Effect dependencies ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#step-2-specify-the-effect-dependencies",
                                        "content": [
                                            "By default, Effects run after every render. Often, this is not what you want:",
                                            "  1.Sometimes, it’s slow. Synchronizing with an external system is not always instant, so you might want to skip doing it unless it’s necessary. For example, you don’t want to reconnect to the chat server on every keystroke.",
                                            "  2.Sometimes, it’s wrong. For example, you don’t want to trigger a component fade-in animation on every keystroke. The animation should only play once when the component appears for the first time.",
                                            "To demonstrate the issue, here is the previous example with a few console.log calls and a text input that updates the parent component’s state. Notice how typing causes the Effect to re-run:",
                                            {
                                                "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      console.log('Calling video.play()');      ref.current.play();    } else {      console.log('Calling video.pause()');      ref.current.pause();    }  });  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  const [text, setText] = useState('');  return (    <>      <input value={text} onChange={e => setText(e.target.value)} />      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                            },
                                            "You can tell React to skip unnecessarily re-running the Effect by specifying an array of dependencies as the second argument to the useEffect call. Start by adding an empty [] array to the above example on line 14:",
                                            {
                                                "code_example": "  useEffect(() => {    // ...  }, []);"
                                            },
                                            "You should see an error saying React Hook useEffect has a missing dependency: 'isPlaying':",
                                            {
                                                "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      console.log('Calling video.play()');      ref.current.play();    } else {      console.log('Calling video.pause()');      ref.current.pause();    }  }, []); // This causes an error  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  const [text, setText] = useState('');  return (    <>      <input value={text} onChange={e => setText(e.target.value)} />      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                            },
                                            "The problem is that the code inside of your Effect depends on the isPlaying prop to decide what to do, but this dependency was not explicitly declared. To fix this issue, add isPlaying to the dependency array:",
                                            {
                                                "code_example": "  useEffect(() => {    if (isPlaying) { // It's used here...      // ...    } else {      // ...    }  }, [isPlaying]); // ...so it must be declared here!"
                                            },
                                            "Now all dependencies are declared, so there is no error. Specifying [isPlaying] as the dependency array tells React that it should skip re-running your Effect if isPlaying is the same as it was during the previous render. With this change, typing into the input doesn’t cause the Effect to re-run, but pressing Play/Pause does:",
                                            {
                                                "code_sandbox": "import { useState, useRef, useEffect } from 'react';function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      console.log('Calling video.play()');      ref.current.play();    } else {      console.log('Calling video.pause()');      ref.current.pause();    }  }, [isPlaying]);  return <video ref={ref} src={src} loop playsInline />;}export default function App() {  const [isPlaying, setIsPlaying] = useState(false);  const [text, setText] = useState('');  return (    <>      <input value={text} onChange={e => setText(e.target.value)} />      <button onClick={() => setIsPlaying(!isPlaying)}>        {isPlaying ? 'Pause' : 'Play'}      </button>      <VideoPlayer        isPlaying={isPlaying}        src=\"https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4\"      />    </>  );}"
                                            },
                                            "The dependency array can contain multiple dependencies. React will only skip re-running the Effect if all of the dependencies you specify have exactly the same values as they had during the previous render. React compares the dependency values using the Object.is comparison. See the useEffect reference for details.",
                                            "Notice that you can’t “choose” your dependencies. You will get a lint error if the dependencies you specified don’t match what React expects based on the code inside your Effect. This helps catch many bugs in your code. If you don’t want some code to re-run, edit the Effect code itself to not “need” that dependency.",
                                            {
                                                "code_example": "[]"
                                            },
                                            "Deep DiveWhy was the ref omitted from the dependency array? Show DetailsThis Effect uses both ref and isPlaying, but only isPlaying is declared as a dependency:function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  }, [isPlaying]);This is because the ref object has a stable identity: React guarantees you’ll always get the same object from the same useRef call on every render. It never changes, so it will never by itself cause the Effect to re-run. Therefore, it does not matter whether you include it or not. Including it is fine too:function VideoPlayer({ src, isPlaying }) {  const ref = useRef(null);  useEffect(() => {    if (isPlaying) {      ref.current.play();    } else {      ref.current.pause();    }  }, [isPlaying, ref]);The set functions returned by useState also have stable identity, so you will often see them omitted from the dependencies too. If the linter lets you omit a dependency without errors, it is safe to do.Omitting always-stable dependencies only works when the linter can “see” that the object is stable. For example, if ref was passed from a parent component, you would have to specify it in the dependency array. However, this is good because you can’t know whether the parent component always passes the same ref, or passes one of several refs conditionally. So your Effect would depend on which ref is passed."
                                        ]
                                    },
                                    {
                                        "sub_header": "Step 3: Add cleanup if needed ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#step-3-add-cleanup-if-needed",
                                        "content": [
                                            "Consider a different example. You’re writing a ChatRoom component that needs to connect to the chat server when it appears. You are given a createConnection() API that returns an object with connect() and disconnect() methods. How do you keep the component connected while it is displayed to the user?",
                                            "Start by writing the Effect logic:",
                                            {
                                                "code_example": "useEffect(() => {  const connection = createConnection();  connection.connect();});"
                                            },
                                            "It would be slow to connect to the chat after every re-render, so you add the dependency array:",
                                            {
                                                "code_example": "useEffect(() => {  const connection = createConnection();  connection.connect();}, []);"
                                            },
                                            "The code inside the Effect does not use any props or state, so your dependency array is [] (empty). This tells React to only run this code when the component “mounts”, i.e. appears on the screen for the first time.",
                                            "Let’s try running this code:",
                                            {
                                                "code_sandbox": "chat.jsimport { useEffect } from 'react';import { createConnection } from './chat.js';export default function ChatRoom() {  useEffect(() => {    const connection = createConnection();    connection.connect();  }, []);  return <h1>Welcome to the chat!</h1>;}"
                                            },
                                            "This Effect only runs on mount, so you might expect \"✅ Connecting...\" to be printed once in the console. However, if you check the console, \"✅ Connecting...\" gets printed twice. Why does it happen?",
                                            "Imagine the ChatRoom component is a part of a larger app with many different screens. The user starts their journey on the ChatRoom page. The component mounts and calls connection.connect(). Then imagine the user navigates to another screen—for example, to the Settings page. The ChatRoom component unmounts. Finally, the user clicks Back and ChatRoom mounts again. This would set up a second connection—but the first connection was never destroyed! As the user navigates across the app, the connections would keep piling up.",
                                            "Bugs like this are easy to miss without extensive manual testing. To help you spot them quickly, in development React remounts every component once immediately after its initial mount.",
                                            "Seeing the \"✅ Connecting...\" log twice helps you notice the real issue: your code doesn’t close the connection when the component unmounts.",
                                            "To fix the issue, return a cleanup function from your Effect:",
                                            {
                                                "code_example": "  useEffect(() => {    const connection = createConnection();    connection.connect();    return () => {      connection.disconnect();    };  }, []);"
                                            },
                                            "React will call your cleanup function each time before the Effect runs again, and one final time when the component unmounts (gets removed). Let’s see what happens when the cleanup function is implemented:",
                                            {
                                                "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';export default function ChatRoom() {  useEffect(() => {    const connection = createConnection();    connection.connect();    return () => connection.disconnect();  }, []);  return <h1>Welcome to the chat!</h1>;}"
                                            },
                                            "Now you get three console logs in development:",
                                            "  1.\"✅ Connecting...\"",
                                            "  2.\"❌ Disconnected.\"",
                                            "  3.\"✅ Connecting...\"",
                                            "This is the correct behavior in development. By remounting your component, React verifies that navigating away and back would not break your code. Disconnecting and then connecting again is exactly what should happen! When you implement the cleanup well, there should be no user-visible difference between running the Effect once vs running it, cleaning it up, and running it again. There’s an extra connect/disconnect call pair because React is probing your code for bugs in development. This is normal—don’t try to make it go away!",
                                            "In production, you would only see \"✅ Connecting...\" printed once. Remounting components only happens in development to help you find Effects that need cleanup. You can turn off Strict Mode to opt out of the development behavior, but we recommend keeping it on. This lets you find many bugs like the one above."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "How to handle the Effect firing twice in development? ",
                                "source": "react",
                                "url": "https://react.dev/learn/synchronizing-with-effects/#how-to-handle-the-effect-firing-twice-in-development",
                                "content": [
                                    "React intentionally remounts your components in development to find bugs like in the last example. The right question isn’t “how to run an Effect once”, but “how to fix my Effect so that it works after remounting”.",
                                    "Usually, the answer is to implement the cleanup function.  The cleanup function should stop or undo whatever the Effect was doing. The rule of thumb is that the user shouldn’t be able to distinguish between the Effect running once (as in production) and a setup → cleanup → setup sequence (as you’d see in development).",
                                    "Most of the Effects you’ll write will fit into one of the common patterns below.",
                                    {
                                        "code_example": "ref"
                                    },
                                    {
                                        "sub_header": "Controlling non-React widgets ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#controlling-non-react-widgets",
                                        "content": [
                                            "Sometimes you need to add UI widgets that aren’t written in React. For example, let’s say you’re adding a map component to your page. It has a setZoomLevel() method, and you’d like to keep the zoom level in sync with a zoomLevel state variable in your React code. Your Effect would look similar to this:",
                                            {
                                                "code_example": "useEffect(() => {  const map = mapRef.current;  map.setZoomLevel(zoomLevel);}, [zoomLevel]);"
                                            },
                                            "Note that there is no cleanup needed in this case. In development, React will call the Effect twice, but this is not a problem because calling setZoomLevel twice with the same value does not do anything. It may be slightly slower, but this doesn’t matter because it won’t remount needlessly in production.",
                                            "Some APIs may not allow you to call them twice in a row. For example, the showModal method of the built-in <dialog> element throws if you call it twice. Implement the cleanup function and make it close the dialog:",
                                            {
                                                "code_example": "useEffect(() => {  const dialog = dialogRef.current;  dialog.showModal();  return () => dialog.close();}, []);"
                                            },
                                            "In development, your Effect will call showModal(), then immediately close(), and then showModal() again. This has the same user-visible behavior as calling showModal() once, as you would see in production."
                                        ]
                                    },
                                    {
                                        "sub_header": "Subscribing to events ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#subscribing-to-events",
                                        "content": [
                                            "If your Effect subscribes to something, the cleanup function should unsubscribe:",
                                            {
                                                "code_example": "useEffect(() => {  function handleScroll(e) {    console.log(window.scrollX, window.scrollY);  }  window.addEventListener('scroll', handleScroll);  return () => window.removeEventListener('scroll', handleScroll);}, []);"
                                            },
                                            "In development, your Effect will call addEventListener(), then immediately removeEventListener(), and then addEventListener() again with the same handler. So there would be only one active subscription at a time. This has the same user-visible behavior as calling addEventListener() once, as in production."
                                        ]
                                    },
                                    {
                                        "sub_header": "Triggering animations ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#triggering-animations",
                                        "content": [
                                            "If your Effect animates something in, the cleanup function should reset the animation to the initial values:",
                                            {
                                                "code_example": "useEffect(() => {  const node = ref.current;  node.style.opacity = 1; // Trigger the animation  return () => {    node.style.opacity = 0; // Reset to the initial value  };}, []);"
                                            },
                                            "In development, opacity will be set to 1, then to 0, and then to 1 again. This should have the same user-visible behavior as setting it to 1 directly, which is what would happen in production. If you use a third-party animation library with support for tweening, your cleanup function should reset the timeline to its initial state."
                                        ]
                                    },
                                    {
                                        "sub_header": "Fetching data ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#fetching-data",
                                        "content": [
                                            "If your Effect fetches something, the cleanup function should either abort the fetch or ignore its result:",
                                            {
                                                "code_example": "useEffect(() => {  let ignore = false;  async function startFetching() {    const json = await fetchTodos(userId);    if (!ignore) {      setTodos(json);    }  }  startFetching();  return () => {    ignore = true;  };}, [userId]);"
                                            },
                                            "You can’t “undo” a network request that already happened, but your cleanup function should ensure that the fetch that’s not relevant anymore does not keep affecting your application. If the userId changes from 'Alice' to 'Bob', cleanup ensures that the 'Alice' response is ignored even if it arrives after 'Bob'.",
                                            "In development, you will see two fetches in the Network tab. There is nothing wrong with that. With the approach above, the first Effect will immediately get cleaned up so its copy of the ignore variable will be set to true. So even though there is an extra request, it won’t affect the state thanks to the if (!ignore) check.",
                                            "In production, there will only be one request. If the second request in development is bothering you, the best approach is to use a solution that deduplicates requests and caches their responses between components:",
                                            {
                                                "code_example": "function TodoList() {  const todos = useSomeDataLibrary(`/api/user/${userId}/todos`);  // ..."
                                            },
                                            "This will not only improve the development experience, but also make your application feel faster. For example, the user pressing the Back button won’t have to wait for some data to load again because it will be cached. You can either build such a cache yourself or use one of the many alternatives to manual fetching in Effects.",
                                            "Deep DiveWhat are good alternatives to data fetching in Effects? Show DetailsWriting fetch calls inside Effects is a popular way to fetch data, especially in fully client-side apps. This is, however, a very manual approach and it has significant downsides:\nEffects don’t run on the server. This means that the initial server-rendered HTML will only include a loading state with no data. The client computer will have to download all JavaScript and render your app only to discover that now it needs to load the data. This is not very efficient.\nFetching directly in Effects makes it easy to create “network waterfalls”. You render the parent component, it fetches some data, renders the child components, and then they start fetching their data. If the network is not very fast, this is significantly slower than fetching all data in parallel.\nFetching directly in Effects usually means you don’t preload or cache data. For example, if the component unmounts and then mounts again, it would have to fetch the data again.\nIt’s not very ergonomic. There’s quite a bit of boilerplate code involved when writing fetch calls in a way that doesn’t suffer from bugs like race conditions.\nThis list of downsides is not specific to React. It applies to fetching data on mount with any library. Like with routing, data fetching is not trivial to do well, so we recommend the following approaches:\nIf you use a framework, use its built-in data fetching mechanism. Modern React frameworks have integrated data fetching mechanisms that are efficient and don’t suffer from the above pitfalls.\nOtherwise, consider using or building a client-side cache. Popular open source solutions include React Query, useSWR, and React Router 6.4+. You can build your own solution too, in which case you would use Effects under the hood, but add logic for deduplicating requests, caching responses, and avoiding network waterfalls (by preloading data or hoisting data requirements to routes).\nYou can continue fetching data directly in Effects if neither of these approaches suit you."
                                        ]
                                    },
                                    {
                                        "sub_header": "Sending analytics ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#sending-analytics",
                                        "content": [
                                            "Consider this code that sends an analytics event on the page visit:",
                                            {
                                                "code_example": "useEffect(() => {  logVisit(url); // Sends a POST request}, [url]);"
                                            },
                                            "In development, logVisit will be called twice for every URL, so you might be tempted to try to fix that. We recommend keeping this code as is. Like with earlier examples, there is no user-visible behavior difference between running it once and running it twice. From a practical point of view, logVisit should not do anything in development because you don’t want the logs from the development machines to skew the production metrics. Your component remounts every time you save its file, so it logs extra visits in development anyway.",
                                            "In production, there will be no duplicate visit logs.",
                                            "To debug the analytics events you’re sending, you can deploy your app to a staging environment (which runs in production mode) or temporarily opt out of Strict Mode and its development-only remounting checks. You may also send analytics from the route change event handlers instead of Effects. For more precise analytics, intersection observers can help track which components are in the viewport and how long they remain visible."
                                        ]
                                    },
                                    {
                                        "sub_header": "Not an Effect: Initializing the application ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#not-an-effect-initializing-the-application",
                                        "content": [
                                            "Some logic should only run once when the application starts. You can put it outside your components:",
                                            {
                                                "code_example": "if (typeof window !== 'undefined') { // Check if we're running in the browser.  checkAuthToken();  loadDataFromLocalStorage();}function App() {  // ...}"
                                            },
                                            "This guarantees that such logic only runs once after the browser loads the page."
                                        ]
                                    },
                                    {
                                        "sub_header": "Not an Effect: Buying a product ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/synchronizing-with-effects/#not-an-effect-buying-a-product",
                                        "content": [
                                            "Sometimes, even if you write a cleanup function, there’s no way to prevent user-visible consequences of running the Effect twice. For example, maybe your Effect sends a POST request like buying a product:",
                                            {
                                                "code_example": "useEffect(() => {  // 🔴 Wrong: This Effect fires twice in development, exposing a problem in the code.  fetch('/api/buy', { method: 'POST' });}, []);"
                                            },
                                            "You wouldn’t want to buy the product twice. However, this is also why you shouldn’t put this logic in an Effect. What if the user goes to another page and then presses Back? Your Effect would run again. You don’t want to buy the product when the user visits a page; you want to buy it when the user clicks the Buy button.",
                                            "Buying is not caused by rendering; it’s caused by a specific interaction. It should run only when the user presses the button. Delete the Effect and move your /api/buy request into the Buy button event handler:",
                                            {
                                                "code_example": "  function handleClick() {    // ✅ Buying is an event because it is caused by a particular interaction.    fetch('/api/buy', { method: 'POST' });  }"
                                            },
                                            "This illustrates that if remounting breaks the logic of your application, this usually uncovers existing bugs. From a user’s perspective, visiting a page shouldn’t be different from visiting it, clicking a link, then pressing Back to view the page again. React verifies that your components abide by this principle by remounting them once in development."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Putting it all together ",
                                "source": "react",
                                "url": "https://react.dev/learn/synchronizing-with-effects/#putting-it-all-together",
                                "content": [
                                    "This playground can help you “get a feel” for how Effects work in practice.",
                                    "This example uses setTimeout to schedule a console log with the input text to appear three seconds after the Effect runs. The cleanup function cancels the pending timeout. Start by pressing “Mount the component”:",
                                    {
                                        "code_sandbox": "import { useState, useEffect } from 'react';function Playground() {  const [text, setText] = useState('a');  useEffect(() => {    function onTimeout() {      console.log('⏰ ' + text);    }    console.log('🔵 Schedule \"' + text + '\" log');    const timeoutId = setTimeout(onTimeout, 3000);    return () => {      console.log('🟡 Cancel \"' + text + '\" log');      clearTimeout(timeoutId);    };  }, [text]);  return (    <>      <label>        What to log:{' '}        <input          value={text}          onChange={e => setText(e.target.value)}        />      </label>      <h1>{text}</h1>    </>  );}export default function App() {  const [show, setShow] = useState(false);  return (    <>      <button onClick={() => setShow(!show)}>        {show ? 'Unmount' : 'Mount'} the component      </button>      {show && <hr />}      {show && <Playground />}    </>  );}"
                                    },
                                    "You will see three logs at first: Schedule \"a\" log, Cancel \"a\" log, and Schedule \"a\" log again. Three second later there will also be a log saying a. As you learned earlier, the extra schedule/cancel pair is because React remounts the component once in development to verify that you’ve implemented cleanup well.",
                                    "Now edit the input to say abc. If you do it fast enough, you’ll see Schedule \"ab\" log immediately followed by Cancel \"ab\" log and Schedule \"abc\" log. React always cleans up the previous render’s Effect before the next render’s Effect. This is why even if you type into the input fast, there is at most one timeout scheduled at a time. Edit the input a few times and watch the console to get a feel for how Effects get cleaned up.",
                                    "Type something into the input and then immediately press “Unmount the component”. Notice how unmounting cleans up the last render’s Effect. Here, it clears the last timeout before it has a chance to fire.",
                                    "Finally, edit the component above and comment out the cleanup function so that the timeouts don’t get cancelled. Try typing abcde fast. What do you expect to happen in three seconds? Will console.log(text) inside the timeout print the latest text and produce five abcde logs? Give it a try to check your intuition!",
                                    "Three seconds later, you should see a sequence of logs (a, ab, abc, abcd, and abcde) rather than five abcde logs. Each Effect “captures” the text value from its corresponding render.  It doesn’t matter that the text state changed: an Effect from the render with text = 'ab' will always see 'ab'. In other words, Effects from each render are isolated from each other. If you’re curious how this works, you can read about closures.",
                                    "Deep DiveEach render has its own Effects Show DetailsYou can think of useEffect as “attaching” a piece of behavior to the render output. Consider this Effect:export default function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to {roomId}!</h1>;}Let’s see what exactly happens as the user navigates around the app.Initial render The user visits <ChatRoom roomId=\"general\" />. Let’s mentally substitute roomId with 'general':  // JSX for the first render (roomId = \"general\")  return <h1>Welcome to general!</h1>;The Effect is also a part of the rendering output. The first render’s Effect becomes:  // Effect for the first render (roomId = \"general\")  () => {    const connection = createConnection('general');    connection.connect();    return () => connection.disconnect();  },  // Dependencies for the first render (roomId = \"general\")  ['general']React runs this Effect, which connects to the 'general' chat room.Re-render with same dependencies Let’s say <ChatRoom roomId=\"general\" /> re-renders. The JSX output is the same:  // JSX for the second render (roomId = \"general\")  return <h1>Welcome to general!</h1>;React sees that the rendering output has not changed, so it doesn’t update the DOM.The Effect from the second render looks like this:  // Effect for the second render (roomId = \"general\")  () => {    const connection = createConnection('general');    connection.connect();    return () => connection.disconnect();  },  // Dependencies for the second render (roomId = \"general\")  ['general']React compares ['general'] from the second render with ['general'] from the first render. Because all dependencies are the same, React ignores the Effect from the second render. It never gets called.Re-render with different dependencies Then, the user visits <ChatRoom roomId=\"travel\" />. This time, the component returns different JSX:  // JSX for the third render (roomId = \"travel\")  return <h1>Welcome to travel!</h1>;React updates the DOM to change \"Welcome to general\" into \"Welcome to travel\".The Effect from the third render looks like this:  // Effect for the third render (roomId = \"travel\")  () => {    const connection = createConnection('travel');    connection.connect();    return () => connection.disconnect();  },  // Dependencies for the third render (roomId = \"travel\")  ['travel']React compares ['travel'] from the third render with ['general'] from the second render. One dependency is different: Object.is('travel', 'general') is false. The Effect can’t be skipped.Before React can apply the Effect from the third render, it needs to clean up the last Effect that did run. The second render’s Effect was skipped, so React needs to clean up the first render’s Effect. If you scroll up to the first render, you’ll see that its cleanup calls disconnect() on the connection that was created with createConnection('general'). This disconnects the app from the 'general' chat room.After that, React runs the third render’s Effect. It connects to the 'travel' chat room.Unmount Finally, let’s say the user navigates away, and the ChatRoom component unmounts. React runs the last Effect’s cleanup function. The last Effect was from the third render. The third render’s cleanup destroys the createConnection('travel') connection. So the app disconnects from the 'travel' room.Development-only behaviors When Strict Mode is on, React remounts every component once after mount (state and DOM are preserved). This helps you find Effects that need cleanup and exposes bugs like race conditions early. Additionally, React will remount the Effects whenever you save a file in development. Both of these behaviors are development-only.",
                                    "Recap\nUnlike events, Effects are caused by rendering itself rather than a particular interaction.\nEffects let you synchronize a component with some external system (third-party API, network, etc).\nBy default, Effects run after every render (including the initial one).\nReact will skip the Effect if all of its dependencies have the same values as during the last render.\nYou can’t “choose” your dependencies. They are determined by the code inside the Effect.\nEmpty dependency array ([]) corresponds to the component “mounting”, i.e. being added to the screen.\nIn Strict Mode, React mounts components twice (in development only!) to stress-test your Effects.\nIf your Effect breaks because of remounting, you need to implement a cleanup function.\nReact will call your cleanup function before the Effect runs next time, and during the unmount.\n",
                                    {
                                        "code_example": "<MyInput />"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "You Might Not Need an Effect",
                        "url": "https://react.dev/learn/you-might-not-need-an-effect",
                        "content": [
                            "Effects are an escape hatch from the React paradigm. They let you “step outside” of React and synchronize your components with some external system like a non-React widget, network, or the browser DOM. If there is no external system involved (for example, if you want to update a component’s state when some props or state change), you shouldn’t need an Effect. Removing unnecessary Effects will make your code easier to follow, faster to run, and less error-prone.",
                            "  1.Why and how to remove unnecessary Effects from your components",
                            "  2.How to cache expensive computations without Effects",
                            "  3.How to reset and adjust component state without Effects",
                            "  4.How to share logic between event handlers",
                            "  5.Which logic should be moved to event handlers",
                            "  6.How to notify parent components about changes",
                            "You will learn\nWhy and how to remove unnecessary Effects from your components\nHow to cache expensive computations without Effects\nHow to reset and adjust component state without Effects\nHow to share logic between event handlers\nWhich logic should be moved to event handlers\nHow to notify parent components about changes\n",
                            {
                                "sub_header": "How to remove unnecessary Effects ",
                                "source": "react",
                                "url": "https://react.dev/learn/you-might-not-need-an-effect/#how-to-remove-unnecessary-effects",
                                "content": [
                                    "There are two common cases in which you don’t need Effects:",
                                    "  1.You don’t need Effects to transform data for rendering. For example, let’s say you want to filter a list before displaying it. You might feel tempted to write an Effect that updates a state variable when the list changes. However, this is inefficient. When you update the state, React will first call your component functions to calculate what should be on the screen. Then React will “commit” these changes to the DOM, updating the screen. Then React will run your Effects. If your Effect also immediately updates the state, this restarts the whole process from scratch! To avoid the unnecessary render passes, transform all the data at the top level of your components. That code will automatically re-run whenever your props or state change.",
                                    "  2.You don’t need Effects to handle user events. For example, let’s say you want to send an /api/buy POST request and show a notification when the user buys a product. In the Buy button click event handler, you know exactly what happened. By the time an Effect runs, you don’t know what the user did (for example, which button was clicked). This is why you’ll usually handle user events in the corresponding event handlers.",
                                    "You do need Effects to synchronize with external systems. For example, you can write an Effect that keeps a jQuery widget synchronized with the React state. You can also fetch data with Effects: for example, you can synchronize the search results with the current search query. Keep in mind that modern frameworks provide more efficient built-in data fetching mechanisms than writing Effects directly in your components.",
                                    "To help you gain the right intuition, let’s look at some common concrete examples!",
                                    {
                                        "sub_header": "Updating state based on props or state ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#updating-state-based-on-props-or-state",
                                        "content": [
                                            "Suppose you have a component with two state variables: firstName and lastName. You want to calculate a fullName from them by concatenating them. Moreover, you’d like fullName to update whenever firstName or lastName change. Your first instinct might be to add a fullName state variable and update it in an Effect:",
                                            {
                                                "code_example": "function Form() {  const [firstName, setFirstName] = useState('Taylor');  const [lastName, setLastName] = useState('Swift');  // 🔴 Avoid: redundant state and unnecessary Effect  const [fullName, setFullName] = useState('');  useEffect(() => {    setFullName(firstName + ' ' + lastName);  }, [firstName, lastName]);  // ...}"
                                            },
                                            "This is more complicated than necessary. It is inefficient too: it does an entire render pass with a stale value for fullName, then immediately re-renders with the updated value. Remove the state variable and the Effect:",
                                            {
                                                "code_example": "function Form() {  const [firstName, setFirstName] = useState('Taylor');  const [lastName, setLastName] = useState('Swift');  // ✅ Good: calculated during rendering  const fullName = firstName + ' ' + lastName;  // ...}"
                                            },
                                            "When something can be calculated from the existing props or state, don’t put it in state. Instead, calculate it during rendering. This makes your code faster (you avoid the extra “cascading” updates), simpler (you remove some code), and less error-prone (you avoid bugs caused by different state variables getting out of sync with each other). If this approach feels new to you, Thinking in React explains what should go into state."
                                        ]
                                    },
                                    {
                                        "sub_header": "Caching expensive calculations ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#caching-expensive-calculations",
                                        "content": [
                                            "This component computes visibleTodos by taking the todos it receives by props and filtering them according to the filter prop. You might feel tempted to store the result in state and update it from an Effect:",
                                            {
                                                "code_example": "function TodoList({ todos, filter }) {  const [newTodo, setNewTodo] = useState('');  // 🔴 Avoid: redundant state and unnecessary Effect  const [visibleTodos, setVisibleTodos] = useState([]);  useEffect(() => {    setVisibleTodos(getFilteredTodos(todos, filter));  }, [todos, filter]);  // ...}"
                                            },
                                            "Like in the earlier example, this is both unnecessary and inefficient. First, remove the state and the Effect:",
                                            {
                                                "code_example": "function TodoList({ todos, filter }) {  const [newTodo, setNewTodo] = useState('');  // ✅ This is fine if getFilteredTodos() is not slow.  const visibleTodos = getFilteredTodos(todos, filter);  // ...}"
                                            },
                                            "Usually, this code is fine! But maybe getFilteredTodos() is slow or you have a lot of todos. In that case you don’t want to recalculate getFilteredTodos() if some unrelated state variable like newTodo has changed.",
                                            "You can cache (or “memoize”) an expensive calculation by wrapping it in a useMemo Hook:",
                                            {
                                                "code_example": "import { useMemo, useState } from 'react';function TodoList({ todos, filter }) {  const [newTodo, setNewTodo] = useState('');  const visibleTodos = useMemo(() => {    // ✅ Does not re-run unless todos or filter change    return getFilteredTodos(todos, filter);  }, [todos, filter]);  // ...}"
                                            },
                                            "Or, written as a single line:",
                                            {
                                                "code_example": "import { useMemo, useState } from 'react';function TodoList({ todos, filter }) {  const [newTodo, setNewTodo] = useState('');  // ✅ Does not re-run getFilteredTodos() unless todos or filter change  const visibleTodos = useMemo(() => getFilteredTodos(todos, filter), [todos, filter]);  // ...}"
                                            },
                                            "This tells React that you don’t want the inner function to re-run unless either todos or filter have changed. React will remember the return value of getFilteredTodos() during the initial render. During the next renders, it will check if todos or filter are different. If they’re the same as last time, useMemo will return the last result it has stored. But if they are different, React will call the inner function again (and store its result).",
                                            "The function you wrap in useMemo runs during rendering, so this only works for pure calculations.",
                                            "Deep DiveHow to tell if a calculation is expensive? Show DetailsIn general, unless you’re creating or looping over thousands of objects, it’s probably not expensive. If you want to get more confidence, you can add a console log to measure the time spent in a piece of code:console.time('filter array');const visibleTodos = getFilteredTodos(todos, filter);console.timeEnd('filter array');Perform the interaction you’re measuring (for example, typing into the input). You will then see logs like filter array: 0.15ms in your console. If the overall logged time adds up to a significant amount (say, 1ms or more), it might make sense to memoize that calculation. As an experiment, you can then wrap the calculation in useMemo to verify whether the total logged time has decreased for that interaction or not:console.time('filter array');const visibleTodos = useMemo(() => {  return getFilteredTodos(todos, filter); // Skipped if todos and filter haven't changed}, [todos, filter]);console.timeEnd('filter array');useMemo won’t make the first render faster. It only helps you skip unnecessary work on updates.Keep in mind that your machine is probably faster than your users’ so it’s a good idea to test the performance with an artificial slowdown. For example, Chrome offers a CPU Throttling option for this.Also note that measuring performance in development will not give you the most accurate results. (For example, when Strict Mode is on, you will see each component render twice rather than once.) To get the most accurate timings, build your app for production and test it on a device like your users have."
                                        ]
                                    },
                                    {
                                        "sub_header": "Resetting all state when a prop changes ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#resetting-all-state-when-a-prop-changes",
                                        "content": [
                                            "This ProfilePage component receives a userId prop. The page contains a comment input, and you use a comment state variable to hold its value. One day, you notice a problem: when you navigate from one profile to another, the comment state does not get reset. As a result, it’s easy to accidentally post a comment on a wrong user’s profile. To fix the issue, you want to clear out the comment state variable whenever the userId changes:",
                                            {
                                                "code_example": "export default function ProfilePage({ userId }) {  const [comment, setComment] = useState('');  // 🔴 Avoid: Resetting state on prop change in an Effect  useEffect(() => {    setComment('');  }, [userId]);  // ...}"
                                            },
                                            "This is inefficient because ProfilePage and its children will first render with the stale value, and then render again. It is also complicated because you’d need to do this in every component that has some state inside ProfilePage. For example, if the comment UI is nested, you’d want to clear out nested comment state too.",
                                            "Instead, you can tell React that each user’s profile is conceptually a different profile by giving it an explicit key. Split your component in two and pass a key attribute from the outer component to the inner one:",
                                            {
                                                "code_example": "export default function ProfilePage({ userId }) {  return (    <Profile      userId={userId}      key={userId}    />  );}function Profile({ userId }) {  // ✅ This and any other state below will reset on key change automatically  const [comment, setComment] = useState('');  // ...}"
                                            },
                                            "Normally, React preserves the state when the same component is rendered in the same spot. By passing userId as a key to the Profile component, you’re asking React to treat two Profile components with different userId as two different components that should not share any state. Whenever the key (which you’ve set to userId) changes, React will recreate the DOM and reset the state of the Profile component and all of its children. Now the comment field will clear out automatically when navigating between profiles.",
                                            "Note that in this example, only the outer ProfilePage component is exported and visible to other files in the project. Components rendering ProfilePage don’t need to pass the key to it: they pass userId as a regular prop. The fact ProfilePage passes it as a key to the inner Profile component is an implementation detail."
                                        ]
                                    },
                                    {
                                        "sub_header": "Adjusting some state when a prop changes ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#adjusting-some-state-when-a-prop-changes",
                                        "content": [
                                            "Sometimes, you might want to reset or adjust a part of the state on a prop change, but not all of it.",
                                            "This List component receives a list of items as a prop, and maintains the selected item in the selection state variable. You want to reset the selection to null whenever the items prop receives a different array:",
                                            {
                                                "code_example": "function List({ items }) {  const [isReverse, setIsReverse] = useState(false);  const [selection, setSelection] = useState(null);  // 🔴 Avoid: Adjusting state on prop change in an Effect  useEffect(() => {    setSelection(null);  }, [items]);  // ...}"
                                            },
                                            "This, too, is not ideal. Every time the items change, the List and its child components will render with a stale selection value at first. Then React will update the DOM and run the Effects. Finally, the setSelection(null) call will cause another re-render of the List and its child components, restarting this whole process again.",
                                            "Start by deleting the Effect. Instead, adjust the state directly during rendering:",
                                            {
                                                "code_example": "function List({ items }) {  const [isReverse, setIsReverse] = useState(false);  const [selection, setSelection] = useState(null);  // Better: Adjust the state while rendering  const [prevItems, setPrevItems] = useState(items);  if (items !== prevItems) {    setPrevItems(items);    setSelection(null);  }  // ...}"
                                            },
                                            "Storing information from previous renders like this can be hard to understand, but it’s better than updating the same state in an Effect. In the above example, setSelection is called directly during a render. React will re-render the List immediately after it exits with a return statement. React has not rendered the List children or updated the DOM yet, so this lets the List children skip rendering the stale selection value.",
                                            "When you update a component during rendering, React throws away the returned JSX and immediately retries rendering. To avoid very slow cascading retries, React only lets you update the same component’s state during a render. If you update another component’s state during a render, you’ll see an error. A condition like items !== prevItems is necessary to avoid loops. You may adjust state like this, but any other side effects (like changing the DOM or setting timeouts) should stay in event handlers or Effects to keep components pure.",
                                            "Although this pattern is more efficient than an Effect, most components shouldn’t need it either. No matter how you do it, adjusting state based on props or other state makes your data flow more difficult to understand and debug. Always check whether you can reset all state with a key or calculate everything during rendering instead. For example, instead of storing (and resetting) the selected item, you can store the selected item ID:",
                                            {
                                                "code_example": "function List({ items }) {  const [isReverse, setIsReverse] = useState(false);  const [selectedId, setSelectedId] = useState(null);  // ✅ Best: Calculate everything during rendering  const selection = items.find(item => item.id === selectedId) ?? null;  // ...}"
                                            },
                                            "Now there is no need to “adjust” the state at all. If the item with the selected ID is in the list, it remains selected. If it’s not, the selection calculated during rendering will be null because no matching item was found. This behavior is different, but arguably better because most changes to items preserve the selection."
                                        ]
                                    },
                                    {
                                        "sub_header": "Sharing logic between event handlers ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#sharing-logic-between-event-handlers",
                                        "content": [
                                            "Let’s say you have a product page with two buttons (Buy and Checkout) that both let you buy that product. You want to show a notification whenever the user puts the product in the cart. Calling showNotification() in both buttons’ click handlers feels repetitive so you might be tempted to place this logic in an Effect:",
                                            {
                                                "code_example": "function ProductPage({ product, addToCart }) {  // 🔴 Avoid: Event-specific logic inside an Effect  useEffect(() => {    if (product.isInCart) {      showNotification(`Added ${product.name} to the shopping cart!`);    }  }, [product]);  function handleBuyClick() {    addToCart(product);  }  function handleCheckoutClick() {    addToCart(product);    navigateTo('/checkout');  }  // ...}"
                                            },
                                            "This Effect is unnecessary. It will also most likely cause bugs. For example, let’s say that your app “remembers” the shopping cart between the page reloads. If you add a product to the cart once and refresh the page, the notification will appear again. It will keep appearing every time you refresh that product’s page. This is because product.isInCart will already be true on the page load, so the Effect above will call showNotification().",
                                            "When you’re not sure whether some code should be in an Effect or in an event handler, ask yourself why this code needs to run. Use Effects only for code that should run because the component was displayed to the user. In this example, the notification should appear because the user pressed the button, not because the page was displayed! Delete the Effect and put the shared logic into a function called from both event handlers:",
                                            {
                                                "code_example": "function ProductPage({ product, addToCart }) {  // ✅ Good: Event-specific logic is called from event handlers  function buyProduct() {    addToCart(product);    showNotification(`Added ${product.name} to the shopping cart!`);  }  function handleBuyClick() {    buyProduct();  }  function handleCheckoutClick() {    buyProduct();    navigateTo('/checkout');  }  // ...}"
                                            },
                                            "This both removes the unnecessary Effect and fixes the bug."
                                        ]
                                    },
                                    {
                                        "sub_header": "Sending a POST request ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#sending-a-post-request",
                                        "content": [
                                            "This Form component sends two kinds of POST requests. It sends an analytics event when it mounts. When you fill in the form and click the Submit button, it will send a POST request to the /api/register endpoint:",
                                            {
                                                "code_example": "function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  // ✅ Good: This logic should run because the component was displayed  useEffect(() => {    post('/analytics/event', { eventName: 'visit_form' });  }, []);  // 🔴 Avoid: Event-specific logic inside an Effect  const [jsonToSubmit, setJsonToSubmit] = useState(null);  useEffect(() => {    if (jsonToSubmit !== null) {      post('/api/register', jsonToSubmit);    }  }, [jsonToSubmit]);  function handleSubmit(e) {    e.preventDefault();    setJsonToSubmit({ firstName, lastName });  }  // ...}"
                                            },
                                            "Let’s apply the same criteria as in the example before.",
                                            "The analytics POST request should remain in an Effect. This is because the reason to send the analytics event is that the form was displayed. (It would fire twice in development, but see here for how to deal with that.)",
                                            "However, the /api/register POST request is not caused by the form being displayed. You only want to send the request at one specific moment in time: when the user presses the button. It should only ever happen on that particular interaction. Delete the second Effect and move that POST request into the event handler:",
                                            {
                                                "code_example": "function Form() {  const [firstName, setFirstName] = useState('');  const [lastName, setLastName] = useState('');  // ✅ Good: This logic runs because the component was displayed  useEffect(() => {    post('/analytics/event', { eventName: 'visit_form' });  }, []);  function handleSubmit(e) {    e.preventDefault();    // ✅ Good: Event-specific logic is in the event handler    post('/api/register', { firstName, lastName });  }  // ...}"
                                            },
                                            "When you choose whether to put some logic into an event handler or an Effect, the main question you need to answer is what kind of logic it is from the user’s perspective. If this logic is caused by a particular interaction, keep it in the event handler. If it’s caused by the user seeing the component on the screen, keep it in the Effect."
                                        ]
                                    },
                                    {
                                        "sub_header": "Chains of computations ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#chains-of-computations",
                                        "content": [
                                            "Sometimes you might feel tempted to chain Effects that each adjust a piece of state based on other state:",
                                            {
                                                "code_example": "function Game() {  const [card, setCard] = useState(null);  const [goldCardCount, setGoldCardCount] = useState(0);  const [round, setRound] = useState(1);  const [isGameOver, setIsGameOver] = useState(false);  // 🔴 Avoid: Chains of Effects that adjust the state solely to trigger each other  useEffect(() => {    if (card !== null && card.gold) {      setGoldCardCount(c => c + 1);    }  }, [card]);  useEffect(() => {    if (goldCardCount > 3) {      setRound(r => r + 1)      setGoldCardCount(0);    }  }, [goldCardCount]);  useEffect(() => {    if (round > 5) {      setIsGameOver(true);    }  }, [round]);  useEffect(() => {    alert('Good game!');  }, [isGameOver]);  function handlePlaceCard(nextCard) {    if (isGameOver) {      throw Error('Game already ended.');    } else {      setCard(nextCard);    }  }  // ..."
                                            },
                                            "There are two problems with this code.",
                                            "The first problem is that it is very inefficient: the component (and its children) have to re-render between each set call in the chain. In the example above, in the worst case (setCard → render → setGoldCardCount → render → setRound → render → setIsGameOver → render) there are three unnecessary re-renders of the tree below.",
                                            "The second problem is that even if it weren’t slow, as your code evolves, you will run into cases where the “chain” you wrote doesn’t fit the new requirements. Imagine you are adding a way to step through the history of the game moves. You’d do it by updating each state variable to a value from the past. However, setting the card state to a value from the past would trigger the Effect chain again and change the data you’re showing. Such code is often rigid and fragile.",
                                            "In this case, it’s better to calculate what you can during rendering, and adjust the state in the event handler:",
                                            {
                                                "code_example": "function Game() {  const [card, setCard] = useState(null);  const [goldCardCount, setGoldCardCount] = useState(0);  const [round, setRound] = useState(1);  // ✅ Calculate what you can during rendering  const isGameOver = round > 5;  function handlePlaceCard(nextCard) {    if (isGameOver) {      throw Error('Game already ended.');    }    // ✅ Calculate all the next state in the event handler    setCard(nextCard);    if (nextCard.gold) {      if (goldCardCount <= 3) {        setGoldCardCount(goldCardCount + 1);      } else {        setGoldCardCount(0);        setRound(round + 1);        if (round === 5) {          alert('Good game!');        }      }    }  }  // ..."
                                            },
                                            "This is a lot more efficient. Also, if you implement a way to view game history, now you will be able to set each state variable to a move from the past without triggering the Effect chain that adjusts every other value. If you need to reuse logic between several event handlers, you can extract a function and call it from those handlers.",
                                            "Remember that inside event handlers, state behaves like a snapshot. For example, even after you call setRound(round + 1), the round variable will reflect the value at the time the user clicked the button. If you need to use the next value for calculations, define it manually like const nextRound = round + 1.",
                                            "In some cases, you can’t calculate the next state directly in the event handler. For example, imagine a form with multiple dropdowns where the options of the next dropdown depend on the selected value of the previous dropdown. Then, a chain of Effects is appropriate because you are synchronizing with network."
                                        ]
                                    },
                                    {
                                        "sub_header": "Initializing the application ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#initializing-the-application",
                                        "content": [
                                            "Some logic should only run once when the app loads.",
                                            "You might be tempted to place it in an Effect in the top-level component:",
                                            {
                                                "code_example": "function App() {  // 🔴 Avoid: Effects with logic that should only ever run once  useEffect(() => {    loadDataFromLocalStorage();    checkAuthToken();  }, []);  // ...}"
                                            },
                                            "However, you’ll quickly discover that it runs twice in development. This can cause issues—for example, maybe it invalidates the authentication token because the function wasn’t designed to be called twice. In general, your components should be resilient to being remounted. This includes your top-level App component.",
                                            "Although it may not ever get remounted in practice in production, following the same constraints in all components makes it easier to move and reuse code. If some logic must run once per app load rather than once per component mount, add a top-level variable to track whether it has already executed:",
                                            {
                                                "code_example": "let didInit = false;function App() {  useEffect(() => {    if (!didInit) {      didInit = true;      // ✅ Only runs once per app load      loadDataFromLocalStorage();      checkAuthToken();    }  }, []);  // ...}"
                                            },
                                            "You can also run it during module initialization and before the app renders:",
                                            {
                                                "code_example": "if (typeof window !== 'undefined') { // Check if we're running in the browser.   // ✅ Only runs once per app load  checkAuthToken();  loadDataFromLocalStorage();}function App() {  // ...}"
                                            },
                                            "Code at the top level runs once when your component is imported—even if it doesn’t end up being rendered. To avoid slowdown or surprising behavior when importing arbitrary components, don’t overuse this pattern. Keep app-wide initialization logic to root component modules like App.js or in your application’s entry point."
                                        ]
                                    },
                                    {
                                        "sub_header": "Notifying parent components about state changes ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#notifying-parent-components-about-state-changes",
                                        "content": [
                                            "Let’s say you’re writing a Toggle component with an internal isOn state which can be either true or false. There are a few different ways to toggle it (by clicking or dragging). You want to notify the parent component whenever the Toggle internal state changes, so you expose an onChange event and call it from an Effect:",
                                            {
                                                "code_example": "function Toggle({ onChange }) {  const [isOn, setIsOn] = useState(false);  // 🔴 Avoid: The onChange handler runs too late  useEffect(() => {    onChange(isOn);  }, [isOn, onChange])  function handleClick() {    setIsOn(!isOn);  }  function handleDragEnd(e) {    if (isCloserToRightEdge(e)) {      setIsOn(true);    } else {      setIsOn(false);    }  }  // ...}"
                                            },
                                            "Like earlier, this is not ideal. The Toggle updates its state first, and React updates the screen. Then React runs the Effect, which calls the onChange function passed from a parent component. Now the parent component will update its own state, starting another render pass. It would be better to do everything in a single pass.",
                                            "Delete the Effect and instead update the state of both components within the same event handler:",
                                            {
                                                "code_example": "function Toggle({ onChange }) {  const [isOn, setIsOn] = useState(false);  function updateToggle(nextIsOn) {    // ✅ Good: Perform all updates during the event that caused them    setIsOn(nextIsOn);    onChange(nextIsOn);  }  function handleClick() {    updateToggle(!isOn);  }  function handleDragEnd(e) {    if (isCloserToRightEdge(e)) {      updateToggle(true);    } else {      updateToggle(false);    }  }  // ...}"
                                            },
                                            "With this approach, both the Toggle component and its parent component update their state during the event. React batches updates from different components together, so there will only be one render pass.",
                                            "You might also be able to remove the state altogether, and instead receive isOn from the parent component:",
                                            {
                                                "code_example": "// ✅ Also good: the component is fully controlled by its parentfunction Toggle({ isOn, onChange }) {  function handleClick() {    onChange(!isOn);  }  function handleDragEnd(e) {    if (isCloserToRightEdge(e)) {      onChange(true);    } else {      onChange(false);    }  }  // ...}"
                                            },
                                            "“Lifting state up” lets the parent component fully control the Toggle by toggling the parent’s own state. This means the parent component will have to contain more logic, but there will be less state overall to worry about. Whenever you try to keep two different state variables synchronized, try lifting state up instead!"
                                        ]
                                    },
                                    {
                                        "sub_header": "Passing data to the parent ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#passing-data-to-the-parent",
                                        "content": [
                                            "This Child component fetches some data and then passes it to the Parent component in an Effect:",
                                            {
                                                "code_example": "function Parent() {  const [data, setData] = useState(null);  // ...  return <Child onFetched={setData} />;}function Child({ onFetched }) {  const data = useSomeAPI();  // 🔴 Avoid: Passing data to the parent in an Effect  useEffect(() => {    if (data) {      onFetched(data);    }  }, [onFetched, data]);  // ...}"
                                            },
                                            "In React, data flows from the parent components to their children. When you see something wrong on the screen, you can trace where the information comes from by going up the component chain until you find which component passes the wrong prop or has the wrong state. When child components update the state of their parent components in Effects, the data flow becomes very difficult to trace. Since both the child and the parent need the same data, let the parent component fetch that data, and pass it down to the child instead:",
                                            {
                                                "code_example": "function Parent() {  const data = useSomeAPI();  // ...  // ✅ Good: Passing data down to the child  return <Child data={data} />;}function Child({ data }) {  // ...}"
                                            },
                                            "This is simpler and keeps the data flow predictable: the data flows down from the parent to the child."
                                        ]
                                    },
                                    {
                                        "sub_header": "Subscribing to an external store ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#subscribing-to-an-external-store",
                                        "content": [
                                            "Sometimes, your components may need to subscribe to some data outside of the React state. This data could be from a third-party library or a built-in browser API. Since this data can change without React’s knowledge, you need to manually subscribe your components to it. This is often done with an Effect, for example:",
                                            {
                                                "code_example": "function useOnlineStatus() {  // Not ideal: Manual store subscription in an Effect  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function updateState() {      setIsOnline(navigator.onLine);    }    updateState();    window.addEventListener('online', updateState);    window.addEventListener('offline', updateState);    return () => {      window.removeEventListener('online', updateState);      window.removeEventListener('offline', updateState);    };  }, []);  return isOnline;}function ChatIndicator() {  const isOnline = useOnlineStatus();  // ...}"
                                            },
                                            "Here, the component subscribes to an external data store (in this case, the browser navigator.onLine API). Since this API does not exist on the server (so it can’t be used for the initial HTML), initially the state is set to true. Whenever the value of that data store changes in the browser, the component updates its state.",
                                            "Although it’s common to use Effects for this, React has a purpose-built Hook for subscribing to an external store that is preferred instead. Delete the Effect and replace it with a call to useSyncExternalStore:",
                                            {
                                                "code_example": "function subscribe(callback) {  window.addEventListener('online', callback);  window.addEventListener('offline', callback);  return () => {    window.removeEventListener('online', callback);    window.removeEventListener('offline', callback);  };}function useOnlineStatus() {  // ✅ Good: Subscribing to an external store with a built-in Hook  return useSyncExternalStore(    subscribe, // React won't resubscribe for as long as you pass the same function    () => navigator.onLine, // How to get the value on the client    () => true // How to get the value on the server  );}function ChatIndicator() {  const isOnline = useOnlineStatus();  // ...}"
                                            },
                                            "This approach is less error-prone than manually syncing mutable data to React state with an Effect. Typically, you’ll write a custom Hook like useOnlineStatus() above so that you don’t need to repeat this code in the individual components. Read more about subscribing to external stores from React components."
                                        ]
                                    },
                                    {
                                        "sub_header": "Fetching data ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/you-might-not-need-an-effect/#fetching-data",
                                        "content": [
                                            "Many apps use Effects to kick off data fetching. It is quite common to write a data fetching Effect like this:",
                                            {
                                                "code_example": "function SearchResults({ query }) {  const [results, setResults] = useState([]);  const [page, setPage] = useState(1);  useEffect(() => {    // 🔴 Avoid: Fetching without cleanup logic    fetchResults(query, page).then(json => {      setResults(json);    });  }, [query, page]);  function handleNextPageClick() {    setPage(page + 1);  }  // ...}"
                                            },
                                            "You don’t need to move this fetch to an event handler.",
                                            "This might seem like a contradiction with the earlier examples where you needed to put the logic into the event handlers! However, consider that it’s not the typing event that’s the main reason to fetch. Search inputs are often prepopulated from the URL, and the user might navigate Back and Forward without touching the input.",
                                            "It doesn’t matter where page and query come from. While this component is visible, you want to keep results synchronized with data from the network for the current page and query. This is why it’s an Effect.",
                                            "However, the code above has a bug. Imagine you type \"hello\" fast. Then the query will change from \"h\", to \"he\", \"hel\", \"hell\", and \"hello\". This will kick off separate fetches, but there is no guarantee about which order the responses will arrive in. For example, the \"hell\" response may arrive after the \"hello\" response. Since it will call setResults() last, you will be displaying the wrong search results. This is called a “race condition”: two different requests “raced” against each other and came in a different order than you expected.",
                                            "To fix the race condition, you need to add a cleanup function to ignore stale responses:",
                                            {
                                                "code_example": "function SearchResults({ query }) {  const [results, setResults] = useState([]);  const [page, setPage] = useState(1);  useEffect(() => {    let ignore = false;    fetchResults(query, page).then(json => {      if (!ignore) {        setResults(json);      }    });    return () => {      ignore = true;    };  }, [query, page]);  function handleNextPageClick() {    setPage(page + 1);  }  // ...}"
                                            },
                                            "This ensures that when your Effect fetches data, all responses except the last requested one will be ignored.",
                                            "Handling race conditions is not the only difficulty with implementing data fetching. You might also want to think about caching responses (so that the user can click Back and see the previous screen instantly), how to fetch data on the server (so that the initial server-rendered HTML contains the fetched content instead of a spinner), and how to avoid network waterfalls (so that a child can fetch data without waiting for every parent).",
                                            "These issues apply to any UI library, not just React. Solving them is not trivial, which is why modern frameworks provide more efficient built-in data fetching mechanisms than fetching data in Effects.",
                                            "If you don’t use a framework (and don’t want to build your own) but would like to make data fetching from Effects more ergonomic, consider extracting your fetching logic into a custom Hook like in this example:",
                                            {
                                                "code_example": "function SearchResults({ query }) {  const [page, setPage] = useState(1);  const params = new URLSearchParams({ query, page });  const results = useData(`/api/search?${params}`);  function handleNextPageClick() {    setPage(page + 1);  }  // ...}function useData(url) {  const [data, setData] = useState(null);  useEffect(() => {    let ignore = false;    fetch(url)      .then(response => response.json())      .then(json => {        if (!ignore) {          setData(json);        }      });    return () => {      ignore = true;    };  }, [url]);  return data;}"
                                            },
                                            "You’ll likely also want to add some logic for error handling and to track whether the content is loading. You can build a Hook like this yourself or use one of the many solutions already available in the React ecosystem. Although this alone won’t be as efficient as using a framework’s built-in data fetching mechanism, moving the data fetching logic into a custom Hook will make it easier to adopt an efficient data fetching strategy later.",
                                            "In general, whenever you have to resort to writing Effects, keep an eye out for when you can extract a piece of functionality into a custom Hook with a more declarative and purpose-built API like useData above. The fewer raw useEffect calls you have in your components, the easier you will find to maintain your application.",
                                            "Recap\nIf you can calculate something during render, you don’t need an Effect.\nTo cache expensive calculations, add useMemo instead of useEffect.\nTo reset the state of an entire component tree, pass a different key to it.\nTo reset a particular bit of state in response to a prop change, set it during rendering.\nCode that runs because a component was displayed should be in Effects, the rest should be in events.\nIf you need to update the state of several components, it’s better to do it during a single event.\nWhenever you try to synchronize state variables in different components, consider lifting state up.\nYou can fetch data with Effects, but you need to implement cleanup to avoid race conditions.\n",
                                            {
                                                "code_example": "TodoList"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Lifecycle of Reactive Effects",
                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects",
                        "content": [
                            "Effects have a different lifecycle from components. Components may mount, update, or unmount. An Effect can only do two things: to start synchronizing something, and later to stop synchronizing it. This cycle can happen multiple times if your Effect depends on props and state that change over time. React provides a linter rule to check that you’ve specified your Effect’s dependencies correctly. This keeps your Effect synchronized to the latest props and state.",
                            "  1.How an Effect’s lifecycle is different from a component’s lifecycle",
                            "  2.How to think about each individual Effect in isolation",
                            "  3.When your Effect needs to re-synchronize, and why",
                            "  4.How your Effect’s dependencies are determined",
                            "  5.What it means for a value to be reactive",
                            "  6.What an empty dependency array means",
                            "  7.How React verifies your dependencies are correct with a linter",
                            "  8.What to do when you disagree with the linter",
                            "You will learn\nHow an Effect’s lifecycle is different from a component’s lifecycle\nHow to think about each individual Effect in isolation\nWhen your Effect needs to re-synchronize, and why\nHow your Effect’s dependencies are determined\nWhat it means for a value to be reactive\nWhat an empty dependency array means\nHow React verifies your dependencies are correct with a linter\nWhat to do when you disagree with the linter\n",
                            {
                                "sub_header": "The lifecycle of an Effect ",
                                "source": "react",
                                "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#the-lifecycle-of-an-effect",
                                "content": [
                                    "Every React component goes through the same lifecycle:",
                                    "  1.A component mounts when it’s added to the screen.",
                                    "  2.A component updates when it receives new props or state, usually in response to an interaction.",
                                    "  3.A component unmounts when it’s removed from the screen.",
                                    "It’s a good way to think about components, but not about Effects. Instead, try to think about each Effect independently from your component’s lifecycle. An Effect describes how to synchronize an external system to the current props and state. As your code changes, synchronization will need to happen more or less often.",
                                    "To illustrate this point, consider this Effect connecting your component to a chat server:",
                                    {
                                        "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]);  // ...}"
                                    },
                                    "Your Effect’s body specifies how to start synchronizing:",
                                    {
                                        "code_example": "    // ...    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };    // ..."
                                    },
                                    "The cleanup function returned by your Effect specifies how to stop synchronizing:",
                                    {
                                        "code_example": "    // ...    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };    // ..."
                                    },
                                    "Intuitively, you might think that React would start synchronizing when your component mounts and stop synchronizing when your component unmounts. However, this is not the end of the story! Sometimes, it may also be necessary to start and stop synchronizing multiple times while the component remains mounted.",
                                    "Let’s look at why this is necessary, when it happens, and how you can control this behavior.",
                                    "NoteSome Effects don’t return a cleanup function at all. More often than not, you’ll want to return one—but if you don’t, React will behave as if you returned an empty cleanup function.",
                                    {
                                        "sub_header": "Why synchronization may need to happen more than once ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#why-synchronization-may-need-to-happen-more-than-once",
                                        "content": [
                                            "Imagine this ChatRoom component receives a roomId prop that the user picks in a dropdown. Let’s say that initially the user picks the \"general\" room as the roomId. Your app displays the \"general\" chat room:",
                                            {
                                                "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId /* \"general\" */ }) {  // ...  return <h1>Welcome to the {roomId} room!</h1>;}"
                                            },
                                            "After the UI is displayed, React will run your Effect to start synchronizing. It connects to the \"general\" room:",
                                            {
                                                "code_example": "function ChatRoom({ roomId /* \"general\" */ }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room    connection.connect();    return () => {      connection.disconnect(); // Disconnects from the \"general\" room    };  }, [roomId]);  // ..."
                                            },
                                            "So far, so good.",
                                            "Later, the user picks a different room in the dropdown (for example, \"travel\"). First, React will update the UI:",
                                            {
                                                "code_example": "function ChatRoom({ roomId /* \"travel\" */ }) {  // ...  return <h1>Welcome to the {roomId} room!</h1>;}"
                                            },
                                            "Think about what should happen next. The user sees that \"travel\" is the selected chat room in the UI. However, the Effect that ran the last time is still connected to the \"general\" room. The roomId prop has changed, so what your Effect did back then (connecting to the \"general\" room) no longer matches the UI.",
                                            "At this point, you want React to do two things:",
                                            "  1.Stop synchronizing with the old roomId (disconnect from the \"general\" room)",
                                            "  2.Start synchronizing with the new roomId (connect to the \"travel\" room)",
                                            "Luckily, you’ve already taught React how to do both of these things! Your Effect’s body specifies how to start synchronizing, and your cleanup function specifies how to stop synchronizing. All that React needs to do now is to call them in the correct order and with the correct props and state. Let’s see how exactly that happens."
                                        ]
                                    },
                                    {
                                        "sub_header": "How React re-synchronizes your Effect ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#how-react-re-synchronizes-your-effect",
                                        "content": [
                                            "Recall that your ChatRoom component has received a new value for its roomId prop. It used to be \"general\", and now it is \"travel\". React needs to re-synchronize your Effect to re-connect you to a different room.",
                                            "To stop synchronizing, React will call the cleanup function that your Effect returned after connecting to the \"general\" room. Since roomId was \"general\", the cleanup function disconnects from the \"general\" room:",
                                            {
                                                "code_example": "function ChatRoom({ roomId /* \"general\" */ }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Connects to the \"general\" room    connection.connect();    return () => {      connection.disconnect(); // Disconnects from the \"general\" room    };    // ..."
                                            },
                                            "Then React will run the Effect that you’ve provided during this render. This time, roomId is \"travel\" so it will start synchronizing to the \"travel\" chat room (until its cleanup function is eventually called too):",
                                            {
                                                "code_example": "function ChatRoom({ roomId /* \"travel\" */ }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Connects to the \"travel\" room    connection.connect();    // ..."
                                            },
                                            "Thanks to this, you’re now connected to the same room that the user chose in the UI. Disaster averted!",
                                            "Every time after your component re-renders with a different roomId, your Effect will re-synchronize. For example, let’s say the user changes roomId from \"travel\" to \"music\". React will again stop synchronizing your Effect by calling its cleanup function (disconnecting you from the \"travel\" room). Then it will start synchronizing again by running its body with the new roomId prop (connecting you to the \"music\" room).",
                                            "Finally, when the user goes to a different screen, ChatRoom unmounts. Now there is no need to stay connected at all. React will stop synchronizing your Effect one last time and disconnect you from the \"music\" chat room."
                                        ]
                                    },
                                    {
                                        "sub_header": "Thinking from the Effect’s perspective ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#thinking-from-the-effects-perspective",
                                        "content": [
                                            "Let’s recap everything that’s happened from the ChatRoom component’s perspective:",
                                            "  1.ChatRoom mounted with roomId set to \"general\"",
                                            "  2.ChatRoom updated with roomId set to \"travel\"",
                                            "  3.ChatRoom updated with roomId set to \"music\"",
                                            "  4.ChatRoom unmounted",
                                            "During each of these points in the component’s lifecycle, your Effect did different things:",
                                            "  1.Your Effect connected to the \"general\" room",
                                            "  2.Your Effect disconnected from the \"general\" room and connected to the \"travel\" room",
                                            "  3.Your Effect disconnected from the \"travel\" room and connected to the \"music\" room",
                                            "  4.Your Effect disconnected from the \"music\" room",
                                            "Now let’s think about what happened from the perspective of the Effect itself:",
                                            {
                                                "code_example": "  useEffect(() => {    // Your Effect connected to the room specified with roomId...    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      // ...until it disconnected      connection.disconnect();    };  }, [roomId]);"
                                            },
                                            "This code’s structure might inspire you to see what happened as a sequence of non-overlapping time periods:",
                                            "  1.Your Effect connected to the \"general\" room (until it disconnected)",
                                            "  2.Your Effect connected to the \"travel\" room (until it disconnected)",
                                            "  3.Your Effect connected to the \"music\" room (until it disconnected)",
                                            "Previously, you were thinking from the component’s perspective. When you looked from the component’s perspective, it was tempting to think of Effects as “callbacks” or “lifecycle events” that fire at a specific time like “after a render” or “before unmount”. This way of thinking gets complicated very fast, so it’s best to avoid.",
                                            "Instead, always focus on a single start/stop cycle at a time. It shouldn’t matter whether a component is mounting, updating, or unmounting. All you need to do is to describe how to start synchronization and how to stop it. If you do it well, your Effect will be resilient to being started and stopped as many times as it’s needed.",
                                            "This might remind you how you don’t think whether a component is mounting or updating when you write the rendering logic that creates JSX. You describe what should be on the screen, and React figures out the rest."
                                        ]
                                    },
                                    {
                                        "sub_header": "How React verifies that your Effect can re-synchronize ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#how-react-verifies-that-your-effect-can-re-synchronize",
                                        "content": [
                                            "Here is a live example that you can play with. Press “Open chat” to mount the ChatRoom component:",
                                            {
                                                "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [roomId, setRoomId] = useState('general');  const [show, setShow] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <button onClick={() => setShow(!show)}>        {show ? 'Close chat' : 'Open chat'}      </button>      {show && <hr />}      {show && <ChatRoom roomId={roomId} />}    </>  );}"
                                            },
                                            "Notice that when the component mounts for the first time, you see three logs:",
                                            "  1.✅ Connecting to \"general\" room at https://localhost:1234... (development-only)",
                                            "  2.❌ Disconnected from \"general\" room at https://localhost:1234. (development-only)",
                                            "  3.✅ Connecting to \"general\" room at https://localhost:1234...",
                                            "The first two logs are development-only. In development, React always remounts each component once.",
                                            "React verifies that your Effect can re-synchronize by forcing it to do that immediately in development. This might remind you of opening a door and closing it an extra time to check if the door lock works. React starts and stops your Effect one extra time in development to check you’ve implemented its cleanup well.",
                                            "The main reason your Effect will re-synchronize in practice is if some data it uses has changed. In the sandbox above, change the selected chat room. Notice how, when the roomId changes, your Effect re-synchronizes.",
                                            "However, there are also more unusual cases in which re-synchronization is necessary. For example, try editing the serverUrl in the sandbox above while the chat is open. Notice how the Effect re-synchronizes in response to your edits to the code. In the future, React may add more features that rely on re-synchronization."
                                        ]
                                    },
                                    {
                                        "sub_header": "How React knows that it needs to re-synchronize the Effect ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#how-react-knows-that-it-needs-to-re-synchronize-the-effect",
                                        "content": [
                                            "You might be wondering how React knew that your Effect needed to re-synchronize after roomId changes. It’s because you told React that its code depends on roomId by including it in the list of dependencies:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) { // The roomId prop may change over time  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // This Effect reads roomId     connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]); // So you tell React that this Effect \"depends on\" roomId  // ..."
                                            },
                                            "Here’s how this works:",
                                            "  1.You knew roomId is a prop, which means it can change over time.",
                                            "  2.You knew that your Effect reads roomId (so its logic depends on a value that may change later).",
                                            "  3.This is why you specified it as your Effect’s dependency (so that it re-synchronizes when roomId changes).",
                                            "Every time after your component re-renders, React will look at the array of dependencies that you have passed. If any of the values in the array is different from the value at the same spot that you passed during the previous render, React will re-synchronize your Effect.",
                                            "For example, if you passed [\"general\"] during the initial render, and later you passed [\"travel\"] during the next render, React will compare \"general\" and \"travel\". These are different values (compared with Object.is), so React will re-synchronize your Effect. On the other hand, if your component re-renders but roomId has not changed, your Effect will remain connected to the same room."
                                        ]
                                    },
                                    {
                                        "sub_header": "Each Effect represents a separate synchronization process ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#each-effect-represents-a-separate-synchronization-process",
                                        "content": [
                                            "Resist adding unrelated logic to your Effect only because this logic needs to run at the same time as an Effect you already wrote. For example, let’s say you want to send an analytics event when the user visits the room. You already have an Effect that depends on roomId, so you might feel tempted to add the analytics call there:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  useEffect(() => {    logVisit(roomId);    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]);  // ...}"
                                            },
                                            "But imagine you later add another dependency to this Effect that needs to re-establish the connection. If this Effect re-synchronizes, it will also call logVisit(roomId) for the same room, which you did not intend. Logging the visit is a separate process from connecting. Write them as two separate Effects:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  useEffect(() => {    logVisit(roomId);  }, [roomId]);  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    // ...  }, [roomId]);  // ...}"
                                            },
                                            "Each Effect in your code should represent a separate and independent synchronization process.",
                                            "In the above example, deleting one Effect wouldn’t break the other Effect’s logic. This is a good indication that they synchronize different things, and so it made sense to split them up. On the other hand, if you split up a cohesive piece of logic into separate Effects, the code may look “cleaner” but will be more difficult to maintain. This is why you should think whether the processes are same or separate, not whether the code looks cleaner."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Effects “react” to reactive values ",
                                "source": "react",
                                "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#effects-react-to-reactive-values",
                                "content": [
                                    "Your Effect reads two variables (serverUrl and roomId), but you only specified roomId as a dependency:",
                                    {
                                        "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]);  // ...}"
                                    },
                                    "Why doesn’t serverUrl need to be a dependency?",
                                    "This is because the serverUrl never changes due to a re-render. It’s always the same no matter how many times the component re-renders and why. Since serverUrl never changes, it wouldn’t make sense to specify it as a dependency. After all, dependencies only do something when they change over time!",
                                    "On the other hand, roomId may be different on a re-render. Props, state, and other values declared inside the component are reactive because they’re calculated during rendering and participate in the React data flow.",
                                    "If serverUrl was a state variable, it would be reactive. Reactive values must be included in dependencies:",
                                    {
                                        "code_example": "function ChatRoom({ roomId }) { // Props change over time  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // State may change over time  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Your Effect reads props and state    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId, serverUrl]); // So you tell React that this Effect \"depends on\" on props and state  // ...}"
                                    },
                                    "By including serverUrl as a dependency, you ensure that the Effect re-synchronizes after it changes.",
                                    "Try changing the selected chat room or edit the server URL in this sandbox:",
                                    {
                                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId, serverUrl]);  return (    <>      <label>        Server URL:{' '}        <input          value={serverUrl}          onChange={e => setServerUrl(e.target.value)}        />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                    },
                                    "Whenever you change a reactive value like roomId or serverUrl, the Effect re-connects to the chat server.",
                                    {
                                        "sub_header": "What an Effect with empty dependencies means ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#what-an-effect-with-empty-dependencies-means",
                                        "content": [
                                            "What happens if you move both serverUrl and roomId outside the component?",
                                            {
                                                "code_example": "const serverUrl = 'https://localhost:1234';const roomId = 'general';function ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, []); // ✅ All dependencies declared  // ...}"
                                            },
                                            "Now your Effect’s code does not use any reactive values, so its dependencies can be empty ([]).",
                                            "Thinking from the component’s perspective, the empty [] dependency array means this Effect connects to the chat room only when the component mounts, and disconnects only when the component unmounts. (Keep in mind that React would still re-synchronize it an extra time in development to stress-test your logic.)",
                                            {
                                                "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';const roomId = 'general';function ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []);  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [show, setShow] = useState(false);  return (    <>      <button onClick={() => setShow(!show)}>        {show ? 'Close chat' : 'Open chat'}      </button>      {show && <hr />}      {show && <ChatRoom />}    </>  );}"
                                            },
                                            "However, if you think from the Effect’s perspective, you don’t need to think about mounting and unmounting at all. What’s important is you’ve specified what your Effect does to start and stop synchronizing. Today, it has no reactive dependencies. But if you ever want the user to change roomId or serverUrl over time (and they would become reactive), your Effect’s code won’t change. You will only need to add them to the dependencies."
                                        ]
                                    },
                                    {
                                        "sub_header": "All variables declared in the component body are reactive ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#all-variables-declared-in-the-component-body-are-reactive",
                                        "content": [
                                            "Props and state aren’t the only reactive values. Values that you calculate from them are also reactive. If the props or state change, your component will re-render, and the values calculated from them will also change. This is why all variables from the component body used by the Effect should be in the Effect dependency list.",
                                            "Let’s say that the user can pick a chat server in the dropdown, but they can also configure a default server in settings. Suppose you’ve already put the settings state in a context so you read the settings from that context. Now you calculate the serverUrl based on the selected server from props and the default server:",
                                            {
                                                "code_example": "function ChatRoom({ roomId, selectedServerUrl }) { // roomId is reactive  const settings = useContext(SettingsContext); // settings is reactive  const serverUrl = selectedServerUrl ?? settings.defaultServerUrl; // serverUrl is reactive  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // Your Effect reads roomId and serverUrl    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId, serverUrl]); // So it needs to re-synchronize when either of them changes!  // ...}"
                                            },
                                            "In this example, serverUrl is not a prop or a state variable. It’s a regular variable that you calculate during rendering. But it’s calculated during rendering, so it can change due to a re-render. This is why it’s reactive.",
                                            "All values inside the component (including props, state, and variables in your component’s body) are reactive. Any reactive value can change on a re-render, so you need to include reactive values as Effect’s dependencies.",
                                            "In other words, Effects “react” to all values from the component body.",
                                            "Deep DiveCan global or mutable values be dependencies? Show DetailsMutable values (including global variables) aren’t reactive.A mutable value like location.pathname can’t be a dependency. It’s mutable, so it can change at any time completely outside of the React rendering data flow. Changing it wouldn’t trigger a re-render of your component. Therefore, even if you specified it in the dependencies, React wouldn’t know to re-synchronize the Effect when it changes. This also breaks the rules of React because reading mutable data during rendering (which is when you calculate the dependencies) breaks purity of rendering. Instead, you should read and subscribe to an external mutable value with useSyncExternalStore.A mutable value like ref.current or things you read from it also can’t be a dependency. The ref object returned by useRef itself can be a dependency, but its current property is intentionally mutable. It lets you keep track of something without triggering a re-render. But since changing it doesn’t trigger a re-render, it’s not a reactive value, and React won’t know to re-run your Effect when it changes.As you’ll learn below on this page, a linter will check for these issues automatically."
                                        ]
                                    },
                                    {
                                        "sub_header": "React verifies that you specified every reactive value as a dependency ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#react-verifies-that-you-specified-every-reactive-value-as-a-dependency",
                                        "content": [
                                            "If your linter is configured for React, it will check that every reactive value used by your Effect’s code is declared as its dependency. For example, this is a lint error because both roomId and serverUrl are reactive:",
                                            {
                                                "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';function ChatRoom({ roomId }) { // roomId is reactive  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []); // <-- Something's wrong here!  return (    <>      <label>        Server URL:{' '}        <input          value={serverUrl}          onChange={e => setServerUrl(e.target.value)}        />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                            },
                                            "This may look like a React error, but really React is pointing out a bug in your code. Both roomId and serverUrl may change over time, but you’re forgetting to re-synchronize your Effect when they change. You will remain connected to the initial roomId and serverUrl even after the user picks different values in the UI.",
                                            "To fix the bug, follow the linter’s suggestion to specify roomId and serverUrl as dependencies of your Effect:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) { // roomId is reactive  const [serverUrl, setServerUrl] = useState('https://localhost:1234'); // serverUrl is reactive  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [serverUrl, roomId]); // ✅ All dependencies declared  // ...}"
                                            },
                                            "Try this fix in the sandbox above. Verify that the linter error is gone, and the chat re-connects when needed.",
                                            {
                                                "code_example": "set"
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "What to do when you don’t want to re-synchronize ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/lifecycle-of-reactive-effects/#what-to-do-when-you-dont-want-to-re-synchronize",
                                        "content": [
                                            "In the previous example, you’ve fixed the lint error by listing roomId and serverUrl as dependencies.",
                                            "However, you could instead “prove” to the linter that these values aren’t reactive values, i.e. that they can’t change as a result of a re-render. For example, if serverUrl and roomId don’t depend on rendering and always have the same values, you can move them outside the component. Now they don’t need to be dependencies:",
                                            {
                                                "code_example": "const serverUrl = 'https://localhost:1234'; // serverUrl is not reactiveconst roomId = 'general'; // roomId is not reactivefunction ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, []); // ✅ All dependencies declared  // ...}"
                                            },
                                            "You can also move them inside the Effect. They aren’t calculated during rendering, so they’re not reactive:",
                                            {
                                                "code_example": "function ChatRoom() {  useEffect(() => {    const serverUrl = 'https://localhost:1234'; // serverUrl is not reactive    const roomId = 'general'; // roomId is not reactive    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, []); // ✅ All dependencies declared  // ...}"
                                            },
                                            "Effects are reactive blocks of code. They re-synchronize when the values you read inside of them change. Unlike event handlers, which only run once per interaction, Effects run whenever synchronization is necessary.",
                                            "You can’t “choose” your dependencies. Your dependencies must include every reactive value you read in the Effect. The linter enforces this. Sometimes this may lead to problems like infinite loops and to your Effect re-synchronizing too often. Don’t fix these problems by suppressing the linter! Here’s what to try instead:",
                                            "  1.\nCheck that your Effect represents an independent synchronization process. If your Effect doesn’t synchronize anything, it might be unnecessary. If it synchronizes several independent things, split it up.\n",
                                            "  2.\nIf you want to read the latest value of props or state without “reacting” to it and re-synchronizing the Effect, you can split your Effect into a reactive part (which you’ll keep in the Effect) and a non-reactive part (which you’ll extract into something called an Effect Event). Read about separating Events from Effects.\n",
                                            "  3.\nAvoid relying on objects and functions as dependencies. If you create objects and functions during rendering and then read them from an Effect, they will be different on every render. This will cause your Effect to re-synchronize every time. Read more about removing unnecessary dependencies from Effects.\n",
                                            {
                                                "code_example": "useEffect(() => {  // ...  // 🔴 Avoid suppressing the linter like this:  // eslint-ignore-next-line react-hooks/exhaustive-deps}, []);"
                                            },
                                            "Recap\nComponents can mount, update, and unmount.\nEach Effect has a separate lifecycle from the surrounding component.\nEach Effect describes a separate synchronization process that can start and stop.\nWhen you write and read Effects, think from each individual Effect’s perspective (how to start and stop synchronization) rather than from the component’s perspective (how it mounts, updates, or unmounts).\nValues declared inside the component body are “reactive”.\nReactive values should re-synchronize the Effect because they can change over time.\nThe linter verifies that all reactive values used inside the Effect are specified as dependencies.\nAll errors flagged by the linter are legitimate. There’s always a way to fix the code to not break the rules.\n",
                                            {
                                                "code_example": "ChatRoom"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Separating Events from Effects",
                        "url": "https://react.dev/learn/separating-events-from-effects",
                        "content": [
                            "Event handlers only re-run when you perform the same interaction again. Unlike event handlers, Effects re-synchronize if some value they read, like a prop or a state variable, is different from what it was during the last render. Sometimes, you also want a mix of both behaviors: an Effect that re-runs in response to some values but not others. This page will teach you how to do that.",
                            "  1.How to choose between an event handler and an Effect",
                            "  2.Why Effects are reactive, and event handlers are not",
                            "  3.What to do when you want a part of your Effect’s code to not be reactive",
                            "  4.What Effect Events are, and how to extract them from your Effects",
                            "  5.How to read the latest props and state from Effects using Effect Events",
                            "You will learn\nHow to choose between an event handler and an Effect\nWhy Effects are reactive, and event handlers are not\nWhat to do when you want a part of your Effect’s code to not be reactive\nWhat Effect Events are, and how to extract them from your Effects\nHow to read the latest props and state from Effects using Effect Events\n",
                            {
                                "sub_header": "Choosing between event handlers and Effects ",
                                "source": "react",
                                "url": "https://react.dev/learn/separating-events-from-effects/#choosing-between-event-handlers-and-effects",
                                "content": [
                                    "First, let’s recap the difference between event handlers and Effects.",
                                    "Imagine you’re implementing a chat room component. Your requirements look like this:",
                                    "  1.Your component should automatically connect to the selected chat room.",
                                    "  2.When you click the “Send” button, it should send a message to the chat.",
                                    "Let’s say you’ve already implemented the code for them, but you’re not sure where to put it. Should you use event handlers or Effects? Every time you need to answer this question, consider why the code needs to run.",
                                    {
                                        "sub_header": "Event handlers run in response to specific interactions ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/separating-events-from-effects/#event-handlers-run-in-response-to-specific-interactions",
                                        "content": [
                                            "From the user’s perspective, sending a message should happen because the particular “Send” button was clicked. The user will get rather upset if you send their message at any other time or for any other reason. This is why sending a message should be an event handler. Event handlers let you handle specific interactions:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  // ...  function handleSendClick() {    sendMessage(message);  }  // ...  return (    <>      <input value={message} onChange={e => setMessage(e.target.value)} />      <button onClick={handleSendClick}>Send</button>    </>  );}"
                                            },
                                            "With an event handler, you can be sure that sendMessage(message) will only run if the user presses the button."
                                        ]
                                    },
                                    {
                                        "sub_header": "Effects run whenever synchronization is needed ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/separating-events-from-effects/#effects-run-whenever-synchronization-is-needed",
                                        "content": [
                                            "Recall that you also need to keep the component connected to the chat room. Where does that code go?",
                                            "The reason to run this code is not some particular interaction. It doesn’t matter why or how the user navigated to the chat room screen. Now that they’re looking at it and could interact with it, the component needs to stay connected to the selected chat server. Even if the chat room component was the initial screen of your app, and the user has not performed any interactions at all, you would still need to connect. This is why it’s an Effect:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  // ...  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect();    };  }, [roomId]);  // ...}"
                                            },
                                            "With this code, you can be sure that there is always an active connection to the currently selected chat server, regardless of the specific interactions performed by the user. Whether the user has only opened your app, selected a different room, or navigated to another screen and back, your Effect ensures that the component will remain synchronized with the currently selected room, and will re-connect whenever it’s necessary.",
                                            {
                                                "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection, sendMessage } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  function handleSendClick() {    sendMessage(message);  }  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />      <button onClick={handleSendClick}>Send</button>    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  const [show, setShow] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <button onClick={() => setShow(!show)}>        {show ? 'Close chat' : 'Open chat'}      </button>      {show && <hr />}      {show && <ChatRoom roomId={roomId} />}    </>  );}"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Reactive values and reactive logic ",
                                "source": "react",
                                "url": "https://react.dev/learn/separating-events-from-effects/#reactive-values-and-reactive-logic",
                                "content": [
                                    "Intuitively, you could say that event handlers are always triggered “manually”, for example by clicking a button. Effects, on the other hand, are “automatic”: they run and re-run as often as it’s needed to stay synchronized.",
                                    "There is a more precise way to think about this.",
                                    "Props, state, and variables declared inside your component’s body are called reactive values. In this example, serverUrl is not a reactive value, but roomId and message are. They participate in the rendering data flow:",
                                    {
                                        "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  // ...}"
                                    },
                                    "Reactive values like these can change due to a re-render. For example, the user may edit the message or choose a different roomId in a dropdown. Event handlers and Effects respond to changes differently:",
                                    "  1.Logic inside event handlers is not reactive. It will not run again unless the user performs the same interaction (e.g. a click) again. Event handlers can read reactive values without “reacting” to their changes.",
                                    "  2.Logic inside Effects is reactive. If your Effect reads a reactive value, you have to specify it as a dependency. Then, if a re-render causes that value to change, React will re-run your Effect’s logic with the new value.",
                                    "Let’s revisit the previous example to illustrate this difference.",
                                    {
                                        "sub_header": "Logic inside event handlers is not reactive ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/separating-events-from-effects/#logic-inside-event-handlers-is-not-reactive",
                                        "content": [
                                            "Take a look at this line of code. Should this logic be reactive or not?",
                                            {
                                                "code_example": "    // ...    sendMessage(message);    // ..."
                                            },
                                            "From the user’s perspective, a change to the message does not mean that they want to send a message. It only means that the user is typing. In other words, the logic that sends a message should not be reactive. It should not run again only because the reactive value has changed. That’s why it belongs in the event handler:",
                                            {
                                                "code_example": "  function handleSendClick() {    sendMessage(message);  }"
                                            },
                                            "Event handlers aren’t reactive, so sendMessage(message) will only run when the user clicks the Send button."
                                        ]
                                    },
                                    {
                                        "sub_header": "Logic inside Effects is reactive ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/separating-events-from-effects/#logic-inside-effects-is-reactive",
                                        "content": [
                                            "Now let’s return to these lines:",
                                            {
                                                "code_example": "    // ...    const connection = createConnection(serverUrl, roomId);    connection.connect();    // ..."
                                            },
                                            "From the user’s perspective, a change to the roomId does mean that they want to connect to a different room. In other words, the logic for connecting to the room should be reactive. You want these lines of code to “keep up” with the reactive value, and to run again if that value is different. That’s why it belongs in an Effect:",
                                            {
                                                "code_example": "  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => {      connection.disconnect()    };  }, [roomId]);"
                                            },
                                            "Effects are reactive, so createConnection(serverUrl, roomId) and connection.connect() will run for every distinct value of roomId. Your Effect keeps the chat connection synchronized to the currently selected room."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Extracting non-reactive logic out of Effects ",
                                "source": "react",
                                "url": "https://react.dev/learn/separating-events-from-effects/#extracting-non-reactive-logic-out-of-effects",
                                "content": [
                                    "Things get more tricky when you want to mix reactive logic with non-reactive logic.",
                                    "For example, imagine that you want to show a notification when the user connects to the chat. You read the current theme (dark or light) from the props so that you can show the notification in the correct color:",
                                    {
                                        "code_example": "function ChatRoom({ roomId, theme }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      showNotification('Connected!', theme);    });    connection.connect();    // ..."
                                    },
                                    "However, theme is a reactive value (it can change as a result of re-rendering), and every reactive value read by an Effect must be declared as its dependency. Now you have to specify theme as a dependency of your Effect:",
                                    {
                                        "code_example": "function ChatRoom({ roomId, theme }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      showNotification('Connected!', theme);    });    connection.connect();    return () => {      connection.disconnect()    };  }, [roomId, theme]); // ✅ All dependencies declared  // ..."
                                    },
                                    "Play with this example and see if you can spot the problem with this user experience:",
                                    {
                                        "code_sandbox": "chat.jsnotifications.jsimport { useState, useEffect } from 'react';import { createConnection, sendMessage } from './chat.js';import { showNotification } from './notifications.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId, theme }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      showNotification('Connected!', theme);    });    connection.connect();    return () => connection.disconnect();  }, [roomId, theme]);  return <h1>Welcome to the {roomId} room!</h1>}export default function App() {  const [roomId, setRoomId] = useState('general');  const [isDark, setIsDark] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <label>        <input          type=\"checkbox\"          checked={isDark}          onChange={e => setIsDark(e.target.checked)}        />        Use dark theme      </label>      <hr />      <ChatRoom        roomId={roomId}        theme={isDark ? 'dark' : 'light'}      />    </>  );}"
                                    },
                                    "When the roomId changes, the chat re-connects as you would expect. But since theme is also a dependency, the chat also re-connects every time you switch between the dark and the light theme. That’s not great!",
                                    "In other words, you don’t want this line to be reactive, even though it is inside an Effect (which is reactive):",
                                    {
                                        "code_example": "      // ...      showNotification('Connected!', theme);      // ..."
                                    },
                                    "You need a way to separate this non-reactive logic from the reactive Effect around it.",
                                    {
                                        "sub_header": "Declaring an Effect Event ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/separating-events-from-effects/#declaring-an-effect-event",
                                        "content": [
                                            "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                            "Use a special Hook called useEffectEvent to extract this non-reactive logic out of your Effect:",
                                            {
                                                "code_example": "import { useEffect, useEffectEvent } from 'react';function ChatRoom({ roomId, theme }) {  const onConnected = useEffectEvent(() => {    showNotification('Connected!', theme);  });  // ..."
                                            },
                                            "Here, onConnected is called an Effect Event. It’s a part of your Effect logic, but it behaves a lot more like an event handler. The logic inside it is not reactive, and it always “sees” the latest values of your props and state.",
                                            "Now you can call the onConnected Effect Event from inside your Effect:",
                                            {
                                                "code_example": "function ChatRoom({ roomId, theme }) {  const onConnected = useEffectEvent(() => {    showNotification('Connected!', theme);  });  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      onConnected();    });    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                            },
                                            "This solves the problem. Note that you had to remove onConnected from the list of your Effect’s dependencies. Effect Events are not reactive and must be omitted from dependencies.",
                                            "Verify that the new behavior works as you would expect:",
                                            {
                                                "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { experimental_useEffectEvent as useEffectEvent } from 'react';import { createConnection, sendMessage } from './chat.js';import { showNotification } from './notifications.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId, theme }) {  const onConnected = useEffectEvent(() => {    showNotification('Connected!', theme);  });  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.on('connected', () => {      onConnected();    });    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>}export default function App() {  const [roomId, setRoomId] = useState('general');  const [isDark, setIsDark] = useState(false);  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <label>        <input          type=\"checkbox\"          checked={isDark}          onChange={e => setIsDark(e.target.checked)}        />        Use dark theme      </label>      <hr />      <ChatRoom        roomId={roomId}        theme={isDark ? 'dark' : 'light'}      />    </>  );}"
                                            },
                                            "You can think of Effect Events as being very similar to event handlers. The main difference is that event handlers run in response to a user interactions, whereas Effect Events are triggered by you from Effects. Effect Events let you “break the chain” between the reactivity of Effects and code that should not be reactive."
                                        ]
                                    },
                                    {
                                        "sub_header": "Reading latest props and state with Effect Events ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/separating-events-from-effects/#reading-latest-props-and-state-with-effect-events",
                                        "content": [
                                            "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                            "Effect Events let you fix many patterns where you might be tempted to suppress the dependency linter.",
                                            "For example, say you have an Effect to log the page visits:",
                                            {
                                                "code_example": "function Page() {  useEffect(() => {    logVisit();  }, []);  // ...}"
                                            },
                                            "Later, you add multiple routes to your site. Now your Page component receives a url prop with the current path. You want to pass the url as a part of your logVisit call, but the dependency linter complains:",
                                            {
                                                "code_example": "function Page({ url }) {  useEffect(() => {    logVisit(url);  }, []); // 🔴 React Hook useEffect has a missing dependency: 'url'  // ...}"
                                            },
                                            "Think about what you want the code to do. You want to log a separate visit for different URLs since each URL represents a different page. In other words, this logVisit call should be reactive with respect to the url. This is why, in this case, it makes sense to follow the dependency linter, and add url as a dependency:",
                                            {
                                                "code_example": "function Page({ url }) {  useEffect(() => {    logVisit(url);  }, [url]); // ✅ All dependencies declared  // ...}"
                                            },
                                            "Now let’s say you want to include the number of items in the shopping cart together with every page visit:",
                                            {
                                                "code_example": "function Page({ url }) {  const { items } = useContext(ShoppingCartContext);  const numberOfItems = items.length;  useEffect(() => {    logVisit(url, numberOfItems);  }, [url]); // 🔴 React Hook useEffect has a missing dependency: 'numberOfItems'  // ...}"
                                            },
                                            "You used numberOfItems inside the Effect, so the linter asks you to add it as a dependency. However, you don’t want the logVisit call to be reactive with respect to numberOfItems. If the user puts something into the shopping cart, and the numberOfItems changes, this does not mean that the user visited the page again. In other words, visiting the page is, in some sense, an “event”. It happens at a precise moment in time.",
                                            "Split the code in two parts:",
                                            {
                                                "code_example": "function Page({ url }) {  const { items } = useContext(ShoppingCartContext);  const numberOfItems = items.length;  const onVisit = useEffectEvent(visitedUrl => {    logVisit(visitedUrl, numberOfItems);  });  useEffect(() => {    onVisit(url);  }, [url]); // ✅ All dependencies declared  // ...}"
                                            },
                                            "Here, onVisit is an Effect Event. The code inside it isn’t reactive. This is why you can use numberOfItems (or any other reactive value!) without worrying that it will cause the surrounding code to re-execute on changes.",
                                            "On the other hand, the Effect itself remains reactive. Code inside the Effect uses the url prop, so the Effect will re-run after every re-render with a different url. This, in turn, will call the onVisit Effect Event.",
                                            "As a result, you will call logVisit for every change to the url, and always read the latest numberOfItems. However, if numberOfItems changes on its own, this will not cause any of the code to re-run.",
                                            {
                                                "code_example": "onVisit()"
                                            },
                                            "Deep DiveIs it okay to suppress the dependency linter instead? Show DetailsIn the existing codebases, you may sometimes see the lint rule suppressed like this:function Page({ url }) {  const { items } = useContext(ShoppingCartContext);  const numberOfItems = items.length;  useEffect(() => {    logVisit(url, numberOfItems);    // 🔴 Avoid suppressing the linter like this:    // eslint-disable-next-line react-hooks/exhaustive-deps  }, [url]);  // ...}After useEffectEvent becomes a stable part of React, we recommend never suppressing the linter.The first downside of suppressing the rule is that React will no longer warn you when your Effect needs to “react” to a new reactive dependency you’ve introduced to your code. In the earlier example, you added url to the dependencies because React reminded you to do it. You will no longer get such reminders for any future edits to that Effect if you disable the linter. This leads to bugs.Here is an example of a confusing bug caused by suppressing the linter. In this example, the handleMove function is supposed to read the current canMove state variable value in order to decide whether the dot should follow the cursor. However, canMove is always true inside handleMove.Can you see why?App.jsApp.js ResetForkimport { useState, useEffect } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  function handleMove(e) {\n    if (canMove) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n  }\n\n  useEffect(() => {\n    window.addEventListener('pointermove', handleMove);\n    return () => window.removeEventListener('pointermove', handleMove);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)}\n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n\nShow moreThe problem with this code is in suppressing the dependency linter. If you remove the suppression, you’ll see that this Effect should depend on the handleMove function. This makes sense: handleMove is declared inside the component body, which makes it a reactive value. Every reactive value must be specified as a dependency, or it can potentially get stale over time!The author of the original code has “lied” to React by saying that the Effect does not depend ([]) on any reactive values. This is why React did not re-synchronize the Effect after canMove has changed (and handleMove with it). Because React did not re-synchronize the Effect, the handleMove attached as a listener is the handleMove function created during the initial render. During the initial render, canMove was true, which is why handleMove from the initial render will forever see that value.If you never suppress the linter, you will never see problems with stale values.With useEffectEvent, there is no need to “lie” to the linter, and the code works as you would expect:App.jsApp.js ResetForkimport { useState, useEffect } from 'react';\nimport { experimental_useEffectEvent as useEffectEvent } from 'react';\n\nexport default function App() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [canMove, setCanMove] = useState(true);\n\n  const onMove = useEffectEvent(e => {\n    if (canMove) {\n      setPosition({ x: e.clientX, y: e.clientY });\n    }\n  });\n\n  useEffect(() => {\n    window.addEventListener('pointermove', onMove);\n    return () => window.removeEventListener('pointermove', onMove);\n  }, []);\n\n  return (\n    <>\n      <label>\n        <input type=\"checkbox\"\n          checked={canMove}\n          onChange={e => setCanMove(e.target.checked)}\n        />\n        The dot is allowed to move\n      </label>\n      <hr />\n      <div style={{\n        position: 'absolute',\n        backgroundColor: 'pink',\n        borderRadius: '50%',\n        opacity: 0.6,\n        transform: `translate(${position.x}px, ${position.y}px)`,\n        pointerEvents: 'none',\n        left: -20,\n        top: -20,\n        width: 40,\n        height: 40,\n      }} />\n    </>\n  );\n}\n\nShow moreThis doesn’t mean that useEffectEvent is always the correct solution. You should only apply it to the lines of code that you don’t want to be reactive. In the above sandbox, you didn’t want the Effect’s code to be reactive with regards to canMove. That’s why it made sense to extract an Effect Event.Read Removing Effect Dependencies for other correct alternatives to suppressing the linter."
                                        ]
                                    },
                                    {
                                        "sub_header": "Limitations of Effect Events ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/separating-events-from-effects/#limitations-of-effect-events",
                                        "content": [
                                            "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                            "Effect Events are very limited in how you can use them:",
                                            "  1.Only call them from inside Effects.",
                                            "  2.Never pass them to other components or Hooks.",
                                            "For example, don’t declare and pass an Effect Event like this:",
                                            {
                                                "code_example": "function Timer() {  const [count, setCount] = useState(0);  const onTick = useEffectEvent(() => {    setCount(count + 1);  });  useTimer(onTick, 1000); // 🔴 Avoid: Passing Effect Events  return <h1>{count}</h1>}function useTimer(callback, delay) {  useEffect(() => {    const id = setInterval(() => {      callback();    }, delay);    return () => {      clearInterval(id);    };  }, [delay, callback]); // Need to specify \"callback\" in dependencies}"
                                            },
                                            "Instead, always declare Effect Events directly next to the Effects that use them:",
                                            {
                                                "code_example": "function Timer() {  const [count, setCount] = useState(0);  useTimer(() => {    setCount(count + 1);  }, 1000);  return <h1>{count}</h1>}function useTimer(callback, delay) {  const onTick = useEffectEvent(() => {    callback();  });  useEffect(() => {    const id = setInterval(() => {      onTick(); // ✅ Good: Only called locally inside an Effect    }, delay);    return () => {      clearInterval(id);    };  }, [delay]); // No need to specify \"onTick\" (an Effect Event) as a dependency}"
                                            },
                                            "Effect Events are non-reactive “pieces” of your Effect code. They should be next to the Effect using them.",
                                            "Recap\nEvent handlers run in response to specific interactions.\nEffects run whenever synchronization is needed.\nLogic inside event handlers is not reactive.\nLogic inside Effects is reactive.\nYou can move non-reactive logic from Effects into Effect Events.\nOnly call Effect Events from inside Effects.\nDon’t pass Effect Events to other components or Hooks.\n",
                                            {
                                                "code_example": "Timer"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Removing Effect Dependencies",
                        "url": "https://react.dev/learn/removing-effect-dependencies",
                        "content": [
                            "When you write an Effect, the linter will verify that you’ve included every reactive value (like props and state) that the Effect reads in the list of your Effect’s dependencies. This ensures that your Effect remains synchronized with the latest props and state of your component. Unnecessary dependencies may cause your Effect to run too often, or even create an infinite loop. Follow this guide to review and remove unnecessary dependencies from your Effects.",
                            "  1.How to fix infinite Effect dependency loops",
                            "  2.What to do when you want to remove a dependency",
                            "  3.How to read a value from your Effect without “reacting” to it",
                            "  4.How and why to avoid object and function dependencies",
                            "  5.Why suppressing the dependency linter is dangerous, and what to do instead",
                            "You will learn\nHow to fix infinite Effect dependency loops\nWhat to do when you want to remove a dependency\nHow to read a value from your Effect without “reacting” to it\nHow and why to avoid object and function dependencies\nWhy suppressing the dependency linter is dangerous, and what to do instead\n",
                            {
                                "sub_header": "Dependencies should match the code ",
                                "source": "react",
                                "url": "https://react.dev/learn/removing-effect-dependencies/#dependencies-should-match-the-code",
                                "content": [
                                    "When you write an Effect, you first specify how to start and stop whatever you want your Effect to be doing:",
                                    {
                                        "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  \t// ...}"
                                    },
                                    "Then, if you leave the Effect dependencies empty ([]), the linter will suggest the correct dependencies:",
                                    {
                                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []); // <-- Fix the mistake here!  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                    },
                                    "Fill them in according to what the linter says:",
                                    {
                                        "code_example": "function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ...}"
                                    },
                                    "Effects “react” to reactive values. Since roomId is a reactive value (it can change due to a re-render), the linter verifies that you’ve specified it as a dependency. If roomId receives a different value, React will re-synchronize your Effect. This ensures that the chat stays connected to the selected room and “reacts” to the dropdown:",
                                    {
                                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return <h1>Welcome to the {roomId} room!</h1>;}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                    },
                                    {
                                        "sub_header": "To remove a dependency, prove that it’s not a dependency ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/removing-effect-dependencies/#to-remove-a-dependency-prove-that-its-not-a-dependency",
                                        "content": [
                                            "Notice that you can’t “choose” the dependencies of your Effect. Every reactive value used by your Effect’s code must be declared in your dependency list. The dependency list is determined by the surrounding code:",
                                            {
                                                "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) { // This is a reactive value  useEffect(() => {    const connection = createConnection(serverUrl, roomId); // This Effect reads that reactive value    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ So you must specify that reactive value as a dependency of your Effect  // ...}"
                                            },
                                            "Reactive values include props and all variables and functions declared directly inside of your component. Since roomId is a reactive value, you can’t remove it from the dependency list. The linter wouldn’t allow it:",
                                            {
                                                "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []); // 🔴 React Hook useEffect has a missing dependency: 'roomId'  // ...}"
                                            },
                                            "And the linter would be right! Since roomId may change over time, this would introduce a bug in your code.",
                                            "To remove a dependency, “prove” to the linter that it doesn’t need to be a dependency. For example, you can move roomId out of your component to prove that it’s not reactive and won’t change on re-renders:",
                                            {
                                                "code_example": "const serverUrl = 'https://localhost:1234';const roomId = 'music'; // Not a reactive value anymorefunction ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []); // ✅ All dependencies declared  // ...}"
                                            },
                                            "Now that roomId is not a reactive value (and can’t change on a re-render), it doesn’t need to be a dependency:",
                                            {
                                                "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';const roomId = 'music';export default function ChatRoom() {  useEffect(() => {    const connection = createConnection(serverUrl, roomId);    connection.connect();    return () => connection.disconnect();  }, []);  return <h1>Welcome to the {roomId} room!</h1>;}"
                                            },
                                            "This is why you could now specify an empty ([]) dependency list. Your Effect really doesn’t depend on any reactive value anymore, so it really doesn’t need to re-run when any of the component’s props or state change."
                                        ]
                                    },
                                    {
                                        "sub_header": "To change the dependencies, change the code ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/removing-effect-dependencies/#to-change-the-dependencies-change-the-code",
                                        "content": [
                                            "You might have noticed a pattern in your workflow:",
                                            "  1.First, you change the code of your Effect or how your reactive values are declared.",
                                            "  2.Then, you follow the linter and adjust the dependencies to match the code you have changed.",
                                            "  3.If you’re not happy with the list of dependencies, you go back to the first step (and change the code again).",
                                            "The last part is important. If you want to change the dependencies, change the surrounding code first. You can think of the dependency list as a list of all the reactive values used by your Effect’s code. You don’t choose what to put on that list. The list describes your code. To change the dependency list, change the code.",
                                            "This might feel like solving an equation. You might start with a goal (for example, to remove a dependency), and you need to “find” the code matching that goal. Not everyone finds solving equations fun, and the same thing could be said about writing Effects! Luckily, there is a list of common recipes that you can try below.",
                                            {
                                                "code_example": "useEffect(() => {  // ...  // 🔴 Avoid suppressing the linter like this:  // eslint-ignore-next-line react-hooks/exhaustive-deps}, []);"
                                            },
                                            "Deep DiveWhy is suppressing the dependency linter so dangerous? Show DetailsSuppressing the linter leads to very unintuitive bugs that are hard to find and fix. Here’s one example:App.jsApp.js ResetForkimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n  const [increment, setIncrement] = useState(1);\n\n  function onTick() {\n\tsetCount(count + increment);\n  }\n\n  useEffect(() => {\n    const id = setInterval(onTick, 1000);\n    return () => clearInterval(id);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <>\n      <h1>\n        Counter: {count}\n        <button onClick={() => setCount(0)}>Reset</button>\n      </h1>\n      <hr />\n      <p>\n        Every second, increment by:\n        <button disabled={increment === 0} onClick={() => {\n          setIncrement(i => i - 1);\n        }}>–</button>\n        <b>{increment}</b>\n        <button onClick={() => {\n          setIncrement(i => i + 1);\n        }}>+</button>\n      </p>\n    </>\n  );\n}\n\nShow moreLet’s say that you wanted to run the Effect “only on mount”. You’ve read that empty ([]) dependencies do that, so you’ve decided to ignore the linter, and forcefully specified [] as the dependencies.This counter was supposed to increment every second by the amount configurable with the two buttons. However, since you “lied” to React that this Effect doesn’t depend on anything, React forever keeps using the onTick function from the initial render. During that render, count was 0 and increment was 1. This is why onTick from that render always calls setCount(0 + 1) every second, and you always see 1. Bugs like this are harder to fix when they’re spread across multiple components.There’s always a better solution than ignoring the linter! To fix this code, you need to add onTick to the dependency list. (To ensure the interval is only setup once, make onTick an Effect Event.)We recommend treating the dependency lint error as a compilation error. If you don’t suppress it, you will never see bugs like this. The rest of this page documents the alternatives for this and other cases."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Removing unnecessary dependencies ",
                                "source": "react",
                                "url": "https://react.dev/learn/removing-effect-dependencies/#removing-unnecessary-dependencies",
                                "content": [
                                    "Every time you adjust the Effect’s dependencies to reflect the code, look at the dependency list. Does it make sense for the Effect to re-run when any of these dependencies change? Sometimes, the answer is “no”:",
                                    "  1.You might want to re-execute different parts of your Effect under different conditions.",
                                    "  2.You might want to only read the latest value of some dependency instead of “reacting” to its changes.",
                                    "  3.A dependency may change too often unintentionally because it’s an object or a function.",
                                    "To find the right solution, you’ll need to answer a few questions about your Effect. Let’s walk through them.",
                                    {
                                        "sub_header": "Should this code move to an event handler? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/removing-effect-dependencies/#should-this-code-move-to-an-event-handler",
                                        "content": [
                                            "The first thing you should think about is whether this code should be an Effect at all.",
                                            "Imagine a form. On submit, you set the submitted state variable to true. You need to send a POST request and show a notification. You’ve put this logic inside an Effect that “reacts” to submitted being true:",
                                            {
                                                "code_example": "function Form() {  const [submitted, setSubmitted] = useState(false);  useEffect(() => {    if (submitted) {      // 🔴 Avoid: Event-specific logic inside an Effect      post('/api/register');      showNotification('Successfully registered!');    }  }, [submitted]);  function handleSubmit() {    setSubmitted(true);  }  // ...}"
                                            },
                                            "Later, you want to style the notification message according to the current theme, so you read the current theme. Since theme is declared in the component body, it is a reactive value, so you add it as a dependency:",
                                            {
                                                "code_example": "function Form() {  const [submitted, setSubmitted] = useState(false);  const theme = useContext(ThemeContext);  useEffect(() => {    if (submitted) {      // 🔴 Avoid: Event-specific logic inside an Effect      post('/api/register');      showNotification('Successfully registered!', theme);    }  }, [submitted, theme]); // ✅ All dependencies declared  function handleSubmit() {    setSubmitted(true);  }    // ...}"
                                            },
                                            "By doing this, you’ve introduced a bug. Imagine you submit the form first and then switch between Dark and Light themes. The theme will change, the Effect will re-run, and so it will display the same notification again!",
                                            "The problem here is that this shouldn’t be an Effect in the first place. You want to send this POST request and show the notification in response to submitting the form, which is a particular interaction. To run some code in response to particular interaction, put that logic directly into the corresponding event handler:",
                                            {
                                                "code_example": "function Form() {  const theme = useContext(ThemeContext);  function handleSubmit() {    // ✅ Good: Event-specific logic is called from event handlers    post('/api/register');    showNotification('Successfully registered!', theme);  }    // ...}"
                                            },
                                            "Now that the code is in an event handler, it’s not reactive—so it will only run when the user submits the form. Read more about choosing between event handlers and Effects and how to delete unnecessary Effects."
                                        ]
                                    },
                                    {
                                        "sub_header": "Is your Effect doing several unrelated things? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/removing-effect-dependencies/#is-your-effect-doing-several-unrelated-things",
                                        "content": [
                                            "The next question you should ask yourself is whether your Effect is doing several unrelated things.",
                                            "Imagine you’re creating a shipping form where the user needs to choose their city and area. You fetch the list of cities from the server according to the selected country to show them in a dropdown:",
                                            {
                                                "code_example": "function ShippingForm({ country }) {  const [cities, setCities] = useState(null);  const [city, setCity] = useState(null);  useEffect(() => {    let ignore = false;    fetch(`/api/cities?country=${country}`)      .then(response => response.json())      .then(json => {        if (!ignore) {          setCities(json);        }      });    return () => {      ignore = true;    };  }, [country]); // ✅ All dependencies declared  // ..."
                                            },
                                            "This is a good example of fetching data in an Effect. You are synchronizing the cities state with the network according to the country prop. You can’t do this in an event handler because you need to fetch as soon as ShippingForm is displayed and whenever the country changes (no matter which interaction causes it).",
                                            "Now let’s say you’re adding a second select box for city areas, which should fetch the areas for the currently selected city. You might start by adding a second fetch call for the list of areas inside the same Effect:",
                                            {
                                                "code_example": "function ShippingForm({ country }) {  const [cities, setCities] = useState(null);  const [city, setCity] = useState(null);  const [areas, setAreas] = useState(null);  useEffect(() => {    let ignore = false;    fetch(`/api/cities?country=${country}`)      .then(response => response.json())      .then(json => {        if (!ignore) {          setCities(json);        }      });    // 🔴 Avoid: A single Effect synchronizes two independent processes    if (city) {      fetch(`/api/areas?city=${city}`)        .then(response => response.json())        .then(json => {          if (!ignore) {            setAreas(json);          }        });    }    return () => {      ignore = true;    };  }, [country, city]); // ✅ All dependencies declared  // ..."
                                            },
                                            "However, since the Effect now uses the city state variable, you’ve had to add city to the list of dependencies. That, in turn, introduced a problem: when the user selects a different city, the Effect will re-run and call fetchCities(country). As a result, you will be unnecessarily refetching the list of cities many times.",
                                            "The problem with this code is that you’re synchronizing two different unrelated things:",
                                            "  1.You want to synchronize the cities state to the network based on the country prop.",
                                            "  2.You want to synchronize the areas state to the network based on the city state.",
                                            "Split the logic into two Effects, each of which reacts to the prop that it needs to synchronize with:",
                                            {
                                                "code_example": "function ShippingForm({ country }) {  const [cities, setCities] = useState(null);  useEffect(() => {    let ignore = false;    fetch(`/api/cities?country=${country}`)      .then(response => response.json())      .then(json => {        if (!ignore) {          setCities(json);        }      });    return () => {      ignore = true;    };  }, [country]); // ✅ All dependencies declared  const [city, setCity] = useState(null);  const [areas, setAreas] = useState(null);  useEffect(() => {    if (city) {      let ignore = false;      fetch(`/api/areas?city=${city}`)        .then(response => response.json())        .then(json => {          if (!ignore) {            setAreas(json);          }        });      return () => {        ignore = true;      };    }  }, [city]); // ✅ All dependencies declared  // ..."
                                            },
                                            "Now the first Effect only re-runs if the country changes, while the second Effect re-runs when the city changes. You’ve separated them by purpose: two different things are synchronized by two separate Effects. Two separate Effects have two separate dependency lists, so they won’t trigger each other unintentionally.",
                                            "The final code is longer than the original, but splitting these Effects is still correct. Each Effect should represent an independent synchronization process. In this example, deleting one Effect doesn’t break the other Effect’s logic. This means they synchronize different things, and it’s good to split them up. If you’re concerned about duplication, you can improve this code by extracting repetitive logic into a custom Hook."
                                        ]
                                    },
                                    {
                                        "sub_header": "Are you reading some state to calculate the next state? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/removing-effect-dependencies/#are-you-reading-some-state-to-calculate-the-next-state",
                                        "content": [
                                            "This Effect updates the messages state variable with a newly created array every time a new message arrives:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages([...messages, receivedMessage]);    });    // ..."
                                            },
                                            "It uses the messages variable to create a new array starting with all the existing messages and adds the new message at the end. However, since messages is a reactive value read by an Effect, it must be a dependency:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages([...messages, receivedMessage]);    });    return () => connection.disconnect();  }, [roomId, messages]); // ✅ All dependencies declared  // ..."
                                            },
                                            "And making messages a dependency introduces a problem.",
                                            "Every time you receive a message, setMessages() causes the component to re-render with a new messages array that includes the received message. However, since this Effect now depends on messages, this will also re-synchronize the Effect. So every new message will make the chat re-connect. The user would not like that!",
                                            "To fix the issue, don’t read messages inside the Effect. Instead, pass an updater function to setMessages:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages(msgs => [...msgs, receivedMessage]);    });    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                            },
                                            "Notice how your Effect does not read the messages variable at all now. You only need to pass an updater function like msgs => [...msgs, receivedMessage]. React puts your updater function in a queue and will provide the msgs argument to it during the next render. This is why the Effect itself doesn’t need to depend on messages anymore. As a result of this fix, receiving a chat message will no longer make the chat re-connect."
                                        ]
                                    },
                                    {
                                        "sub_header": "Do you want to read a value without “reacting” to its changes? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/removing-effect-dependencies/#do-you-want-to-read-a-value-without-reacting-to-its-changes",
                                        "content": [
                                            "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                            "Suppose that you want to play a sound when the user receives a new message unless isMuted is true:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  const [isMuted, setIsMuted] = useState(false);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages(msgs => [...msgs, receivedMessage]);      if (!isMuted) {        playSound();      }    });    // ..."
                                            },
                                            "Since your Effect now uses isMuted in its code, you have to add it to the dependencies:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  const [isMuted, setIsMuted] = useState(false);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      setMessages(msgs => [...msgs, receivedMessage]);      if (!isMuted) {        playSound();      }    });    return () => connection.disconnect();  }, [roomId, isMuted]); // ✅ All dependencies declared  // ..."
                                            },
                                            "The problem is that every time isMuted changes (for example, when the user presses the “Muted” toggle), the Effect will re-synchronize, and reconnect to the chat. This is not the desired user experience! (In this example, even disabling the linter would not work—if you do that, isMuted would get “stuck” with its old value.)",
                                            "To solve this problem, you need to extract the logic that shouldn’t be reactive out of the Effect. You don’t want this Effect to “react” to the changes in isMuted. Move this non-reactive piece of logic into an Effect Event:",
                                            {
                                                "code_example": "import { useState, useEffect, useEffectEvent } from 'react';function ChatRoom({ roomId }) {  const [messages, setMessages] = useState([]);  const [isMuted, setIsMuted] = useState(false);  const onMessage = useEffectEvent(receivedMessage => {    setMessages(msgs => [...msgs, receivedMessage]);    if (!isMuted) {      playSound();    }  });  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      onMessage(receivedMessage);    });    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                            },
                                            "Effect Events let you split an Effect into reactive parts (which should “react” to reactive values like roomId and their changes) and non-reactive parts (which only read their latest values, like onMessage reads isMuted). Now that you read isMuted inside an Effect Event, it doesn’t need to be a dependency of your Effect. As a result, the chat won’t re-connect when you toggle the “Muted” setting on and off, solving the original issue!",
                                            {
                                                "sub_header": "Wrapping an event handler from the props ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/removing-effect-dependencies/#wrapping-an-event-handler-from-the-props",
                                                "content": [
                                                    "You might run into a similar problem when your component receives an event handler as a prop:",
                                                    {
                                                        "code_example": "function ChatRoom({ roomId, onReceiveMessage }) {  const [messages, setMessages] = useState([]);  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      onReceiveMessage(receivedMessage);    });    return () => connection.disconnect();  }, [roomId, onReceiveMessage]); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "Suppose that the parent component passes a different onReceiveMessage function on every render:",
                                                    {
                                                        "code_example": "<ChatRoom  roomId={roomId}  onReceiveMessage={receivedMessage => {    // ...  }}/>"
                                                    },
                                                    "Since onReceiveMessage is a dependency, it would cause the Effect to re-synchronize after every parent re-render. This would make it re-connect to the chat. To solve this, wrap the call in an Effect Event:",
                                                    {
                                                        "code_example": "function ChatRoom({ roomId, onReceiveMessage }) {  const [messages, setMessages] = useState([]);  const onMessage = useEffectEvent(receivedMessage => {    onReceiveMessage(receivedMessage);  });  useEffect(() => {    const connection = createConnection();    connection.connect();    connection.on('message', (receivedMessage) => {      onMessage(receivedMessage);    });    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "Effect Events aren’t reactive, so you don’t need to specify them as dependencies. As a result, the chat will no longer re-connect even if the parent component passes a function that’s different on every re-render."
                                                ]
                                            },
                                            {
                                                "sub_header": "Separating reactive and non-reactive code ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/removing-effect-dependencies/#separating-reactive-and-non-reactive-code",
                                                "content": [
                                                    "In this example, you want to log a visit every time roomId changes. You want to include the current notificationCount with every log, but you don’t want a change to notificationCount to trigger a log event.",
                                                    "The solution is again to split out the non-reactive code into an Effect Event:",
                                                    {
                                                        "code_example": "function Chat({ roomId, notificationCount }) {  const onVisit = useEffectEvent(visitedRoomId => {    logVisit(visitedRoomId, notificationCount);  });  useEffect(() => {    onVisit(roomId);  }, [roomId]); // ✅ All dependencies declared  // ...}"
                                                    },
                                                    "You want your logic to be reactive with regards to roomId, so you read roomId inside of your Effect. However, you don’t want a change to notificationCount to log an extra visit, so you read notificationCount inside of the Effect Event. Learn more about reading the latest props and state from Effects using Effect Events."
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Does some reactive value change unintentionally? ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/removing-effect-dependencies/#does-some-reactive-value-change-unintentionally",
                                        "content": [
                                            "Sometimes, you do want your Effect to “react” to a certain value, but that value changes more often than you’d like—and might not reflect any actual change from the user’s perspective. For example, let’s say that you create an options object in the body of your component, and then read that object from inside of your Effect:",
                                            {
                                                "code_example": "function ChatRoom({ roomId }) {  // ...  const options = {    serverUrl: serverUrl,    roomId: roomId  };  useEffect(() => {    const connection = createConnection(options);    connection.connect();    // ..."
                                            },
                                            "This object is declared in the component body, so it’s a reactive value. When you read a reactive value like this inside an Effect, you declare it as a dependency. This ensures your Effect “reacts” to its changes:",
                                            {
                                                "code_example": "  // ...  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [options]); // ✅ All dependencies declared  // ..."
                                            },
                                            "It is important to declare it as a dependency! This ensures, for example, that if the roomId changes, your Effect will re-connect to the chat with the new options. However, there is also a problem with the code above. To see it, try typing into the input in the sandbox below, and watch what happens in the console:",
                                            {
                                                "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  // Temporarily disable the linter to demonstrate the problem  // eslint-disable-next-line react-hooks/exhaustive-deps  const options = {    serverUrl: serverUrl,    roomId: roomId  };  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [options]);  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                            },
                                            "In the sandbox above, the input only updates the message state variable. From the user’s perspective, this should not affect the chat connection. However, every time you update the message, your component re-renders. When your component re-renders, the code inside of it runs again from scratch.",
                                            "A new options object is created from scratch on every re-render of the ChatRoom component. React sees that the options object is a different object from the options object created during the last render. This is why it re-synchronizes your Effect (which depends on options), and the chat re-connects as you type.",
                                            "This problem only affects objects and functions. In JavaScript, each newly created object and function is considered distinct from all the others. It doesn’t matter that the contents inside of them may be the same!",
                                            {
                                                "code_example": "// During the first renderconst options1 = { serverUrl: 'https://localhost:1234', roomId: 'music' };// During the next renderconst options2 = { serverUrl: 'https://localhost:1234', roomId: 'music' };// These are two different objects!console.log(Object.is(options1, options2)); // false"
                                            },
                                            "Object and function dependencies can make your Effect re-synchronize more often than you need.",
                                            "This is why, whenever possible, you should try to avoid objects and functions as your Effect’s dependencies. Instead, try moving them outside the component, inside the Effect, or extracting primitive values out of them.",
                                            {
                                                "sub_header": "Move static objects and functions outside your component ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/removing-effect-dependencies/#move-static-objects-and-functions-outside-your-component",
                                                "content": [
                                                    "If the object does not depend on any props and state, you can move that object outside your component:",
                                                    {
                                                        "code_example": "const options = {  serverUrl: 'https://localhost:1234',  roomId: 'music'};function ChatRoom() {  const [message, setMessage] = useState('');  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, []); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "This way, you prove to the linter that it’s not reactive. It can’t change as a result of a re-render, so it doesn’t need to be a dependency. Now re-rendering ChatRoom won’t cause your Effect to re-synchronize.",
                                                    "This works for functions too:",
                                                    {
                                                        "code_example": "function createOptions() {  return {    serverUrl: 'https://localhost:1234',    roomId: 'music'  };}function ChatRoom() {  const [message, setMessage] = useState('');  useEffect(() => {    const options = createOptions();    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, []); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "Since createOptions is declared outside your component, it’s not a reactive value. This is why it doesn’t need to be specified in your Effect’s dependencies, and why it won’t ever cause your Effect to re-synchronize."
                                                ]
                                            },
                                            {
                                                "sub_header": "Move dynamic objects and functions inside your Effect ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/removing-effect-dependencies/#move-dynamic-objects-and-functions-inside-your-effect",
                                                "content": [
                                                    "If your object depends on some reactive value that may change as a result of a re-render, like a roomId prop, you can’t pull it outside your component. You can, however, move its creation inside of your Effect’s code:",
                                                    {
                                                        "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "Now that options is declared inside of your Effect, it is no longer a dependency of your Effect. Instead, the only reactive value used by your Effect is roomId. Since roomId is not an object or function, you can be sure that it won’t be unintentionally different. In JavaScript, numbers and strings are compared by their content:",
                                                    {
                                                        "code_example": "// During the first renderconst roomId1 = 'music';// During the next renderconst roomId2 = 'music';// These two strings are the same!console.log(Object.is(roomId1, roomId2)); // true"
                                                    },
                                                    "Thanks to this fix, the chat no longer re-connects if you edit the input:",
                                                    {
                                                        "code_sandbox": "chat.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [roomId]);  return (    <>      <h1>Welcome to the {roomId} room!</h1>      <input value={message} onChange={e => setMessage(e.target.value)} />    </>  );}export default function App() {  const [roomId, setRoomId] = useState('general');  return (    <>      <label>        Choose the chat room:{' '}        <select          value={roomId}          onChange={e => setRoomId(e.target.value)}        >          <option value=\"general\">general</option>          <option value=\"travel\">travel</option>          <option value=\"music\">music</option>        </select>      </label>      <hr />      <ChatRoom roomId={roomId} />    </>  );}"
                                                    },
                                                    "However, it does re-connect when you change the roomId dropdown, as you would expect.",
                                                    "This works for functions, too:",
                                                    {
                                                        "code_example": "const serverUrl = 'https://localhost:1234';function ChatRoom({ roomId }) {  const [message, setMessage] = useState('');  useEffect(() => {    function createOptions() {      return {        serverUrl: serverUrl,        roomId: roomId      };    }    const options = createOptions();    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [roomId]); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "You can write your own functions to group pieces of logic inside your Effect. As long as you also declare them inside your Effect, they’re not reactive values, and so they don’t need to be dependencies of your Effect."
                                                ]
                                            },
                                            {
                                                "sub_header": "Read primitive values from objects ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/removing-effect-dependencies/#read-primitive-values-from-objects",
                                                "content": [
                                                    "Sometimes, you may receive an object from props:",
                                                    {
                                                        "code_example": "function ChatRoom({ options }) {  const [message, setMessage] = useState('');  useEffect(() => {    const connection = createConnection(options);    connection.connect();    return () => connection.disconnect();  }, [options]); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "The risk here is that the parent component will create the object during rendering:",
                                                    {
                                                        "code_example": "<ChatRoom  roomId={roomId}  options={{    serverUrl: serverUrl,    roomId: roomId  }}/>"
                                                    },
                                                    "This would cause your Effect to re-connect every time the parent component re-renders. To fix this, read information from the object outside the Effect, and avoid having object and function dependencies:",
                                                    {
                                                        "code_example": "function ChatRoom({ options }) {  const [message, setMessage] = useState('');  const { roomId, serverUrl } = options;  useEffect(() => {    const connection = createConnection({      roomId: roomId,      serverUrl: serverUrl    });    connection.connect();    return () => connection.disconnect();  }, [roomId, serverUrl]); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "The logic gets a little repetitive (you read some values from an object outside an Effect, and then create an object with the same values inside the Effect). But it makes it very explicit what information your Effect actually depends on. If an object is re-created unintentionally by the parent component, the chat would not re-connect. However, if options.roomId or options.serverUrl really are different, the chat would re-connect."
                                                ]
                                            },
                                            {
                                                "sub_header": "Calculate primitive values from functions ",
                                                "source": "react",
                                                "url": "https://react.dev/learn/removing-effect-dependencies/#calculate-primitive-values-from-functions",
                                                "content": [
                                                    "The same approach can work for functions. For example, suppose the parent component passes a function:",
                                                    {
                                                        "code_example": "<ChatRoom  roomId={roomId}  getOptions={() => {    return {      serverUrl: serverUrl,      roomId: roomId    };  }}/>"
                                                    },
                                                    "To avoid making it a dependency (and causing it to re-connect on re-renders), call it outside the Effect. This gives you the roomId and serverUrl values that aren’t objects, and that you can read from inside your Effect:",
                                                    {
                                                        "code_example": "function ChatRoom({ getOptions }) {  const [message, setMessage] = useState('');  const { roomId, serverUrl } = getOptions();  useEffect(() => {    const connection = createConnection({      roomId: roomId,      serverUrl: serverUrl    });    connection.connect();    return () => connection.disconnect();  }, [roomId, serverUrl]); // ✅ All dependencies declared  // ..."
                                                    },
                                                    "This only works for pure functions because they are safe to call during rendering. If your function is an event handler, but you don’t want its changes to re-synchronize your Effect, wrap it into an Effect Event instead.",
                                                    "Recap\nDependencies should always match the code.\nWhen you’re not happy with your dependencies, what you need to edit is the code.\nSuppressing the linter leads to very confusing bugs, and you should always avoid it.\nTo remove a dependency, you need to “prove” to the linter that it’s not necessary.\nIf some code should run in response to a specific interaction, move that code to an event handler.\nIf different parts of your Effect should re-run for different reasons, split it into several Effects.\nIf you want to update some state based on the previous state, pass an updater function.\nIf you want to read the latest value without “reacting” it, extract an Effect Event from your Effect.\nIn JavaScript, objects and functions are considered different if they were created at different times.\nTry to avoid object and function dependencies. Move them outside the component or inside the Effect.\n",
                                                    "Try out some challenges1. Fix a resetting interval 2. Fix a retriggering animation 3. Fix a reconnecting chat 4. Fix a reconnecting chat, again Challenge 1 of 4: Fix a resetting interval This Effect sets up an interval that ticks every second. You’ve noticed something strange happening: it seems like the interval gets destroyed and re-created every time it ticks. Fix the code so that the interval doesn’t get constantly re-created.App.jsApp.js ResetForkimport { useState, useEffect } from 'react';\n\nexport default function Timer() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() => {\n    console.log('✅ Creating an interval');\n    const id = setInterval(() => {\n      console.log('⏰ Interval tick');\n      setCount(count + 1);\n    }, 1000);\n    return () => {\n      console.log('❌ Clearing an interval');\n      clearInterval(id);\n    };\n  }, [count]);\n\n  return <h1>Counter: {count}</h1>\n}\n\nShow more Show hint Show solutionNext Challenge"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "headers": "Reusing Logic with Custom Hooks",
                        "url": "https://react.dev/learn/reusing-logic-with-custom-hooks",
                        "content": [
                            "  1.What custom Hooks are, and how to write your own",
                            "  2.How to reuse logic between components",
                            "  3.How to name and structure your custom Hooks",
                            "  4.When and why to extract custom Hooks",
                            "You will learn\nWhat custom Hooks are, and how to write your own\nHow to reuse logic between components\nHow to name and structure your custom Hooks\nWhen and why to extract custom Hooks\n",
                            {
                                "sub_header": "Custom Hooks: Sharing logic between components ",
                                "source": "react",
                                "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#custom-hooks-sharing-logic-between-components",
                                "content": [
                                    "Imagine you’re developing an app that heavily relies on the network (as most apps do). You want to warn the user if their network connection has accidentally gone off while they were using your app. How would you go about it? It seems like you’ll need two things in your component:",
                                    "  1.A piece of state that tracks whether the network is online.",
                                    "  2.An Effect that subscribes to the global online and offline events, and updates that state.",
                                    "This will keep your component synchronized with the network status. You might start with something like this:",
                                    {
                                        "code_sandbox": "import { useState, useEffect } from 'react';export default function StatusBar() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function handleOnline() {      setIsOnline(true);    }    function handleOffline() {      setIsOnline(false);    }    window.addEventListener('online', handleOnline);    window.addEventListener('offline', handleOffline);    return () => {      window.removeEventListener('online', handleOnline);      window.removeEventListener('offline', handleOffline);    };  }, []);  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;}"
                                    },
                                    "Try turning your network on and off, and notice how this StatusBar updates in response to your actions.",
                                    "Now imagine you also want to use the same logic in a different component. You want to implement a Save button that will become disabled and show “Reconnecting…” instead of “Save” while the network is off.",
                                    "To start, you can copy and paste the isOnline state and the Effect into SaveButton:",
                                    {
                                        "code_sandbox": "import { useState, useEffect } from 'react';export default function SaveButton() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function handleOnline() {      setIsOnline(true);    }    function handleOffline() {      setIsOnline(false);    }    window.addEventListener('online', handleOnline);    window.addEventListener('offline', handleOffline);    return () => {      window.removeEventListener('online', handleOnline);      window.removeEventListener('offline', handleOffline);    };  }, []);  function handleSaveClick() {    console.log('✅ Progress saved');  }  return (    <button disabled={!isOnline} onClick={handleSaveClick}>      {isOnline ? 'Save progress' : 'Reconnecting...'}    </button>  );}"
                                    },
                                    "Verify that, if you turn off the network, the button will change its appearance.",
                                    "These two components work fine, but the duplication in logic between them is unfortunate. It seems like even though they have different visual appearance, you want to reuse the logic between them.",
                                    {
                                        "sub_header": "Extracting your own custom Hook from a component ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#extracting-your-own-custom-hook-from-a-component",
                                        "content": [
                                            "Imagine for a moment that, similar to useState and useEffect, there was a built-in useOnlineStatus Hook. Then both of these components could be simplified and you could remove the duplication between them:",
                                            {
                                                "code_example": "function StatusBar() {  const isOnline = useOnlineStatus();  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;}function SaveButton() {  const isOnline = useOnlineStatus();  function handleSaveClick() {    console.log('✅ Progress saved');  }  return (    <button disabled={!isOnline} onClick={handleSaveClick}>      {isOnline ? 'Save progress' : 'Reconnecting...'}    </button>  );}"
                                            },
                                            "Although there is no such built-in Hook, you can write it yourself. Declare a function called useOnlineStatus and move all the duplicated code into it from the components you wrote earlier:",
                                            {
                                                "code_example": "function useOnlineStatus() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function handleOnline() {      setIsOnline(true);    }    function handleOffline() {      setIsOnline(false);    }    window.addEventListener('online', handleOnline);    window.addEventListener('offline', handleOffline);    return () => {      window.removeEventListener('online', handleOnline);      window.removeEventListener('offline', handleOffline);    };  }, []);  return isOnline;}"
                                            },
                                            "At the end of the function, return isOnline. This lets your components read that value:",
                                            {
                                                "code_sandbox": "useOnlineStatus.jsimport { useOnlineStatus } from './useOnlineStatus.js';function StatusBar() {  const isOnline = useOnlineStatus();  return <h1>{isOnline ? '✅ Online' : '❌ Disconnected'}</h1>;}function SaveButton() {  const isOnline = useOnlineStatus();  function handleSaveClick() {    console.log('✅ Progress saved');  }  return (    <button disabled={!isOnline} onClick={handleSaveClick}>      {isOnline ? 'Save progress' : 'Reconnecting...'}    </button>  );}export default function App() {  return (    <>      <SaveButton />      <StatusBar />    </>  );}"
                                            },
                                            "Verify that switching the network on and off updates both components.",
                                            "Now your components don’t have as much repetitive logic. More importantly, the code inside them describes what they want to do (use the online status!) rather than how to do it (by subscribing to the browser events).",
                                            "When you extract logic into custom Hooks, you can hide the gnarly details of how you deal with some external system or a browser API. The code of your components expresses your intent, not the implementation."
                                        ]
                                    },
                                    {
                                        "sub_header": "Hook names always start with use ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#hook-names-always-start-with-use",
                                        "content": [
                                            "React applications are built from components. Components are built from Hooks, whether built-in or custom. You’ll likely often use custom Hooks created by others, but occasionally you might write one yourself!",
                                            "You must follow these naming conventions:",
                                            "  1.React component names must start with a capital letter, like StatusBar and SaveButton. React components also need to return something that React knows how to display, like a piece of JSX.",
                                            "  2.Hook names must start with use followed by a capital letter, like useState (built-in) or useOnlineStatus (custom, like earlier on the page). Hooks may return arbitrary values.",
                                            "This convention guarantees that you can always look at a component and know where its state, Effects, and other React features might “hide”. For example, if you see a getColor() function call inside your component, you can be sure that it can’t possibly contain React state inside because its name doesn’t start with use. However, a function call like useOnlineStatus() will most likely contain calls to other Hooks inside!",
                                            {
                                                "code_example": "useOnlineStatus"
                                            },
                                            "Deep DiveShould all functions called during rendering start with the use prefix? Show DetailsNo. Functions that don’t call Hooks don’t need to be Hooks.If your function doesn’t call any Hooks, avoid the use prefix. Instead, write it as a regular function without the use prefix. For example, useSorted below doesn’t call Hooks, so call it getSorted instead:// 🔴 Avoid: A Hook that doesn't use Hooksfunction useSorted(items) {  return items.slice().sort();}// ✅ Good: A regular function that doesn't use Hooksfunction getSorted(items) {  return items.slice().sort();}This ensures that your code can call this regular function anywhere, including conditions:function List({ items, shouldSort }) {  let displayedItems = items;  if (shouldSort) {    // ✅ It's ok to call getSorted() conditionally because it's not a Hook    displayedItems = getSorted(items);  }  // ...}You should give use prefix to a function (and thus make it a Hook) if it uses at least one Hook inside of it:// ✅ Good: A Hook that uses other Hooksfunction useAuth() {  return useContext(Auth);}Technically, this isn’t enforced by React. In principle, you could make a Hook that doesn’t call other Hooks. This is often confusing and limiting so it’s best to avoid that pattern. However, there may be rare cases where it is helpful. For example, maybe your function doesn’t use any Hooks right now, but you plan to add some Hook calls to it in the future. Then it makes sense to name it with the use prefix:// ✅ Good: A Hook that will likely use some other Hooks laterfunction useAuth() {  // TODO: Replace with this line when authentication is implemented:  // return useContext(Auth);  return TEST_USER;}Then components won’t be able to call it conditionally. This will become important when you actually add Hook calls inside. If you don’t plan to use Hooks inside it (now or later), don’t make it a Hook."
                                        ]
                                    },
                                    {
                                        "sub_header": "Custom Hooks let you share stateful logic, not state itself ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#custom-hooks-let-you-share-stateful-logic-not-state-itself",
                                        "content": [
                                            "In the earlier example, when you turned the network on and off, both components updated together. However, it’s wrong to think that a single isOnline state variable is shared between them. Look at this code:",
                                            {
                                                "code_example": "function StatusBar() {  const isOnline = useOnlineStatus();  // ...}function SaveButton() {  const isOnline = useOnlineStatus();  // ...}"
                                            },
                                            "It works the same way as before you extracted the duplication:",
                                            {
                                                "code_example": "function StatusBar() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    // ...  }, []);  // ...}function SaveButton() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    // ...  }, []);  // ...}"
                                            },
                                            "These are two completely independent state variables and Effects! They happened to have the same value at the same time because you synchronized them with the same external value (whether the network is on).",
                                            "To better illustrate this, we’ll need a different example. Consider this Form component:",
                                            {
                                                "code_sandbox": "import { useState } from 'react';export default function Form() {  const [firstName, setFirstName] = useState('Mary');  const [lastName, setLastName] = useState('Poppins');  function handleFirstNameChange(e) {    setFirstName(e.target.value);  }  function handleLastNameChange(e) {    setLastName(e.target.value);  }  return (    <>      <label>        First name:        <input value={firstName} onChange={handleFirstNameChange} />      </label>      <label>        Last name:        <input value={lastName} onChange={handleLastNameChange} />      </label>      <p><b>Good morning, {firstName} {lastName}.</b></p>    </>  );}"
                                            },
                                            "There’s some repetitive logic for each form field:",
                                            "  1.There’s a piece of state (firstName and lastName).",
                                            "  2.There’s a change handler (handleFirstNameChange and handleLastNameChange).",
                                            "  3.There’s a piece of JSX that specifies the value and onChange attributes for that input.",
                                            "You can extract the repetitive logic into this useFormInput custom Hook:",
                                            {
                                                "code_sandbox": "useFormInput.jsuseFormInput.jsimport { useState } from 'react';export function useFormInput(initialValue) {  const [value, setValue] = useState(initialValue);  function handleChange(e) {    setValue(e.target.value);  }  const inputProps = {    value: value,    onChange: handleChange  };  return inputProps;}"
                                            },
                                            "Notice that it only declares one state variable called value.",
                                            "However, the Form component calls useFormInput two times:",
                                            {
                                                "code_example": "function Form() {  const firstNameProps = useFormInput('Mary');  const lastNameProps = useFormInput('Poppins');  // ..."
                                            },
                                            "This is why it works like declaring two separate state variables!",
                                            "Custom Hooks let you share stateful logic but not state itself. Each call to a Hook is completely independent from every other call to the same Hook. This is why the two sandboxes above are completely equivalent. If you’d like, scroll back up and compare them. The behavior before and after extracting a custom Hook is identical.",
                                            "When you need to share the state itself between multiple components, lift it up and pass it down instead."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Passing reactive values between Hooks ",
                                "source": "react",
                                "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#passing-reactive-values-between-hooks",
                                "content": [
                                    "The code inside your custom Hooks will re-run during every re-render of your component. This is why, like components, custom Hooks need to be pure. Think of custom Hooks’ code as part of your component’s body!",
                                    "Because custom Hooks re-render together with your component, they always receive the latest props and state. To see what this means, consider this chat room example. Change the server URL or the chat room:",
                                    {
                                        "code_sandbox": "ChatRoom.jschat.jsnotifications.jsChatRoom.jsimport { useState, useEffect } from 'react';import { createConnection } from './chat.js';import { showNotification } from './notifications.js';export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.on('message', (msg) => {      showNotification('New message: ' + msg);    });    connection.connect();    return () => connection.disconnect();  }, [roomId, serverUrl]);  return (    <>      <label>        Server URL:        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}"
                                    },
                                    "When you change serverUrl or roomId, the Effect “reacts” to your changes and re-synchronizes. You can tell by the console messages that the chat re-connects every time that you change your Effect’s dependencies.",
                                    "Now move the Effect’s code into a custom Hook:",
                                    {
                                        "code_example": "export function useChatRoom({ serverUrl, roomId }) {  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    connection.on('message', (msg) => {      showNotification('New message: ' + msg);    });    return () => connection.disconnect();  }, [roomId, serverUrl]);}"
                                    },
                                    "This lets your ChatRoom component call your custom Hook without worrying about how it works inside:",
                                    {
                                        "code_example": "export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl  });  return (    <>      <label>        Server URL:        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}"
                                    },
                                    "This looks much simpler! (But it does the same thing.)",
                                    "Notice that the logic still responds to prop and state changes. Try editing the server URL or the selected room:",
                                    {
                                        "code_sandbox": "ChatRoom.jsuseChatRoom.jschat.jsnotifications.jsChatRoom.jsimport { useState } from 'react';import { useChatRoom } from './useChatRoom.js';export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl  });  return (    <>      <label>        Server URL:        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}"
                                    },
                                    "Notice how you’re taking the return value of one Hook:",
                                    {
                                        "code_example": "export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl  });  // ..."
                                    },
                                    "and pass it as an input to another Hook:",
                                    {
                                        "code_example": "export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl  });  // ..."
                                    },
                                    "Every time your ChatRoom component re-renders, it passes the latest roomId and serverUrl to your Hook. This is why your Effect re-connects to the chat whenever their values are different after a re-render. (If you ever worked with audio or video processing software, chaining Hooks like this might remind you of chaining visual or audio effects. It’s as if the output of useState “feeds into” the input of the useChatRoom.)",
                                    {
                                        "sub_header": "Passing event handlers to custom Hooks ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#passing-event-handlers-to-custom-hooks",
                                        "content": [
                                            "Under ConstructionThis section describes an experimental API that has not yet been released in a stable version of React.",
                                            "As you start using useChatRoom in more components, you might want to let components customize its behavior. For example, currently, the logic for what to do when a message arrives is hardcoded inside the Hook:",
                                            {
                                                "code_example": "export function useChatRoom({ serverUrl, roomId }) {  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    connection.on('message', (msg) => {      showNotification('New message: ' + msg);    });    return () => connection.disconnect();  }, [roomId, serverUrl]);}"
                                            },
                                            "Let’s say you want to move this logic back to your component:",
                                            {
                                                "code_example": "export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl,    onReceiveMessage(msg) {      showNotification('New message: ' + msg);    }  });  // ..."
                                            },
                                            "To make this work, change your custom Hook to take onReceiveMessage as one of its named options:",
                                            {
                                                "code_example": "export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    connection.on('message', (msg) => {      onReceiveMessage(msg);    });    return () => connection.disconnect();  }, [roomId, serverUrl, onReceiveMessage]); // ✅ All dependencies declared}"
                                            },
                                            "This will work, but there’s one more improvement you can do when your custom Hook accepts event handlers.",
                                            "Adding a dependency on onReceiveMessage is not ideal because it will cause the chat to re-connect every time the component re-renders. Wrap this event handler into an Effect Event to remove it from the dependencies:",
                                            {
                                                "code_example": "import { useEffect, useEffectEvent } from 'react';// ...export function useChatRoom({ serverUrl, roomId, onReceiveMessage }) {  const onMessage = useEffectEvent(onReceiveMessage);  useEffect(() => {    const options = {      serverUrl: serverUrl,      roomId: roomId    };    const connection = createConnection(options);    connection.connect();    connection.on('message', (msg) => {      onMessage(msg);    });    return () => connection.disconnect();  }, [roomId, serverUrl]); // ✅ All dependencies declared}"
                                            },
                                            "Now the chat won’t re-connect every time that the ChatRoom component re-renders. Here is a fully working demo of passing an event handler to a custom Hook that you can play with:",
                                            {
                                                "code_sandbox": "ChatRoom.jsuseChatRoom.jschat.jsnotifications.jsChatRoom.jsimport { useState } from 'react';import { useChatRoom } from './useChatRoom.js';import { showNotification } from './notifications.js';export default function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  useChatRoom({    roomId: roomId,    serverUrl: serverUrl,    onReceiveMessage(msg) {      showNotification('New message: ' + msg);    }  });  return (    <>      <label>        Server URL:        <input value={serverUrl} onChange={e => setServerUrl(e.target.value)} />      </label>      <h1>Welcome to the {roomId} room!</h1>    </>  );}"
                                            },
                                            "Notice how you no longer need to know how useChatRoom works in order to use it. You could add it to any other component, pass any other options, and it would work the same way. That’s the power of custom Hooks."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "When to use custom Hooks ",
                                "source": "react",
                                "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#when-to-use-custom-hooks",
                                "content": [
                                    "You don’t need to extract a custom Hook for every little duplicated bit of code. Some duplication is fine. For example, extracting a useFormInput Hook to wrap a single useState call like earlier is probably unnecessary.",
                                    "However, whenever you write an Effect, consider whether it would be clearer to also wrap it in a custom Hook. You shouldn’t need Effects very often, so if you’re writing one, it means that you need to “step outside React” to synchronize with some external system or to do something that React doesn’t have a built-in API for. Wrapping it into a custom Hook lets you precisely communicate your intent and how the data flows through it.",
                                    "For example, consider a ShippingForm component that displays two dropdowns: one shows the list of cities, and another shows the list of areas in the selected city. You might start with some code that looks like this:",
                                    {
                                        "code_example": "function ShippingForm({ country }) {  const [cities, setCities] = useState(null);  // This Effect fetches cities for a country  useEffect(() => {    let ignore = false;    fetch(`/api/cities?country=${country}`)      .then(response => response.json())      .then(json => {        if (!ignore) {          setCities(json);        }      });    return () => {      ignore = true;    };  }, [country]);  const [city, setCity] = useState(null);  const [areas, setAreas] = useState(null);  // This Effect fetches areas for the selected city  useEffect(() => {    if (city) {      let ignore = false;      fetch(`/api/areas?city=${city}`)        .then(response => response.json())        .then(json => {          if (!ignore) {            setAreas(json);          }        });      return () => {        ignore = true;      };    }  }, [city]);  // ..."
                                    },
                                    "Although this code is quite repetitive, it’s correct to keep these Effects separate from each other. They synchronize two different things, so you shouldn’t merge them into one Effect. Instead, you can simplify the ShippingForm component above by extracting the common logic between them into your own useData Hook:",
                                    {
                                        "code_example": "function useData(url) {  const [data, setData] = useState(null);  useEffect(() => {    if (url) {      let ignore = false;      fetch(url)        .then(response => response.json())        .then(json => {          if (!ignore) {            setData(json);          }        });      return () => {        ignore = true;      };    }  }, [url]);  return data;}"
                                    },
                                    "Now you can replace both Effects in the ShippingForm components with calls to useData:",
                                    {
                                        "code_example": "function ShippingForm({ country }) {  const cities = useData(`/api/cities?country=${country}`);  const [city, setCity] = useState(null);  const areas = useData(city ? `/api/areas?city=${city}` : null);  // ..."
                                    },
                                    "Extracting a custom Hook makes the data flow explicit. You feed the url in and you get the data out. By “hiding” your Effect inside useData, you also prevent someone working on the ShippingForm component from adding unnecessary dependencies to it. With time, most of your app’s Effects will be in custom Hooks.",
                                    "Deep DiveKeep your custom Hooks focused on concrete high-level use cases Show DetailsStart by choosing your custom Hook’s name. If you struggle to pick a clear name, it might mean that your Effect is too coupled to the rest of your component’s logic, and is not yet ready to be extracted.Ideally, your custom Hook’s name should be clear enough that even a person who doesn’t write code often could have a good guess about what your custom Hook does, what it takes, and what it returns:\n✅ useData(url)\n✅ useImpressionLog(eventName, extraData)\n✅ useChatRoom(options)\nWhen you synchronize with an external system, your custom Hook name may be more technical and use jargon specific to that system. It’s good as long as it would be clear to a person familiar with that system:\n✅ useMediaQuery(query)\n✅ useSocket(url)\n✅ useIntersectionObserver(ref, options)\nKeep custom Hooks focused on concrete high-level use cases. Avoid creating and using custom “lifecycle” Hooks that act as alternatives and convenience wrappers for the useEffect API itself:\n🔴 useMount(fn)\n🔴 useEffectOnce(fn)\n🔴 useUpdateEffect(fn)\nFor example, this useMount Hook tries to ensure some code only runs “on mount”:function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  // 🔴 Avoid: using custom \"lifecycle\" Hooks  useMount(() => {    const connection = createConnection({ roomId, serverUrl });    connection.connect();    post('/analytics/event', { eventName: 'visit_chat' });  });  // ...}// 🔴 Avoid: creating custom \"lifecycle\" Hooksfunction useMount(fn) {  useEffect(() => {    fn();  }, []); // 🔴 React Hook useEffect has a missing dependency: 'fn'}Custom “lifecycle” Hooks like useMount don’t fit well into the React paradigm. For example, this code example has a mistake (it doesn’t “react” to roomId or serverUrl changes), but the linter won’t warn you about it because the linter only checks direct useEffect calls. It won’t know about your Hook.If you’re writing an Effect, start by using the React API directly:function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  // ✅ Good: two raw Effects separated by purpose  useEffect(() => {    const connection = createConnection({ serverUrl, roomId });    connection.connect();    return () => connection.disconnect();  }, [serverUrl, roomId]);  useEffect(() => {    post('/analytics/event', { eventName: 'visit_chat', roomId });  }, [roomId]);  // ...}Then, you can (but don’t have to) extract custom Hooks for different high-level use cases:function ChatRoom({ roomId }) {  const [serverUrl, setServerUrl] = useState('https://localhost:1234');  // ✅ Great: custom Hooks named after their purpose  useChatRoom({ serverUrl, roomId });  useImpressionLog('visit_chat', { roomId });  // ...}A good custom Hook makes the calling code more declarative by constraining what it does. For example, useChatRoom(options) can only connect to the chat room, while useImpressionLog(eventName, extraData) can only send an impression log to the analytics. If your custom Hook API doesn’t constrain the use cases and is very abstract, in the long run it’s likely to introduce more problems than it solves.",
                                    {
                                        "sub_header": "Custom Hooks help you migrate to better patterns ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#custom-hooks-help-you-migrate-to-better-patterns",
                                        "content": [
                                            "Effects are an “escape hatch”: you use them when you need to “step outside React” and when there is no better built-in solution for your use case. With time, the React team’s goal is to reduce the number of the Effects in your app to the minimum by providing more specific solutions to more specific problems. Wrapping your Effects in custom Hooks makes it easier to upgrade your code when these solutions become available.",
                                            "Let’s return to this example:",
                                            {
                                                "code_sandbox": "useOnlineStatus.jsuseOnlineStatus.jsimport { useState, useEffect } from 'react';export function useOnlineStatus() {  const [isOnline, setIsOnline] = useState(true);  useEffect(() => {    function handleOnline() {      setIsOnline(true);    }    function handleOffline() {      setIsOnline(false);    }    window.addEventListener('online', handleOnline);    window.addEventListener('offline', handleOffline);    return () => {      window.removeEventListener('online', handleOnline);      window.removeEventListener('offline', handleOffline);    };  }, []);  return isOnline;}"
                                            },
                                            "In the above example, useOnlineStatus is implemented with a pair of useState and useEffect. However, this isn’t the best possible solution. There is a number of edge cases it doesn’t consider. For example, it assumes that when the component mounts, isOnline is already true, but this may be wrong if the network already went offline. You can use the browser navigator.onLine API to check for that, but using it directly would not work on the server for generating the initial HTML. In short, this code could be improved.",
                                            "Luckily, React 18 includes a dedicated API called useSyncExternalStore which takes care of all of these problems for you. Here is how your useOnlineStatus Hook, rewritten to take advantage of this new API:",
                                            {
                                                "code_sandbox": "useOnlineStatus.jsuseOnlineStatus.jsimport { useSyncExternalStore } from 'react';function subscribe(callback) {  window.addEventListener('online', callback);  window.addEventListener('offline', callback);  return () => {    window.removeEventListener('online', callback);    window.removeEventListener('offline', callback);  };}export function useOnlineStatus() {  return useSyncExternalStore(    subscribe,    () => navigator.onLine, // How to get the value on the client    () => true // How to get the value on the server  );}"
                                            },
                                            "Notice how you didn’t need to change any of the components to make this migration:",
                                            {
                                                "code_example": "function StatusBar() {  const isOnline = useOnlineStatus();  // ...}function SaveButton() {  const isOnline = useOnlineStatus();  // ...}"
                                            },
                                            "This is another reason for why wrapping Effects in custom Hooks is often beneficial:",
                                            "  1.You make the data flow to and from your Effects very explicit.",
                                            "  2.You let your components focus on the intent rather than on the exact implementation of your Effects.",
                                            "  3.When React adds new features, you can remove those Effects without changing any of your components.",
                                            "Similar to a design system, you might find it helpful to start extracting common idioms from your app’s components into custom Hooks. This will keep your components’ code focused on the intent, and let you avoid writing raw Effects very often. Many excellent custom Hooks are maintained by the React community.",
                                            "Deep DiveWill React provide any built-in solution for data fetching? Show DetailsWe’re still working out the details, but we expect that in the future, you’ll write data fetching like this:import { use } from 'react'; // Not available yet!function ShippingForm({ country }) {  const cities = use(fetch(`/api/cities?country=${country}`));  const [city, setCity] = useState(null);  const areas = city ? use(fetch(`/api/areas?city=${city}`)) : null;  // ...If you use custom Hooks like useData above in your app, it will require fewer changes to migrate to the eventually recommended approach than if you write raw Effects in every component manually. However, the old approach will still work fine, so if you feel happy writing raw Effects, you can continue to do that."
                                        ]
                                    },
                                    {
                                        "sub_header": "There is more than one way to do it ",
                                        "source": "react",
                                        "url": "https://react.dev/learn/reusing-logic-with-custom-hooks/#there-is-more-than-one-way-to-do-it",
                                        "content": [
                                            "Let’s say you want to implement a fade-in animation from scratch using the browser requestAnimationFrame API. You might start with an Effect that sets up an animation loop. During each frame of the animation, you could change the opacity of the DOM node you hold in a ref until it reaches 1. Your code might start like this:",
                                            {
                                                "code_sandbox": "import { useState, useEffect, useRef } from 'react';function Welcome() {  const ref = useRef(null);  useEffect(() => {    const duration = 1000;    const node = ref.current;    let startTime = performance.now();    let frameId = null;    function onFrame(now) {      const timePassed = now - startTime;      const progress = Math.min(timePassed / duration, 1);      onProgress(progress);      if (progress < 1) {        // We still have more frames to paint        frameId = requestAnimationFrame(onFrame);      }    }    function onProgress(progress) {      node.style.opacity = progress;    }    function start() {      onProgress(0);      startTime = performance.now();      frameId = requestAnimationFrame(onFrame);    }    function stop() {      cancelAnimationFrame(frameId);      startTime = null;      frameId = null;    }    start();    return () => stop();  }, []);  return (    <h1 className=\"welcome\" ref={ref}>      Welcome    </h1>  );}export default function App() {  const [show, setShow] = useState(false);  return (    <>      <button onClick={() => setShow(!show)}>        {show ? 'Remove' : 'Show'}      </button>      <hr />      {show && <Welcome />}    </>  );}"
                                            },
                                            "To make the component more readable, you might extract the logic into a useFadeIn custom Hook:",
                                            {
                                                "code_sandbox": "useFadeIn.jsimport { useState, useEffect, useRef } from 'react';import { useFadeIn } from './useFadeIn.js';function Welcome() {  const ref = useRef(null);  useFadeIn(ref, 1000);  return (    <h1 className=\"welcome\" ref={ref}>      Welcome    </h1>  );}export default function App() {  const [show, setShow] = useState(false);  return (    <>      <button onClick={() => setShow(!show)}>        {show ? 'Remove' : 'Show'}      </button>      <hr />      {show && <Welcome />}    </>  );}"
                                            },
                                            "You could keep the useFadeIn code as is, but you could also refactor it more. For example, you could extract the logic for setting up the animation loop out of useFadeIn into a custom useAnimationLoop Hook:",
                                            {
                                                "code_sandbox": "useFadeIn.jsuseFadeIn.jsimport { useState, useEffect } from 'react';import { experimental_useEffectEvent as useEffectEvent } from 'react';export function useFadeIn(ref, duration) {  const [isRunning, setIsRunning] = useState(true);  useAnimationLoop(isRunning, (timePassed) => {    const progress = Math.min(timePassed / duration, 1);    ref.current.style.opacity = progress;    if (progress === 1) {      setIsRunning(false);    }  });}function useAnimationLoop(isRunning, drawFrame) {  const onFrame = useEffectEvent(drawFrame);  useEffect(() => {    if (!isRunning) {      return;    }    const startTime = performance.now();    let frameId = null;    function tick(now) {      const timePassed = now - startTime;      onFrame(timePassed);      frameId = requestAnimationFrame(tick);    }    tick();    return () => cancelAnimationFrame(frameId);  }, [isRunning]);}"
                                            },
                                            "However, you didn’t have to do that. As with regular functions, ultimately you decide where to draw the boundaries between different parts of your code. You could also take a very different approach. Instead of keeping the logic in the Effect, you could move most of the imperative logic inside a JavaScript class:",
                                            {
                                                "code_sandbox": "useFadeIn.jsanimation.jsuseFadeIn.jsimport { useState, useEffect } from 'react';import { FadeInAnimation } from './animation.js';export function useFadeIn(ref, duration) {  useEffect(() => {    const animation = new FadeInAnimation(ref.current);    animation.start(duration);    return () => {      animation.stop();    };  }, [ref, duration]);}"
                                            },
                                            "Effects let you connect React to external systems. The more coordination between Effects is needed (for example, to chain multiple animations), the more it makes sense to extract that logic out of Effects and Hooks completely like in the sandbox above. Then, the code you extracted becomes the “external system”. This lets your Effects stay simple because they only need to send messages to the system you’ve moved outside React.",
                                            "The examples above assume that the fade-in logic needs to be written in JavaScript. However, this particular fade-in animation is both simpler and much more efficient to implement with a plain CSS Animation:",
                                            {
                                                "code_sandbox": "welcome.csswelcome.css.welcome {  color: white;  padding: 50px;  text-align: center;  font-size: 50px;  background-image: radial-gradient(circle, rgba(63,94,251,1) 0%, rgba(252,70,107,1) 100%);  animation: fadeIn 1000ms;}@keyframes fadeIn {  0% { opacity: 0; }  100% { opacity: 1; }}"
                                            },
                                            "Sometimes, you don’t even need a Hook!",
                                            "Recap\nCustom Hooks let you share logic between components.\nCustom Hooks must be named starting with use followed by a capital letter.\nCustom Hooks only share stateful logic, not state itself.\nYou can pass reactive values from one Hook to another, and they stay up-to-date.\nAll Hooks re-run every time your component re-renders.\nThe code of your custom Hooks should be pure, like your component’s code.\nWrap event handlers received by custom Hooks into Effect Events.\nDon’t create custom Hooks like useMount. Keep their purpose specific.\nIt’s up to you how and where to choose the boundaries of your code.\n",
                                            {
                                                "code_example": "useCounter"
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "What is AWS Lambda?",
        "href": "https://docs.aws.amazon.com/lambda/latest/dg/welcome.html",
        "source": "aws_lamda",
        "sections": [
            "You can use AWS Lambda to run code without provisioning or managing servers.",
            " Lambda runs your code    on a high-availability compute infrastructure and performs all of the administration of the compute resources,    including server and operating system maintenance, capacity provisioning and automatic scaling, and    logging. With Lambda, all you need to do is supply your code in one of the language runtimes that Lambda supports.",
            "You organize your code into Lambda functions. The Lambda service runs your function only when needed and scales automatically. You only pay for the compute time that you consume—there is no charge when your code is not running. For more information, see AWS Lambda Pricing.",
            "Tip",
            "To learn how to build serverless solutions, check out the Serverless Developer Guide.",
            {
                "sub_header": "When to use Lambda",
                "content": [
                    "Lambda is an ideal compute service for application scenarios that need to scale up rapidly, and scale down to      zero when not in demand. For example, you can use Lambda for:",
                    "  1.File processing: :  Use Amazon Simple Storage Service (Amazon S3) to trigger Lambda data processing in real time after an upload.",
                    "  2.Stream processing: :  Use Lambda and Amazon Kinesis to process real-time streaming data for application activity tracking, transaction order processing, clickstream analysis, data cleansing, log filtering, indexing, social media analysis, Internet of Things (IoT) device data telemetry, and metering.",
                    "  3.Web applications: :  Combine Lambda with other AWS services to build powerful web applications that automatically scale up and down and run in a highly available configuration across multiple data centers.",
                    "  4.IoT backends: :  Build serverless backends using Lambda to handle web, mobile, IoT, and third-party API requests.",
                    "  5.Mobile backends: :  Build backends using Lambda and Amazon API Gateway  to authenticate and process API requests. Use AWS Amplify to easily integrate with your iOS, Android, Web, and React Native frontends.",
                    "When using Lambda, you are responsible only for your code. Lambda manages the compute fleet that offers a      balance of memory, CPU, network, and other resources to run your code. Because Lambda manages these resources, you      cannot log in to compute instances or customize the operating system on provided        runtimes. Lambda performs operational and administrative activities on your behalf, including managing      capacity, monitoring, and logging your Lambda functions."
                ]
            },
            {
                "sub_header": "Key features",
                "content": [
                    "The following key features help you develop Lambda applications that are scalable, secure, and easily      extensible:",
                    "  1. Environment variables : \nUse environment variables to adjust your function's behavior without updating code.\n",
                    "  2.Versions : \nManage the deployment of your functions with versions, so that, for example, a new function can be used for beta testing without affecting users of the stable production version.\n",
                    "  3.Container images : \nCreate a container image for a Lambda function by using an AWS provided base image or an alternative base\n            image so that you can reuse your existing container tooling or deploy larger workloads that rely on sizable dependencies, such as machine learning.\n",
                    "  4.Layers : \nPackage libraries and other dependencies to reduce the size of deployment archives and makes it faster to deploy your code.\n",
                    "  5.Lambda extensions : \nAugment your Lambda functions with tools for monitoring, observability, security, and governance.\n",
                    "  6.Function URLs : \nAdd a dedicated HTTP(S) endpoint to your Lambda function.\n",
                    "  7.Response streaming : \nConfigure your Lambda function URLs to stream response payloads back to clients from Node.js functions, to improve time to first byte (TTFB) performance or to return larger payloads.\n",
                    "  8.Concurrency and scaling controls : \nApply fine-grained control over the scaling and responsiveness of your production applications.\n",
                    "  9.Code signing : \nVerify that only approved developers publish unaltered, trusted code in your Lambda functions \n",
                    "  10.Private networking : \nCreate a private network for resources such as databases, cache instances, or internal services.\n",
                    "  11.File system access : \nConfigure a function to mount an Amazon Elastic File System (Amazon EFS) to a local directory, so that your function code can access and modify shared resources safely and at high concurrency.\n",
                    "  12.Lambda SnapStart for Java : \nImprove startup performance for Java runtimes by up to 10x at no extra cost, typically with no changes to your function code.\n"
                ]
            }
        ]
    },
    {
        "title": "Example apps",
        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example-apps.html",
        "source": "aws_lamda",
        "sections": [
            "The following examples provide function code and  infrastructure as code (IaC) templates to quickly create and deploy serverless apps that implement some common Lambda uses cases. The  examples also include code examples and instructions to test the apps after you deploy them.",
            "For each of the example apps, we provide instructions to either create and configure resources manually using the AWS Management Console, or to   use the AWS Serverless Application Model to deploy the resources using IaC. Follow the console intructions to learn more about configuring the individual AWS   resources for each app, or use to AWS SAM to quickly deploy resources as you would in a production environment.",
            "You can use the provided examples as a basis for your own serverless applications by modifying the provided function code and templates   for your own use case.",
            "We're continuing to create new examples, so check back again to find more severless apps for common Lambda use cases.",
            {
                "sub_header": "Example apps",
                "content": [
                    "  1.Example serverless file-processing appCreate a serverless app to automatically perform a file-processing task when an object is uploaded to an Amazon S3 bucket. In this         example, when a PDF file is uploaded, the app encrypts the file and saves it to another S3 bucket.",
                    "  2.Example scheduled cron task appCreate an app to perform a scheduled task using a cron schedule. In this example, the app performs maintenance on a         Amazon DynamoDB table by deleting entries more than 12 months old."
                ]
            },
            {
                "title": "File-processing app",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/file-processing-app.html",
                "source": "aws_lamda",
                "parent_content": [
                    "One of the most common use cases for Lambda is to perform file processing tasks. For example, you might use a Lambda function     to automatically create PDF files from HTML files or images, or to create thumbnails when a user uploads an image.",
                    "In this example, you create an app which automatically encrypts PDF files when they are uploaded to an Amazon Simple Storage Service (Amazon S3) bucket.     To implement this app, you create the following resources:",
                    "  1.An S3 bucket for users to upload PDF files to",
                    "  2.A Lambda function in Python which reads the uploaded file and creates an encrypted, password-protected version of it",
                    "  3.A second S3 bucket for Lambda to save the encrypted file in",
                    "You also create an AWS Identity and Access Management (IAM) policy to give your Lambda function permission to perform read and write operations     on your S3 buckets.",
                    "Tip",
                    "If you’re brand new to Lambda, we recommend that you carry out the tutorial Create your first Lambda function before      creating this example app.",
                    "You can deploy your app manually by creating and configuring resources with the AWS Management Console or the AWS Command Line Interface (AWS CLI). You can     also deploy the app by using the AWS Serverless Application Model (AWS SAM). AWS SAM is an infrastructure as code (IaC) tool. With IaC, you don’t create     resources manually, but define them in code and then deploy them automatically.",
                    "If you want to learn more about using Lambda with IaC before deploying this example app, see Using Lambda with infrastructure as code (IaC).",
                    {
                        "sub_header": "Prerequisites",
                        "content": [
                            "Before you can create the example app, make sure you have the required command line tools installed.",
                            "  1.AWS CLI : You can manually deploy the resources for your app using either the AWS Management Console or the . To use the CLI, install it by following               the installation                 instructions in the AWS Command Line Interface User Guide.",
                            "  2.AWS SAM CLI : If you want to deploy the example app using AWS SAM, you need to install both the AWS CLI and the . To install the ,               follow the installation instructions               in the AWS SAM User Guide.",
                            "  3.pytest module : After you’ve deployed your app, you can test it using an automated Python test script that we provide. To use this script, install the               pytest package in you local development environment by running the following command:pip install pytest",
                            {
                                "code_example": "pip install pytest"
                            },
                            "To deploy the app using AWS SAM, Docker must also be installed on your build machine."
                        ]
                    },
                    {
                        "sub_header": "Downloading the example app files",
                        "content": [
                            "To create and test the example app, you create the following files in your project directory:",
                            "  1.lambda_function.py - the Python function code for the Lambda function that performs the file encryption",
                            "  2.requirements.txt - a manifest file defining the dependencies that your Python function code requires",
                            "  3.template.yaml - an AWS SAM template you can use to deploy the app",
                            "  4.test_pdf_encrypt.py - a test script you can use to automatically test your application",
                            "  5.pytest.ini - a configuration file for the the test script",
                            "Expand the following sections to view the code and to learn more about the role of each file in creating and testing your app. To create the       files on your local machine, either copy and paste the code below, or download the files from the aws-lambda-developer-guide GitHub repo.",
                            "Copy and paste the following code into a file named lambda_function.py.",
                            {
                                "code_example": "from pypdf import PdfReader, PdfWriter\nimport uuid\nimport os\nfrom urllib.parse import unquote_plus\nimport boto3\n\n# Create the S3 client to download and upload objects from S3\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    # Iterate over the S3 event object and get the key for all uploaded files\n    for record in event['Records']:\n        bucket = record['s3']['bucket']['name']\n        key = unquote_plus(record['s3']['object']['key']) # Decode the S3 object key to remove any URL-encoded characters\n        download_path = f'/tmp/{uuid.uuid4()}.pdf' # Create a path in the Lambda tmp directory to save the file to \n        upload_path = f'/tmp/converted-{uuid.uuid4()}.pdf' # Create another path to save the encrypted file to\n        \n        # If the file is a PDF, encrypt it and upload it to the destination S3 bucket\n        if key.lower().endswith('.pdf'):\n            s3_client.download_file(bucket, key, download_path)\n            encrypt_pdf(download_path, upload_path)\n            encrypted_key = add_encrypted_suffix(key)\n            s3_client.upload_file(upload_path, f'{bucket}-encrypted', encrypted_key)\n\n# Define the function to encrypt the PDF file with a password\ndef encrypt_pdf(file_path, encrypted_file_path):\n    reader = PdfReader(file_path)\n    writer = PdfWriter()\n    \n    for page in reader.pages:\n        writer.add_page(page)\n\n    # Add a password to the new PDF\n    writer.encrypt(\"my-secret-password\")\n\n    # Save the new PDF to a file\n    with open(encrypted_file_path, \"wb\") as file:\n        writer.write(file)\n\n# Define a function to add a suffix to the original filename after encryption\ndef add_encrypted_suffix(original_key):\n    filename, extension = original_key.rsplit('.', 1)\n    return f'{filename}_encrypted.{extension}'"
                            },
                            "Note",
                            "In this example code, a password for the encrypted file (my-secret-password) is hardcoded into the           function code. In a production application, don't include sensitive information like passwords in your function code. Use           AWS Secrets Manager to securely store sensitive parameters.",
                            "The python function code contains three functions - the handler function that Lambda runs           when your function is invoked, and two separate function named add_encrypted_suffix and encrypt_pdf that the handler calls to perform the PDF encryption.",
                            "When your function is invoked by Amazon S3, Lambda passes a JSON formatted event argument to the function that contains details about the           event that caused the invocation. In this case, the information includes name of the S3 bucket and the object keys for the uploaded files.           To learn more about the format of event object for Amazon S3, see Process Amazon S3 event notifications with Lambda.",
                            "Your function then uses the AWS SDK for Python (Boto3) to download the PDF files specified in the event object to its local temporary storage directory, before           encrypting them using the pypdf library.",
                            "Finally, the function uses the Boto3 SDK to store the encrypted file in your S3 destination bucket.",
                            "Python function code",
                            "Copy and paste the following code into a file named lambda_function.py.",
                            {
                                "code_example": "from pypdf import PdfReader, PdfWriter\nimport uuid\nimport os\nfrom urllib.parse import unquote_plus\nimport boto3\n\n# Create the S3 client to download and upload objects from S3\ns3_client = boto3.client('s3')\n\ndef lambda_handler(event, context):\n    # Iterate over the S3 event object and get the key for all uploaded files\n    for record in event['Records']:\n        bucket = record['s3']['bucket']['name']\n        key = unquote_plus(record['s3']['object']['key']) # Decode the S3 object key to remove any URL-encoded characters\n        download_path = f'/tmp/{uuid.uuid4()}.pdf' # Create a path in the Lambda tmp directory to save the file to \n        upload_path = f'/tmp/converted-{uuid.uuid4()}.pdf' # Create another path to save the encrypted file to\n        \n        # If the file is a PDF, encrypt it and upload it to the destination S3 bucket\n        if key.lower().endswith('.pdf'):\n            s3_client.download_file(bucket, key, download_path)\n            encrypt_pdf(download_path, upload_path)\n            encrypted_key = add_encrypted_suffix(key)\n            s3_client.upload_file(upload_path, f'{bucket}-encrypted', encrypted_key)\n\n# Define the function to encrypt the PDF file with a password\ndef encrypt_pdf(file_path, encrypted_file_path):\n    reader = PdfReader(file_path)\n    writer = PdfWriter()\n    \n    for page in reader.pages:\n        writer.add_page(page)\n\n    # Add a password to the new PDF\n    writer.encrypt(\"my-secret-password\")\n\n    # Save the new PDF to a file\n    with open(encrypted_file_path, \"wb\") as file:\n        writer.write(file)\n\n# Define a function to add a suffix to the original filename after encryption\ndef add_encrypted_suffix(original_key):\n    filename, extension = original_key.rsplit('.', 1)\n    return f'{filename}_encrypted.{extension}'"
                            },
                            "Note",
                            "In this example code, a password for the encrypted file (my-secret-password) is hardcoded into the           function code. In a production application, don't include sensitive information like passwords in your function code. Use           AWS Secrets Manager to securely store sensitive parameters.",
                            "The python function code contains three functions - the handler function that Lambda runs           when your function is invoked, and two separate function named add_encrypted_suffix and encrypt_pdf that the handler calls to perform the PDF encryption.",
                            "When your function is invoked by Amazon S3, Lambda passes a JSON formatted event argument to the function that contains details about the           event that caused the invocation. In this case, the information includes name of the S3 bucket and the object keys for the uploaded files.           To learn more about the format of event object for Amazon S3, see Process Amazon S3 event notifications with Lambda.",
                            "Your function then uses the AWS SDK for Python (Boto3) to download the PDF files specified in the event object to its local temporary storage directory, before           encrypting them using the pypdf library.",
                            "Finally, the function uses the Boto3 SDK to store the encrypted file in your S3 destination bucket.",
                            "Copy and paste the following code into a file named requirements.txt.",
                            {
                                "code_example": "boto3\npypdf"
                            },
                            "For this example, your function code has only two dependencies that aren't part of the standard Python library -           the SDK for Python (Boto3) and the pypdf package the function uses to perform the PDF encryption.",
                            "Note",
                            "A version of the SDK for Python (Boto3) is included as part of the Lambda runtime, so your code would run without adding Boto3 to your             function's deployment package. However, to maintain full control of your function's dependencies and avoid possible issues with             version misalignment, best practice for Python is to include all function dependencies in your function's deployment package.           See Runtime dependencies in Python to learn more.",
                            "requirements.txt manifest file",
                            "Copy and paste the following code into a file named requirements.txt.",
                            {
                                "code_example": "boto3\npypdf"
                            },
                            "For this example, your function code has only two dependencies that aren't part of the standard Python library -           the SDK for Python (Boto3) and the pypdf package the function uses to perform the PDF encryption.",
                            "Note",
                            "A version of the SDK for Python (Boto3) is included as part of the Lambda runtime, so your code would run without adding Boto3 to your             function's deployment package. However, to maintain full control of your function's dependencies and avoid possible issues with             version misalignment, best practice for Python is to include all function dependencies in your function's deployment package.           See Runtime dependencies in Python to learn more.",
                            "Copy and paste the following code into a file named template.yaml.",
                            {
                                "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nResources:\n  EncryptPDFFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: EncryptPDF\n      Architectures: [x86_64]\n      CodeUri: ./\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.12\n      Timeout: 15\n      MemorySize: 256\n      LoggingConfig:\n        LogFormat: JSON\n      Policies:\n        - AmazonS3FullAccess\n      Events:\n        S3Event:\n          Type: S3\n          Properties:\n            Bucket: !Ref PDFSourceBucket\n            Events: s3:ObjectCreated:*\n\n  PDFSourceBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: EXAMPLE-BUCKET\n\n  EncryptedPDFBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: EXAMPLE-BUCKET-encrypted"
                            },
                            "The AWS SAM template defines the resources you create for your app. In this example, the template defines a Lambda function using the         AWS::Serverless::Function type and two S3 buckets using the AWS::S3::Bucket type. The bucket names specified in the         template are placeholders. Before you deploy the app using AWS SAM, you need to edit the template to rename the buckets with globally unique names that          meet the S3 bucket naming rules. This step is           explained further in Deploy the resources using AWS SAM.",
                            "The definition of the Lambda function resource configures a trigger for the function using the S3Event event property. This         trigger causes your function to be invoked whenever an object is created in your source bucket.",
                            "The function definition also specifies an AWS Identity and Access Management (IAM) policy to be attached to the function's execution role.           The AWS managed policyAmazonS3FullAccess gives your function the permissions it needs to read and write objects to Amazon S3.",
                            "AWS SAM template",
                            "Copy and paste the following code into a file named template.yaml.",
                            {
                                "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\n\nResources:\n  EncryptPDFFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: EncryptPDF\n      Architectures: [x86_64]\n      CodeUri: ./\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.12\n      Timeout: 15\n      MemorySize: 256\n      LoggingConfig:\n        LogFormat: JSON\n      Policies:\n        - AmazonS3FullAccess\n      Events:\n        S3Event:\n          Type: S3\n          Properties:\n            Bucket: !Ref PDFSourceBucket\n            Events: s3:ObjectCreated:*\n\n  PDFSourceBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: EXAMPLE-BUCKET\n\n  EncryptedPDFBucket:\n    Type: AWS::S3::Bucket\n    Properties:\n      BucketName: EXAMPLE-BUCKET-encrypted"
                            },
                            "The AWS SAM template defines the resources you create for your app. In this example, the template defines a Lambda function using the         AWS::Serverless::Function type and two S3 buckets using the AWS::S3::Bucket type. The bucket names specified in the         template are placeholders. Before you deploy the app using AWS SAM, you need to edit the template to rename the buckets with globally unique names that          meet the S3 bucket naming rules. This step is           explained further in Deploy the resources using AWS SAM.",
                            "The definition of the Lambda function resource configures a trigger for the function using the S3Event event property. This         trigger causes your function to be invoked whenever an object is created in your source bucket.",
                            "The function definition also specifies an AWS Identity and Access Management (IAM) policy to be attached to the function's execution role.           The AWS managed policyAmazonS3FullAccess gives your function the permissions it needs to read and write objects to Amazon S3.",
                            "Copy and paste the following code into a file named test_pdf_encrypt.py.",
                            {
                                "code_example": "import boto3\nimport json\nimport pytest\nimport time\nimport os\n\n@pytest.fixture\ndef lambda_client():\n    return boto3.client('lambda')\n    \n@pytest.fixture\ndef s3_client():\n    return boto3.client('s3')\n\n@pytest.fixture\ndef logs_client():\n    return boto3.client('logs')\n\n@pytest.fixture(scope='session')\ndef cleanup():\n    # Create a new S3 client for cleanup\n    s3_client = boto3.client('s3')\n\n    yield\n    # Cleanup code will be executed after all tests have finished\n\n    # Delete test.pdf from the source bucket\n    source_bucket = 'EXAMPLE-BUCKET'\n    source_file_key = 'test.pdf'\n    s3_client.delete_object(Bucket=source_bucket, Key=source_file_key)\n    print(f\"\\nDeleted {source_file_key} from {source_bucket}\")\n\n    # Delete test_encrypted.pdf from the destination bucket\n    destination_bucket = 'EXAMPLE-BUCKET-encrypted'\n    destination_file_key = 'test_encrypted.pdf'\n    s3_client.delete_object(Bucket=destination_bucket, Key=destination_file_key)\n    print(f\"Deleted {destination_file_key} from {destination_bucket}\")\n        \n\n@pytest.mark.order(1)\ndef test_source_bucket_available(s3_client):\n    s3_bucket_name = 'EXAMPLE-BUCKET'\n    file_name = 'test.pdf'\n    file_path = os.path.join(os.path.dirname(__file__), file_name)\n\n    file_uploaded = False\n    try:\n        s3_client.upload_file(file_path, s3_bucket_name, file_name)\n        file_uploaded = True\n    except:\n        print(\"Error: couldn't upload file\")\n\n    assert file_uploaded, \"Could not upload file to S3 bucket\"\n\n    \n\n@pytest.mark.order(2)\ndef test_lambda_invoked(logs_client):\n\n    # Wait for a few seconds to make sure the logs are available\n    time.sleep(5)\n\n    # Get the latest log stream for the specified log group\n    log_streams = logs_client.describe_log_streams(\n        logGroupName='/aws/lambda/EncryptPDF',\n        orderBy='LastEventTime',\n        descending=True,\n        limit=1\n    )\n\n    latest_log_stream_name = log_streams['logStreams'][0]['logStreamName']\n\n    # Retrieve the log events from the latest log stream\n    log_events = logs_client.get_log_events(\n        logGroupName='/aws/lambda/EncryptPDF',\n        logStreamName=latest_log_stream_name\n    )\n\n    success_found = False\n    for event in log_events['events']:\n        message = json.loads(event['message'])\n        status = message.get('record', {}).get('status')\n        if status == 'success':\n            success_found = True\n            break\n\n    assert success_found, \"Lambda function execution did not report 'success' status in logs.\"\n\n@pytest.mark.order(3)\ndef test_encrypted_file_in_bucket(s3_client):\n    # Specify the destination S3 bucket and the expected converted file key\n    destination_bucket = 'EXAMPLE-BUCKET-encrypted'\n    converted_file_key = 'test_encrypted.pdf'\n\n    try:\n        # Attempt to retrieve the metadata of the converted file from the destination S3 bucket\n        s3_client.head_object(Bucket=destination_bucket, Key=converted_file_key)\n    except s3_client.exceptions.ClientError as e:\n        # If the file is not found, the test will fail\n        pytest.fail(f\"Converted file '{converted_file_key}' not found in the destination bucket: {str(e)}\")\n\ndef test_cleanup(cleanup):\n    # This test uses the cleanup fixture and will be executed last\n    pass"
                            },
                            "The automated test script executes three test functions to confirm correct operation of your app:",
                            "  1.The test test_source_bucket_available confirms that your source bucket has been successfully created             by uploading a test PDF file to the bucket.",
                            "  2.The test test_lambda_invoked interrogates the latest CloudWatch Logs log stream for your function to confirm that             when you uploaded the test file, your Lambda function ran and reported success.",
                            "  3.The test test_encrypted_file_in_bucket confirms that your destination bucket contains the encrypted test_encrypted.pdf             file.",
                            "After all these tests have run, the script runs an additional cleanup step to delete the test.pdf and test_encrypted.pdf files from         both your source and destination buckets.",
                            "As with the AWS SAM template, the bucket names specified in this file are placeholders. Before running the test, you need to edit this file           with your app's real bucket names. This step is explained further in Testing the app with the automated script",
                            "Automated test script",
                            "Copy and paste the following code into a file named test_pdf_encrypt.py.",
                            {
                                "code_example": "import boto3\nimport json\nimport pytest\nimport time\nimport os\n\n@pytest.fixture\ndef lambda_client():\n    return boto3.client('lambda')\n    \n@pytest.fixture\ndef s3_client():\n    return boto3.client('s3')\n\n@pytest.fixture\ndef logs_client():\n    return boto3.client('logs')\n\n@pytest.fixture(scope='session')\ndef cleanup():\n    # Create a new S3 client for cleanup\n    s3_client = boto3.client('s3')\n\n    yield\n    # Cleanup code will be executed after all tests have finished\n\n    # Delete test.pdf from the source bucket\n    source_bucket = 'EXAMPLE-BUCKET'\n    source_file_key = 'test.pdf'\n    s3_client.delete_object(Bucket=source_bucket, Key=source_file_key)\n    print(f\"\\nDeleted {source_file_key} from {source_bucket}\")\n\n    # Delete test_encrypted.pdf from the destination bucket\n    destination_bucket = 'EXAMPLE-BUCKET-encrypted'\n    destination_file_key = 'test_encrypted.pdf'\n    s3_client.delete_object(Bucket=destination_bucket, Key=destination_file_key)\n    print(f\"Deleted {destination_file_key} from {destination_bucket}\")\n        \n\n@pytest.mark.order(1)\ndef test_source_bucket_available(s3_client):\n    s3_bucket_name = 'EXAMPLE-BUCKET'\n    file_name = 'test.pdf'\n    file_path = os.path.join(os.path.dirname(__file__), file_name)\n\n    file_uploaded = False\n    try:\n        s3_client.upload_file(file_path, s3_bucket_name, file_name)\n        file_uploaded = True\n    except:\n        print(\"Error: couldn't upload file\")\n\n    assert file_uploaded, \"Could not upload file to S3 bucket\"\n\n    \n\n@pytest.mark.order(2)\ndef test_lambda_invoked(logs_client):\n\n    # Wait for a few seconds to make sure the logs are available\n    time.sleep(5)\n\n    # Get the latest log stream for the specified log group\n    log_streams = logs_client.describe_log_streams(\n        logGroupName='/aws/lambda/EncryptPDF',\n        orderBy='LastEventTime',\n        descending=True,\n        limit=1\n    )\n\n    latest_log_stream_name = log_streams['logStreams'][0]['logStreamName']\n\n    # Retrieve the log events from the latest log stream\n    log_events = logs_client.get_log_events(\n        logGroupName='/aws/lambda/EncryptPDF',\n        logStreamName=latest_log_stream_name\n    )\n\n    success_found = False\n    for event in log_events['events']:\n        message = json.loads(event['message'])\n        status = message.get('record', {}).get('status')\n        if status == 'success':\n            success_found = True\n            break\n\n    assert success_found, \"Lambda function execution did not report 'success' status in logs.\"\n\n@pytest.mark.order(3)\ndef test_encrypted_file_in_bucket(s3_client):\n    # Specify the destination S3 bucket and the expected converted file key\n    destination_bucket = 'EXAMPLE-BUCKET-encrypted'\n    converted_file_key = 'test_encrypted.pdf'\n\n    try:\n        # Attempt to retrieve the metadata of the converted file from the destination S3 bucket\n        s3_client.head_object(Bucket=destination_bucket, Key=converted_file_key)\n    except s3_client.exceptions.ClientError as e:\n        # If the file is not found, the test will fail\n        pytest.fail(f\"Converted file '{converted_file_key}' not found in the destination bucket: {str(e)}\")\n\ndef test_cleanup(cleanup):\n    # This test uses the cleanup fixture and will be executed last\n    pass"
                            },
                            "The automated test script executes three test functions to confirm correct operation of your app:",
                            "  1.The test test_source_bucket_available confirms that your source bucket has been successfully created             by uploading a test PDF file to the bucket.",
                            "  2.The test test_lambda_invoked interrogates the latest CloudWatch Logs log stream for your function to confirm that             when you uploaded the test file, your Lambda function ran and reported success.",
                            "  3.The test test_encrypted_file_in_bucket confirms that your destination bucket contains the encrypted test_encrypted.pdf             file.",
                            "After all these tests have run, the script runs an additional cleanup step to delete the test.pdf and test_encrypted.pdf files from         both your source and destination buckets.",
                            "As with the AWS SAM template, the bucket names specified in this file are placeholders. Before running the test, you need to edit this file           with your app's real bucket names. This step is explained further in Testing the app with the automated script",
                            "Copy and paste the following code into a file named pytest.ini.",
                            {
                                "code_example": "[pytest]\nmarkers =\n    order: specify test execution order"
                            },
                            "This is needed to specify the order in which the tests in the test_pdf_encrypt.py script run.",
                            "Test script configuration file",
                            "Copy and paste the following code into a file named pytest.ini.",
                            {
                                "code_example": "[pytest]\nmarkers =\n    order: specify test execution order"
                            },
                            "This is needed to specify the order in which the tests in the test_pdf_encrypt.py script run."
                        ]
                    },
                    {
                        "sub_header": "Deploying the app",
                        "content": [
                            "You can create and deploy the resources for this example app either manually or by using AWS SAM. In a production environment, we       recommend that you use an IaC tool like AWS SAM to quickly and repeatably deploy whole serverless applications without using manual processes.",
                            "For this example, follow the console or AWS CLI instructions to learn how to configure each AWS resource separately, or skip ahead to        Deploy the resources using AWS SAM to quickly deploy the app using a few CLI commands.",
                            {
                                "sub_header": "Deploy the resources manually",
                                "content": [
                                    "To deploy your app manually, you carry out the following steps:",
                                    "  1.Create source and destination Amazon S3 buckets",
                                    "  2.Create a Lambda function that encrypts a PDF file and saves the encrypted version to an S3 bucket",
                                    "  3.Configure a Lambda trigger that invokes your function when objects are uploaded to your source bucket",
                                    "Follow the instructions in the following paragraphs to create and configure your resources.",
                                    {
                                        "sub_header": "Create two S3 buckets",
                                        "content": [
                                            "First create two S3 buckets. The first bucket is the source bucket you will upload your PDF files to. The second bucket is used by     Lambda to save the encrypted file when you invoke your function.",
                                            "  1.Console : SOURCEBUCKET-encrypted",
                                            "  2.AWS CLI : region",
                                            "anchor",
                                            "anchor",
                                            "To create the S3 buckets (console)",
                                            "  1 : Open the Buckets page of the Amazon S3 console.",
                                            "  2 : Choose Create bucket.",
                                            "  3 : Under General configuration, do the following:For Bucket name, enter a globally unique name that meets the Amazon S3 Bucket naming rules.                     Bucket names can contain only lower case letters, numbers, dots (.), and hyphens (-). For AWS Region, choose the AWS Region                     closest to your geographical location. Later in the deployment process, you must create your Lambda function in the same AWS Region, so                     make a note of the region you chose.",
                                            "  4 : Leave all other options set to their default values and choose Create bucket.",
                                            "  5 : Repeat steps 1 to 4 to create your destination bucket. For Bucket name, enter SOURCEBUCKET-encrypted,                 where SOURCEBUCKET is the name of the source bucket you just created."
                                        ]
                                    },
                                    {
                                        "sub_header": "Create an execution role (AWS CLI only)",
                                        "content": [
                                            "An execution role is an IAM role that grants a Lambda function permission to access AWS services and resources. When you create a function       using the Lambda console, Lambda automatically creates an execution role. You only need to create a role manually if you choose to deploy the app       using the AWS CLI. To give your function read and write access to Amazon S3, you attach the       AWS managed policyAmazonS3FullAccess.",
                                            "  1.Console : \nThis step is only required if you choose to deploy your app using the AWS CLI.\n",
                                            "  2.AWS CLI : AmazonS3FullAccess",
                                            "anchor",
                                            "anchor",
                                            "This step is only required if you choose to deploy your app using the AWS CLI."
                                        ]
                                    },
                                    {
                                        "sub_header": "Create the function deployment package",
                                        "content": [
                                            "To create your function, you create a deployment package containing your function code and its dependencies. For this       application, your function code uses a separate library for the PDF encryption.",
                                            "To create the deployment package",
                                            "  1 : Navigate to the project directory containing the lambda_function.py and requirements.txt           files you created or downloaded from GitHub earlier and create a new directory named package.",
                                            " 2 : Install the dependencies specified in the requirements.txt file in your package directory by running the following command. ",
                                            {
                                                "code_example": "pip install -r requirements.txt --target ./package/"
                                            },
                                            " 3 : Create a .zip file containing your application code and its dependencies. In Linux or MacOS, run the following commands from your           command line interface.  In Windows, use your preferred zip tool to create the lambda_function.zip file. Make sure that your         lambda_function.py file and the folders containing your dependencies are all at the root of the .zip file.",
                                            {
                                                "code_example": "cd package\nzip -r ../lambda_function.zip .\ncd ..\nzip lambda_function.zip lambda_function.py"
                                            },
                                            "You can also create your deployment package using a Python virtual environment. See Working with .zip file archives for Python Lambda functions"
                                        ]
                                    },
                                    {
                                        "sub_header": "Create the Lambda function",
                                        "content": [
                                            "You now use the deployment package you created in the previous step to deploy your Lambda function.",
                                            "  1.Console : EncryptPDF",
                                            "  2.AWS CLI : lambda_function.zip",
                                            "anchor",
                                            "anchor",
                                            "To create the function (console)",
                                            "To create your Lambda function using the console, you first create a basic function containing some ‘Hello world’ code. You then           replace this code with your own function code by uploading the.zip file you created in the previous step.",
                                            "To ensure that your function doesn't time out when encrypting large PDF files, you configure the function's memory and timeout settings.           You also set the function's log format to JSON. Configuring JSON formatted logs is necessary when using the provided test script so it can read the           function's invocation status from CloudWatch Logs to confirm successful invocation.",
                                            "  1 : Open the Functions page of the Lambda console.",
                                            "  2 : Make sure you're working in the same AWS Region you created your S3 bucket in. You can change your region using the drop-down             list at the top of the screen.",
                                            "  3 : Choose Create function.",
                                            "  4 : Choose Author from scratch.",
                                            "  5 : Under Basic information, do the following:For Function name, enter EncryptPDF.For Runtime choose Python 3.12.For Architecture, choose x86_64.",
                                            "  6 : Choose Create function.",
                                            "To upload the function code (console)",
                                            "  1 : In the Code source pane, choose Upload from.",
                                            "  2 : Choose .zip file.",
                                            "  3 : Choose Upload.",
                                            "  4 : In the file selector, select your .zip file and choose Open.",
                                            "  5 : Choose Save.",
                                            "To configure the function memory and timeout (console)",
                                            "  1 : Select the Configuration tab for your function.",
                                            "  2 : In the General configuration pane, choose Edit.",
                                            "  3 : Set Memory to 256 MB and Timeout to 15 seconds.",
                                            "  4 : Choose Save.",
                                            "To configure the log format (console)",
                                            "  1 : Select the Configuration tab for your function.",
                                            "  2 : Select Monitoring and operations tools.",
                                            "  3 : In the Logging configuration pane, choose Edit.",
                                            "  4 : For Logging configuration, select JSON.",
                                            "  5 : Choose Save."
                                        ]
                                    },
                                    {
                                        "sub_header": "Configure an Amazon S3 trigger to invoke the function",
                                        "content": [
                                            "For your Lambda function to run when you upload a file to your source bucket, you need to configure a trigger for your function. You can     configure the Amazon S3 trigger using either the console or the AWS CLI.",
                                            "Important",
                                            "This procedure configures the S3 bucket to invoke your function every time that an object is created in the bucket. Be sure to       configure this only on the source bucket. If your Lambda function creates objects in the same bucket that invokes it, your function can be         invoked continuously in a loop. This can result         in un expected charges being billed to your AWS account.",
                                            "  1.Console : EncryptPDF",
                                            "  2.AWS CLI : source-account",
                                            "anchor",
                                            "anchor",
                                            "To configure the Amazon S3 trigger (console)",
                                            "  1 : Open the Functions page of the Lambda console and choose your function (EncryptPDF).",
                                            "  2 : Choose Add trigger.",
                                            "  3 : Select S3.",
                                            "  4 : Under Bucket, select your source bucket.",
                                            "  5 : Under Event types, select All object create events.",
                                            "  6 : Under Recursive invocation, select the check box to acknowledge that using the same S3 bucket for input                 and output is not recommended. You can learn more about recursive invocation patterns in Lambda by reading                Recursive patterns that cause run-away Lambda functions                in Serverless Land.",
                                            "  7 : Choose Add.When you create a trigger using the Lambda console, Lambda automatically creates a resource based policy                 to give the service you select permission to invoke your function. "
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Deploy the resources using AWS SAM",
                                "content": [
                                    "To deploy the example app using the AWS SAM CLI, carry out the following steps.",
                                    "Make sure that you have         installed the latest version of the           CLI and that Docker is installed on your build machine.",
                                    "  1 : Edit the template.yaml file to specify the name of your             S3 buckets. S3 buckets must have globally unique names that meet the S3 bucket naming rules.Replace the bucket name EXAMPLE-BUCKET with a name of your choice consisting of lowercase letters, numbers, dots (.), and hyphens (-). For the destination           bucket, replace EXAMPLE-BUCKET-encrypted with <source-bucket-name>-encrypted, where <source-bucket> is the name           you chose for your source bucket.",
                                    " 2 : Run the following command from the directory in which you saved your template.yaml, lambda_function.py,             and requirements.txtfiles. This command gathers the build artifacts for your application and places them in the proper format and location to deploy them. Specifying           the --use-container option builds your function inside a Lambda-like Docker container. We use it here so you don't need to have Python 3.12          installed on your local machine for the build to work.During the build process, AWS SAM looks for the Lambda function code in the location you specified with the CodeUri           property in the template. In this case, we specified the current directory as the location (./).If a requirements.txt file is present, AWS SAM uses it to gather the specified dependencies. By default, AWS SAM creates a .zip             deployment package with your function code and dependencies. You can also choose to deploy your function as a container image using the             PackageType           property.",
                                    {
                                        "code_example": "sam build --use-container"
                                    },
                                    " 3 : To deploy your application and create the Lambda and Amazon S3 resources specified in your AWS SAM template, run the following             command. Using the --guided flag means that AWS SAM will show you prompts to guide you through the deployment process. For this             deployment, accept the default options by pressing Enter.",
                                    {
                                        "code_example": "sam deploy --guided"
                                    },
                                    "During the deployment process, AWS SAM creates the following resources in your AWS account:",
                                    "  1.An AWS CloudFormation stack             named sam-app",
                                    "  2.A Lambda function with the name EncryptPDF",
                                    "  3.Two S3 buckets with the names you chose when you edited the template.yaml AWS SAM template file",
                                    "  4.An IAM execution role for your function with the name format sam-app-EncryptPDFFunctionRole-2qGaapHFWOQ8",
                                    "When AWS SAM finishes creating your resources, you should see the following message:",
                                    "Successfully created/updated stack - sam-app in us-west-2"
                                ]
                            }
                        ]
                    },
                    {
                        "sub_header": "Testing the app",
                        "content": [
                            "To test your app, you upload a PDF file to your source bucket, and confirm that Lambda creates an encrypted version of the file in your       destination bucket. In this example, you can either test this manually using the console or the AWS CLI, or by using the provided test script.",
                            "For production applications, you can use traditional test methods and techniques, such as unit testing, to confirm the       correct functioning of your Lambda function code. Best practice is also to conduct tests like those in the provided test script which perform integration       testing with real, cloud-based resources. Integration testing in the cloud confirms that your infrastructure has been correctly deployed and that events flow       between different services as expected. To learn more, see How to test serverless functions and applications.",
                            {
                                "sub_header": "Testing the app manually",
                                "content": [
                                    "You can test your function manually by adding a PDF file to           your Amazon S3 source bucket. When you add your file to the source bucket, your Lambda function should be automatically invoked and should store an encrypted           version of the file in your target bucket.",
                                    "  1.Console : filename_encrypted.pdf",
                                    "  2.AWS CLI : --bucket",
                                    "anchor",
                                    "anchor",
                                    "To test your app by uploading a file (console)",
                                    "  1 : To upload a PDF file to your S3 bucket, do the following:Open the Buckets page of the Amazon S3 console and choose your source bucket.Choose Upload.Choose Add files and use the file selector to choose the PDF file you want to upload.Choose Open, then choose Upload.",
                                    "  2 : Verify that Lambda has saved an encrypted version of your PDF file in your target bucket by doing the following:Navigate back to the Buckets page of the Amazon S3 console and choose your destination bucket.In the Objects pane, you should now see a file with name format filename_encrypted.pdf (where                         filename.pdf was the name of the file you uploaded to your source bucket).                        To download your encrypted PDF, select the file, then choose Download.Confirm that you can open the downloaded file with the password your Lambda function protected it with (my-secret-password)."
                                ]
                            },
                            {
                                "sub_header": "Testing the app with the automated script",
                                "content": [
                                    "To test your app using the provided test script, first ensure that the pytest module is installed in your local environment. You can install       pytest by running the following command:",
                                    "pip install pytest",
                                    "You also need to edit the code in the test_pdf_encrypt.py file to replace the placeholder bucket names with the names of           your Amazon S3 source and destination buckets. Make the following changes to test_pdf_encrypt.py:",
                                    "  1.In the test_source_bucket_available function, replace EXAMPLE-BUCKET with the name of your source bucket.",
                                    "  2.In the test_encrypted_file_in_bucket function, replace EXAMPLE-BUCKET-encrypted with <source-bucket>-encrypted,            where <source-bucket> is the name of your source bucket.",
                                    "  3.In the cleanup function, replace EXAMPLE-BUCKET with the name of your source bucket, and replace               EXAMPLE-BUCKET-encrypted with ≪source-bucket>-encrypted, where <source-bucket> is the name of your source bucket.",
                                    "To run the tests do the following:",
                                    "  1.Save a PDF file named test.pdfin the directory containing the test_pdf_encrypt.py and pytest.ini             files.",
                                    "  2.Open a terminal or shell program and run the following command from the directory containing the test files.pytest -s -v",
                                    {
                                        "code_example": "pytest -s -v"
                                    },
                                    "When the test completes, you should see output like the following:",
                                    "============================================================== test session starts =========================================================platform linux -- Python 3.12.2, pytest-7.2.2, pluggy-1.0.0 -- /usr/bin/python3cachedir: .pytest_cachehypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/home/pdf_encrypt_app/.hypothesis/examples')Test order randomisation NOT enabled. Enable with --random-order or --random-order-bucket=<bucket_type>rootdir: /home/pdf_encrypt_app, configfile: pytest.iniplugins: anyio-3.7.1, hypothesis-6.70.0, localserver-0.7.1, random-order-1.1.0collected 4 itemstest_pdf_encrypt.py::test_source_bucket_available PASSEDtest_pdf_encrypt.py::test_lambda_invoked PASSEDtest_pdf_encrypt.py::test_encrypted_file_in_bucket PASSEDtest_pdf_encrypt.py::test_cleanup PASSEDDeleted test.pdf from EXAMPLE-BUCKETDeleted test_encrypted.pdf from EXAMPLE-BUCKET-encrypted=============================================================== 4 passed in 7.32s =========================================================="
                                ]
                            }
                        ]
                    },
                    {
                        "sub_header": "Next steps",
                        "content": [
                            "Now you've created this example app, you can use the provided code as a basis to create other types of file-processing application. Modify the     code in the lambda_function.py file to implement the file-processing logic for your use case.",
                            "Many typical file-processing use cases involve image processing. When using Python, the most popular image-processing libraries like       pillow typically contain C or C++ components. In order to ensure that your function's deployment package is     compatible with the Lambda execution environment, it's important to use the correct source distribution binary.",
                            "When deploying your resources with AWS SAM, you need to take some extra steps to include the right source distribution in your deployment package. Because AWS SAM won't install dependencies     for a different platform than your build machine, specifying the correct source distribution (.whl file) in your requirements.txt       file won't work if your build machine uses an operating system or architecture that's different from the Lambda execution environment. Instead, you should do one of the following:",
                            "  1.Use the --use-container option when running sam build. When you specify this option, AWS SAM downloads a container base image that's         compatible with the Lambda execution environment and builds your function's deployment package in a Docker container using that image. To learn more, see           Building a Lambda           function inside of a provided container.",
                            "  2.Build your function's .zip deployment package yourself using the correct source distribution binary and save the .zip file in the directory you specify as the           CodeUri in the AWS SAM template. To learn more about building .zip deployment packages for Python using binary distributions, see           Creating a .zip deployment package with dependencies and Creating .zip deployment packages with native libraries."
                        ]
                    }
                ]
            },
            {
                "title": "Scheduled-maintenance app",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/scheduled-task-app.html",
                "source": "aws_lamda",
                "parent_content": [
                    "You can use AWS Lambda to replace scheduled processes such as automated system backups, file conversions, and maintenance tasks.   In this example, you create a serverless application that performs regular scheduled maintenance on a DynamoDB table by deleting old entries. The app uses EventBridge Scheduler to invoke a   Lambda function on a cron schedule. When invoked, the function queries the table for items older than one year, and deletes them. The function logs each deleted item  in CloudWatch Logs.",
                    "To implement this example, first create a DynamoDB table and populate it with some test data for your function to query. Then, create a Python Lambda function with   an EventBridge Scheduler trigger and an IAM execution role that gives the function permission to read, and delete, items from your table.",
                    "Tip",
                    "If you’re new to Lambda, we recommend that you complete the tutorial Create your first Lambda function before      creating this example app.",
                    "You can deploy your app manually by creating and configuring resources with the AWS Management Console. You can     also deploy the app by using the AWS Serverless Application Model (AWS SAM). AWS SAM is an infrastructure as code (IaC) tool. With IaC, you don’t create     resources manually, but define them in code and then deploy them automatically.",
                    "If you want to learn more about using Lambda with IaC before deploying this example app, see Using Lambda with infrastructure as code (IaC).",
                    {
                        "sub_header": "Prerequisites",
                        "content": [
                            "Before you can create the example app, make sure you have the required command line tools and programs installed.",
                            "  1.Python : To populate the DynamoDB table you create to test your app, this example uses a  script and a CSV file to write data into the table. Make sure you have          version 3.8 or later installed on your machine.",
                            "  2.AWS SAM CLI : If you want to create the DynamoDB table and deploy the example app using AWS SAM, you need to install the .           Follow the installation instructions           in the AWS SAM User Guide.",
                            "  3.AWS CLI : To use the provided Python script to populate your test table, you need to have installed and configured the . This is because the script uses           the AWS SDK for Python (Boto3), which needs access to your AWS Identity and Access Management (IAM) credentials. You also need the  installed to deploy resources using AWS SAM. Install the CLI by following           the installation instructions in the AWS Command Line Interface User Guide.",
                            "  4.Docker : To deploy the app using AWS SAM,  must also be installed on your build machine. Follow the instructions in Install  Engine         on the  documentation website."
                        ]
                    },
                    {
                        "sub_header": "Downloading the example app files",
                        "content": [
                            "To create the example database and the scheduled-maintenance app, you need to create the following files in your project directory:",
                            "Example database files",
                            "  1.template.yaml - an AWS SAM template you can use to create the DynamoDB table",
                            "  2.sample_data.csv - a CSV file containing sample data to load into your table",
                            "  3.load_sample_data.py - a Python script that writes the data in the CSV file into the table",
                            "Scheduled-maintenance app files",
                            "  1.lambda_function.py - the Python function code for the Lambda function that performs the database maintenance",
                            "  2.requirements.txt - a manifest file defining the dependencies that your Python function code requires",
                            "  3.template.yaml - an AWS SAM template you can use to deploy the app",
                            "Test file",
                            "  1.test_app.py - a Python script that scans the table and confirms successful operation of your function by outputting all records older than one year",
                            "Expand the following sections to view the code and to learn more about the role of each file in creating and testing your app. To create the       files on your local machine, copy and paste the code below.",
                            "Copy and paste the following code into a file named template.yaml.",
                            {
                                "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Template for DynamoDB Table with Order_number as Partition Key and Date as Sort Key\n\nResources:\n  MyDynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Retain\n    UpdateReplacePolicy: Retain\n    Properties:\n      TableName: MyOrderTable\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: Order_number\n          AttributeType: S\n        - AttributeName: Date\n          AttributeType: S\n      KeySchema:\n        - AttributeName: Order_number\n          KeyType: HASH\n        - AttributeName: Date\n          KeyType: RANGE\n      SSESpecification:\n        SSEEnabled: true\n      GlobalSecondaryIndexes:\n        - IndexName: Date-index\n          KeySchema:\n            - AttributeName: Date\n              KeyType: HASH\n          Projection:\n            ProjectionType: ALL\n      PointInTimeRecoverySpecification:\n        PointInTimeRecoveryEnabled: true\n\nOutputs:\n  TableName:\n    Description: DynamoDB Table Name\n    Value: !Ref MyDynamoDBTable\n  TableArn:\n    Description: DynamoDB Table ARN\n    Value: !GetAtt MyDynamoDBTable.Arn"
                            },
                            "Note",
                            "AWS SAM templates use a standard naming convention of template.yaml. In this example, you have two template files - one to create the           example database and another to create the app itself. Save them in separate sub-directories in your project folder.",
                            "This AWS SAM template defines the DynamoDB table resource you create to test your app. The table uses a primary key of Order_number with a sort           key of Date. In order for your Lambda function to find items directly by date, we also define a Global Secondary Index         named Date-index.",
                            "To learn more about creating and configuring a DynamoDB table using the AWS::DynamoDB::Table resource, see AWS::DynamoDB::Table in           the AWS CloudFormation User Guide.",
                            "AWS SAM template (example DynamoDB table)",
                            "Copy and paste the following code into a file named template.yaml.",
                            {
                                "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Template for DynamoDB Table with Order_number as Partition Key and Date as Sort Key\n\nResources:\n  MyDynamoDBTable:\n    Type: AWS::DynamoDB::Table\n    DeletionPolicy: Retain\n    UpdateReplacePolicy: Retain\n    Properties:\n      TableName: MyOrderTable\n      BillingMode: PAY_PER_REQUEST\n      AttributeDefinitions:\n        - AttributeName: Order_number\n          AttributeType: S\n        - AttributeName: Date\n          AttributeType: S\n      KeySchema:\n        - AttributeName: Order_number\n          KeyType: HASH\n        - AttributeName: Date\n          KeyType: RANGE\n      SSESpecification:\n        SSEEnabled: true\n      GlobalSecondaryIndexes:\n        - IndexName: Date-index\n          KeySchema:\n            - AttributeName: Date\n              KeyType: HASH\n          Projection:\n            ProjectionType: ALL\n      PointInTimeRecoverySpecification:\n        PointInTimeRecoveryEnabled: true\n\nOutputs:\n  TableName:\n    Description: DynamoDB Table Name\n    Value: !Ref MyDynamoDBTable\n  TableArn:\n    Description: DynamoDB Table ARN\n    Value: !GetAtt MyDynamoDBTable.Arn"
                            },
                            "Note",
                            "AWS SAM templates use a standard naming convention of template.yaml. In this example, you have two template files - one to create the           example database and another to create the app itself. Save them in separate sub-directories in your project folder.",
                            "This AWS SAM template defines the DynamoDB table resource you create to test your app. The table uses a primary key of Order_number with a sort           key of Date. In order for your Lambda function to find items directly by date, we also define a Global Secondary Index         named Date-index.",
                            "To learn more about creating and configuring a DynamoDB table using the AWS::DynamoDB::Table resource, see AWS::DynamoDB::Table in           the AWS CloudFormation User Guide.",
                            "Copy and paste the following code into a file named sample_data.csv.",
                            {
                                "code_example": "Date,Order_number,CustomerName,ProductID,Quantity,TotalAmount\n2023-09-01,ORD001,Alejandro Rosalez,PROD123,2,199.98\n2023-09-01,ORD002,Akua Mansa,PROD456,1,49.99\n2023-09-02,ORD003,Ana Carolina Silva,PROD789,3,149.97\n2023-09-03,ORD004,Arnav Desai,PROD123,1,99.99\n2023-10-01,ORD005,Carlos Salazar,PROD456,2,99.98\n2023-10-02,ORD006,Diego Ramirez,PROD789,1,49.99\n2023-10-03,ORD007,Efua Owusu,PROD123,4,399.96\n2023-10-04,ORD008,John Stiles,PROD456,2,99.98\n2023-10-05,ORD009,Jorge Souza,PROD789,3,149.97\n2023-10-06,ORD010,Kwaku Mensah,PROD123,1,99.99\n2023-11-01,ORD011,Li Juan,PROD456,5,249.95\n2023-11-02,ORD012,Marcia Oliveria,PROD789,2,99.98\n2023-11-03,ORD013,Maria Garcia,PROD123,3,299.97\n2023-11-04,ORD014,Martha Rivera,PROD456,1,49.99\n2023-11-05,ORD015,Mary Major,PROD789,4,199.96\n2023-12-01,ORD016,Mateo Jackson,PROD123,2,199.99\n2023-12-02,ORD017,Nikki Wolf,PROD456,3,149.97\n2023-12-03,ORD018,Pat Candella,PROD789,1,49.99\n2023-12-04,ORD019,Paulo Santos,PROD123,5,499.95\n2023-12-05,ORD020,Richard Roe,PROD456,2,99.98\n2024-01-01,ORD021,Saanvi Sarkar,PROD789,3,149.97\n2024-01-02,ORD022,Shirley Rodriguez,PROD123,1,99.99\n2024-01-03,ORD023,Sofia Martinez,PROD456,4,199.96\n2024-01-04,ORD024,Terry Whitlock,PROD789,2,99.98\n2024-01-05,ORD025,Wang Xiulan,PROD123,3,299.97"
                            },
                            "This file contains some example test data to populate your DynamoDB table with in a standard comma-separated values (CSV) format.",
                            "Sample database data file",
                            "Copy and paste the following code into a file named sample_data.csv.",
                            {
                                "code_example": "Date,Order_number,CustomerName,ProductID,Quantity,TotalAmount\n2023-09-01,ORD001,Alejandro Rosalez,PROD123,2,199.98\n2023-09-01,ORD002,Akua Mansa,PROD456,1,49.99\n2023-09-02,ORD003,Ana Carolina Silva,PROD789,3,149.97\n2023-09-03,ORD004,Arnav Desai,PROD123,1,99.99\n2023-10-01,ORD005,Carlos Salazar,PROD456,2,99.98\n2023-10-02,ORD006,Diego Ramirez,PROD789,1,49.99\n2023-10-03,ORD007,Efua Owusu,PROD123,4,399.96\n2023-10-04,ORD008,John Stiles,PROD456,2,99.98\n2023-10-05,ORD009,Jorge Souza,PROD789,3,149.97\n2023-10-06,ORD010,Kwaku Mensah,PROD123,1,99.99\n2023-11-01,ORD011,Li Juan,PROD456,5,249.95\n2023-11-02,ORD012,Marcia Oliveria,PROD789,2,99.98\n2023-11-03,ORD013,Maria Garcia,PROD123,3,299.97\n2023-11-04,ORD014,Martha Rivera,PROD456,1,49.99\n2023-11-05,ORD015,Mary Major,PROD789,4,199.96\n2023-12-01,ORD016,Mateo Jackson,PROD123,2,199.99\n2023-12-02,ORD017,Nikki Wolf,PROD456,3,149.97\n2023-12-03,ORD018,Pat Candella,PROD789,1,49.99\n2023-12-04,ORD019,Paulo Santos,PROD123,5,499.95\n2023-12-05,ORD020,Richard Roe,PROD456,2,99.98\n2024-01-01,ORD021,Saanvi Sarkar,PROD789,3,149.97\n2024-01-02,ORD022,Shirley Rodriguez,PROD123,1,99.99\n2024-01-03,ORD023,Sofia Martinez,PROD456,4,199.96\n2024-01-04,ORD024,Terry Whitlock,PROD789,2,99.98\n2024-01-05,ORD025,Wang Xiulan,PROD123,3,299.97"
                            },
                            "This file contains some example test data to populate your DynamoDB table with in a standard comma-separated values (CSV) format.",
                            "Copy and paste the following code into a file named load_sample_data.py.",
                            {
                                "code_example": "import boto3\nimport csv\nfrom decimal import Decimal\n\n# Initialize the DynamoDB client\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('MyOrderTable') \nprint(\"DDB client initialized.\")\n\ndef load_data_from_csv(filename):\n    with open(filename, 'r') as file:\n        csv_reader = csv.DictReader(file)\n        for row in csv_reader:\n            item = {\n                'Order_number': row['Order_number'],\n                'Date': row['Date'],\n                'CustomerName': row['CustomerName'],\n                'ProductID': row['ProductID'],\n                'Quantity': int(row['Quantity']),\n                'TotalAmount': Decimal(str(row['TotalAmount']))\n            }\n            table.put_item(Item=item)\n            print(f\"Added item: {item['Order_number']} - {item['Date']}\")\n\nif __name__ == \"__main__\":\n    load_data_from_csv('sample_data.csv')\n    print(\"Data loading completed.\")"
                            },
                            "This Python script first uses the AWS SDK for Python (Boto3) to create a connection to your DynamoDB table. It then iterates over each row in the example-data CSV file, creates an item from that row, and            writes the item to the DynamoDB table using the boto3 SDK.",
                            "Python script to load sample data",
                            "Copy and paste the following code into a file named load_sample_data.py.",
                            {
                                "code_example": "import boto3\nimport csv\nfrom decimal import Decimal\n\n# Initialize the DynamoDB client\ndynamodb = boto3.resource('dynamodb')\ntable = dynamodb.Table('MyOrderTable') \nprint(\"DDB client initialized.\")\n\ndef load_data_from_csv(filename):\n    with open(filename, 'r') as file:\n        csv_reader = csv.DictReader(file)\n        for row in csv_reader:\n            item = {\n                'Order_number': row['Order_number'],\n                'Date': row['Date'],\n                'CustomerName': row['CustomerName'],\n                'ProductID': row['ProductID'],\n                'Quantity': int(row['Quantity']),\n                'TotalAmount': Decimal(str(row['TotalAmount']))\n            }\n            table.put_item(Item=item)\n            print(f\"Added item: {item['Order_number']} - {item['Date']}\")\n\nif __name__ == \"__main__\":\n    load_data_from_csv('sample_data.csv')\n    print(\"Data loading completed.\")"
                            },
                            "This Python script first uses the AWS SDK for Python (Boto3) to create a connection to your DynamoDB table. It then iterates over each row in the example-data CSV file, creates an item from that row, and            writes the item to the DynamoDB table using the boto3 SDK.",
                            "Copy and paste the following code into a file named lambda_function.py.",
                            {
                                "code_example": "import boto3\nfrom datetime import datetime, timedelta\nfrom boto3.dynamodb.conditions import Key, Attr\nimport logging\n\nlogger = logging.getLogger()\nlogger.setLevel(\"INFO\")\n\ndef lambda_handler(event, context):\n    # Initialize the DynamoDB client\n    dynamodb = boto3.resource('dynamodb')\n    \n    # Specify the table name\n    table_name = 'MyOrderTable'\n    table = dynamodb.Table(table_name)\n    \n    # Get today's date\n    today = datetime.now()\n    \n    # Calculate the date one year ago\n    one_year_ago = (today - timedelta(days=365)).strftime('%Y-%m-%d')\n    \n    # Scan the table using a global secondary index\n    response = table.scan(\n        IndexName='Date-index',\n        FilterExpression='#date < :one_year_ago',\n        ExpressionAttributeNames={\n            '#date': 'Date'\n        },\n        ExpressionAttributeValues={\n            ':one_year_ago': one_year_ago\n        }\n    )\n    \n     # Delete old items\n    with table.batch_writer() as batch:\n        for item in response['Items']:\n            Order_number = item['Order_number']\n            batch.delete_item(\n                Key={\n                    'Order_number': Order_number,\n                    'Date': item['Date']\n                }\n            )\n            logger.info(f'deleted order number {Order_number}')\n    \n    # Check if there are more items to scan\n    while 'LastEvaluatedKey' in response:\n        response = table.scan(\n            IndexName='DateIndex',\n            FilterExpression='#date < :one_year_ago',\n            ExpressionAttributeNames={\n                '#date': 'Date'\n            },\n            ExpressionAttributeValues={\n                ':one_year_ago': one_year_ago\n            },\n            ExclusiveStartKey=response['LastEvaluatedKey']\n        )\n        \n        # Delete old items\n        with table.batch_writer() as batch:\n            for item in response['Items']:\n                batch.delete_item(\n                    Key={\n                        'Order_number': item['Order_number'],\n                        'Date': item['Date']\n                    }\n                )\n    \n    return {\n        'statusCode': 200,\n        'body': 'Cleanup completed successfully'\n    }"
                            },
                            "The Python function code contains the handler function (lambda_handler) that Lambda runs when your function is     invoked.",
                            "When the function is invoked by EventBridge Scheduler, it uses the AWS SDK for Python (Boto3) to create a connection to the DynamoDB table on which the scheduled maintenance task is to be performed.     It then uses the Python datetime library to calculate the date one year ago, before scanning the table for items older than this and deleting them.",
                            "Note that responses from DynamoDB query and scan operations are limited to a maximum of 1 MB in size. If the response is larger than 1 MB, DynamoDB paginates the       data and returns a LastEvaluatedKey element in the response. To ensure that our function processes all the records in the table, we check for the presence of this key       and continue performing table scans from the last evaluated position until the whole table has been scanned.",
                            "Python function code",
                            "Copy and paste the following code into a file named lambda_function.py.",
                            {
                                "code_example": "import boto3\nfrom datetime import datetime, timedelta\nfrom boto3.dynamodb.conditions import Key, Attr\nimport logging\n\nlogger = logging.getLogger()\nlogger.setLevel(\"INFO\")\n\ndef lambda_handler(event, context):\n    # Initialize the DynamoDB client\n    dynamodb = boto3.resource('dynamodb')\n    \n    # Specify the table name\n    table_name = 'MyOrderTable'\n    table = dynamodb.Table(table_name)\n    \n    # Get today's date\n    today = datetime.now()\n    \n    # Calculate the date one year ago\n    one_year_ago = (today - timedelta(days=365)).strftime('%Y-%m-%d')\n    \n    # Scan the table using a global secondary index\n    response = table.scan(\n        IndexName='Date-index',\n        FilterExpression='#date < :one_year_ago',\n        ExpressionAttributeNames={\n            '#date': 'Date'\n        },\n        ExpressionAttributeValues={\n            ':one_year_ago': one_year_ago\n        }\n    )\n    \n     # Delete old items\n    with table.batch_writer() as batch:\n        for item in response['Items']:\n            Order_number = item['Order_number']\n            batch.delete_item(\n                Key={\n                    'Order_number': Order_number,\n                    'Date': item['Date']\n                }\n            )\n            logger.info(f'deleted order number {Order_number}')\n    \n    # Check if there are more items to scan\n    while 'LastEvaluatedKey' in response:\n        response = table.scan(\n            IndexName='DateIndex',\n            FilterExpression='#date < :one_year_ago',\n            ExpressionAttributeNames={\n                '#date': 'Date'\n            },\n            ExpressionAttributeValues={\n                ':one_year_ago': one_year_ago\n            },\n            ExclusiveStartKey=response['LastEvaluatedKey']\n        )\n        \n        # Delete old items\n        with table.batch_writer() as batch:\n            for item in response['Items']:\n                batch.delete_item(\n                    Key={\n                        'Order_number': item['Order_number'],\n                        'Date': item['Date']\n                    }\n                )\n    \n    return {\n        'statusCode': 200,\n        'body': 'Cleanup completed successfully'\n    }"
                            },
                            "The Python function code contains the handler function (lambda_handler) that Lambda runs when your function is     invoked.",
                            "When the function is invoked by EventBridge Scheduler, it uses the AWS SDK for Python (Boto3) to create a connection to the DynamoDB table on which the scheduled maintenance task is to be performed.     It then uses the Python datetime library to calculate the date one year ago, before scanning the table for items older than this and deleting them.",
                            "Note that responses from DynamoDB query and scan operations are limited to a maximum of 1 MB in size. If the response is larger than 1 MB, DynamoDB paginates the       data and returns a LastEvaluatedKey element in the response. To ensure that our function processes all the records in the table, we check for the presence of this key       and continue performing table scans from the last evaluated position until the whole table has been scanned.",
                            "Copy and paste the following code into a file named requirements.txt.",
                            {
                                "code_example": "boto3"
                            },
                            "For this example, your function code has only one dependency that isn't part of the standard Python library -           the SDK for Python (Boto3) that the function uses to scan and delete items from the DynamoDB table.",
                            "Note",
                            "A version of the SDK for Python (Boto3) is included as part of the Lambda runtime, so your code would run without adding Boto3 to your             function's deployment package. However, to maintain full control of your function's dependencies and avoid possible issues with             version misalignment, best practice for Python is to include all function dependencies in your function's deployment package.             See Runtime dependencies in Python to learn more.",
                            "requirements.txt manifest file",
                            "Copy and paste the following code into a file named requirements.txt.",
                            {
                                "code_example": "boto3"
                            },
                            "For this example, your function code has only one dependency that isn't part of the standard Python library -           the SDK for Python (Boto3) that the function uses to scan and delete items from the DynamoDB table.",
                            "Note",
                            "A version of the SDK for Python (Boto3) is included as part of the Lambda runtime, so your code would run without adding Boto3 to your             function's deployment package. However, to maintain full control of your function's dependencies and avoid possible issues with             version misalignment, best practice for Python is to include all function dependencies in your function's deployment package.             See Runtime dependencies in Python to learn more.",
                            "Copy and paste the following code into a file named template.yaml.",
                            {
                                "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Template for Lambda function and EventBridge Scheduler rule\n\nResources:\n  MyLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: ScheduledDBMaintenance\n      CodeUri: ./\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.11\n      Architectures:\n        - x86_64\n      Events:\n        ScheduleEvent:\n          Type: ScheduleV2\n          Properties:\n            ScheduleExpression: cron(0 3 1 * ? *)\n            Description: Run on the first day of every month at 03:00 AM\n      Policies:\n        - CloudWatchLogsFullAccess\n        - Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:Scan\n                - dynamodb:BatchWriteItem\n              Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MyOrderTable'\n\n  LambdaLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${MyLambdaFunction}\n      RetentionInDays: 30\n\nOutputs:\n  LambdaFunctionName:\n    Description: Lambda Function Name\n    Value: !Ref MyLambdaFunction\n  LambdaFunctionArn:\n    Description: Lambda Function ARN\n    Value: !GetAtt MyLambdaFunction.Arn"
                            },
                            "Note",
                            "AWS SAM templates use a standard naming convention of template.yaml. In this example, you have two template files - one to create the             example database and another to create the app itself. Save them in separate sub-directories in your project folder.",
                            "This AWS SAM template defines the resources for your app. We define the Lambda function using the AWS::Serverless::Function resource. The EventBridge Scheduler schedule and the           trigger to invoke the Lambda function are created by using the Events property of this resource using a type of ScheduleV2. To learn more about defining EventBridge Scheduler schedules in AWS SAM templates,           see ScheduleV2 in the           AWS Serverless Application Model Developer Guide.",
                            "In addition to the Lambda function and the EventBridge Scheduler schedule, we also define a CloudWatch log group for your function to send records of deleted items to.",
                            "AWS SAM template (scheduled-maintenance app)",
                            "Copy and paste the following code into a file named template.yaml.",
                            {
                                "code_example": "AWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: SAM Template for Lambda function and EventBridge Scheduler rule\n\nResources:\n  MyLambdaFunction:\n    Type: AWS::Serverless::Function\n    Properties:\n      FunctionName: ScheduledDBMaintenance\n      CodeUri: ./\n      Handler: lambda_function.lambda_handler\n      Runtime: python3.11\n      Architectures:\n        - x86_64\n      Events:\n        ScheduleEvent:\n          Type: ScheduleV2\n          Properties:\n            ScheduleExpression: cron(0 3 1 * ? *)\n            Description: Run on the first day of every month at 03:00 AM\n      Policies:\n        - CloudWatchLogsFullAccess\n        - Statement:\n            - Effect: Allow\n              Action:\n                - dynamodb:Scan\n                - dynamodb:BatchWriteItem\n              Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MyOrderTable'\n\n  LambdaLogGroup:\n    Type: AWS::Logs::LogGroup\n    Properties:\n      LogGroupName: !Sub /aws/lambda/${MyLambdaFunction}\n      RetentionInDays: 30\n\nOutputs:\n  LambdaFunctionName:\n    Description: Lambda Function Name\n    Value: !Ref MyLambdaFunction\n  LambdaFunctionArn:\n    Description: Lambda Function ARN\n    Value: !GetAtt MyLambdaFunction.Arn"
                            },
                            "Note",
                            "AWS SAM templates use a standard naming convention of template.yaml. In this example, you have two template files - one to create the             example database and another to create the app itself. Save them in separate sub-directories in your project folder.",
                            "This AWS SAM template defines the resources for your app. We define the Lambda function using the AWS::Serverless::Function resource. The EventBridge Scheduler schedule and the           trigger to invoke the Lambda function are created by using the Events property of this resource using a type of ScheduleV2. To learn more about defining EventBridge Scheduler schedules in AWS SAM templates,           see ScheduleV2 in the           AWS Serverless Application Model Developer Guide.",
                            "In addition to the Lambda function and the EventBridge Scheduler schedule, we also define a CloudWatch log group for your function to send records of deleted items to.",
                            "Copy and paste the following code into a file named test_app.py.",
                            {
                                "code_example": "import boto3\nfrom datetime import datetime, timedelta\nimport json\n\n# Initialize the DynamoDB client\ndynamodb = boto3.resource('dynamodb')\n\n# Specify your table name\ntable_name = 'YourTableName'\ntable = dynamodb.Table(table_name)\n\n# Get the current date\ncurrent_date = datetime.now()\n\n# Calculate the date one year ago\none_year_ago = current_date - timedelta(days=365)\n\n# Convert the date to string format (assuming the date in DynamoDB is stored as a string)\none_year_ago_str = one_year_ago.strftime('%Y-%m-%d')\n\n# Scan the table\nresponse = table.scan(\n    FilterExpression='#date < :one_year_ago',\n    ExpressionAttributeNames={\n        '#date': 'Date'\n    },\n    ExpressionAttributeValues={\n        ':one_year_ago': one_year_ago_str\n    }\n)\n\n# Process the results\nold_records = response['Items']\n\n# Continue scanning if we have more items (pagination)\nwhile 'LastEvaluatedKey' in response:\n    response = table.scan(\n        FilterExpression='#date < :one_year_ago',\n        ExpressionAttributeNames={\n            '#date': 'Date'\n        },\n        ExpressionAttributeValues={\n            ':one_year_ago': one_year_ago_str\n        },\n        ExclusiveStartKey=response['LastEvaluatedKey']\n    )\n    old_records.extend(response['Items'])\n\nfor record in old_records:\n    print(json.dumps(record))\n\n# The total number of old records should be zero.\nprint(f\"Total number of old records: {len(old_records)}\")\n"
                            },
                            "This test script uses the AWS SDK for Python (Boto3) to create a connection to your DynamoDB table and scan for items older than one year. To confirm if the Lambda function           has run successfully, at the end of the test, the function prints the number of records older than one year still in the table. If the Lambda function was successful,           the number of old records in the table should be zero.        ",
                            "Test script",
                            "Copy and paste the following code into a file named test_app.py.",
                            {
                                "code_example": "import boto3\nfrom datetime import datetime, timedelta\nimport json\n\n# Initialize the DynamoDB client\ndynamodb = boto3.resource('dynamodb')\n\n# Specify your table name\ntable_name = 'YourTableName'\ntable = dynamodb.Table(table_name)\n\n# Get the current date\ncurrent_date = datetime.now()\n\n# Calculate the date one year ago\none_year_ago = current_date - timedelta(days=365)\n\n# Convert the date to string format (assuming the date in DynamoDB is stored as a string)\none_year_ago_str = one_year_ago.strftime('%Y-%m-%d')\n\n# Scan the table\nresponse = table.scan(\n    FilterExpression='#date < :one_year_ago',\n    ExpressionAttributeNames={\n        '#date': 'Date'\n    },\n    ExpressionAttributeValues={\n        ':one_year_ago': one_year_ago_str\n    }\n)\n\n# Process the results\nold_records = response['Items']\n\n# Continue scanning if we have more items (pagination)\nwhile 'LastEvaluatedKey' in response:\n    response = table.scan(\n        FilterExpression='#date < :one_year_ago',\n        ExpressionAttributeNames={\n            '#date': 'Date'\n        },\n        ExpressionAttributeValues={\n            ':one_year_ago': one_year_ago_str\n        },\n        ExclusiveStartKey=response['LastEvaluatedKey']\n    )\n    old_records.extend(response['Items'])\n\nfor record in old_records:\n    print(json.dumps(record))\n\n# The total number of old records should be zero.\nprint(f\"Total number of old records: {len(old_records)}\")\n"
                            },
                            "This test script uses the AWS SDK for Python (Boto3) to create a connection to your DynamoDB table and scan for items older than one year. To confirm if the Lambda function           has run successfully, at the end of the test, the function prints the number of records older than one year still in the table. If the Lambda function was successful,           the number of old records in the table should be zero.        "
                        ]
                    },
                    {
                        "sub_header": "Creating and populating the example DynamoDB table",
                        "content": [
                            "To test your scheduled-maintenance app, you first create a DynamoDB table and populate it with some sample data. You can create the table either manually using the       AWS Management Console or by using AWS SAM. We recommend that you use AWS SAM to quickly create and configure the table using a few AWS CLI commands.",
                            "  1.Console : MyOrderTable",
                            "  2.AWS SAM : template.yaml",
                            "anchor",
                            "anchor",
                            "To create the DynamoDB table",
                            "  1 : Open the Tables page of the DynamoDB console.",
                            "  2 : Choose Create table.",
                            "  3 : Create the table by doing the following:Under Table details, for Table name, enter MyOrderTable.For Partition key, enter Order_number and leave the type as String.For Sort key, enter Date and leave the type as String.Leave Table settings set to Default settings and choose Create table.",
                            "  4 : When your table has finished creating and its Status shows as Active, create a global secondary index (GSI) by doing the               following. Your app will use this GSI to search for items directly by date to determine what to delete.Choose MyOrderTable from the list of tables.Choose the Indexes tab.Under Global secondary indexes, choose Create index.Under Index details, enter Date for the Partition key and leave the                   Data type set to String.For Index name, enter Date-index.Leave all other parameters set to their default values, scroll to the bottom of the page, and choose Create index.",
                            "After you've created your table, you next add some sample data to test your app. The CSV file sample_data.csv you downloaded     earlier contains a number of example entries comprised of order numbers, dates, and customer and order information. Use the provided python script     load_sample_data.py to add this data to your table.",
                            "To add the sample data to the table",
                            "  1 : Navigate to the directory containing the sample_data.csv and load_sample_data.py files. If these files are in         separate directories, move them so they're saved in the same location.",
                            " 2 : Create a Python virtual environment to run the script in by running the following command. We recommend that you use a virtual environment because in a following         step you'll need to install the AWS SDK for Python (Boto3). ",
                            {
                                "code_example": "python -m venv venv"
                            },
                            " 3 : Activate the virtual environment by running the following command. ",
                            {
                                "code_example": "source venv/bin/activate"
                            },
                            " 4 : Install the SDK for Python (Boto3) in your virtual environment by running the following command. The script uses this library to connect to your DynamoDB table and add the items. ",
                            {
                                "code_example": "pip install boto3"
                            },
                            " 5 : Run the script to populate the table by running the following command. If the script runs successfully, it should print each item to the console as it loads it and report Data loading completed.",
                            {
                                "code_example": "python load_sample_data.py"
                            },
                            " 6 : Deactivate the virtual environment by running the following command. ",
                            {
                                "code_example": "deactivate"
                            },
                            "  7 : You can verify that the data has been loaded to your DynamoDB table by doing the following:Open the Explore items page of the DynamoDB console and select your table (MyOrderTable).In the Items returned pane, you should see the 25 items from the CSV file that the script added to the table."
                        ]
                    },
                    {
                        "sub_header": "Creating the scheduled-maintenance app",
                        "content": [
                            "You can create and deploy the resources for this example app step by step using the AWS Management Console or by using AWS SAM. In a production environment, we       recommend that you use an Infrustracture-as-Code (IaC) tool like AWS SAM to repeatably deploy serverless applications without using manual processes.",
                            "For this example, follow the console instructions to learn how to configure each AWS resource separately, or follow the AWS SAM instructions     to quickly deploy the app using AWS CLI commands.",
                            "  1.Console : .zip",
                            "  2.AWS SAM : template.yaml",
                            "anchor",
                            "anchor",
                            "To create the function using the AWS Management Console",
                            "First, create a function containing basic starter code. You then                 replace this code with your own function code by either copying and pasting the code directly in the Lambda code editor, or by uploading your code                as a .zip package. For this task, we recommend simply copying and pasting the code.",
                            "  1 : Open the Functions page of the Lambda console.",
                            "  2 : Choose Create function.",
                            "  3 : Choose Author from scratch.",
                            "  4 : Under Basic information, do the following:For Function name, enter ScheduledDBMaintenance.For Runtime choose the latest Python version.For Architecture, choose x86_64.",
                            "  5 : Choose Create function.",
                            "  6 : After your function is created, you can configure your function with the provided function code.In the Code source pane, replace the Hello world code that Lambda created with the Python function code from                        the lambda_function.py file that you saved earlier.In the DEPLOY section, choose Deploy to update your function's code:",
                            "To configure the function memory and timeout (console)",
                            "  1 : Select the Configuration tab for your function.",
                            "  2 : In the General configuration pane, choose Edit.",
                            "  3 : Set Memory to 256 MB and Timeout to 15 seconds.                  If you are processing a large table with many records, for example in the case of a production environment,                  you might consider setting Timeout to a larger number. This gives your function                  more time to scan, and clean the database.",
                            "  4 : Choose Save.",
                            "To configure the log format (console)",
                            "You can configure Lambda functions to output logs in either unstructured text or JSON format. We recommend that you use JSON format for logs to                   make it easier to search and filter log data. To learn more about Lambda log configuration options, see Configuring advanced logging controls for Lambda functions.",
                            "  1 : Select the Configuration tab for your function.",
                            "  2 : Select Monitoring and operations tools.",
                            "  3 : In the Logging configuration pane, choose Edit.",
                            "  4 : For Logging configuration, select JSON.",
                            "  5 : Choose Save.",
                            "To set Up IAM permissions",
                            "To give your function the permissions it needs to read and delete DynamoDB items, you need to add a policy to your function's                     execution role defining the necessary permissions.",
                            "  1 : Open the Configuration tab, then choose                        Permissions from the left navigation bar.",
                            "  2 : Choose the role name under Execution role.",
                            "  3 : In the IAM console, choose Add permissions, then                        Create inline policy.",
                            " 4 : Use the JSON editor and enter the following policy: ",
                            {
                                "code_example": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"dynamodb:Scan\",\n                \"dynamodb:DeleteItem\",\n                \"dynamodb:BatchWriteItem\"\n            ],\n            \"Resource\": \"arn:aws:dynamodb:*:*:table/MyOrderTable\"\n        }\n    ]\n}"
                            },
                            "  5 : Name the policy DynamoDBCleanupPolicy, then create it.",
                            "To set up EventBridge Scheduler as a trigger (console)",
                            "  1 : Open the EventBridge console.",
                            "  2 : In the left navigation pane, choose Schedulers under the                        Scheduler section.",
                            "  3 : Choose Create schedule.",
                            "  4 : Configure the schedule by doing the following:Under Schedule name, enter a name for your schedule (for example, DynamoDBCleanupSchedule).Under Schedule pattern, choose Recurring schedule.For Schedule type leave the default as Cron-based schedule,                          then enter the following schedule details:Minutes: 0Hours: 3Day of month: 1Month: *Day of the week: ?Year: *When evaluated, this cron expression runs on the first day of every month at 03:00 AM.For Flexible time window, select Off.",
                            "  5 : Choose Next.",
                            "  6 : Configure the trigger for your Lambda function by doing the following:In the Target detail pane, leave Target API set to Templated targets,                         then select AWS Lambda Invoke.Under Invoke, select your Lambda function (ScheduledDBMaintenance) from the dropdown list.Leave the Payload empty and choose Next.Scroll down to Permissions and select Create a new role for this schedule.                            When you create a new EventBridge Scheduler schedule using the console, EventBridge Scheduler creates a new policy with the required                          permissions the schedule needs to invoke your function. For more information about managing your schedule permissions, see                          Cron-based schedules.                          in the EventBridge Scheduler User Guide.Choose Next.",
                            "  7 : Review your settings and choose Create schedule to complete creation of the schedule and Lambda trigger."
                        ]
                    },
                    {
                        "sub_header": "Testing the app",
                        "content": [
                            "      To test that your schedule correctly triggers your function, and that your function correctly cleans records      from the database, you can temporarily modify your schedule to run once at a specific time. You can then run sam deploy again to      reset your recurrence schedule to run once a month.    ",
                            "To run the application using the AWS Management Console",
                            "  1 : Navigate back to the EventBridge Scheduler console page.",
                            "  2 : Choose your schedule, then choose Edit.",
                            "  3 : In the Schedule pattern section, under Recurrence, choose One-time schedule.",
                            "  4 :           Set your invocation time to a few minutes from now, review your settings, then choose Save.        ",
                            "      After the schedule runs and invokes its target, you run the test_app.py script to verify that your function successfully removed all old records      from the DynamoDB table.    ",
                            "To verify that old records are deleted using a Python script",
                            "  1 :           In your command line windown, navigate to the folder where you saved test_app.py.        ",
                            " 2 :           Run the script.                   If successful, you will see the following output.        Total number of old records: 0",
                            {
                                "code_example": "python test_app.py"
                            }
                        ]
                    },
                    {
                        "sub_header": "Next steps",
                        "content": [
                            "      You can now modify the EventBridge Scheduler schedule to meet your partifuclar application requirements. EventBridge Scheduler supports the following schedule expressions: cron, rate, and one-time schedules.    ",
                            "      For more information about EventBridge Scheduler schedule expresssions, see Schedule types in the      EventBridge Scheduler User Guide.    "
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "Building with TypeScript",
        "href": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-typescript.html",
        "source": "aws_lamda",
        "sections": [
            "You can use the Node.js runtime to run TypeScript code in AWS Lambda. Because Node.js doesn't run TypeScript code natively, you must first     transpile your TypeScript code into JavaScript. Then, use the JavaScript files to deploy your function code to Lambda. Your code runs in an     environment that includes the AWS SDK for JavaScript, with credentials from an AWS Identity and Access Management (IAM) role that you manage. To learn more     about the SDK versions included with the Node.js runtimes, see Runtime-included SDK versions.",
            "Lambda supports the following Node.js runtimes.",
            "NameIdentifierOperating systemDeprecation dateBlock function createBlock function updateNode.js 22nodejs22.xAmazon Linux 2023            Not scheduled                        Not scheduled                        Not scheduled            Node.js 20nodejs20.xAmazon Linux 2023            Not scheduled                        Not scheduled                        Not scheduled            Node.js 18nodejs18.xAmazon Linux 2            Jul 31, 2025                        Sep 1, 2025                        Oct 1, 2025            ",
            "Topics",
            {
                "sub_header": "Setting up a TypeScript development environment",
                "content": [
                    "Use a local integrated development environment (IDE), text editor, or AWS Cloud9 to write your TypeScript function code. You can’t create TypeScript code on the Lambda console.",
                    "To transpile your TypeScript code, set up a compiler such as esbuild or Microsoft's TypeScript compiler (tsc) , which is bundled with the TypeScript distribution. You can use the AWS Serverless Application Model (AWS SAM) or the AWS Cloud Development Kit (AWS CDK) to simplify building and deploying TypeScript code. Both tools use esbuild to transpile TypeScript code into JavaScript.",
                    "When using esbuild, consider the following:",
                    "  1.There are several TypeScript caveats.",
                    "  2.tsconfig.json : You must configure your TypeScript transpilation settings to match the Node.js runtime that you plan to use. For more information, see Target in the esbuild documentation. For an example of a  file that demonstrates how to target a specific Node.js version supported by Lambda, refer to the TypeScript GitHub repository.",
                    "  3.tsconfig.json : esbuild doesn’t perform type checks. To check types, use the tsc compiler. Run tsc -noEmit or add a \"noEmit\" parameter to your  file, as shown in the following example. This configures tsc to not emit JavaScript files. After checking types, use esbuild to convert the TypeScript files into JavaScript.",
                    "Example  tsconfig.json",
                    {
                        "code_example": " {\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"strict\": true,\n    \"preserveConstEnums\": true,\n    \"noEmit\": true,\n    \"sourceMap\": false,\n    \"module\":\"commonjs\",\n    \"moduleResolution\":\"node\",\n    \"esModuleInterop\": true, \n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true, \n    \"isolatedModules\": true, \n  },\n  \"exclude\": [\"node_modules\", \"**/*.test.ts\"]\n}"
                    }
                ]
            },
            {
                "title": "Handler",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-handler.html",
                "source": "aws_lamda",
                "parent_content": [
                    "The Lambda function handler is the method in your function code that processes events. When your function is  invoked, Lambda runs the handler method. Your function runs until the handler returns a response, exits, or times out.",
                    "Topics",
                    {
                        "sub_header": "Typescript handler basics",
                        "content": [
                            "Example TypeScript handler",
                            "This example function logs the contents of the event object and returns the location of the        logs. Note the following:",
                            "  1.Before using this code in a Lambda function, you must add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. When @types/aws-lambda is installed, the import statement (import ... from 'aws-lambda') imports the type definitions. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository.",
                            "  2.The handler in this example is an ES module and must be designated as such in your package.json file or by using the .mjs file extension. For more information, see  see Designating a function handler as an ES module.",
                            {
                                "code_example": "import { Handler } from 'aws-lambda';\n\nexport const handler: Handler = async (event, context) => {\n    console.log('EVENT: \\n' + JSON.stringify(event, null, 2));\n    return context.logStreamName;\n};"
                            },
                            "The runtime passes arguments to the handler method. The first argument is the event object,      which contains information from the invoker. The invoker passes this information as a JSON-formatted string when it      calls Invoke, and the runtime converts it to an object. When an AWS service invokes your function, the event      structure varies by service. With TypeScript, we recommend using type      annotations for the event object. For more information, see Using types for the event object.",
                            "The second argument is the context object, which contains information      about the invocation, function, and execution environment. In the preceding example, the function gets the name of      the log stream from the context object and returns it to the invoker.",
                            "You can also use a callback argument, which is a function that you can call in non-async handlers to send a response.      We recommend that you use async/await instead of callbacks. Async/await provides improved readability, error handling,      and efficiency. For more information about the differences between async/await and callbacks, see      Using callbacks."
                        ]
                    },
                    {
                        "sub_header": "Using async/await",
                        "content": [
                            "If your code performs an asynchronous task, use the async/await pattern to make sure that the handler finishes running. Async/await is a concise and readable way to write asynchronous code in Node.js, without the need for nested callbacks or chaining promises. With async/await, you can write code that reads like synchronous code, while still being asynchronous and non-blocking.",
                            "The async keyword marks a function as asynchronous, and the await keyword pauses the execution of the function until a Promise is resolved.",
                            "Example  TypeScript function – asynchronous",
                            "This example uses fetch, which is available in the nodejs18.x runtime. Note the following:",
                            "  1.Before using this code in a Lambda function, you must add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. When @types/aws-lambda is installed, the import statement (import ... from 'aws-lambda') imports the type definitions. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository.",
                            "  2.The handler in this example is an ES module and must be designated as such in your package.json file or by using the .mjs file extension. For more information, see  see Designating a function handler as an ES module.",
                            {
                                "code_example": "import { APIGatewayProxyEvent, APIGatewayProxyResult } from 'aws-lambda';\nconst url = 'https://aws.amazon.com/';\nexport const lambdaHandler = async (event: APIGatewayProxyEvent): Promise<APIGatewayProxyResult> => {\n    try {\n        // fetch is available with Node.js 18\n        const res = await fetch(url);\n        return {\n            statusCode: res.status,\n            body: JSON.stringify({\n                message: await res.text(),\n            }),\n        };\n    } catch (err) {\n        console.log(err);\n        return {\n            statusCode: 500,\n            body: JSON.stringify({\n                message: 'some error happened',\n            }),\n        };\n    }\n};"
                            }
                        ]
                    },
                    {
                        "sub_header": "Using callbacks",
                        "content": [
                            "We recommend that you use async/await to declare the function handler instead of using callbacks. Async/await is a better choice for several reasons:",
                            "  1.Readability: :  Async/await code is easier to read and understand than callback code, which can quickly become difficult to follow and result in callback hell.",
                            "  2.Debugging and error handling: :  Debugging callback-based code can be difficult. The call stack can become hard to follow and errors can easily be swallowed. With async/await, you can use try/catch blocks to handle errors.",
                            "  3.Efficiency: :  Callbacks often require switching between different parts of the code. Async/await can reduce the number of context switches, resulting in more efficient code.",
                            "When you use callbacks in your handler, the function continues to execute until the event loop is empty or the    function times out. The response isn't sent to the invoker until all event loop tasks are finished. If the    function times out, an error is returned instead. You can configure the runtime to send the response immediately    by setting context.callbackWaitsForEmptyEventLoop to false.",
                            "The callback function takes two      arguments: an Error and a response. The response object must be compatible with        JSON.stringify.",
                            "Example TypeScript function with callback",
                            "This sample function receives an event from Amazon API Gateway, logs the event and context objects, and then returns a response to API Gateway. Note the following:",
                            "  1.Before using this code in a Lambda function, you must add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. When @types/aws-lambda is installed, the import statement (import ... from 'aws-lambda') imports the type definitions. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository.",
                            "  2.The handler in this example is an ES module and must be designated as such in your package.json file or by using the .mjs file extension. For more information, see  see Designating a function handler as an ES module.",
                            {
                                "code_example": "import { Context, APIGatewayProxyCallback, APIGatewayEvent } from 'aws-lambda';\n\nexport const lambdaHandler = (event: APIGatewayEvent, context: Context, callback: APIGatewayProxyCallback): void => {\n    console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n    console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n    callback(null, {\n        statusCode: 200,\n        body: JSON.stringify({\n            message: 'hello world',\n        }),\n    });\n};"
                            }
                        ]
                    },
                    {
                        "sub_header": "Using types for the event object",
                        "content": [
                            "We recommend that you don’t use the any type for the handler arguments and return type because you lose the ability to check types. Instead, generate an event using the sam local generate-event AWS Serverless Application Model CLI command, or use an open-source definition from the @types/aws-lambda package.",
                            "Generating an event using the sam local generate-event command",
                            " 1 : Generate an  Amazon Simple Storage Service (Amazon S3) proxy event. ",
                            {
                                "code_example": "sam local generate-event s3 put >> S3PutEvent.json"
                            },
                            " 2 : Use the quicktype utility to generate type definitions from the S3PutEvent.json file. ",
                            {
                                "code_example": "npm install -g quicktype\nquicktype S3PutEvent.json -o S3PutEvent.ts"
                            },
                            " 3 : Use the generated types in your code. ",
                            {
                                "code_example": "import { S3PutEvent } from './S3PutEvent';\n\nexport const lambdaHandler = async (event: S3PutEvent): Promise<void> => {\n  event.Records.map((record) => console.log(record.s3.object.key));\n};"
                            },
                            "Generating an event using an open-source definition from the @types/aws-lambda package",
                            " 1 : Add the @types/aws-lambda package as a development dependency. ",
                            {
                                "code_example": "npm install -D @types/aws-lambda"
                            },
                            " 2 : Use the types in your code. ",
                            {
                                "code_example": "import { S3Event } from \"aws-lambda\";\n\nexport const lambdaHandler = async (event: S3Event): Promise<void> => {\n  event.Records.map((record) => console.log(record.s3.object.key));\n};"
                            }
                        ]
                    },
                    {
                        "sub_header": "Code best practices for Typescript Lambda functions",
                        "content": [
                            "Adhere to the guidelines in the following list to use best coding practices when building your Lambda functions:",
                            "  1.Separate the Lambda handler from your core logic. :  This allows you to make          a more unit-testable function. In Node.js this may look like: exports.myHandler = function(event, context, callback) {\tvar foo = event.foo;\tvar bar = event.bar;\tvar result = MyLambdaFunction (foo, bar);\tcallback(null, result);}function MyLambdaFunction (foo, bar) {\t// MyLambdaFunction logic here}",
                            {
                                "code_example": "exports.myHandler = function(event, context, callback) {\n\tvar foo = event.foo;\n\tvar bar = event.bar;\n\tvar result = MyLambdaFunction (foo, bar);\n\n\tcallback(null, result);\n}\n\nfunction MyLambdaFunction (foo, bar) {\n\t// MyLambdaFunction logic here\n}"
                            },
                            "  2.Control the dependencies in your function's deployment package.  :  The          AWS Lambda execution environment contains a number of libraries. For the Node.js and Python runtimes, these include the AWS SDKs.          To enable the latest set of features and security updates, Lambda will periodically update these libraries.          These updates may introduce subtle changes to the behavior of your Lambda function. To have full control of the          dependencies your function uses, package all of your dependencies with your deployment package. ",
                            "  3.Minimize the complexity of your dependencies. :  Prefer simpler frameworks          that load quickly on execution environment startup.",
                            "  4.Minimize your deployment package size to its runtime necessities.  :  This          will reduce the amount of time that it takes for your deployment package to be downloaded and unpacked ahead          of invocation.",
                            "  1.Take advantage of execution environment reuse to improve the performance of your\n        function. :  Initialize SDK clients and database connections outside of the function handler, and        cache static assets locally in the /tmp directory. Subsequent invocations processed by        the same instance of your function can reuse these resources. This saves cost by reducing function run time.To avoid potential data leaks across invocations, don’t use the execution environment to store user data,        events, or other information with security implications. If your function relies on a mutable state that can’t        be stored in memory within the handler, consider creating a separate function or separate versions of a        function for each user.",
                            "  2.Use a keep-alive directive to maintain persistent connections. :  Lambda purges idle connections over time. Attempting to reuse an idle connection when invoking a function will result in a connection error. To maintain your persistent connection, use the keep-alive directive associated with your runtime. For an example, see Reusing Connections with Keep-Alive in Node.js.",
                            "  3.Use environment variables to pass operational parameters to your function. :  For example, if        you are writing to an Amazon S3 bucket, instead of hard-coding the bucket name you are writing to, configure the        bucket name as an environment variable.",
                            "  4.Avoid using recursive invocations :  in your Lambda function, where the function        invokes itself or initiates a process that may invoke the function again. This could lead to unintended volume of        function invocations and escalated costs. If you see an unintended volume of invocations, set the function reserved concurrency        to 0 immediately to throttle all invocations to the function, while you update the        code.",
                            "  5.Do not use non-documented, non-public APIs :  in your Lambda function code.        For AWS Lambda managed runtimes, Lambda periodically applies security and functional updates to Lambda's internal APIs.        These internal API updates may be backwards-incompatible, leading to unintended consequences such as invocation        failures if your function has a dependency on these non-public APIs. See        the API reference for a list of        publicly available APIs.",
                            "  6.Write idempotent code. :  Writing idempotent code for your functions ensures that        duplicate events are handled the same way. Your code should properly validate events and gracefully handle        duplicate events. For more information, see        How do I make          my Lambda function idempotent?."
                        ]
                    }
                ]
            },
            {
                "title": "Deploy .zip file archives",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-package.html",
                "source": "aws_lamda",
                "parent_content": [
                    "Before you can deploy TypeScript code to AWS Lambda, you need to transpile it into JavaScript. This page explains three ways to build and deploy TypeScript code to Lambda with .zip file archives:",
                    "  1.Using AWS Serverless Application Model (AWS SAM)",
                    "  2.Using the AWS Cloud Development Kit (AWS CDK)",
                    "  3.Using the AWS Command Line Interface (AWS CLI) and esbuild",
                    "AWS SAM and AWS CDK simplify building and deploying TypeScript functions. The AWS SAM template specification provides a simple and clean syntax to describe the Lambda functions, APIs, permissions, configurations, and events that make up your serverless application. The AWS CDK lets you build reliable, scalable, cost-effective applications in the cloud with the considerable expressive power of a programming language. The AWS CDK is intended for moderately to highly experienced AWS users. Both the AWS CDK and the AWS SAM use esbuild to transpile TypeScript code into JavaScript.",
                    {
                        "sub_header": "Using AWS SAM to deploy TypeScript code to Lambda",
                        "content": [
                            "Follow the steps below to download, build, and deploy a sample Hello World TypeScript application using the AWS SAM. This application implements a basic API backend. It consists of an Amazon API Gateway endpoint and a Lambda function. When you send a GET request to the API Gateway endpoint, the Lambda function is invoked. The function returns a hello world message.",
                            "Note",
                            "AWS SAM uses esbuild to create Node.js Lambda functions from TypeScript code. esbuild support is currently in public preview. During public preview, esbuild support may be subject to backwards incompatible changes.",
                            "Prerequisites",
                            "To complete the steps in this section, you must have the following:",
                            "  1.AWS CLI version 2",
                            "  2.AWS SAM CLI version 1.75 or later",
                            "  3.Node.js 18.x",
                            "Deploy a sample AWS SAM application",
                            " 1 : Initialize the application using the Hello World TypeScript template. ",
                            {
                                "code_example": "sam init --app-template hello-world-typescript --name sam-app --package-type Zip --runtime nodejs18.x"
                            },
                            " 2 : (Optional) The sample application includes configurations for commonly used tools, such as ESLlint for code linting and Jest for unit testing. To run lint and test commands: ",
                            {
                                "code_example": "cd sam-app/hello-world\nnpm install\nnpm run lint\nnpm run test"
                            },
                            " 3 : Build the app. ",
                            {
                                "code_example": "cd sam-app\nsam build"
                            },
                            " 4 : Deploy the app. ",
                            {
                                "code_example": "sam deploy --guided"
                            },
                            "  5 : Follow the on-screen prompts. To accept the default options provided in the interactive experience, respond with Enter.",
                            " 6 : The output shows the endpoint for the REST API. Open the endpoint in a browser to test the function. You should see this response: ",
                            {
                                "code_example": "{\"message\":\"hello world\"}"
                            },
                            " 7 : This is a public API endpoint that is accessible over the internet. We recommend that you delete the endpoint after testing. ",
                            {
                                "code_example": "sam delete"
                            }
                        ]
                    },
                    {
                        "sub_header": "Using the AWS CDK to deploy TypeScript code to Lambda",
                        "content": [
                            "Follow the steps below to build and deploy a sample TypeScript application using the AWS CDK. This application implements a basic API backend. It consists of an API Gateway endpoint and a Lambda function. When you send a GET request to the API Gateway endpoint, the Lambda function is invoked. The function returns a hello world message.",
                            "Prerequisites",
                            "To complete the steps in this section, you must have the following:",
                            "  1.AWS CLI version 2",
                            "  2.AWS CDK version 2",
                            "  3.Node.js 18.x",
                            "  4.Either Docker or esbuild",
                            "Deploy a sample AWS CDK application",
                            " 1 : Create a project directory for your new application. ",
                            {
                                "code_example": "mkdir hello-world\ncd hello-world"
                            },
                            " 2 : Initialize the app. ",
                            {
                                "code_example": "cdk init app --language typescript"
                            },
                            " 3 : Add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. ",
                            {
                                "code_example": "npm install -D @types/aws-lambda"
                            },
                            "  4 : Open the lib directory. You should see a file called hello-world-stack.ts. Create two new files in this directory: hello-world.function.ts and hello-world.ts.",
                            " 5 : Open hello-world.function.ts and add the following code to the file. This is the code for the Lambda function.NoteThe import statement imports the type definitions from @types/aws-lambda. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository. ",
                            {
                                "code_example": "import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n    console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n    console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n    return {\n        statusCode: 200,\n        body: JSON.stringify({\n            message: 'hello world',\n        }),\n    };\n};"
                            },
                            " 6 : Open hello-world.ts and add the following code to the file. This contains the NodejsFunction construct, which creates the Lambda function, and the LambdaRestApi construct, which creates the REST API. The NodejsFunction construct assumes the following by default:Your function handler is called handler.The .ts file that contains the function code (hello-world.function.ts) is in the same directory as the .ts file that contains the construct (hello-world.ts). The construct uses the construct's ID (\"hello-world\") and the name of the Lambda handler file (\"function\") to find the function code. For example, if your function code is in a file called hello-world.my-function.ts, the hello-world.ts file must reference the function code like this:const helloFunction = new NodejsFunction(this, 'my-function');You can change this behavior and configure other esbuild parameters. For more information, see Configuring esbuild in the AWS CDK API reference.",
                            {
                                "code_example": "import { Construct } from 'constructs';\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';\nimport { LambdaRestApi } from 'aws-cdk-lib/aws-apigateway';\n  \nexport class HelloWorld extends Construct {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    const helloFunction = new NodejsFunction(this, 'function');\n    new LambdaRestApi(this, 'apigw', {\n      handler: helloFunction,\n    });\n  }\n}"
                            },
                            " 7 : Open hello-world-stack.ts. This is the code that defines your AWS CDK stack. Replace the code with the following: ",
                            {
                                "code_example": "import { Stack, StackProps } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport { HelloWorld } from './hello-world';\n  \nexport class HelloWorldStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n    new HelloWorld(this, 'hello-world');\n  }\n}"
                            },
                            " 8 : from the hello-world directory containing your cdk.json file, deploy your           application. ",
                            {
                                "code_example": "cdk deploy"
                            },
                            " 9 : The AWS CDK builds and packages the Lambda function using esbuild, and then deploys the function to the Lambda runtime. The output shows the endpoint for the REST API. Open the endpoint in a browser to test the function. You should see this response: This is a public API endpoint that is accessible over the internet. We recommend that you delete the endpoint after testing.",
                            {
                                "code_example": "{\"message\":\"hello world\"}"
                            }
                        ]
                    },
                    {
                        "sub_header": "Using the AWS CLI and esbuild to deploy TypeScript code to Lambda",
                        "content": [
                            "The following example demonstrates how to transpile and deploy TypeScript code to Lambda using esbuild and the AWS CLI. esbuild produces one JavaScript file with all dependencies. This is the only file that you need to add to the .zip archive.",
                            "Prerequisites",
                            "To complete the steps in this section, you must have the following:",
                            "  1.AWS CLI version 2",
                            "  2.Node.js 18.x",
                            "  3.An execution role for the Lambda function",
                            "  4.For Windows users, a zip file utility such as 7zip.",
                            "Deploy a sample function",
                            "  1 : On your local machine, create a project directory for your new function. ",
                            " 2 : Create a new Node.js project with npm or a package manager of your choice. ",
                            {
                                "code_example": "npm init"
                            },
                            " 3 : Add the @types/aws-lambda and esbuild packages as development dependencies. The @types/aws-lambda package contains the type definitions for Lambda. ",
                            {
                                "code_example": "npm install -D @types/aws-lambda esbuild"
                            },
                            " 4 : Create a new file called index.ts. Add the following code to the new file. This is the code for the Lambda function. The function returns a hello world message. The function doesn’t create any API Gateway resources.NoteThe import statement imports the type definitions from @types/aws-lambda. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository. ",
                            {
                                "code_example": "import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n  console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n  console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n  return {\n      statusCode: 200,\n      body: JSON.stringify({\n          message: 'hello world',\n      }),\n   };\n};"
                            },
                            " 5 : Add a build script to the package.json file. This configures esbuild to automatically create the .zip deployment package. For more information, see Build scripts in the esbuild documentation.Linux and MacOS WindowsIn this example, the \"postbuild\" command uses the 7zip utility to       create your .zip file. Use your own preferred Windows zip utility and modify the command as necessary.\"scripts\": {  \"prebuild\": \"del /q dist\",  \"build\": \"esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js\",  \"postbuild\": \"cd dist && 7z a -tzip index.zip index.js*\"},anchoranchorLinux and MacOSWindows ",
                            {
                                "code_example": "\"scripts\": {\n  \"prebuild\": \"rm -rf dist\",\n  \"build\": \"esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js\",\n  \"postbuild\": \"cd dist && zip -r index.zip index.js*\"\n},"
                            },
                            " 6 : Build the package. ",
                            {
                                "code_example": "npm run build"
                            },
                            " 7 : Create a Lambda function using the .zip deployment package. Replace the highlighted text with the Amazon Resource Name (ARN) of your execution role. ",
                            {
                                "code_example": "aws lambda create-function --function-name hello-world --runtime \"nodejs18.x\" --role arn:aws:iam::123456789012:role/lambda-ex --zip-file \"fileb://dist/index.zip\" --handler index.handler"
                            },
                            " 8 : Run a test event to confirm that the function returns the following response. If you want to invoke this function using API Gateway, create and configure a REST API. ",
                            {
                                "code_example": "{\n  \"statusCode\": 200,\n  \"body\": \"{\\\"message\\\":\\\"hello world\\\"}\"\n}"
                            }
                        ]
                    }
                ]
            },
            {
                "title": "Deploy container images",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-image.html",
                "source": "aws_lamda",
                "parent_content": [
                    "You can deploy your TypeScript code to an AWS Lambda function as a Node.js container image. AWS provides base images for Node.js to help you build the container image. These base images are preloaded with a language runtime and other components that are required to run the image on Lambda. AWS provides a Dockerfile for each of the base images to help with building your container image.",
                    "If you use a community or private enterprise base image, you must add the Node.js runtime interface client (RIC) to the base image to make it compatible with Lambda.",
                    "Lambda provides a runtime interface emulator for local testing. The AWS base images for Node.js include the runtime interface emulator. If you use an alternative base image, such as an Alpine Linux or Debian image, you can build the emulator into your image or install it on your local machine.",
                    {
                        "sub_header": "Using a Node.js base image to build and package TypeScript function code",
                        "content": [
                            "To complete the steps in this section, you must have the following:",
                            "  1.AWS CLI version 2",
                            "  2.Docker",
                            "  3.Node.js 22.x",
                            "Prerequisites",
                            "To complete the steps in this section, you must have the following:",
                            "  1.AWS CLI version 2",
                            "  2.Docker",
                            "  3.Node.js 22.x",
                            "To create an image from an AWS base image for Lambda",
                            "  1 : On your local machine, create a project directory for your new function.",
                            " 2 : Create a new Node.js project with npm or a package manager of your choice. ",
                            {
                                "code_example": "npm init"
                            },
                            " 3 : Add the @types/aws-lambda and esbuild packages as development dependencies. The @types/aws-lambda package contains the type definitions for Lambda. ",
                            {
                                "code_example": "npm install -D @types/aws-lambda esbuild"
                            },
                            " 4 : Add a build script to the package.json file. ",
                            {
                                "code_example": "  \"scripts\": {\n  \"build\": \"esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js\"\n}"
                            },
                            " 5 : Create a new file called index.ts. Add the following sample code to the new file. This is the code for the Lambda function. The function returns a hello world message.NoteThe import statement imports the type definitions from @types/aws-lambda. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository. ",
                            {
                                "code_example": "import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n    console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n    console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n    return {\n        statusCode: 200,\n        body: JSON.stringify({\n            message: 'hello world',\n        }),\n    };\n};"
                            },
                            " 6 : Create a new Dockerfile with the following configuration:Set the FROM property to the URI of the base image.Set the CMD argument to specify the Lambda function handler.The following example Dockerfile uses a multi-stage build. The first step transpiles the TypeScript code into JavaScript. The second step produces a container image that contains only JavaScript files and production dependencies.Note that the example Dockerfile does not include a USER instruction. When you deploy a container image to Lambda, Lambda automatically defines a default Linux user with least-privileged permissions. This is different from standard Docker behavior which defaults to the root user when no USER instruction is provided.Example  Dockerfile ",
                            {
                                "code_example": "FROM public.ecr.aws/lambda/nodejs:22 as builder\nWORKDIR /usr/app\nCOPY package.json index.ts  ./\nRUN npm install\nRUN npm run build\n    \nFROM public.ecr.aws/lambda/nodejs:22\nWORKDIR ${LAMBDA_TASK_ROOT}\nCOPY --from=builder /usr/app/dist/* ./\nCMD [\"index.handler\"]"
                            },
                            " 7 : Build the Docker image with the docker build command. The          following example names the image docker-image and gives it the test tag. NoteThe command specifies the --platform linux/amd64 option to ensure that your container is compatible with the Lambda execution environment regardless of the         architecture of your build machine. If you intend to create a Lambda function using the ARM64 instruction set architecture, be sure to change the command to use the --platform linux/arm64        option instead.",
                            {
                                "code_example": "docker build --platform linux/amd64 -t docker-image:test ."
                            },
                            "Creating an image from a base image",
                            "To create an image from an AWS base image for Lambda",
                            "  1 : On your local machine, create a project directory for your new function.",
                            " 2 : Create a new Node.js project with npm or a package manager of your choice. ",
                            {
                                "code_example": "npm init"
                            },
                            " 3 : Add the @types/aws-lambda and esbuild packages as development dependencies. The @types/aws-lambda package contains the type definitions for Lambda. ",
                            {
                                "code_example": "npm install -D @types/aws-lambda esbuild"
                            },
                            " 4 : Add a build script to the package.json file. ",
                            {
                                "code_example": "  \"scripts\": {\n  \"build\": \"esbuild index.ts --bundle --minify --sourcemap --platform=node --target=es2020 --outfile=dist/index.js\"\n}"
                            },
                            " 5 : Create a new file called index.ts. Add the following sample code to the new file. This is the code for the Lambda function. The function returns a hello world message.NoteThe import statement imports the type definitions from @types/aws-lambda. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository. ",
                            {
                                "code_example": "import { Context, APIGatewayProxyResult, APIGatewayEvent } from 'aws-lambda';\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n    console.log(`Event: ${JSON.stringify(event, null, 2)}`);\n    console.log(`Context: ${JSON.stringify(context, null, 2)}`);\n    return {\n        statusCode: 200,\n        body: JSON.stringify({\n            message: 'hello world',\n        }),\n    };\n};"
                            },
                            " 6 : Create a new Dockerfile with the following configuration:Set the FROM property to the URI of the base image.Set the CMD argument to specify the Lambda function handler.The following example Dockerfile uses a multi-stage build. The first step transpiles the TypeScript code into JavaScript. The second step produces a container image that contains only JavaScript files and production dependencies.Note that the example Dockerfile does not include a USER instruction. When you deploy a container image to Lambda, Lambda automatically defines a default Linux user with least-privileged permissions. This is different from standard Docker behavior which defaults to the root user when no USER instruction is provided.Example  Dockerfile ",
                            {
                                "code_example": "FROM public.ecr.aws/lambda/nodejs:22 as builder\nWORKDIR /usr/app\nCOPY package.json index.ts  ./\nRUN npm install\nRUN npm run build\n    \nFROM public.ecr.aws/lambda/nodejs:22\nWORKDIR ${LAMBDA_TASK_ROOT}\nCOPY --from=builder /usr/app/dist/* ./\nCMD [\"index.handler\"]"
                            },
                            " 7 : Build the Docker image with the docker build command. The          following example names the image docker-image and gives it the test tag. NoteThe command specifies the --platform linux/amd64 option to ensure that your container is compatible with the Lambda execution environment regardless of the         architecture of your build machine. If you intend to create a Lambda function using the ARM64 instruction set architecture, be sure to change the command to use the --platform linux/arm64        option instead.",
                            {
                                "code_example": "docker build --platform linux/amd64 -t docker-image:test ."
                            },
                            " 1 : Start the Docker image with the docker run command. In this example,              docker-image is the image name and test is the tag. This command runs the image as a container and creates a local endpoint at            localhost:9000/2015-03-31/functions/function/invocations.NoteIf you built the Docker image for the ARM64 instruction set architecture, be sure to use the --platform linux/arm64 option instead of --platform linux/amd64.",
                            {
                                "code_example": "docker run --platform linux/amd64 -p 9000:8080 docker-image:test"
                            },
                            " 2 : From a new terminal window, post an event to the local endpoint.Linux/macOSIn Linux and macOS, run the following curl command: This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{\"payload\":\"hello world!\"}'PowerShellIn PowerShell, run the following Invoke-WebRequest command:Invoke-WebRequest -Uri \"http://localhost:9000/2015-03-31/functions/function/invocations\" -Method Post -Body '{}' -ContentType \"application/json\"This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:Invoke-WebRequest -Uri \"http://localhost:9000/2015-03-31/functions/function/invocations\" -Method Post -Body '{\"payload\":\"hello world!\"}' -ContentType \"application/json\"",
                            {
                                "code_example": "curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{}'"
                            },
                            " 3 : Get the container ID. ",
                            {
                                "code_example": "docker ps"
                            },
                            " 4 : Use the docker kill command to stop the container. In this command, replace 3766c4ab331c with the container ID from the previous step. ",
                            {
                                "code_example": "docker kill 3766c4ab331c"
                            },
                            "(Optional) Test the image locally",
                            " 1 : Start the Docker image with the docker run command. In this example,              docker-image is the image name and test is the tag. This command runs the image as a container and creates a local endpoint at            localhost:9000/2015-03-31/functions/function/invocations.NoteIf you built the Docker image for the ARM64 instruction set architecture, be sure to use the --platform linux/arm64 option instead of --platform linux/amd64.",
                            {
                                "code_example": "docker run --platform linux/amd64 -p 9000:8080 docker-image:test"
                            },
                            " 2 : From a new terminal window, post an event to the local endpoint.Linux/macOSIn Linux and macOS, run the following curl command: This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{\"payload\":\"hello world!\"}'PowerShellIn PowerShell, run the following Invoke-WebRequest command:Invoke-WebRequest -Uri \"http://localhost:9000/2015-03-31/functions/function/invocations\" -Method Post -Body '{}' -ContentType \"application/json\"This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:Invoke-WebRequest -Uri \"http://localhost:9000/2015-03-31/functions/function/invocations\" -Method Post -Body '{\"payload\":\"hello world!\"}' -ContentType \"application/json\"anchoranchorLinux/macOSPowerShellIn Linux and macOS, run the following curl command: This command invokes the function with an empty event and returns a response. If you're using your own function code rather than the sample function code, you might want to invoke the function with a JSON payload. Example:curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{\"payload\":\"hello world!\"}'",
                            {
                                "code_example": "curl \"http://localhost:9000/2015-03-31/functions/function/invocations\" -d '{}'"
                            },
                            " 3 : Get the container ID. ",
                            {
                                "code_example": "docker ps"
                            },
                            " 4 : Use the docker kill command to stop the container. In this command, replace 3766c4ab331c with the container ID from the previous step. ",
                            {
                                "code_example": "docker kill 3766c4ab331c"
                            },
                            "To upload the image to Amazon ECR and create the Lambda function",
                            " 1 : Run the get-login-password command to authenticate the Docker CLI to your Amazon ECR registry.Set the --region value to the AWS Region where you want to create the Amazon ECR repository.Replace 111122223333 with your AWS account ID. ",
                            {
                                "code_example": "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 111122223333.dkr.ecr.us-east-1.amazonaws.com"
                            },
                            " 2 : Create a repository in Amazon ECR using the create-repository command. NoteThe Amazon ECR repository must be in the same AWS Region as the Lambda function.If successful, you see a response like this:{    \"repository\": {        \"repositoryArn\": \"arn:aws:ecr:us-east-1:111122223333:repository/hello-world\",        \"registryId\": \"111122223333\",        \"repositoryName\": \"hello-world\",        \"repositoryUri\": \"111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world\",        \"createdAt\": \"2023-03-09T10:39:01+00:00\",        \"imageTagMutability\": \"MUTABLE\",        \"imageScanningConfiguration\": {            \"scanOnPush\": true        },        \"encryptionConfiguration\": {            \"encryptionType\": \"AES256\"        }    }}",
                            {
                                "code_example": "aws ecr create-repository --repository-name hello-world --region us-east-1 --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE"
                            },
                            "  3 : Copy the repositoryUri from the output in the previous step.",
                            " 4 : Run the docker tag command to tag your local image into your Amazon ECR repository as the latest version. In this command:docker-image:test is the name and tag of your Docker image. This is the image name and tag that you specified in the docker build command.Replace <ECRrepositoryUri> with the repositoryUri that you copied. Make sure to include :latest at the end of the URI. Example:docker tag docker-image:test 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest",
                            {
                                "code_example": "docker tag docker-image:test <ECRrepositoryUri>:latest"
                            },
                            " 5 : Run the docker push command to deploy your local image to the Amazon ECR repository. Make sure to include :latest at the end of the repository URI. ",
                            {
                                "code_example": "docker push 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest"
                            },
                            "  6 : Create an execution role for the function, if you don't already have one. You need the Amazon Resource Name (ARN) of the role in the next step.",
                            " 7 : Create the Lambda function. For ImageUri, specify the repository URI from earlier. Make sure to include :latest at the end of the URI. NoteYou can create a function using an image in a different AWS account, as long as the image is in the same Region as the Lambda function. For more information, see  Amazon ECR cross-account permissions.",
                            {
                                "code_example": "aws lambda create-function \\\n  --function-name hello-world \\\n  --package-type Image \\\n  --code ImageUri=111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest \\\n  --role arn:aws:iam::111122223333:role/lambda-ex"
                            },
                            " 8 : Invoke the function. You should see a response like this:{  \"ExecutedVersion\": \"$LATEST\",   \"StatusCode\": 200}",
                            {
                                "code_example": "aws lambda invoke --function-name hello-world response.json"
                            },
                            "  9 : To see the output of the function, check the response.json file.",
                            "To update the function code, you must build the image again, upload the new image to the Amazon ECR repository, and then use the update-function-code command to deploy the image to the Lambda function.",
                            "Lambda resolves the image tag to a specific image digest. This means that if you point the image tag that was used to deploy the function to a new image in Amazon ECR, Lambda doesn't automatically update the function to use the new image.",
                            "To deploy the new image to the same Lambda function, you must use the update-function-code command, even if the image tag in Amazon ECR remains the same. In the following example, the --publish option creates a new version of the function using the updated container image.",
                            {
                                "code_example": "aws lambda update-function-code \\\n  --function-name hello-world \\\n  --image-uri 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest \\\n  --publish"
                            },
                            "Deploying the image",
                            "To upload the image to Amazon ECR and create the Lambda function",
                            " 1 : Run the get-login-password command to authenticate the Docker CLI to your Amazon ECR registry.Set the --region value to the AWS Region where you want to create the Amazon ECR repository.Replace 111122223333 with your AWS account ID. ",
                            {
                                "code_example": "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 111122223333.dkr.ecr.us-east-1.amazonaws.com"
                            },
                            " 2 : Create a repository in Amazon ECR using the create-repository command. NoteThe Amazon ECR repository must be in the same AWS Region as the Lambda function.If successful, you see a response like this:{    \"repository\": {        \"repositoryArn\": \"arn:aws:ecr:us-east-1:111122223333:repository/hello-world\",        \"registryId\": \"111122223333\",        \"repositoryName\": \"hello-world\",        \"repositoryUri\": \"111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world\",        \"createdAt\": \"2023-03-09T10:39:01+00:00\",        \"imageTagMutability\": \"MUTABLE\",        \"imageScanningConfiguration\": {            \"scanOnPush\": true        },        \"encryptionConfiguration\": {            \"encryptionType\": \"AES256\"        }    }}",
                            {
                                "code_example": "aws ecr create-repository --repository-name hello-world --region us-east-1 --image-scanning-configuration scanOnPush=true --image-tag-mutability MUTABLE"
                            },
                            "  3 : Copy the repositoryUri from the output in the previous step.",
                            " 4 : Run the docker tag command to tag your local image into your Amazon ECR repository as the latest version. In this command:docker-image:test is the name and tag of your Docker image. This is the image name and tag that you specified in the docker build command.Replace <ECRrepositoryUri> with the repositoryUri that you copied. Make sure to include :latest at the end of the URI. Example:docker tag docker-image:test 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest",
                            {
                                "code_example": "docker tag docker-image:test <ECRrepositoryUri>:latest"
                            },
                            " 5 : Run the docker push command to deploy your local image to the Amazon ECR repository. Make sure to include :latest at the end of the repository URI. ",
                            {
                                "code_example": "docker push 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest"
                            },
                            "  6 : Create an execution role for the function, if you don't already have one. You need the Amazon Resource Name (ARN) of the role in the next step.",
                            " 7 : Create the Lambda function. For ImageUri, specify the repository URI from earlier. Make sure to include :latest at the end of the URI. NoteYou can create a function using an image in a different AWS account, as long as the image is in the same Region as the Lambda function. For more information, see  Amazon ECR cross-account permissions.",
                            {
                                "code_example": "aws lambda create-function \\\n  --function-name hello-world \\\n  --package-type Image \\\n  --code ImageUri=111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest \\\n  --role arn:aws:iam::111122223333:role/lambda-ex"
                            },
                            " 8 : Invoke the function. You should see a response like this:{  \"ExecutedVersion\": \"$LATEST\",   \"StatusCode\": 200}",
                            {
                                "code_example": "aws lambda invoke --function-name hello-world response.json"
                            },
                            "  9 : To see the output of the function, check the response.json file.",
                            "To update the function code, you must build the image again, upload the new image to the Amazon ECR repository, and then use the update-function-code command to deploy the image to the Lambda function.",
                            "Lambda resolves the image tag to a specific image digest. This means that if you point the image tag that was used to deploy the function to a new image in Amazon ECR, Lambda doesn't automatically update the function to use the new image.",
                            "To deploy the new image to the same Lambda function, you must use the update-function-code command, even if the image tag in Amazon ECR remains the same. In the following example, the --publish option creates a new version of the function using the updated container image.",
                            {
                                "code_example": "aws lambda update-function-code \\\n  --function-name hello-world \\\n  --image-uri 111122223333.dkr.ecr.us-east-1.amazonaws.com/hello-world:latest \\\n  --publish"
                            }
                        ]
                    }
                ]
            },
            {
                "title": "Layers",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-layers.html",
                "source": "aws_lamda",
                "parent_content": [
                    "A Lambda layer is a .zip  file archive that contains supplementary code or data. Layers usually contain library dependencies, a  custom runtime, or configuration files. Creating a layer involves  three general steps:",
                    "  1 : Package your layer content. This means creating a .zip file archive that contains the dependencies        you want to use in your functions.",
                    "  2 : Create the layer in Lambda.",
                    "  3 : Add the layer to your functions.",
                    "This topic contains steps and guidance on how to properly package and create a Node.js  Lambda layer with external library dependencies. Additionally, this topic explains how use your layer with a function written in TypeScript.",
                    {
                        "sub_header": "Prerequisites",
                        "content": [
                            "To follow the steps in this section, you must have the following:",
                            "  1.Node.js 20 and the npm package manager. For more information about installing Node.js, see Installing Node.js via package manager in the Node.js     documentation.",
                            "  2.AWS CLI version 2",
                            "Throughout this topic, we reference the layer-nodejs   sample application in the aws-lambda-developer-guide GitHub repository. This application contains scripts   that will package the lodash library into a Lambda layer. The layer   directory contains the scripts to generate the layer. The application also contains a TypeScript sample   function in the function-ts directory that uses the dependency from the layer.   After creating a layer, you can transpile, deploy and invoke the corresponding function to verify that everything   works. This document walks through how to create, package, deploy and test this layer using the TypeScript sample function.",
                            " This sample application uses the Node.js 20 runtime. If you add additional dependencies to your    layer, they must be compatible with Node.js 20."
                        ]
                    },
                    {
                        "sub_header": "Node.js layer compatibility with the Lambda runtime environment",
                        "content": [
                            "When you package code in a Node.js layer, you specify the Lambda runtime environments that the code is compatible with. To   assess code compatibility with a runtime, consider what versions of Node.js, what operating systems, and what   instruction set architectures the code is designed for.",
                            "Lambda Node.js runtimes specify their Node.js version and operating system. In this document, you will use the Node.js   20 runtime, which is based on AL2023. For more information about runtime versions, see Supported runtimes. When you create a Lambda function, you specify the instruction set architecture. In this   document, you will use the arm64 architecture. For more information about architectures in Lambda, see Selecting and configuring an instruction set architecture for your Lambda function.",
                            "When you use code provided in a package, each package maintainer independently defines their compatibility. Most   Node.js development is designed to work independently of operating system and instruction set architecture.   Additionally, breaking incompatibilities with new Node.js versions are not that common. Expect to spend more of your   time assessing compatibility between packages than assessing package compatibility with Node.js version,   operating system, or instruction set architecture.",
                            "Sometimes Node.js packages include compiled code, which require you to consider operating system and    instruction set architecture compatibility. If you do need to assess code compatibility for your packages, you will need to inspect the   packages and their documentation. Packages in NPM can specify their compatibility through the engines,   os, and cpu fields of their package.json manifest file. For more information   about package.json files, see package.json in the NPM documentation."
                        ]
                    },
                    {
                        "sub_header": "Layer paths for Node.js runtimes",
                        "content": [
                            "When you add a layer to a function, Lambda loads the layer content into the execution environment.    If your layer packages dependencies in specific folder paths,    the Node.js execution environment will recognize the modules, and you can reference the modules from your    function code.",
                            "To ensure that your modules are picked up, package them into your layer .zip file in one of the following folder paths.   These files are stored in /opt, and the folder paths are loaded into the PATH environment variable.",
                            "  1.nodejs/node_modules",
                            "  2.nodejs/nodeX/node_modules",
                            "For example, the resulting layer .zip file that you create in this tutorial has the   following directory structure:",
                            "layer_content.zip└ nodejs    └ node20        └ node_modules            └ lodash            └ <other potential dependencies>            └ ...",
                            "You will put the lodash library   in the nodejs/node20/node_modules directory. This   ensures that Lambda can locate the library during function invocations."
                        ]
                    },
                    {
                        "sub_header": "Packaging the layer content",
                        "content": [
                            "In this example, you package the lodash library in a layer .zip file. Complete the following steps  to install and package the layer content.",
                            "To install and package your layer content",
                            " 1 : Clone the      aws-lambda-developer-guide repository from GitHub, which contains the sample     code that you need in the sample-apps/layer-nodejs directory. ",
                            {
                                "code_example": "git clone https://github.com/awsdocs/aws-lambda-developer-guide.git"
                            },
                            " 2 : Navigate to the layer directory of the layer-nodejs sample     app. This directory contains the scripts that you use to create and package the layer     properly. ",
                            {
                                "code_example": "cd aws-lambda-developer-guide/sample-apps/layer-nodejs/layer"
                            },
                            "  3 : Ensure the package.json file lists lodash. This file    defines the dependencies that you want to include in the layer. You can update this file to include    any dependencies that you want in your layer. Note The package.json used in this step is not stored or used with your dependencies after they are      uploaded to a Lambda layer. It is only used in the layer packaging process, and does not      specify a run command and compatibility as the file would in a Node.js application or published package.",
                            " 4 : Ensure that you have shell permission to run the scripts in the layer directory. ",
                            {
                                "code_example": "chmod 744 1-install.sh && chmod 744 2-package.sh"
                            },
                            " 5 : Run the 1-install.sh script using the following command: This script runs npm install, which reads your package.json and downloads the dependencies defined inside of it.Example 1-install.shnpm install .",
                            {
                                "code_example": "./1-install.sh"
                            },
                            " 6 : Run the 2-package.sh script using the following command:  This script copies the contents from the node_modules directory into a new directory named     nodejs/node20. It then zips the contents of the nodejs directory into a file named     layer_content.zip. This is the .zip file for your layer. You can unzip the file and verify     that it contains the correct file structure, as shown in the Layer paths for Node.js runtimes section. Example 2-package.shmkdir -p nodejs/node20cp -r node_modules nodejs/node20/zip -r layer_content.zip nodejs",
                            {
                                "code_example": "./2-package.sh"
                            }
                        ]
                    },
                    {
                        "sub_header": "Creating the layer",
                        "content": [
                            "Take the layer_content.zip file that you   generated in the previous section and upload it as a Lambda layer. You can upload a layer using   the AWS Management Console or the Lambda API via the AWS Command Line Interface (AWS CLI). When you upload your layer .zip   file, in the following PublishLayerVersion AWS CLI command, specify   nodejs20.x as the compatible runtime and arm64 as the compatible   architecture.",
                            "aws lambda publish-layer-version --layer-name nodejs-lodash-layer \\    --zip-file fileb://layer_content.zip \\    --compatible-runtimes nodejs20.x \\    --compatible-architectures \"arm64\"",
                            "From the response, note the LayerVersionArn, which looks like   arn:aws:lambda:us-east-1:123456789012:layer:nodejs-lodash-layer:1.   You'll need this Amazon Resource Name (ARN) in the next step of this tutorial, when you add   the layer to your function."
                        ]
                    },
                    {
                        "sub_header": "Adding the layer to your function",
                        "content": [
                            "Deploy a sample Lambda function that uses the lodash library in its function code, then attach the   layer you created. To create a Lambda function using function code written in TypeScript, you must transpile the   TypeScript to JavaScript for use by the Node.js runtime. For more information about this process, see Define Lambda function handler in TypeScript. For better compatibility, use tsc to transpile your TypeScript module when you   distribute your dependencies with layers. If you bundle your dependencies, consider using esbuild. For more   information about bundling with esbuild, see Deploy transpiled TypeScript code in Lambda with .zip file archives.",
                            "To deploy the function, you need an execution role. For more   information, see   Defining Lambda function permissions with an execution role. If you don't have an existing execution role,   follow the steps in the collapsible section. Otherwise, skip to the next section to deploy the   function.",
                            "To create an execution role",
                            "  1 : Open the roles page in the IAM console.",
                            "  2 : Choose Create role.",
                            "  3 : Create a role with the following properties.Trusted entity – Lambda.Permissions – AWSLambdaBasicExecutionRole.Role name – lambda-role.The AWSLambdaBasicExecutionRole policy has the permissions that the function needs to      write logs to CloudWatch Logs.",
                            "(Optional) Create an execution role",
                            "To create an execution role",
                            "  1 : Open the roles page in the IAM console.",
                            "  2 : Choose Create role.",
                            "  3 : Create a role with the following properties.Trusted entity – Lambda.Permissions – AWSLambdaBasicExecutionRole.Role name – lambda-role.The AWSLambdaBasicExecutionRole policy has the permissions that the function needs to      write logs to CloudWatch Logs.",
                            "The sample function code uses the lodash _.findLastIndex method to read through an array of objects. It   compares the objects against a criteria to find the index of a match. Then, it returns the index and value of the   object in the Lambda response.",
                            "import { Handler } from 'aws-lambda';import * as _ from 'lodash';type User = {  user: string;  active: boolean;}type UserResult = {  statusCode: number;  body: string;}const users: User[] = [  { 'user': 'Carlos', 'active': true },  { 'user': 'Gil-dong', 'active': false },  { 'user': 'Pat', 'active': false }];export const handler: Handler<any, UserResult> = async (): Promise<UserResult> => {  let out = _.findLastIndex(users, (user: User) => { return user.user == 'Pat'; });  const response = {    statusCode: 200,    body: JSON.stringify(out + \", \" + users[out].user),  };  return response;};",
                            "To deploy the Lambda function",
                            " 1 : Navigate to the function-ts/ directory of the layer-nodejs sample application. If you're currently in the     layer/ directory of the layer-nodejs sample application, then run the following command: ",
                            {
                                "code_example": "cd ../function-ts"
                            },
                            " 2 : Install the development dependencies listed in the package.json using the following command: ",
                            {
                                "code_example": "npm install"
                            },
                            " 3 : Run the build task defined in the package.json to transpile and package your function code into a .zip file. Use the following command: ",
                            {
                                "code_example": "npm run build"
                            },
                            " 4 : Deploy the function. In the following AWS CLI command, replace the --role     parameter with your execution role ARN: ",
                            {
                                "code_example": "aws lambda create-function --function-name nodejs_function_with_layer \\\n    --runtime nodejs20.x \\\n    --architectures \"arm64\" \\\n    --handler index.handler \\\n    --role arn:aws:iam::123456789012:role/lambda-role \\\n    --zip-file fileb://dist/index.zip"
                            },
                            " 5 : Attach the layer to your function. In the following AWS CLI command, replace the     --layers parameter with the layer version ARN that you noted earlier: ",
                            {
                                "code_example": "aws lambda update-function-configuration --function-name nodejs_function_with_layer \\\n    --cli-binary-format raw-in-base64-out \\\n    --layers \"arn:aws:lambda:us-east-1:123456789012:layer:nodejs-lodash-layer:1\""
                            },
                            " 6 : Invoke your function to verify it works using the following AWS CLI command: You should see output that looks like this:{    \"StatusCode\": 200,    \"ExecutedVersion\": \"$LATEST\"}The output response.json file contains details about the     response.",
                            {
                                "code_example": "aws lambda invoke --function-name nodejs_function_with_layer \\\n    --cli-binary-format raw-in-base64-out \\\n    --payload '{}' response.json"
                            },
                            "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                            "To delete the Lambda layer",
                            "  1 : Open the Layers page of the Lambda console.",
                            "  2 : Select the layer that you created.",
                            "  3 : Choose Delete, then choose Delete again.",
                            "To delete the Lambda function",
                            "  1 : Open the Functions page of the Lambda console.",
                            "  2 : Select the function that you created.",
                            "  3 : Choose Actions, Delete.",
                            "  4 : Type delete in the text input field and choose Delete.",
                            "(Optional) Clean up your resources",
                            "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                            "To delete the Lambda layer",
                            "  1 : Open the Layers page of the Lambda console.",
                            "  2 : Select the layer that you created.",
                            "  3 : Choose Delete, then choose Delete again.",
                            "To delete the Lambda function",
                            "  1 : Open the Functions page of the Lambda console.",
                            "  2 : Select the function that you created.",
                            "  3 : Choose Actions, Delete.",
                            "  4 : Type delete in the text input field and choose Delete."
                        ]
                    }
                ]
            },
            {
                "title": "Context",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-context.html",
                "source": "aws_lamda",
                "parent_content": [
                    "When Lambda runs your function, it passes a context object to the handler.    This object provides methods and properties that provide information about the invocation, function, and execution    environment.",
                    "Context methods",
                    "  1.getRemainingTimeInMillis() – Returns the number of milliseconds left before the execution times out.",
                    "Context properties",
                    "  1.functionName – The name of the Lambda function.",
                    "  2.functionVersion – The version of the function.",
                    "  3.invokedFunctionArn – The Amazon Resource Name (ARN) that's used to invoke the function. Indicates if the invoker    specified a version number or alias.",
                    "  4.memoryLimitInMB – The amount of memory that's allocated for the function.",
                    "  5.awsRequestId – The identifier of the invocation request.",
                    "  6.logGroupName – The log group for the function.",
                    "  7.logStreamName – The log stream for the function instance.",
                    "  8.identity – (mobile apps) Information about the Amazon Cognito identity that authorized the request.cognitoIdentityId – The authenticated Amazon Cognito identity.cognitoIdentityPoolId – The Amazon Cognito identity pool that authorized the invocation.",
                    "  9.cognitoIdentityId – The authenticated Amazon Cognito identity.",
                    "  10.cognitoIdentityPoolId – The Amazon Cognito identity pool that authorized the invocation.",
                    "  11.clientContext – (mobile apps) Client context that's provided to Lambda by the client application.client.installation_idclient.app_titleclient.app_version_nameclient.app_version_codeclient.app_package_nameenv.platform_versionenv.platformenv.makeenv.modelenv.localeCustom – Custom values that are set by the client application. ",
                    "  12.client.installation_id",
                    "  13.client.app_title",
                    "  14.client.app_version_name",
                    "  15.client.app_version_code",
                    "  16.client.app_package_name",
                    "  17.env.platform_version",
                    "  18.env.platform",
                    "  19.env.make",
                    "  20.env.model",
                    "  21.env.locale",
                    "  22.Custom – Custom values that are set by the client application. ",
                    "  23.callbackWaitsForEmptyEventLoop – Set to false to send the response right away when the        callback runs, instead of waiting for the Node.js event loop to        be empty. If this is false, any outstanding events continue to run during the next invocation.",
                    "You can use the @types/aws-lambda npm package to work with the context object.",
                    "Example index.ts file",
                    "The following example function logs context information and returns the location of the logs.",
                    "Note",
                    "Before using this code in a Lambda function, you must add the @types/aws-lambda package as a development dependency. This package contains the type definitions for Lambda. When @types/aws-lambda is installed, the import statement (import ... from 'aws-lambda') imports the type definitions. It does not import the aws-lambda NPM package, which is an unrelated third-party tool. For more information, see aws-lambda in the DefinitelyTyped GitHub repository.",
                    {
                        "code_example": "import { Context } from 'aws-lambda';\nexport const lambdaHandler = async (event: string, context: Context): Promise<string> => {\n  console.log('Remaining time: ', context.getRemainingTimeInMillis());\n  console.log('Function name: ', context.functionName);\n  return context.logStreamName;\n};"
                    }
                ]
            },
            {
                "title": "Logging",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-logging.html",
                "source": "aws_lamda",
                "parent_content": [
                    "AWS Lambda automatically monitors Lambda functions and sends log entries to Amazon CloudWatch. Your Lambda function     comes with a CloudWatch Logs log group and a log stream for each instance of your function. The Lambda runtime environment     sends details about each invocation and other output from your function's     code to the log stream. For more information about CloudWatch Logs, see Using CloudWatch Logs with Lambda.",
                    "To output logs from your function code, you can use methods on the console object. For more detailed logging, you can use any logging library that writes to stdout or stderr.",
                    "Sections",
                    {
                        "sub_header": "Using logging tools and libraries",
                        "content": [
                            "Powertools for AWS Lambda (TypeScript) is a developer toolkit to implement Serverless best       practices and increase developer velocity. The Logger utility       provides a Lambda optimized logger which includes additional information about function context across all your functions with output structured as JSON. Use this       utility to do the following:",
                            "  1.Capture key fields from the Lambda context, cold start and structures logging output as JSON",
                            "  2.Log Lambda invocation events when instructed (disabled by default)",
                            "  3.Print all the logs only for a percentage of invocations via log sampling (disabled by default)",
                            "  4.Append additional keys to structured log at any point in time",
                            "  5.Use a custom log formatter (Bring Your Own Formatter) to output logs in a structure compatible with your organization’s Logging RFC"
                        ]
                    },
                    {
                        "sub_header": "Using Powertools for AWS Lambda (TypeScript) and AWS SAM for structured logging",
                        "content": [
                            "Follow the steps below to download, build, and deploy a sample Hello World TypeScript application with integrated Powertools for AWS Lambda (TypeScript) modules using the AWS SAM. This application implements a       basic API backend and uses Powertools for emitting logs, metrics, and traces. It consists of an Amazon API Gateway endpoint and a Lambda function.       When you send a GET request to the API Gateway endpoint, the Lambda function invokes, sends logs and metrics using Embedded Metric Format to CloudWatch, and       sends traces to AWS X-Ray. The function returns a hello world message.",
                            "Prerequisites",
                            "To complete the steps in this section, you must have the following:",
                            "  1.Node.js 18.x or later",
                            "  2.AWS CLI version 2",
                            "  3.AWS SAM CLI version 1.75 or later. If you have an older version of the AWS SAM CLI, see Upgrading the AWS SAM CLI.",
                            "Deploy a sample AWS SAM application",
                            " 1 : Initialize the application using the Hello World TypeScript template. ",
                            {
                                "code_example": "sam init --app-template hello-world-powertools-typescript --name sam-app --package-type Zip --runtime nodejs18.x"
                            },
                            " 2 : Build the app. ",
                            {
                                "code_example": "cd sam-app && sam build"
                            },
                            " 3 : Deploy the app. ",
                            {
                                "code_example": "sam deploy --guided"
                            },
                            "  4 : Follow the on-screen prompts. To accept the default options provided in the interactive experience, press Enter.NoteFor HelloWorldFunction may not have authorization defined, Is this okay?, make sure to enter y.",
                            " 5 : Get the URL of the deployed application: ",
                            {
                                "code_example": "aws cloudformation describe-stacks --stack-name sam-app --query 'Stacks[0].Outputs[?OutputKey==`HelloWorldApi`].OutputValue' --output text"
                            },
                            " 6 : Invoke the API endpoint: If successful, you'll see this response:{\"message\":\"hello world\"}",
                            {
                                "code_example": "curl <URL_FROM_PREVIOUS_STEP>"
                            },
                            " 7 : To get the logs for the function, run sam logs. For more information, see Working with logs in the AWS Serverless Application Model Developer Guide. The log output looks like this:2023/01/31/[$LATEST]4d53e8d279824834a1ccd35511a4949c 2022-08-31T09:33:10.552000 START RequestId: 70693159-7e94-4102-a2af-98a6343fb8fb Version: $LATEST2023/01/31/[$LATEST]4d53e8d279824834a1ccd35511a4949c 2022-08-31T09:33:10.594000 2022-08-31T09:33:10.557Z 70693159-7e94-4102-a2af-98a6343fb8fb INFO {\"_aws\":{\"Timestamp\":1661938390556,\"CloudWatchMetrics\":[{\"Namespace\":\"sam-app\",\"Dimensions\":[[\"service\"]],\"Metrics\":[{\"Name\":\"ColdStart\",\"Unit\":\"Count\"}]}]},\"service\":\"helloWorld\",\"ColdStart\":1}2023/01/31/[$LATEST]4d53e8d279824834a1ccd35511a4949c 2022-08-31T09:33:10.595000 2022-08-31T09:33:10.595Z 70693159-7e94-4102-a2af-98a6343fb8fb INFO {\"level\":\"INFO\",\"message\":\"This is an INFO log - sending HTTP 200 - hello world response\",\"service\":\"helloWorld\",\"timestamp\":\"2022-08-31T09:33:10.594Z\"}2023/01/31/[$LATEST]4d53e8d279824834a1ccd35511a4949c 2022-08-31T09:33:10.655000 2022-08-31T09:33:10.655Z 70693159-7e94-4102-a2af-98a6343fb8fb INFO {\"_aws\":{\"Timestamp\":1661938390655,\"CloudWatchMetrics\":[{\"Namespace\":\"sam-app\",\"Dimensions\":[[\"service\"]],\"Metrics\":[]}]},\"service\":\"helloWorld\"}2023/01/31/[$LATEST]4d53e8d279824834a1ccd35511a4949c 2022-08-31T09:33:10.754000 END RequestId: 70693159-7e94-4102-a2af-98a6343fb8fb2023/01/31/[$LATEST]4d53e8d279824834a1ccd35511a4949c 2022-08-31T09:33:10.754000 REPORT RequestId: 70693159-7e94-4102-a2af-98a6343fb8fb Duration: 201.55 ms Billed Duration: 202 ms Memory Size: 128 MB Max Memory Used: 66 MB Init Duration: 252.42 msXRAY TraceId: 1-630f2ad5-1de22b6d29a658a466e7ecf5 SegmentId: 567c116658fbf11a Sampled: true",
                            {
                                "code_example": "sam logs --stack-name sam-app"
                            },
                            " 8 : This is a public API endpoint that is accessible over the internet. We recommend that you delete the endpoint after testing. ",
                            {
                                "code_example": "sam delete"
                            },
                            {
                                "sub_header": "Managing log retention",
                                "content": [
                                    "Log groups aren't deleted automatically when you delete a function. To avoid storing logs indefinitely, delete    the log group, or configure a retention period after which CloudWatch automatically deletes the logs. To set up log retention, add the following to your AWS SAM template:",
                                    "Resources:  HelloWorldFunction:    Type: AWS::Serverless::Function    Properties:    # Omitting other properties    LogGroup:    Type: AWS::Logs::LogGroup    Properties:      LogGroupName: !Sub \"/aws/lambda/${HelloWorldFunction}\"      RetentionInDays: 7"
                                ]
                            }
                        ]
                    },
                    {
                        "sub_header": "Using Powertools for AWS Lambda (TypeScript) and the AWS CDK for structured logging",
                        "content": [
                            "Follow the steps below to download, build, and deploy a sample Hello World TypeScript application with integrated Powertools for AWS Lambda (TypeScript) modules using the AWS CDK. This application implements a               basic API backend and uses Powertools for emitting logs, metrics, and traces. It consists of an Amazon API Gateway endpoint and a Lambda function.               When you send a GET request to the API Gateway endpoint, the Lambda function invokes, sends logs and metrics using Embedded Metric Format to CloudWatch, and               sends traces to AWS X-Ray. The function returns a hello world message.",
                            "Prerequisites",
                            "To complete the steps in this section, you must have the following:",
                            "  1.Node.js 18.x or later",
                            "  2.AWS CLI version 2",
                            "  3.AWS CDK version 2",
                            "  4.AWS SAM CLI version 1.75 or later. If you have an older version of the AWS SAM CLI, see Upgrading the AWS SAM CLI.",
                            "Deploy a sample AWS CDK application",
                            " 1 : Create a project directory for your new application. ",
                            {
                                "code_example": "mkdir hello-world\ncd hello-world"
                            },
                            " 2 : Initialize the app. ",
                            {
                                "code_example": "cdk init app --language typescript"
                            },
                            " 3 : Add the @types/aws-lambda package as a development dependency. ",
                            {
                                "code_example": "npm install -D @types/aws-lambda"
                            },
                            " 4 : Install the Powertools Logger utility. ",
                            {
                                "code_example": "npm install @aws-lambda-powertools/logger"
                            },
                            "  5 : Open the lib directory. You should see a file called hello-world-stack.ts. Create new two new files in this directory: hello-world.function.ts and hello-world.ts.",
                            " 6 : Open hello-world.function.ts and add the following code to the file. This is the code for the Lambda function. ",
                            {
                                "code_example": "import { APIGatewayEvent, APIGatewayProxyResult, Context } from 'aws-lambda';\nimport { Logger } from '@aws-lambda-powertools/logger';\nconst logger = new Logger();\n  \nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n  logger.info('This is an INFO log - sending HTTP 200 - hello world response');\n  return {\n    statusCode: 200,\n    body: JSON.stringify({\n      message: 'hello world',\n    }),\n  };\n};"
                            },
                            " 7 : Open hello-world.ts and add the following code to the file. This contains the NodejsFunction construct, which creates the Lambda function, configures environment variables for Powertools, and sets log retention to one week. It also includes the LambdaRestApi construct, which creates the REST API. ",
                            {
                                "code_example": "import { Construct } from 'constructs';\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';\nimport { LambdaRestApi } from 'aws-cdk-lib/aws-apigateway';\nimport { RetentionDays } from 'aws-cdk-lib/aws-logs';\nimport { CfnOutput } from 'aws-cdk-lib';\n  \nexport class HelloWorld extends Construct {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    const helloFunction = new NodejsFunction(this, 'function', {\n      environment: {\n        Powertools_SERVICE_NAME: 'helloWorld',\n        LOG_LEVEL: 'INFO',\n      },\n      logRetention: RetentionDays.ONE_WEEK,\n    });\n    const api = new LambdaRestApi(this, 'apigw', {\n      handler: helloFunction,\n    });\n    new CfnOutput(this, 'apiUrl', {\n      exportName: 'apiUrl',\n      value: api.url,\n    });\n  }\n}"
                            },
                            " 8 : Open hello-world-stack.ts. This is the code that defines your AWS CDK stack. Replace the code with the following: ",
                            {
                                "code_example": "import { Stack, StackProps } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport { HelloWorld } from './hello-world';\n    \nexport class HelloWorldStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n    new HelloWorld(this, 'hello-world');\n  }\n}"
                            },
                            " 9 : Go back to the project directory. ",
                            {
                                "code_example": "cd hello-world"
                            },
                            " 10 : Deploy your application. ",
                            {
                                "code_example": "cdk deploy"
                            },
                            " 11 : Get the URL of the deployed application: ",
                            {
                                "code_example": "aws cloudformation describe-stacks --stack-name HelloWorldStack --query 'Stacks[0].Outputs[?ExportName==`apiUrl`].OutputValue' --output text"
                            },
                            " 12 : Invoke the API endpoint: If successful, you'll see this response:{\"message\":\"hello world\"}",
                            {
                                "code_example": "curl <URL_FROM_PREVIOUS_STEP>"
                            },
                            " 13 : To get the logs for the function, run sam logs. For more information, see Working with logs in the AWS Serverless Application Model Developer Guide. The log output looks like this:2023/01/31/[$LATEST]2ca67f180dcd4d3e88b5d68576740c8e 2022-08-31T14:48:37.047000 START RequestId: 19ad1007-ff67-40ce-9afe-0af0a9eb512c Version: $LATEST2023/01/31/[$LATEST]2ca67f180dcd4d3e88b5d68576740c8e 2022-08-31T14:48:37.050000 {\"level\": \"INFO\",\"message\": \"This is an INFO log - sending HTTP 200 - hello world response\",\"service\": \"helloWorld\",\"timestamp\": \"2022-08-31T14:48:37.048Z\",\"xray_trace_id\": \"1-630f74c4-2b080cf77680a04f2362bcf2\"}2023/01/31/[$LATEST]2ca67f180dcd4d3e88b5d68576740c8e 2022-08-31T14:48:37.082000 END RequestId: 19ad1007-ff67-40ce-9afe-0af0a9eb512c2023/01/31/[$LATEST]2ca67f180dcd4d3e88b5d68576740c8e 2022-08-31T14:48:37.082000 REPORT RequestId: 19ad1007-ff67-40ce-9afe-0af0a9eb512c Duration: 34.60 ms Billed Duration: 35 ms Memory Size: 128 MB Max Memory Used: 57 MB Init Duration: 173.48 ms",
                            {
                                "code_example": "sam logs --stack-name HelloWorldStack"
                            },
                            " 14 : This is a public API endpoint that is accessible over the internet. We recommend that you delete the endpoint after testing. ",
                            {
                                "code_example": "cdk destroy"
                            }
                        ]
                    },
                    {
                        "sub_header": "Viewing logs in the Lambda console",
                        "content": [
                            "You can use the Lambda console to view log output after you invoke a Lambda function.",
                            "If your code can be tested from the embedded Code editor, you will find logs in the execution results. When you use the console test feature to invoke a function, you'll find Log output in the Details section."
                        ]
                    },
                    {
                        "sub_header": "Viewing logs in the CloudWatch console",
                        "content": [
                            "You can use the Amazon CloudWatch console to view logs for all Lambda function invocations.",
                            "To view logs on the CloudWatch console",
                            "  1 : Open the Log groups page on the CloudWatch console.",
                            "  2 : Choose the log group for your function (/aws/lambda/your-function-name).",
                            "  3 : Choose a log stream.",
                            "Each log stream corresponds to an instance of your function. A log stream appears when you update your Lambda function, and when additional instances are created to handle multiple concurrent invocations. To find logs for a specific invocation, we recommend instrumenting your function with AWS X-Ray. X-Ray records details about the request and the log stream in the trace."
                        ]
                    }
                ]
            },
            {
                "title": "Tracing",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/typescript-tracing.html",
                "source": "aws_lamda",
                "parent_content": [
                    "Lambda integrates with AWS X-Ray to help you trace, debug, and optimize Lambda applications. You can use X-Ray    to trace a request as it traverses resources in your application, which may include Lambda functions and other AWS    services.",
                    "To send tracing data to X-Ray, you can use one of three SDK libraries:",
                    "  1.AWS Distro for OpenTelemetry (ADOT) – A secure, production-ready,        AWS-supported distribution of the OpenTelemetry (OTel) SDK.",
                    "  2.AWS X-Ray SDK for Node.js – An SDK        for generating and sending trace data to X-Ray.",
                    "  3.Powertools for AWS Lambda (TypeScript) – A developer toolkit to implement       Serverless best practices and increase developer velocity.",
                    "Each of the SDKs offer ways to send your telemetry data to the X-Ray service.    You can then use X-Ray to view, filter, and gain insights into your application's performance metrics to identify    issues and opportunities for optimization.",
                    "Important",
                    "The X-Ray and Powertools for AWS Lambda SDKs are part of a tightly integrated instrumentation solution offered by AWS. The ADOT Lambda Layers are part of an industry-wide standard for tracing instrumentation that collect more data in general, but may not be suited for all use cases. You can implement end-to-end tracing in X-Ray using either solution. To learn more about choosing between them, see Choosing between the AWS Distro for Open Telemetry and X-Ray SDKs.",
                    "Sections",
                    {
                        "sub_header": "Using Powertools for AWS Lambda (TypeScript) and AWS SAM for tracing",
                        "content": [
                            "Follow the steps below to download, build, and deploy a sample Hello World TypeScript application with integrated Powertools for AWS Lambda (TypeScript) modules using the AWS SAM. This application implements a       basic API backend and uses Powertools for emitting logs, metrics, and traces. It consists of an Amazon API Gateway endpoint and a Lambda function.       When you send a GET request to the API Gateway endpoint, the Lambda function invokes, sends logs and metrics using Embedded Metric Format to CloudWatch, and       sends traces to AWS X-Ray. The function returns a hello world message.",
                            "Prerequisites",
                            "To complete the steps in this section, you must have the following:",
                            "  1.Node.js 18.x or later",
                            "  2.AWS CLI version 2",
                            "  3.AWS SAM CLI version 1.75 or later. If you have an older version of the AWS SAM CLI, see Upgrading the AWS SAM CLI.",
                            "Deploy a sample AWS SAM application",
                            " 1 : Initialize the application using the Hello World TypeScript template. ",
                            {
                                "code_example": "sam init --app-template hello-world-powertools-typescript --name sam-app --package-type Zip --runtime nodejs18.x --no-tracing"
                            },
                            " 2 : Build the app. ",
                            {
                                "code_example": "cd sam-app && sam build"
                            },
                            " 3 : Deploy the app. ",
                            {
                                "code_example": "sam deploy --guided"
                            },
                            "  4 : Follow the on-screen prompts. To accept the default options provided in the interactive experience, press Enter.NoteFor HelloWorldFunction may not have authorization defined, Is this okay?, make sure to enter y.",
                            " 5 : Get the URL of the deployed application: ",
                            {
                                "code_example": "aws cloudformation describe-stacks --stack-name sam-app --query 'Stacks[0].Outputs[?OutputKey==`HelloWorldApi`].OutputValue' --output text"
                            },
                            " 6 : Invoke the API endpoint: If successful, you'll see this response:{\"message\":\"hello world\"}",
                            {
                                "code_example": "curl <URL_FROM_PREVIOUS_STEP>"
                            },
                            " 7 : To get the traces for the function, run  . The trace output looks like this:XRay Event [revision 1] at (2023-01-31T11:29:40.527000) with id (1-11a2222-111a222222cb33de3b95daf9) and duration (0.483s)  - 0.425s - sam-app/Prod [HTTP: 200]    - 0.422s - Lambda [HTTP: 200]  - 0.406s - sam-app-HelloWorldFunction-Xyzv11a1bcde [HTTP: 200]  - 0.172s - sam-app-HelloWorldFunction-Xyzv11a1bcde    - 0.179s - Initialization    - 0.112s - Invocation      - 0.052s - ## app.lambdaHandler        - 0.001s - ### MySubSegment    - 0.059s - Overhead",
                            {
                                "code_example": "sam traces"
                            },
                            " 8 : This is a public API endpoint that is accessible over the internet. We recommend that you delete the endpoint after testing. ",
                            {
                                "code_example": "sam delete"
                            },
                            "X-Ray doesn't trace all requests to your application. X-Ray applies a sampling algorithm    to ensure that tracing is efficient, while still providing a representative sample of all requests. The sampling rate is    1 request per second and 5 percent of additional requests. You can't configure the X-Ray sampling rate for your functions."
                        ]
                    },
                    {
                        "sub_header": "Using Powertools for AWS Lambda (TypeScript) and the AWS CDK for tracing",
                        "content": [
                            "Follow the steps below to download, build, and deploy a sample Hello World TypeScript application with integrated Powertools for AWS Lambda (TypeScript) modules using the AWS CDK. This application implements a               basic API backend and uses Powertools for emitting logs, metrics, and traces. It consists of an Amazon API Gateway endpoint and a Lambda function.               When you send a GET request to the API Gateway endpoint, the Lambda function invokes, sends logs and metrics using Embedded Metric Format to CloudWatch, and               sends traces to AWS X-Ray. The function returns a hello world message.",
                            "Prerequisites",
                            "To complete the steps in this section, you must have the following:",
                            "  1.Node.js 18.x or later",
                            "  2.AWS CLI version 2",
                            "  3.AWS CDK version 2",
                            "  4.AWS SAM CLI version 1.75 or later. If you have an older version of the AWS SAM CLI, see Upgrading the AWS SAM CLI.",
                            "Deploy a sample AWS Cloud Development Kit (AWS CDK) application",
                            " 1 : Create a project directory for your new application. ",
                            {
                                "code_example": "mkdir hello-world\ncd hello-world"
                            },
                            " 2 : Initialize the app. ",
                            {
                                "code_example": "cdk init app --language typescript"
                            },
                            " 3 : Add the @types/aws-lambda package as a development dependency. ",
                            {
                                "code_example": "npm install -D @types/aws-lambda"
                            },
                            " 4 : Install the Powertools Tracer utility. ",
                            {
                                "code_example": "npm install @aws-lambda-powertools/tracer"
                            },
                            "  5 : Open the lib directory. You should see a file called hello-world-stack.ts. Create new two new files in this directory: hello-world.function.ts and hello-world.ts.",
                            " 6 : Open hello-world.function.ts and add the following code to the file. This is the code for the Lambda function. ",
                            {
                                "code_example": "import { APIGatewayEvent, APIGatewayProxyResult, Context } from 'aws-lambda';\nimport { Tracer } from '@aws-lambda-powertools/tracer';\nconst tracer = new Tracer();\n\nexport const handler = async (event: APIGatewayEvent, context: Context): Promise<APIGatewayProxyResult> => {\n  // Get facade segment created by Lambda\n  const segment = tracer.getSegment();\n\n  // Create subsegment for the function and set it as active\n  const handlerSegment = segment.addNewSubsegment(`## ${process.env._HANDLER}`);\n  tracer.setSegment(handlerSegment);\n\n  // Annotate the subsegment with the cold start and serviceName\n  tracer.annotateColdStart();\n  tracer.addServiceNameAnnotation();\n\n  // Add annotation for the awsRequestId\n  tracer.putAnnotation('awsRequestId', context.awsRequestId);\n  // Create another subsegment and set it as active\n  const subsegment = handlerSegment.addNewSubsegment('### MySubSegment');\n  tracer.setSegment(subsegment);\n  let response: APIGatewayProxyResult = {\n    statusCode: 200,\n    body: JSON.stringify({\n      message: 'hello world',\n    }),\n  };\n  // Close subsegments (the Lambda one is closed automatically)\n  subsegment.close(); // (### MySubSegment)\n  handlerSegment.close(); // (## index.handler)\n\n  // Set the facade segment as active again (the one created by Lambda)\n  tracer.setSegment(segment);\n  return response;\n};"
                            },
                            " 7 : Open hello-world.ts and add the following code to the file. This contains the NodejsFunction construct, which creates the Lambda function, configures environment variables for Powertools, and sets log retention to one week. It also includes the LambdaRestApi construct, which creates the REST API. ",
                            {
                                "code_example": "import { Construct } from 'constructs';\nimport { NodejsFunction } from 'aws-cdk-lib/aws-lambda-nodejs';\nimport { LambdaRestApi } from 'aws-cdk-lib/aws-apigateway';\nimport { CfnOutput } from 'aws-cdk-lib';\nimport { Tracing } from 'aws-cdk-lib/aws-lambda';\n\nexport class HelloWorld extends Construct {\n  constructor(scope: Construct, id: string) {\n    super(scope, id);\n    const helloFunction = new NodejsFunction(this, 'function', {\n      environment: {\n        POWERTOOLS_SERVICE_NAME: 'helloWorld',\n      },\n      tracing: Tracing.ACTIVE,\n    });\n    const api = new LambdaRestApi(this, 'apigw', {\n      handler: helloFunction,\n    });\n    new CfnOutput(this, 'apiUrl', {\n      exportName: 'apiUrl',\n      value: api.url,\n    });\n  }\n}"
                            },
                            " 8 : Open hello-world-stack.ts. This is the code that defines your AWS CDK stack. Replace the code with the following: ",
                            {
                                "code_example": "import { Stack, StackProps } from 'aws-cdk-lib';\nimport { Construct } from 'constructs';\nimport { HelloWorld } from './hello-world';\n  \nexport class HelloWorldStack extends Stack {\n  constructor(scope: Construct, id: string, props?: StackProps) {\n    super(scope, id, props);\n    new HelloWorld(this, 'hello-world');\n  }\n}"
                            },
                            " 9 : Deploy your application. ",
                            {
                                "code_example": "cd ..\ncdk deploy"
                            },
                            " 10 : Get the URL of the deployed application: ",
                            {
                                "code_example": "aws cloudformation describe-stacks --stack-name HelloWorldStack --query 'Stacks[0].Outputs[?ExportName==`apiUrl`].OutputValue' --output text"
                            },
                            " 11 : Invoke the API endpoint: If successful, you'll see this response:{\"message\":\"hello world\"}",
                            {
                                "code_example": "curl <URL_FROM_PREVIOUS_STEP>"
                            },
                            " 12 : To get the traces for the function, run  . The trace output looks like this:XRay Event [revision 1] at (2023-01-31T11:50:06.997000) with id (1-11a2222-111a222222cb33de3b95daf9) and duration (0.449s)  - 0.350s - HelloWorldStack-helloworldfunction111A2BCD-Xyzv11a1bcde [HTTP: 200]  - 0.157s - HelloWorldStack-helloworldfunction111A2BCD-Xyzv11a1bcde    - 0.169s - Initialization    - 0.058s - Invocation      - 0.055s - ## index.handler        - 0.000s - ### MySubSegment    - 0.099s - Overhead",
                            {
                                "code_example": "sam traces"
                            },
                            " 13 : This is a public API endpoint that is accessible over the internet. We recommend that you delete the endpoint after testing. ",
                            {
                                "code_example": "cdk destroy"
                            }
                        ]
                    },
                    {
                        "sub_header": "Interpreting an X-Ray trace",
                        "content": [
                            "After you've configured active tracing, you can observe specific requests    through your application. The     X-Ray trace map provides information about your application and all its components. The following example shows a trace from    the sample application:"
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "Integrating other services",
        "href": "https://docs.aws.amazon.com/lambda/latest/dg/lambda-services.html",
        "source": "aws_lamda",
        "sections": [
            "Some AWS services can directly invoke Lambda functions using triggers. These services push events to Lambda, and the function is invoked immediately when the specified event occurs. Triggers are suitable for discrete events and real-time processing. When you create a trigger using the Lambda console, the console interacts with the corresponding AWS service to configure the event notification on that service. The trigger is actually stored and managed by the service that generates the events, not by Lambda.",
            "The events are data structured in JSON format. The JSON structure varies depending on the service that    generates it and the event type, but they all contain the data that the function needs to process the    event.",
            "A function can have multiple triggers. Each trigger acts as a client invoking your function independently, and each event that    Lambda passes to your function has data from only one trigger. Lambda converts the event document into an object and passes it to your function handler.",
            "Depending on the service, the event-driven invocation can be synchronous or asynchronous.",
            "  1.For synchronous invocation, the service that generates the event waits for the response from your        function. That service defines the data that the function needs to return in the response. The service        controls the error strategy, such as whether to retry on errors.",
            "  2.For asynchronous invocation, Lambda queues the event before passing it to your function. When Lambda        queues the event, it immediately sends a success response to the service that generated the event. After the        function processes the event, Lambda doesn’t return a response to the event-generating service.",
            {
                "sub_header": "Creating a trigger",
                "content": [
                    "The easiest way to create a trigger is to use the Lambda console. When you create a trigger using the console, Lambda automatically adds the required permissions to the function's resource-based policy.",
                    "To create a trigger using the Lambda console",
                    "  1 : Open the Functions page of the Lambda console.",
                    "  2 : Select the function you want to create a trigger for.",
                    "  3 : In the Function overview pane, choose          Add trigger.",
                    "  4 : Select the AWS service you want to invoke your function.",
                    "  5 : Fill out the options in the Trigger configuration pane          and choose Add. Depending on the AWS service you choose to          invoke your function, the trigger configuration options will be different."
                ]
            },
            {
                "sub_header": "Services that can invoke Lambda functions",
                "content": [
                    "The following table lists services that can invoke Lambda functions.",
                    "ServiceMethod of invocationAmazon Managed Streaming for Apache KafkaEvent source mappingSelf-managed Apache KafkaEvent source mappingAmazon API GatewayEvent-driven; synchronous invocationAWS CloudFormationEvent-driven; asynchronous invocationAmazon CloudWatch LogsEvent-driven; asynchronous invocationAWS CodeCommitEvent-driven; asynchronous invocationAWS CodePipelineEvent-driven; asynchronous invocationAmazon CognitoEvent-driven; synchronous invocationAWS ConfigEvent-driven; asynchronous invocationAmazon ConnectEvent-driven; synchronous invocationAmazon DynamoDBEvent source mappingAmazon Elastic File SystemSpecial integrationElastic Load Balancing (Application Load Balancer)Event-driven; synchronous invocationAmazon EventBridge (CloudWatch Events)Event-driven; asynchronous invocation (event buses), synchronous or asynchronous invocation (pipes and schedules)AWS IoTEvent-driven; asynchronous invocationAmazon KinesisEvent source mappingAmazon Data FirehoseEvent-driven; synchronous invocationAmazon LexEvent-driven; synchronous invocationAmazon MQEvent source mappingAmazon Simple Email ServiceEvent-driven; asynchronous invocationAmazon Simple Notification ServiceEvent-driven; asynchronous invocationAmazon Simple Queue ServiceEvent source mappingAmazon Simple Storage Service (Amazon S3)Event-driven; asynchronous invocationAmazon Simple Storage Service BatchEvent-driven; synchronous invocationSecrets ManagerSpecial integrationAWS Step FunctionsEvent-driven; synchronous or asynchronous invocationAmazon VPC LatticeEvent-driven; synchronous invocationAWS X-RaySpecial integration"
                ]
            },
            {
                "title": "Apache Kafka",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka.html",
                "contents": [
                    {
                        "title": "Configure event source",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-configure.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Before you create an event source mapping for your self-managed Apache Kafka cluster, you need to ensure that your cluster and the VPC     it resides in are correctly configured. You also need to make sure that your Lambda function's execution role has     the necessary IAM permissions.",
                            "Follow the instructions in the following sections to configure your self-managed Apache Kafka cluster and Lambda function. To learn how to     create the event source mapping, see Adding a Kafka cluster as an event source.",
                            "Topics",
                            {
                                "sub_header": "Kafka cluster authentication",
                                "content": [
                                    "Lambda supports several methods to authenticate with your self-managed Apache Kafka cluster. Make sure that you configure the      Kafka cluster to use one of these supported authentication methods. For more information about Kafka security, see      the Security section of the Kafka      documentation.",
                                    {
                                        "sub_header": "SASL/SCRAM authentication",
                                        "content": [
                                            "Lambda supports Simple Authentication and Security Layer/Salted Challenge Response Authentication Mechanism        (SASL/SCRAM) authentication with Transport Layer Security (TLS) encryption (SASL_SSL). Lambda sends the encrypted credentials to authenticate with        the cluster. Lambda doesn't support SASL/SCRAM with plaintext (SASL_PLAINTEXT). For more information about SASL/SCRAM authentication, see RFC 5802.",
                                            "Lambda also supports SASL/PLAIN authentication. Because this mechanism uses clear text credentials, the connection to the        server must use TLS encryption to ensure that the credentials are protected.",
                                            "For SASL authentication, you store the sign-in credentials as a secret in AWS Secrets Manager. For more information        about using Secrets Manager, see Tutorial: Create and retrieve a secret in the AWS Secrets Manager User Guide.",
                                            "Important",
                                            "To use Secrets Manager for authentication, secrets must be stored in the same AWS region as your Lambda function."
                                        ]
                                    },
                                    {
                                        "sub_header": "Mutual TLS authentication",
                                        "content": [
                                            "Mutual TLS (mTLS) provides two-way authentication between the client and server. The client sends a        certificate to the server for the server to verify the client, and the server sends a certificate to the client        for the client to verify the server. ",
                                            "In self-managed Apache Kafka, Lambda acts as the client. You configure a client certificate (as a secret in Secrets Manager) to        authenticate Lambda with your Kafka brokers. The client certificate must be signed by a CA in the server's trust        store.",
                                            "The Kafka cluster sends a server certificate to Lambda to authenticate the Kafka brokers with Lambda. The        server certificate can be a public CA certificate or a private CA/self-signed certificate. The public CA        certificate must be signed by a certificate authority (CA) that's in the Lambda trust store. For a private        CA/self-signed certificate, you configure the server root CA certificate (as a secret in Secrets Manager). Lambda uses        the root certificate to verify the Kafka brokers.",
                                            "For more information about mTLS, see         Introducing mutual TLS authentication for Amazon MSK as an event source."
                                        ]
                                    },
                                    {
                                        "sub_header": "Configuring the client certificate secret",
                                        "content": [
                                            "The CLIENT_CERTIFICATE_TLS_AUTH secret requires a certificate field and a private key field. For an        encrypted private key, the secret requires a private key password. Both the certificate and private key must be        in PEM format.",
                                            "Note",
                                            "Lambda supports the PBES1 (but not        PBES2) private key encryption algorithms.",
                                            "The certificate field must contain a list of certificates, beginning with the client certificate, followed        by any intermediate certificates, and ending with the root certificate. Each certificate must start on a new        line with the following structure:",
                                            "-----BEGIN CERTIFICATE-----          <certificate contents>-----END CERTIFICATE-----      ",
                                            "Secrets Manager supports secrets up to 65,536 bytes, which is enough space for long certificate chains.",
                                            "The private key must be in PKCS #8        format, with the following structure:",
                                            "-----BEGIN PRIVATE KEY-----           <private key contents>-----END PRIVATE KEY-----            ",
                                            "For an encrypted private key, use the following structure:",
                                            "-----BEGIN ENCRYPTED PRIVATE KEY-----            <private key contents>-----END ENCRYPTED PRIVATE KEY-----           ",
                                            "The following example shows the contents of a secret for mTLS authentication using an encrypted private key.        For an encrypted private key, include the private key password in the secret.",
                                            "{\"privateKeyPassword\":\"testpassword\",\"certificate\":\"-----BEGIN CERTIFICATE-----MIIE5DCCAsygAwIBAgIRAPJdwaFaNRrytHBto0j5BA0wDQYJKoZIhvcNAQELBQAw...j0Lh4/+1HfgyE2KlmII36dg4IMzNjAFEBZiCRoPimO40s1cRqtFHXoal0QQbIlxkcmUuiAii9R0=-----END CERTIFICATE----------BEGIN CERTIFICATE-----MIIFgjCCA2qgAwIBAgIQdjNZd6uFf9hbNC5RdfmHrzANBgkqhkiG9w0BAQsFADBb...rQoiowbbk5wXCheYSANQIfTZ6weQTgiCHCCbuuMKNVS95FkXm0vqVD/YpXKwA/noc8PH3PSoAaRwMMgOSA2ALJvbRz8mpg==-----END CERTIFICATE-----\",\"privateKey\":\"-----BEGIN ENCRYPTED PRIVATE KEY-----MIIFKzBVBgkqhkiG9w0BBQ0wSDAnBgkqhkiG9w0BBQwwGgQUiAFcK5hT/X7Kjmgp...QrSekqF+kWzmB6nAfSzgO9IaoAaytLvNgGTckWeUkWn/V0Ck+LdGUXzAC4RxZnoQzp2mwJn2NYB7AZ7+imp0azDZb+8YG2aUCiyqb6PnnA==-----END ENCRYPTED PRIVATE KEY-----\"}"
                                        ]
                                    },
                                    {
                                        "sub_header": "Configuring the server root CA certificate secret",
                                        "content": [
                                            "You create this secret if your Kafka brokers use TLS encryption with certificates signed by a private CA.        You can use TLS encryption for VPC, SASL/SCRAM, SASL/PLAIN, or mTLS authentication.",
                                            "The server root CA certificate secret requires a field that contains the Kafka broker's root CA certificate        in PEM format. The following example shows the structure of the secret.",
                                            "{\"certificate\":\"-----BEGIN CERTIFICATE-----MIID7zCCAtegAwIBAgIBADANBgkqhkiG9w0BAQsFADCBmDELMAkGA1UEBhMCVVMxEDAOBgNVBAgTB0FyaXpvbmExEzARBgNVBAcTClNjb3R0c2RhbGUxJTAjBgNVBAoTHFN0YXJmaWVsZCBUZWNobm9sb2dpZXMsIEluYy4xOzA5BgNVBAMTMlN0YXJmaWVsZCBTZXJ2aWNlcyBSb290IENlcnRpZmljYXRlIEF1dG...-----END CERTIFICATE-----\"}"
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "API access and Lambda function permissions",
                                "content": [
                                    "In addition to accessing your self-managed Kafka cluster, your Lambda function needs permissions to perform      various API actions. You add these permissions to the function's execution role. If your users need access to any API actions, add the required permissions to the      identity policy for the AWS Identity and Access Management (IAM) user or role.",
                                    {
                                        "sub_header": "Required Lambda function permissions",
                                        "content": [
                                            "To create and store logs in a log group in Amazon CloudWatch Logs, your Lambda function must have the following        permissions in its execution role:",
                                            "  1.logs:CreateLogGroup",
                                            "  2.logs:CreateLogStream",
                                            "  3.logs:PutLogEvents"
                                        ]
                                    },
                                    {
                                        "sub_header": "Optional Lambda function permissions",
                                        "content": [
                                            "Your Lambda function might also need permissions to:",
                                            "  1.Describe your Secrets Manager secret.",
                                            "  2.Access your AWS Key Management Service (AWS KMS) customer managed key.",
                                            "  3.Access your Amazon VPC.",
                                            "  4.Send records of failed invocations to a destination.",
                                            {
                                                "sub_header": "Secrets Manager and AWS KMS permissions",
                                                "content": [
                                                    "Depending on the type of access control that you're configuring for your Kafka brokers, your Lambda function          might need permission to access your Secrets Manager secret or to decrypt your AWS KMS customer managed key. To access these          resources, your function's execution role must have the following permissions:",
                                                    "  1.secretsmanager:GetSecretValue",
                                                    "  2.kms:Decrypt"
                                                ]
                                            },
                                            {
                                                "sub_header": "VPC permissions",
                                                "content": [
                                                    "If only users within a VPC can access your self-managed Apache Kafka cluster, your Lambda function must have permission to          access your Amazon VPC resources. These resources include your VPC, subnets, security groups, and network          interfaces. To access these resources, your function's execution role must have the following          permissions:",
                                                    "  1.ec2:CreateNetworkInterface",
                                                    "  2.ec2:DescribeNetworkInterfaces",
                                                    "  3.ec2:DescribeVpcs",
                                                    "  4.ec2:DeleteNetworkInterface",
                                                    "  5.ec2:DescribeSubnets",
                                                    "  6.ec2:DescribeSecurityGroups"
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Adding permissions to your execution role",
                                        "content": [
                                            "To access other AWS services that your self-managed Apache Kafka cluster uses, Lambda uses the permissions policies that you        define in your Lambda function's execution role.",
                                            "By default, Lambda is not permitted to perform the required or optional actions for a self-managed Apache Kafka cluster. You        must create and define these actions in an IAM trust policy for your execution role. This example shows how you might create a policy that allows        Lambda to access your Amazon VPC resources.",
                                            "{        \"Version\":\"2012-10-17\",        \"Statement\":[           {              \"Effect\":\"Allow\",              \"Action\":[                 \"ec2:CreateNetworkInterface\",                 \"ec2:DescribeNetworkInterfaces\",                 \"ec2:DescribeVpcs\",                 \"ec2:DeleteNetworkInterface\",                 \"ec2:DescribeSubnets\",                 \"ec2:DescribeSecurityGroups\"              ],              \"Resource\":\"*\"           }        ]     }"
                                        ]
                                    },
                                    {
                                        "sub_header": "Granting users access with an IAM policy",
                                        "content": [
                                            "By default, users and roles don't have permission to perform event source API operations. To grant access to users in your        organization or account, you create or update an identity-based policy. For more information, see Controlling access to AWS resources          using policies in the IAM User Guide."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Configure network security",
                                "content": [
                                    "To give Lambda full access to self-managed Apache Kafka through your event source mapping, either your cluster must use a public endpoint             (public IP address), or you must provide access to the Amazon VPC you created the cluster in.",
                                    "When you use self-managed Apache Kafka with Lambda, create AWS PrivateLink VPC endpoints that provide your function            access to the resources in your Amazon VPC.",
                                    "Note",
                                    "AWS PrivateLink VPC endpoints are required for functions with event source mappings that use the default (on-demand) mode                for event pollers. If your event source mapping uses                 provisioned mode, you don't need to configure AWS PrivateLink VPC endpoints.",
                                    "Create an endpoint to provide access to the following resources:",
                                    "  1.                    Lambda — Create an endpoint for the Lambda service principal.                ",
                                    "  2.                    AWS STS — Create an endpoint for the AWS STS in order for a service principal to assume a role on your behalf.                ",
                                    "  3.                    Secrets Manager — If your cluster uses Secrets Manager to store credentials, create an endpoint for Secrets Manager.                ",
                                    "Alternatively, configure a NAT gateway on each public subnet in the Amazon VPC. For more information,             see Enable internet access for VPC-connected Lambda functions.",
                                    "When you create an event source mapping for self-managed Apache Kafka, Lambda checks whether Elastic Network Interfaces (ENIs)             are already present for the subnets and security groups configured for your Amazon VPC. If Lambda finds existing ENIs, it             attempts to re-use them. Otherwise, Lambda creates new ENIs to connect to the event source and invoke your function.",
                                    "Note",
                                    "Lambda functions always run inside VPCs owned by the Lambda service. Your function's VPC configuration                does not affect the event source mapping. Only the networking configuration of the event source's determines                 how Lambda connects to your event source.",
                                    "Configure the security groups for the Amazon VPC containing your cluster. By default,            self-managed Apache Kafka uses the following ports: 9092.",
                                    "  1.Inbound rules – Allow all traffic on the default cluster port for the security group associated with your event source.",
                                    "  2.Outbound rules – Allow all traffic on port 443 for all destinations. Allow all traffic on the default cluster port                    for the security group associated with your event source.",
                                    "  3.Amazon VPC endpoint inbound rules — If you are using an Amazon VPC endpoint, the security group associated with your Amazon VPC endpoint must allow inbound traffic                    on port 443 from the cluster security group.",
                                    "If your cluster uses authentication, you can also restrict the endpoint policy for the Secrets Manager endpoint.             To call the Secrets Manager API, Lambda uses your function role, not the Lambda service principal.",
                                    "Example VPC endpoint policy — Secrets Manager endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"secretsmanager:GetSecretValue\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"AWS\": [\n                      \"arn:aws::iam::123456789012:role/my-role\"\n                  ]\n              },\n              \"Resource\": \"arn:aws::secretsmanager:us-west-2:123456789012:secret:my-secret\"\n          }\n      ]\n  }"
                                    },
                                    "When you use Amazon VPC endpoints, AWS routes your API calls to invoke your function using the endpoint's Elastic Network Interface (ENI).            The Lambda service principal needs to call lambda:InvokeFunction on any roles and functions that use those ENIs.",
                                    "By default, Amazon VPC endpoints have open IAM policies that allow broad access to resources. Best practice is to restrict these            policies to perform the needed actions using that endpoint. To ensure that your event source mapping is able to invoke your Lambda            function, the VPC endpoint policy must allow the Lambda service principal to call sts:AssumeRole and            lambda:InvokeFunction. Restricting your VPC endpoint policies to allow only API calls originating within your organization            prevents the event source mapping from functioning properly, so \"Resource\": \"*\" is required in these policies.",
                                    "The following example VPC endpoint policies show how to grant the required access to the Lambda service principal for the            AWS STS and Lambda endpoints.",
                                    "Example VPC Endpoint policy — AWS STS endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"sts:AssumeRole\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"Service\": [\n                      \"lambda.amazonaws.com\"\n                  ]\n              },\n              \"Resource\": \"*\"\n          }\n      ]\n    }"
                                    },
                                    "Example VPC Endpoint policy — Lambda endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"lambda:InvokeFunction\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"Service\": [\n                      \"lambda.amazonaws.com\"\n                  ]\n              },\n              \"Resource\": \"*\"\n          }\n      ]\n  }"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Process messages",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-process.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Note",
                            "If you want to send data to a target other than a Lambda function or enrich the data before sending it, see     Amazon EventBridge Pipes.",
                            "Topics",
                            {
                                "sub_header": "Adding a Kafka cluster as an event source",
                                "content": [
                                    "To create an event source mapping, add your Kafka      cluster as a Lambda function trigger using the Lambda      console, an AWS SDK, or the AWS Command Line Interface (AWS CLI).",
                                    "This section describes how to create an event source mapping using the Lambda console and the AWS CLI.",
                                    {
                                        "sub_header": "Prerequisites",
                                        "content": [
                                            "  1.A self-managed Apache Kafka cluster. Lambda supports Apache Kafka version 0.10.1.0 and later.",
                                            "  2.An execution role with permission to access the AWS resources that your self-managed Kafka            cluster uses."
                                        ]
                                    },
                                    {
                                        "sub_header": "Customizable consumer group ID",
                                        "content": [
                                            "When setting up Kafka as an event source, you can specify a consumer group ID. This consumer group ID is an    existing identifier for the Kafka consumer group that you want your Lambda function to join. You can use this feature to seamlessly migrate any    ongoing Kafka record processing setups from other consumers to Lambda.",
                                            "If you specify a consumer group ID and there are other active pollers within that consumer group, Kafka distributes messages across      all consumers. In other words, Lambda doesn't receive all message for the Kafka topic. If you want Lambda to handle all messages in the      topic, turn off any other pollers in that consumer group.",
                                            "Additionally, if you specify a consumer group ID, and Kafka finds a valid existing consumer group with the same ID, Lambda ignores the      StartingPosition parameter for your event source mapping. Instead, Lambda begins processing records according to the committed      offset of the consumer group. If you specify a consumer group ID, and Kafka cannot find an existing consumer group, then Lambda configures your      event source with the specified StartingPosition.",
                                            "The consumer group ID that you specify must be unique among all your Kafka event sources. After creating a Kafka event source mapping      with the consumer group ID specified, you cannot update this value."
                                        ]
                                    },
                                    {
                                        "sub_header": "Adding a self-managed Kafka cluster (console)",
                                        "content": [
                                            "Follow these steps to add your self-managed Apache Kafka cluster and a Kafka topic as a trigger for your Lambda function.",
                                            "To add an Apache Kafka trigger to your Lambda function (console)",
                                            "  1 : Open the Functions page of the Lambda            console.",
                                            "  2 : Choose the name of your Lambda function.",
                                            "  3 : Under Function overview, choose Add trigger.",
                                            "  4 : Under Trigger configuration, do the following:Choose the Apache Kafka trigger type.For Bootstrap servers, enter the host and port pair address of a Kafka broker                in your cluster, and then choose Add. Repeat for each Kafka broker in the                cluster.For Topic name, enter the name of the Kafka topic used to store records in the                cluster.(Optional) For Batch size, enter the maximum number of records to receive in a                single batch.For Batch window, enter the maximum amount of seconds that Lambda spends                gathering records before invoking the function.(Optional) For Consumer group ID, enter the ID of a Kafka consumer group to join.(Optional) For Starting position, choose Latest to start                reading the stream from the latest record, Trim horizon to start at the                earliest available record, or At timestamp to specify a timestamp to start                reading from.(Optional) For VPC, choose the Amazon VPC for your Kafka cluster. Then, choose the                VPC subnets and VPC security groups.This setting is required if only users within your VPC access your brokers.(Optional) For Authentication, choose Add, and then do the                following:Choose the access or authentication protocol of the Kafka brokers in your cluster.If your Kafka broker uses SASL/PLAIN authentication, choose                        BASIC_AUTH.If your broker uses SASL/SCRAM authentication, choose one of the                        SASL_SCRAM protocols.If you're configuring mTLS authentication, choose the                        CLIENT_CERTIFICATE_TLS_AUTH protocol.For SASL/SCRAM or mTLS authentication, choose the Secrets Manager secret key that contains the                    credentials for your Kafka cluster.(Optional) For Encryption, choose the Secrets Manager secret containing the root CA                certificate that your Kafka brokers use for TLS encryption, if your Kafka brokers use certificates                signed by a private CA.This setting applies to TLS encryption for SASL/SCRAM or SASL/PLAIN, and to mTLS                authentication.To create the trigger in a disabled state for testing (recommended), clear Enable                trigger. Or, to enable the trigger immediately, select Enable                  trigger.",
                                            "  5 : To create the trigger, choose Add."
                                        ]
                                    },
                                    {
                                        "sub_header": "Adding a self-managed Kafka cluster (AWS CLI)",
                                        "content": [
                                            "Use the following example AWS CLI commands to create and view a self-managed Apache Kafka trigger for your Lambda function.",
                                            {
                                                "sub_header": "Using SASL/SCRAM",
                                                "content": [
                                                    "If Kafka users access your Kafka brokers over the internet, specify the Secrets Manager secret that you created          for SASL/SCRAM authentication. The following example uses the create-event-source-mapping AWS CLI command to map a Lambda function named my-kafka-function to a Kafka topic named AWSKafkaTopic.",
                                                    "aws lambda create-event-source-mapping \\   --topics AWSKafkaTopic \\  --source-access-configuration Type=SASL_SCRAM_512_AUTH,URI=arn:aws:secretsmanager:us-east-1:111122223333:secret:MyBrokerSecretName \\  --function-name arn:aws:lambda:us-east-1:111122223333:function:my-kafka-function \\  --self-managed-event-source '{\"Endpoints\":{\"KAFKA_BOOTSTRAP_SERVERS\":[\"abc3.xyz.com:9092\", \"abc2.xyz.com:9092\"]}}'"
                                                ]
                                            },
                                            {
                                                "sub_header": "Using a VPC",
                                                "content": [
                                                    "If only Kafka users within your VPC access your Kafka brokers, you must specify your VPC, subnets, and VPC          security group. The following example uses the create-event-source-mapping AWS CLI command to map a Lambda function named my-kafka-function to a Kafka topic named AWSKafkaTopic.",
                                                    "aws lambda create-event-source-mapping \\   --topics AWSKafkaTopic \\  --source-access-configuration '[{\"Type\": \"VPC_SUBNET\", \"URI\": \"subnet:subnet-0011001100\"}, {\"Type\": \"VPC_SUBNET\", \"URI\": \"subnet:subnet-0022002200\"}, {\"Type\": \"VPC_SECURITY_GROUP\", \"URI\": \"security_group:sg-0123456789\"}]' \\  --function-name arn:aws:lambda:us-east-1:111122223333:function:my-kafka-function \\  --self-managed-event-source '{\"Endpoints\":{\"KAFKA_BOOTSTRAP_SERVERS\":[\"abc3.xyz.com:9092\", \"abc2.xyz.com:9092\"]}}'"
                                                ]
                                            },
                                            {
                                                "sub_header": "Viewing the status using the AWS CLI",
                                                "content": [
                                                    "The following example uses the get-event-source-mapping AWS CLI command to describe the status of the event source mapping that you created.",
                                                    "aws lambda get-event-source-mapping          --uuid dh38738e-992b-343a-1077-3478934hjkfd7"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Self-managed Apache Kafka configuration parameters",
                                "content": [
                                    "All Lambda event source types share the same CreateEventSourceMapping and UpdateEventSourceMapping      API operations. However, only some of the parameters apply to Apache Kafka.",
                                    "ParameterRequiredDefaultNotesBatchSizeN100Maximum: 10,000DestinationConfigNN/ACapturing discarded batches for a self-managed Apache Kafka event sourceEnabledNTrueFilterCriteriaNN/AControl which events Lambda sends to your functionFunctionNameYN/AKMSKeyArnNN/AEncryption of filter criteriaMaximumBatchingWindowInSecondsN500 msBatching behaviorProvisionedPollersConfigNMinimumPollers: default value of 1 if not specifiedMaximumPollers: default value of 200 if not specifiedConfiguring provisioned modeSelfManagedEventSourceYN/AList of Kafka Brokers. Can set only on CreateSelfManagedKafkaEventSourceConfigNContains the ConsumerGroupId field which defaults to a unique value.Can set only on CreateSourceAccessConfigurationsNNo credentialsVPC information or authentication credentials for the cluster  For SASL_PLAIN, set to BASIC_AUTHStartingPositionYN/AAT_TIMESTAMP, TRIM_HORIZON, or LATESTCan set only on CreateStartingPositionTimestampNN/ARequired if StartingPosition is set to AT_TIMESTAMPTagsNN/AUsing tags on event source mappingsTopicsYN/ATopic nameCan set only on Create"
                                ]
                            },
                            {
                                "sub_header": "Using a Kafka cluster as an event source",
                                "content": [
                                    "When you add your Apache Kafka or Amazon MSK cluster as a trigger for your Lambda function, the cluster is used as an event source.",
                                    "Lambda reads event data from the Kafka topics that you specify as Topics in a      CreateEventSourceMapping request, based on the StartingPosition that you specify. After      successful processing, your Kafka topic is committed to your Kafka cluster.",
                                    "If you specify the StartingPosition as LATEST, Lambda starts reading from the latest      message in each partition belonging to the topic. Because there can be some delay after trigger configuration      before Lambda starts reading the messages, Lambda doesn't read any messages produced during this window.",
                                    "Lambda processes records from one or more Kafka topic partitions that you specify and sends a JSON payload to      your function. A single Lambda payload can contain messages from multiple partitions. When more records are available,       Lambda continues processing records in batches, based on the      BatchSize value that you specify in a CreateEventSourceMapping request, until your function      catches up with the topic.",
                                    "If your function returns an error for any of the messages in a batch, Lambda retries the whole batch of      messages until processing succeeds or the messages expire. You can send records that fail all retry attempts      to an on-failure destination for later processing.",
                                    "Note",
                                    "While Lambda functions typically have a maximum timeout limit of 15 minutes,      event source mappings for Amazon MSK, self-managed Apache Kafka, Amazon DocumentDB, and Amazon MQ for ActiveMQ and RabbitMQ only support functions with      maximum timeout limits of 14 minutes. This constraint ensures that the event source mapping can properly      handle function errors and retries."
                                ]
                            },
                            {
                                "sub_header": "Polling and stream starting positions",
                                "content": [
                                    "Be aware that stream polling during event source mapping creation and updates is eventually consistent.",
                                    "  1.During event source mapping creation, it may take several minutes to start polling events from the stream.",
                                    "  2.During event source mapping updates, it may take several minutes to stop and restart polling events from the stream.",
                                    "This behavior means that if you specify LATEST as the starting position for the stream, the event source mapping could     miss events during creation or updates. To ensure that no events are missed, specify the stream starting position as TRIM_HORIZON     or AT_TIMESTAMP."
                                ]
                            },
                            {
                                "sub_header": "Message throughput scaling behavior for self-managed Apache Kafka event source mappings",
                                "content": [
                                    "You can choose between two modes of message throughput scaling behavior for your Amazon MSK      event source mapping:",
                                    "  1.Default (on-demand) mode",
                                    "  2.Provisioned mode",
                                    {
                                        "sub_header": "Default (on-demand) mode",
                                        "content": [
                                            "When you initially create an self-managed Apache Kafka event source, Lambda allocates a default number of event        pollers to process all partitions in the Kafka topic. Lambda automatically scales up or down the        number of event pollers based on message load.",
                                            "In one-minute intervals, Lambda evaluates the consumer offset lag of all the partitions in the        topic. If the offset lag is too high, the partition is receiving messages faster than Lambda can        process them. If necessary, Lambda adds or removes event pollers from the topic. This autoscaling        process of adding or removing event pollers occurs within three minutes of evaluation.",
                                            "If your target Lambda function is throttled, Lambda reduces the number of event pollers. This        action reduces the workload on the function by reducing the number of messages that event        pollers can retrieve and send to the function.",
                                            "To monitor the throughput of your Kafka topic, you can view the Apache Kafka consumer metrics,        such as consumer_lag and consumer_offset."
                                        ]
                                    },
                                    {
                                        "sub_header": "Configuring provisioned mode",
                                        "content": [
                                            "For workloads where you need to fine-tune the throughput of your event source mapping,        you can use provisioned mode. In provisioned mode, you define minimum and maximum limits        for the amount of provisioned event pollers. These provisioned event pollers are dedicated        to your event source mapping, and can handle unexpected message spikes instantly when they        occur. We recommend that you use provisioned mode for Kafka workloads that have strict        performance requirements.",
                                            "In Lambda, an event poller is a compute unit capable of handling up to 5 MBps of throughput.    For reference, suppose your event source produces an average payload of 1MB, and the average function duration is 1 sec.    If the payload doesn’t undergo any transformation (such as filtering), a single poller can support 5 MBps throughput,    and 5 concurrent Lambda invocations. Using provisioned mode incurs additional costs. For pricing estimates,    see AWS Lambda pricing.",
                                            "In provisioned mode, the range of accepted values for the minimum number of event pollers                (MinimumPollers) is between 1 and 200, inclusive. The range of                accepted values for the maximum number of event pollers (MaximumPollers)                is between 1 and 2,000, inclusive. MaximumPollers must be greater than                or equal to MinimumPollers. In addition, to maintain ordered                processing within partitions, Lambda caps the MaximumPollers to the                number of partitions in the topic.",
                                            "For more details about choosing appropriate values for minimum and maximum event pollers,        see Best practices and considerations when using provisioned mode.",
                                            "You can configure provisioned mode for your self-managed Apache Kafka event source mapping using the console        or the Lambda API.",
                                            "To configure provisioned mode for an existing self-managed Apache Kafka event source mapping (console)",
                                            "  1 : Open the Functions page of the Lambda console.",
                                            "  2 : Choose the function with the self-managed Apache Kafka event source mapping you want to configure            provisioned mode for.",
                                            "  3 : Choose Configuration, then choose Triggers.",
                                            "  4 : Choose the self-managed Apache Kafka event source mapping that you want to configure provisioned mode for,            then choose Edit.",
                                            "  5 : Under Event source mapping configuration, choose             Configure provisioned mode.For Minimum event pollers, enter a value between 1 and 200.                                If you don't specify a value, Lambda chooses a default value of 1.For Maximum event pollers, enter a value between 1 and 2,000.                                This value must be greater than or equal to your value for Minimum event                                pollers. If you don't specify a value, Lambda chooses a default value of 200.",
                                            "  6 : Choose Save.",
                                            "You can configure provisioned mode programmatically using the ProvisionedPollerConfig object                in your                 EventSourceMappingConfiguration. For example, the following UpdateEventSourceMapping CLI                command configures a MinimumPollers value of 5, and a                MaximumPollers value of 100.",
                                            "aws lambda update-event-source-mapping \\    --uuid a1b2c3d4-5678-90ab-cdef-EXAMPLE11111 \\    --provisioned-poller-config '{\"MinimumPollers\": 5, \"MaximumPollers\": 100}'",
                                            "After configuring provisioned mode, you can observe the usage of event pollers for your workload by monitoring    the ProvisionedPollers metric. For more information, see Event source mapping metrics.",
                                            "To disable provisioned mode and return to default (on-demand) mode,                you can use the following UpdateEventSourceMapping CLI                command:",
                                            "aws lambda update-event-source-mapping \\    --uuid a1b2c3d4-5678-90ab-cdef-EXAMPLE11111 \\    --provisioned-poller-config '{}'"
                                        ]
                                    },
                                    {
                                        "sub_header": "Best practices and considerations when using provisioned mode",
                                        "content": [
                                            "The optimal configuration of minimum and maximum event pollers for your event source mapping                depends on your application's performance requirements. We recommend that you start with the                default minimum event pollers to baseline the performance profile. Adjust your configuration                based on observed message processing patterns and your desired performance profile.",
                                            "For workloads with spiky traffic and strict performance needs, increase the minimum event                pollers to handle sudden surges in messages. To determine the minimum event pollers required,                consider your workload's messages per second and average payload size, and use the throughput                capacity of a single event poller (up to 5 MBps) as a reference.",
                                            "To maintain ordered processing within a partition, Lambda limits the maximum event pollers                to the number of partitions in the topic. Additionally, the maximum event pollers your event                source mapping can scale to depends on the function's concurrency settings.",
                                            "When activating provisioned mode, update your network settings to remove AWS PrivateLink VPC                endpoints and associated permissions."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Amazon CloudWatch metrics",
                                "content": [
                                    "Lambda emits the OffsetLag metric while your function processes records. The value of this metric      is the difference in offset between the last record written to the Kafka event source topic and the last record that your function's       consumer group processed. You can use OffsetLag to estimate the latency between when a record is added and when      your consumer group processes it.",
                                    "An increasing trend in OffsetLag can indicate issues with pollers in your function's consumer group. For more information, see      Using CloudWatch metrics with Lambda."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Event filtering",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-filtering.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "You can use event filtering to control which records from a stream or queue Lambda sends to your function.    For general information about how event filtering works, see Control which events Lambda sends to your function.",
                            "This section focuses on event filtering for self-managed Apache Kafka event sources.",
                            "Topics",
                            {
                                "sub_header": "Self-managed Apache Kafka event filtering basics",
                                "content": [
                                    "Suppose a producer is writing messages to a topic in your self-managed Apache Kafka cluster, either in valid JSON format or as plain strings. An example record             would look like the following, with the message converted to a Base64 encoded string in the value field.",
                                    "{    \"mytopic-0\":[        {            \"topic\":\"mytopic\",            \"partition\":0,            \"offset\":15,            \"timestamp\":1545084650987,            \"timestampType\":\"CREATE_TIME\",            \"value\":\"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",            \"headers\":[]        }    ]}",
                                    "Suppose your Apache Kafka producer is writing messages to your topic in the following JSON format.",
                                    "{    \"device_ID\": \"AB1234\",    \"session\":{        \"start_time\": \"yyyy-mm-ddThh:mm:ss\",        \"duration\": 162    }}",
                                    "You can use the value key to filter records. Suppose you wanted to filter only those records where device_ID             begins with the letters AB. The FilterCriteria object would be as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"value\\\" : { \\\"device_ID\\\" : [ { \\\"prefix\\\": \\\"AB\\\" } ] } }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON.",
                                    "{    \"value\": {        \"device_ID\": [ { \"prefix\": \"AB\" } ]      }}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"value\" : { \"device_ID\" : [ { \"prefix\":  \"AB\" } ] } }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:kafka:us-east-2:123456789012:cluster/my-cluster/b-8ac7cc01-5898-482d-be2f-a6b596050ea8 \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"value\\\" : { \\\"device_ID\\\" : [ { \\\"prefix\\\":  \\\"AB\\\" } ] } }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"value\" : { \"device_ID\" : [ { \"prefix\":  \"AB\" } ] } }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"value\" : { \"device_ID\" : [ { \"prefix\":  \"AB\" } ] } }"
                                    },
                                    "With self-managed Apache Kafka, you can also filter records where the message is a plain string. Suppose you want to ignore those messages where the string is             \"error\". The FilterCriteria object would look as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"value\\\" : [ { \\\"anything-but\\\": [ \\\"error\\\" ] } ] }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON.",
                                    "{    \"value\": [        {        \"anything-but\": [ \"error\" ]        }    ]}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"value\" : [ { \"anything-but\": [ \"error\" ] } ] }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:kafka:us-east-2:123456789012:cluster/my-cluster/b-8ac7cc01-5898-482d-be2f-a6b596050ea8 \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"value\\\" : [ { \\\"anything-but\\\": [ \\\"error\\\" ] } ] }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"value\" : [ { \"anything-but\": [ \"error\" ] } ] }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"value\" : [ { \"anything-but\": [ \"error\" ] } ] }"
                                    },
                                    "Self-managed Apache Kafka messages must be UTF-8 encoded strings, either plain strings or in JSON format. That's because Lambda decodes Kafka byte arrays into UTF-8 before             applying filter criteria. If your messages use another encoding, such as UTF-16 or ASCII, or if the message format doesn't match the             FilterCriteria format, Lambda processes metadata filters only. The following table summarizes the specific behavior:",
                                    "Incoming message formatFilter pattern format for message propertiesResulting actionPlain stringPlain stringLambda filters based on your filter criteria.Plain stringNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Plain stringValid JSONLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONPlain stringLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONValid JSONLambda filters based on your filter criteria.Non-UTF-8 encoded stringJSON, plain string, or no patternLambda filters (on the other metadata properties only) based on your filter criteria."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "On-failure destinations",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-on-failure.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "To retain records of failed event source mapping invocations, add a destination to your function's event source mapping. Each record sent to the destination is a JSON document containing metadata about the failed invocation. For Amazon S3 destinations, Lambda also sends the entire invocation record along with the metadata. You can configure any Amazon SNS topic, Amazon SQS queue, or S3 bucket as a destination.",
                            "With Amazon S3 destinations, you can use the Amazon S3 Event Notifications feature to receive notifications when objects are uploaded to your destination S3 bucket. You can also configure S3 Event Notifications to invoke another Lambda function to perform automated processing on failed batches.",
                            "Your execution role must have permissions for the destination:",
                            "  1.For SQS destinations: :  sqs:SendMessage",
                            "  2.For SNS destinations: :  sns:Publish",
                            "  3.For S3 bucket destinations: :   s3:PutObject and s3:ListBucket",
                            "You must deploy a VPC endpoint for your on-failure destination service inside your Apache Kafka cluster VPC.",
                            "Additionally, if you configured a KMS key on your destination, Lambda needs the following        permissions depending on the destination type:",
                            "  1.If you've enabled encryption with your own KMS key for an S3 destination,            kms:GenerateDataKey is required.            If the KMS key and S3 bucket destination are in a different account from your Lambda function            and execution role, configure the KMS key to trust the execution role to allow            kms:GenerateDataKey.",
                            "  2.If you've enabled encryption with your own KMS key for SQS destination,            kms:Decrypt and            kms:GenerateDataKey are            required. If the KMS key and SQS queue destination are in a different account from your            Lambda function and execution role, configure the KMS key to trust the execution role to            allow kms:Decrypt, kms:GenerateDataKey,            kms:DescribeKey, and            kms:ReEncrypt.",
                            "  3.If you've enabled encryption with your own KMS key for SNS destination,            kms:Decrypt and            kms:GenerateDataKey are            required. If the KMS key and SNS topic destination are in a different account from your            Lambda function and execution role, configure the KMS key to trust the execution role to            allow kms:Decrypt, kms:GenerateDataKey,            kms:DescribeKey, and            kms:ReEncrypt.",
                            {
                                "sub_header": "Configuring on-failure destinations for an self-managed Apache Kafka event source mapping",
                                "content": [
                                    "To configure an on-failure destination using the console, follow these steps:",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Choose a function.",
                                    "  3 : Under Function overview, choose Add destination.",
                                    "  4 : For Source, choose Event source mapping invocation.",
                                    "  5 : For Event source mapping, choose an event source that's configured              for this function.",
                                    "  6 : For Condition, select On failure. For event              source mapping invocations, this is the only accepted condition.",
                                    "  7 : For Destination type, choose the destination type that Lambda sends              invocation records to.",
                                    "  8 : For Destination, choose a resource.",
                                    "  9 : Choose Save.",
                                    "You can also configure an on-failure destination using the AWS CLI. For example, the following          create-event-source-mapping command adds an event source mapping with an SQS on-failure destination to          MyFunction:",
                                    "aws lambda create-event-source-mapping \\--function-name \"MyFunction\" \\--event-source-arn arn:aws:kafka:us-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2 \\--destination-config '{\"OnFailure\": {\"Destination\": \"arn:aws:sqs:us-east-1:123456789012:dest-queue\"}}'",
                                    "The following update-event-source-mapping command adds an S3 on-failure destination to the event source associated with the input uuid:",
                                    "aws lambda update-event-source-mapping \\--uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\--destination-config '{\"OnFailure\": {\"Destination\": \"arn:aws:s3:::dest-bucket\"}}'",
                                    "To remove a destination, supply an empty string as the argument to the          destination-config parameter:",
                                    "aws lambda update-event-source-mapping \\--uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\--destination-config '{\"OnFailure\": {\"Destination\": \"\"}}'",
                                    {
                                        "sub_header": "Security best practices for Amazon S3 destinations",
                                        "content": [
                                            "Deleting an S3 bucket that's configured as a destination without removing the destination from your function's configuration can create a security risk. If another       user knows your destination bucket's name, they can recreate the bucket in their AWS account. Records of failed invocations will be sent to their bucket, potentially       exposing data from your function.",
                                            "Warning",
                                            "To ensure that invocation records from your function can't be sent to an S3 bucket in another AWS account, add a condition to your function's execution role         that limits s3:PutObject permissions to buckets in your account. ",
                                            "The following example shows an IAM policy that limits your function's s3:PutObject permissions to buckets in your account. This policy also gives Lambda        the s3:ListBucket permission it needs to use an S3 bucket as a destination.",
                                            "{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Sid\": \"S3BucketResourceAccountWrite\",            \"Effect\": \"Allow\",            \"Action\": [                \"s3:PutObject\",                \"s3:ListBucket\"            ],            \"Resource\": \"arn:aws:s3:::*/*\",            \"Condition\": {                \"StringEquals\": {                    \"s3:ResourceAccount\": \"111122223333\"                }            }        }    ]}",
                                            "To add a permissions policy to your funcion's execution role using the AWS Management Console or AWS CLI, refer to the instructions in the following procedures:",
                                            "  1.Console : \nTo add a permissions policy to a function's execution role (console)Open the Functions page of the Lambda console.\nSelect the Lambda function whose execution role you want to modify.\n\nIn the Configuration tab, select Permissions.\n\nIn the Execution role tab, select your function's Role name to open the role's IAM console page.\n\nAdd a permissions policy to the role by doing the following:\n\nIn the Permissions policies pane, choose Add permissions and select Create inline policy.\n\nIn Policy editor, select JSON.\n\nPaste the policy you want to add into the editor (replacing the existing JSON), and then choose Next.\n\nUnder Policy details, enter a Policy name.\n\nChoose Create policy.\n\n\n",
                                            "  2.AWS CLI : put-role-policy",
                                            "anchor",
                                            "anchor",
                                            "To add a permissions policy to a function's execution role (console)",
                                            "  1 : Open the Functions page of the Lambda console.",
                                            "  2 : Select the Lambda function whose execution role you want to modify.",
                                            "  3 : In the Configuration tab, select Permissions.",
                                            "  4 : In the Execution role tab, select your function's Role name to open the role's IAM console page.",
                                            "  5 : Add a permissions policy to the role by doing the following:In the Permissions policies pane, choose Add permissions and select Create inline policy.In Policy editor, select JSON.Paste the policy you want to add into the editor (replacing the existing JSON), and then choose Next.Under Policy details, enter a Policy name.Choose Create policy."
                                        ]
                                    },
                                    {
                                        "sub_header": "SNS and SQS example invocation record",
                                        "content": [
                                            "The following example shows what Lambda sends to an SNS topic or SQS queue destination for a          failed Kafka event source invocation. Each of the keys under recordsInfo contains          both the Kafka topic and partition, separated by a hyphen. For example, for the key          \"Topic-0\", Topic is the Kafka topic, and 0 is the          partition. For each topic and partition, you can use the offsets and timestamp data to find          the original invocation records.",
                                            "{    \"requestContext\": {        \"requestId\": \"316aa6d0-8154-xmpl-9af7-85d5f4a6bc81\",        \"functionArn\": \"arn:aws:lambda:us-east-1:123456789012:function:myfunction\",        \"condition\": \"RetryAttemptsExhausted\" | \"MaximumPayloadSizeExceeded\",        \"approximateInvokeCount\": 1    },    \"responseContext\": { // null if record is MaximumPayloadSizeExceeded        \"statusCode\": 200,        \"executedVersion\": \"$LATEST\",        \"functionError\": \"Unhandled\"    },    \"version\": \"1.0\",    \"timestamp\": \"2019-11-14T00:38:06.021Z\",    \"KafkaBatchInfo\": {        \"batchSize\": 500,        \"eventSourceArn\": \"arn:aws:kafka:us-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2\",        \"bootstrapServers\": \"...\",        \"payloadSize\": 2039086, // In bytes        \"recordsInfo\": {            \"Topic-0\": {                \"firstRecordOffset\": \"49601189658422359378836298521827638475320189012309704722\",                \"lastRecordOffset\": \"49601189658422359378836298522902373528957594348623495186\",                \"firstRecordTimestamp\": \"2019-11-14T00:38:04.835Z\",                \"lastRecordTimestamp\": \"2019-11-14T00:38:05.580Z\",            },            \"Topic-1\": {                \"firstRecordOffset\": \"49601189658422359378836298521827638475320189012309704722\",                \"lastRecordOffset\": \"49601189658422359378836298522902373528957594348623495186\",                \"firstRecordTimestamp\": \"2019-11-14T00:38:04.835Z\",                \"lastRecordTimestamp\": \"2019-11-14T00:38:05.580Z\",            }        }    }}"
                                        ]
                                    },
                                    {
                                        "sub_header": "S3 destination example invocation record",
                                        "content": [
                                            "For S3 destinations, Lambda sends the entire invocation record along with the metadata          to the destination. The following example shows that Lambda sends to an S3 bucket destination          for a failed Kafka event source invocation. In addition to all of the fields from the previous          example for SQS and SNS destinations, the payload field contains the original          invocation record as an escaped JSON string.",
                                            "{    \"requestContext\": {        \"requestId\": \"316aa6d0-8154-xmpl-9af7-85d5f4a6bc81\",        \"functionArn\": \"arn:aws:lambda:us-east-1:123456789012:function:myfunction\",        \"condition\": \"RetryAttemptsExhausted\" | \"MaximumPayloadSizeExceeded\",        \"approximateInvokeCount\": 1    },    \"responseContext\": { // null if record is MaximumPayloadSizeExceeded        \"statusCode\": 200,        \"executedVersion\": \"$LATEST\",        \"functionError\": \"Unhandled\"    },    \"version\": \"1.0\",    \"timestamp\": \"2019-11-14T00:38:06.021Z\",    \"KafkaBatchInfo\": {        \"batchSize\": 500,        \"eventSourceArn\": \"arn:aws:kafka:us-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2\",        \"bootstrapServers\": \"...\",        \"payloadSize\": 2039086, // In bytes        \"recordsInfo\": {            \"Topic-0\": {                \"firstRecordOffset\": \"49601189658422359378836298521827638475320189012309704722\",                \"lastRecordOffset\": \"49601189658422359378836298522902373528957594348623495186\",                \"firstRecordTimestamp\": \"2019-11-14T00:38:04.835Z\",                \"lastRecordTimestamp\": \"2019-11-14T00:38:05.580Z\",            },            \"Topic-1\": {                \"firstRecordOffset\": \"49601189658422359378836298521827638475320189012309704722\",                \"lastRecordOffset\": \"49601189658422359378836298522902373528957594348623495186\",                \"firstRecordTimestamp\": \"2019-11-14T00:38:04.835Z\",                \"lastRecordTimestamp\": \"2019-11-14T00:38:05.580Z\",            }        }    },    \"payload\": \"<Whole Event>\" // Only available in S3}",
                                            "Tip",
                                            "We recommend enabling S3 versioning on your destination bucket."
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Troubleshooting",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kafka-troubleshoot.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following topics provide troubleshooting advice for errors and issues that you might encounter when using    self-managed Apache Kafka with Lambda. If you find an issue that is not listed here, you can use the    Feedback button on this page to report it.",
                            "For more help with troubleshooting, visit the AWS Knowledge Center.",
                            {
                                "sub_header": "Authentication and authorization errors",
                                "content": [
                                    "If any of the permissions required to consume data from the Kafka cluster are missing, Lambda displays one of      the following error messages in the event source mapping under LastProcessingResult.",
                                    "Error messages",
                                    {
                                        "sub_header": "Cluster failed to authorize Lambda",
                                        "content": [
                                            "For SASL/SCRAM or mTLS, this error indicates that the provided user doesn't have all of the following        required Kafka access control list (ACL) permissions:",
                                            "  1.DescribeConfigs Cluster",
                                            "  2.Describe Group",
                                            "  3.Read Group",
                                            "  4.Describe Topic",
                                            "  5.Read Topic",
                                            "When you create Kafka ACLs with the required kafka-cluster permissions, specify the topic and        group as resources. The topic name must match the topic in the event source mapping. The group name must match        the event source mapping's UUID.",
                                            "After you add the required permissions to the execution role, it might take several minutes for the changes        to take effect."
                                        ]
                                    },
                                    {
                                        "sub_header": "SASL authentication failed",
                                        "content": [
                                            "For SASL/SCRAM or SASL/PLAIN, this error indicates that the provided sign-in credentials aren't        valid."
                                        ]
                                    },
                                    {
                                        "sub_header": "Server failed to authenticate Lambda",
                                        "content": [
                                            "This error indicates that the Kafka broker failed to authenticate Lambda. This can occur for any of the        following reasons:",
                                            "  1.You didn't provide a client certificate for mTLS authentication.",
                                            "  2.You provided a client certificate, but the Kafka brokers aren't configured to use mTLS authentication.",
                                            "  3.A client certificate isn't trusted by the Kafka brokers."
                                        ]
                                    },
                                    {
                                        "sub_header": "Lambda failed to authenticate server",
                                        "content": [
                                            "This error indicates that Lambda failed to authenticate the Kafka broker. This can occur for any of the        following reasons:",
                                            "  1.The Kafka brokers use self-signed certificates or a private CA, but didn't provide the server root CA          certificate.",
                                            "  2.The server root CA certificate doesn't match the root CA that signed the broker's certificate.",
                                            "  3.Hostname validation failed because the broker's certificate doesn't contain the broker's DNS name or IP address as          a subject alternative name."
                                        ]
                                    },
                                    {
                                        "sub_header": "Provided certificate or private key is invalid",
                                        "content": [
                                            "This error indicates that the Kafka consumer couldn't use the provided certificate or private key. Make sure        that the certificate and key use PEM format, and that the private key encryption uses a PBES1 algorithm."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Event source mapping errors",
                                "content": [
                                    "When you add your Apache Kafka cluster as an event source for your Lambda function, if your function encounters an error, your Kafka consumer stops processing records. Consumers of a topic partition are those that subscribe to, read, and process your records. Your other Kafka consumers can continue processing records, provided they don't encounter the same error.",
                                    "To determine the cause of a stopped consumer, check the StateTransitionReason field in the response of EventSourceMapping. The following list describes the event source errors that you can receive:",
                                    "  1.ESM_CONFIG_NOT_VALID : \nThe event source mapping configuration isn't valid.\n",
                                    "  2.EVENT_SOURCE_AUTHN_ERROR : \nLambda couldn't authenticate the event source.\n",
                                    "  3.EVENT_SOURCE_AUTHZ_ERROR : \nLambda doesn't have the required permissions to access the event source.\n",
                                    "  4.FUNCTION_CONFIG_NOT_VALID : \nThe function configuration isn't valid.\n",
                                    "Note",
                                    "If your Lambda event records exceed the allowed size limit of 6 MB, they can go        unprocessed."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "Note",
                    "If you want to send data to a target other than a Lambda function or enrich the data before sending it, see     Amazon EventBridge Pipes.",
                    "Lambda supports Apache Kafka as an event source. Apache Kafka is a an    open-source event streaming platform that supports workloads such as data pipelines and streaming analytics.",
                    "You can use the AWS managed Kafka service Amazon Managed Streaming for Apache Kafka (Amazon MSK), or a self-managed Kafka cluster. For details    about using Lambda with Amazon MSK, see Using Lambda with Amazon MSK.",
                    "This topic describes how to use Lambda with a self-managed Kafka cluster. In AWS terminology, a self-managed    cluster includes non-AWS hosted Kafka clusters. For example, you can host your Kafka cluster with a cloud provider    such as Confluent Cloud.",
                    "Apache Kafka as an event source operates similarly to using Amazon Simple Queue Service (Amazon SQS) or Amazon Kinesis. Lambda internally polls for    new messages from the event source and then synchronously invokes the target Lambda function. Lambda reads the    messages in batches and provides these to your function as an event payload. The maximum batch size is configurable    (the default is 100 messages). For more information, see Batching behavior.",
                    "To optimize the throughput of your self-managed Apache Kafka event source mapping, configure provisioned mode. In provisioned    mode, you can define the minimum and maximum number of event pollers allocated to your event source mapping.    This can improve the ability of your event source mapping to handle unexpected message spikes. For more    information, see provisioned mode.",
                    "Warning",
                    "Lambda event source mappings process each event at least once, and duplicate processing of records can occur. To avoid potential issues related to duplicate events, we strongly recommend that you make your function code idempotent. To learn more, see How do I make my Lambda function idempotent in the AWS Knowledge Center.",
                    "For Kafka-based event sources, Lambda supports processing control parameters, such as batching windows      and batch size. For more information, see Batching behavior.",
                    "For an example of how to use self-managed Kafka as an event source, see Using self-hosted Apache Kafka as an      event source for AWS Lambda on the AWS Compute Blog.",
                    "Topics",
                    {
                        "sub_header": "Example event",
                        "content": [
                            "Lambda sends the batch of messages in the event parameter when it invokes your Lambda function. The event payload    contains an array of messages. Each array item contains details of the Kafka topic and Kafka partition identifier,    together with a timestamp and a base64-encoded message.",
                            "{   \"eventSource\": \"SelfManagedKafka\",   \"bootstrapServers\":\"b-2.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092,b-1.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092\",   \"records\":{      \"mytopic-0\":[         {            \"topic\":\"mytopic\",            \"partition\":0,            \"offset\":15,            \"timestamp\":1545084650987,            \"timestampType\":\"CREATE_TIME\",            \"key\":\"abcDEFghiJKLmnoPQRstuVWXyz1234==\",            \"value\":\"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",            \"headers\":[               {                  \"headerKey\":[                     104,                     101,                     97,                     100,                     101,                     114,                     86,                     97,                     108,                     117,                     101                  ]               }            ]         }      ]   }}"
                        ]
                    }
                ]
            },
            {
                "title": "API Gateway",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway.html",
                "contents": [
                    {
                        "title": "Tutorial",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "In this tutorial, you create a REST API through which you invoke a Lambda function using an HTTP request.   Your Lambda function will perform create, read, update, and delete (CRUD) operations on a DynamoDB table.   This function is provided here for demonstration, but you will learn to configure an API Gateway REST API that can   invoke any Lambda function.",
                            "Using API Gateway provides users with a secure HTTP endpoint to invoke your Lambda function and can help manage   large volumes of calls to your function by throttling traffic and automatically validating and authorizing API   calls. API Gateway also provides flexible security controls using AWS Identity and Access Management (IAM) and Amazon Cognito. This is useful for use cases where   advance authorization is required for calls to your application.",
                            "To complete this tutorial, you will go through the following stages:",
                            "  1 : Create and configure a Lambda function in Python or Node.js to perform operations on a DynamoDB table.",
                            "  2 : Create a REST API in API Gateway to connect to your Lambda function.",
                            "  3 : Create a DynamoDB table and test it with your Lambda function in the console.",
                            "  4 : Deploy your API and test the full setup using curl in a terminal.",
                            "By completing these stages, you will learn how to use API Gateway to create an HTTP endpoint that can securely invoke   a Lambda function at any scale. You will also learn how to deploy your API, and how to test it in the console and by sending   an HTTP request using a terminal.",
                            "Sections",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "Sign up for an AWS account",
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "Create a user with administrative access",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "If you have not yet installed the AWS Command Line Interface, follow the steps at  Installing or updating the latest version of the AWS CLI           to install it.",
                                    "The tutorial requires a command line terminal or shell to run commands. In Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.             To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.          ",
                                    "Install the AWS Command Line Interface",
                                    "If you have not yet installed the AWS Command Line Interface, follow the steps at  Installing or updating the latest version of the AWS CLI           to install it.",
                                    "The tutorial requires a command line terminal or shell to run commands. In Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.             To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.          "
                                ]
                            },
                            {
                                "sub_header": "Create a permissions policy",
                                "content": [
                                    "Before you can create an execution role for your Lambda function, you first       need to create a permissions policy to give your function permission to access the required AWS resources. For this tutorial,       the policy allows Lambda to perform CRUD operations on a DynamoDB table and write to Amazon CloudWatch Logs.",
                                    "To create the policy",
                                    "  1 : Open the Policies page of the IAM console.",
                                    "  2 : Choose Create Policy.",
                                    " 3 : Choose the JSON tab, and then paste the following custom policy into the JSON          editor. ",
                                    {
                                        "code_example": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"Stmt1428341300017\",\n      \"Action\": [\n        \"dynamodb:DeleteItem\",\n        \"dynamodb:GetItem\",\n        \"dynamodb:PutItem\",\n        \"dynamodb:Query\",\n        \"dynamodb:Scan\",\n        \"dynamodb:UpdateItem\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    },\n    {\n      \"Sid\": \"\",\n      \"Resource\": \"*\",\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Effect\": \"Allow\"\n    }\n  ]\n}"
                                    },
                                    "  4 : Choose Next: Tags.",
                                    "  5 : Choose Next: Review.",
                                    "  6 : Under Review policy, for the policy Name, enter            lambda-apigateway-policy.",
                                    "  7 : Choose Create policy."
                                ]
                            },
                            {
                                "sub_header": "Create an execution role",
                                "content": [
                                    "An execution role is an AWS Identity and Access Management (IAM) role that grants a Lambda function permission to access AWS services and resources. To enable your function to perform operations on a DynamoDB table, you attach the permissions policy you created in the previous step.",
                                    "To create an execution role and attach your custom permissions policy",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Choose Create role.",
                                    "  3 : For the type of trusted entity, choose AWS service, then for the use case, choose Lambda.",
                                    "  4 : Choose Next.",
                                    "  5 : In the policy search box, enter lambda-apigateway-policy.",
                                    "  6 : In the search results, select the policy that you created (lambda-apigateway-policy), and          then choose Next.",
                                    "  7 : Under Role details, for the Role name, enter            lambda-apigateway-role, then choose Create role.",
                                    "Later in the tutorial, you need the Amazon Resource Name (ARN) of the role you just created. On the Roles     page of the IAM console, choose the name of your role (lambda-apigateway-role) and copy the Role ARN displayed     on the Summary page."
                                ]
                            },
                            {
                                "sub_header": "Create the function",
                                "content": [
                                    "The following code example receives an event input from API Gateway specifying an operation to perform on the DynamoDB table       you will create and some payload data. If the parameters the function receives are valid, it performs the requested operation on the table.",
                                    "  1.Node.js : region",
                                    "  2.Python 3 : import boto3\n\n# Define the DynamoDB table that Lambda will connect to\ntable_name = \"lambda-apigateway\"\n\n# Create the DynamoDB resource\ndynamo = boto3.resource('dynamodb').Table(table_name)\n\n# Define some functions to perform the CRUD operations\ndef create(payload):\n    return dynamo.put_item(Item=payload['Item'])\n\ndef read(payload):\n    return dynamo.get_item(Key=payload['Key'])\n\ndef update(payload):\n    return dynamo.update_item(**{k: payload[k] for k in ['Key', 'UpdateExpression', \n    'ExpressionAttributeNames', 'ExpressionAttributeValues'] if k in payload})\n\ndef delete(payload):\n    return dynamo.delete_item(Key=payload['Key'])\n\ndef echo(payload):\n    return payload\n\noperations = {\n    'create': create,\n    'read': read,\n    'update': update,\n    'delete': delete,\n    'echo': echo,\n}\n\ndef lambda_handler(event, context):\n    '''Provide an event that contains the following keys:\n      - operation: one of the operations in the operations dict below\n      - payload: a JSON object containing parameters to pass to the \n        operation being performed\n    '''\n    \n    operation = event['operation']\n    payload = event['payload']\n    \n    if operation in operations:\n        return operations[operation](payload)\n        \n    else:\n        raise ValueError(f'Unrecognized operation \"{operation}\"')",
                                    "anchor",
                                    "anchor",
                                    "Example index.mjs",
                                    "Note the region setting. This must match the AWS Region where you deploy the function and create the DynamoDB table.",
                                    {
                                        "code_example": "import { DynamoDBDocumentClient, PutCommand, GetCommand, \n         UpdateCommand, DeleteCommand} from \"@aws-sdk/lib-dynamodb\";\nimport { DynamoDBClient } from \"@aws-sdk/client-dynamodb\";\n\nconst ddbClient = new DynamoDBClient({ region: \"us-east-2\" });\nconst ddbDocClient = DynamoDBDocumentClient.from(ddbClient);\n\n// Define the name of the DDB table to perform the CRUD operations on\nconst tablename = \"lambda-apigateway\";\n\n/**\n * Provide an event that contains the following keys:\n *\n *   - operation: one of 'create,' 'read,' 'update,' 'delete,' or 'echo'\n *   - payload: a JSON object containing the parameters for the table item\n *     to perform the operation on\n */\nexport const handler = async (event, context) => {\n   \n     const operation = event.operation;\n   \n     if (operation == 'echo'){\n          return(event.payload);\n     }\n     \n    else { \n        event.payload.TableName = tablename;\n        let response;\n        \n        switch (operation) {\n          case 'create':\n               response = await ddbDocClient.send(new PutCommand(event.payload));\n               break;\n          case 'read':\n               response = await ddbDocClient.send(new GetCommand(event.payload));\n               break;\n          case 'update':\n               response = ddbDocClient.send(new UpdateCommand(event.payload));\n               break;\n          case 'delete':\n               response = ddbDocClient.send(new DeleteCommand(event.payload));\n               break;\n          default:\n            response = 'Unknown operation: ${operation}';\n          }\n        console.log(response);\n        return response;\n    }\n};"
                                    },
                                    "Note",
                                    "In this example, the name of the DynamoDB table is defined as a variable in your function code. In a real application,               best practice is to pass this parameter as an environment variable and to avoid hardcoding the table name. For more information see               Using AWS Lambda environment variables.",
                                    "To create the function",
                                    "  1 : Save the code example as a file named index.mjs and, if necessary, edit the AWS region specified in the code.                 The region specified in the code must be the same as the region in which you create your DynamoDB table later in the tutorial.",
                                    " 2 : Create a deployment package using the following zip command. ",
                                    {
                                        "code_example": "zip function.zip index.mjs"
                                    },
                                    " 3 : Create a Lambda function using the create-function AWS CLI command. For the                  role parameter, enter the execution role's Amazon Resource Name (ARN) that you copied                earlier. ",
                                    {
                                        "code_example": "aws lambda create-function \\\n--function-name LambdaFunctionOverHttps \\\n--zip-file fileb://function.zip \\\n--handler index.handler \\\n--runtime nodejs22.x \\\n--role arn:aws:iam::123456789012:role/service-role/lambda-apigateway-role"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Invoke the function using the AWS CLI",
                                "content": [
                                    "Before integrating your function with API Gateway, confirm that you have deployed the function successfully. Create       a test event containing the parameters your API Gateway API will send to Lambda and use the AWS CLI invoke command       to run your function.",
                                    "To invoke the Lambda function with the AWS CLI",
                                    " 1 : Save the following JSON as a file named input.txt. ",
                                    {
                                        "code_example": "{\n    \"operation\": \"echo\",\n    \"payload\": {\n        \"somekey1\": \"somevalue1\",\n        \"somekey2\": \"somevalue2\"\n    }\n}"
                                    },
                                    " 2 : Run the following invoke AWS CLI command. The cli-binary-format option is required if you're using AWS CLI version 2. To make this the default setting, run aws configure set cli-binary-format raw-in-base64-out. For more information, see AWS CLI supported global command line options in the AWS Command Line Interface User Guide for Version 2.You should see the following response:{    \"StatusCode\": 200,    \"ExecutedVersion\": \"LATEST\"}",
                                    {
                                        "code_example": "aws lambda invoke \\\n--function-name LambdaFunctionOverHttps \\\n--payload file://input.txt outputfile.txt \\\n--cli-binary-format raw-in-base64-out"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Create a REST API using API Gateway",
                                "content": [
                                    "In this step, you create the API Gateway REST API you will use to invoke your Lambda function.",
                                    "To create the API",
                                    "  1 : Open the API Gateway console.",
                                    "  2 : Choose Create API.",
                                    "  3 : In the REST API box, choose Build.",
                                    "  4 : Under API details, leave New API selected, and for API Name, enter             DynamoDBOperations.",
                                    "  5 : Choose Create API."
                                ]
                            },
                            {
                                "sub_header": "Create a resource on your REST API",
                                "content": [
                                    "To add an HTTP method to your API, you first need to create a resource for that method to operate on. Here you create     the resource to manage your DynamoDB table.",
                                    "To create the resource",
                                    "  1 : In the API Gateway console, on the              Resources page for your API, choose Create Resource.",
                                    "  2 : In Resource details, for Resource name enter DynamoDBManager.",
                                    "  3 : Choose Create Resource."
                                ]
                            },
                            {
                                "sub_header": "Create an HTTP POST method",
                                "content": [
                                    "In this step, you create a method (POST) for your DynamoDBManager resource. You link     this POST method to your Lambda function so that when the method receives an HTTP request, API Gateway invokes     your Lambda function.",
                                    "Note",
                                    "      For the purpose of this tutorial, one HTTP method (POST) is used to invoke a single Lambda function which         carries out all of the operations on your DynamoDB table. In a real application, best practice is to use a different Lambda         function and HTTP method for each operation. For more information, see        The Lambda monolith        in Serverless Land.    ",
                                    "To create the POST method",
                                    "  1 : On the Resources page for your API, ensure that the /DynamoDBManager resource is highlighted.           Then, in the Methods pane, choose Create method.",
                                    "  2 : For Method type, choose POST.",
                                    "  3 : For Integration type, leave Lambda function selected.",
                                    "  4 : For Lambda function, choose the Amazon Resource Name (ARN) for your function (LambdaFunctionOverHttps).",
                                    "  5 : Choose Create method."
                                ]
                            },
                            {
                                "sub_header": "Create a DynamoDB table",
                                "content": [
                                    "Create an empty DynamoDB table that your Lambda function will perform CRUD operations on.",
                                    "To create the DynamoDB table",
                                    "  1 : Open the Tables page of the DynamoDB console.",
                                    "  2 : Choose Create table.",
                                    "  3 : Under Table details, do the following:For Table name, enter lambda-apigateway.For Partition key, enter id, and keep the data type set as                String.",
                                    "  4 : Under Table settings, keep the Default settings.",
                                    "  5 : Choose Create table."
                                ]
                            },
                            {
                                "sub_header": "Test the integration of API Gateway, Lambda, and DynamoDB",
                                "content": [
                                    "You're now ready to test the integration of your API Gateway API method with your Lambda function and your DynamoDB table. Using the       API Gateway console, you send requests directly to your POST method using the console's test function.       In this step, you first use a create operation to add a new item to your DynamoDB table, then you       use an update operation to modify the item.",
                                    "Test 1: To create a new item in your DynamoDB table",
                                    "  1 : In the API Gateway console, choose your API            (DynamoDBOperations).",
                                    "  2 : Choose the POST method under the DynamoDBManager resource.",
                                    "  3 : Choose the Test tab. You might need to choose the right arrow button to show the tab.",
                                    " 4 : Under Test method, leave Query strings and Headers empty.         For Request body, paste the following JSON: ",
                                    {
                                        "code_example": "{\n  \"operation\": \"create\",\n  \"payload\": {\n    \"Item\": {\n      \"id\": \"1234ABCD\",\n      \"number\": 5\n    }\n  }\n}"
                                    },
                                    "  5 : Choose Test.The results that are displayed when the test completes should show status 200. This status code indicates that the         create operation was successful. To confirm, check that your DynamoDB table now contains the new item.",
                                    "  6 : Open the Tables page of the DynamoDB console and         choose the lambda-apigateway table.",
                                    "  7 : Chose Explore table items. In the Items returned pane, you         should see one item with the id 1234ABCD and the number 5. Example:",
                                    "Test 2: To update the item in your DynamoDB table",
                                    "  1 : In the API Gateway console, return to your POST method's            Test tab.",
                                    " 2 : Under Test method, leave Query strings and Headers empty.           For Request body, paste the following JSON: ",
                                    {
                                        "code_example": "{\n    \"operation\": \"update\",\n    \"payload\": {\n        \"Key\": {\n            \"id\": \"1234ABCD\"\n        },\n        \"UpdateExpression\": \"SET #num = :newNum\",\n        \"ExpressionAttributeNames\": {\n            \"#num\": \"number\"\n        },\n        \"ExpressionAttributeValues\": {\n            \":newNum\": 10\n        }\n    }\n}"
                                    },
                                    "  3 : Choose Test.The results which are displayed when the test completes should show status 200. This status code indicates that         the update operation was successful. To confirm, check that the item in your DynamoDB table has been modified.",
                                    "  4 : Open the Tables page of the DynamoDB console and             choose the lambda-apigateway table.",
                                    "  5 : Chose Explore table items. In the Items returned pane, you         should see one item with the id 1234ABCD and the number 10."
                                ]
                            },
                            {
                                "sub_header": "Deploy the API",
                                "content": [
                                    "For a client to call the API, you must create a deployment and an associated stage. A stage represents a snapshot     of your API including its methods and integrations.",
                                    "To deploy the API",
                                    "  1 : Open the APIs page of the API Gateway console and choose the         DynamoDBOperations API.",
                                    "  2 : On the Resources page for your API choose Deploy API.",
                                    "  3 : For Stage, choose *New stage*, then for Stage name,         enter test.",
                                    "  4 : Choose Deploy.",
                                    "  5 : In the Stage details pane, copy the Invoke URL. You will use this in the           next step to invoke your function using an HTTP request."
                                ]
                            },
                            {
                                "sub_header": "Use curl to invoke your function using HTTP requests",
                                "content": [
                                    "You can now invoke your Lambda function by issuing an HTTP request to your API. In this step, you will create a     new item in your DynamoDB table and then perform read, update, and delete operations on that item.",
                                    "To create an item in your DynamoDB table using curl",
                                    " 1 : Run the following curl command using the invoke URL you copied in the previous step. When you use curl with the -d (data)         option, it automatically uses the HTTP POST method. If the operation was successful, you should see a response returned with an HTTP status code of 200.",
                                    {
                                        "code_example": "curl https://l8togsqxd8.execute-api.us-east-2.amazonaws.com/test/DynamoDBManager \\\n-d '{\"operation\": \"create\", \"payload\": {\"Item\": {\"id\": \"5678EFGH\", \"number\": 15}}}'"
                                    },
                                    "  2 : You can also use the DynamoDB console to verify that the new item is in your table by doing the following:Open the Tables page of the DynamoDB console and choose               the lambda-apigateway table.Choose Explore table items. In the Items returned pane, you               should see an item with the id 5678EFGH and the number 15.",
                                    "To read the item in your DynamoDB table using curl",
                                    "  1.Run the following curl command to read the value of the item you just created. Use your own invoke URL.curl https://avos4dr2rk.execute-api.us-east-2.amazonaws.com/test/DynamoDBManager -d \\'{\"operation\": \"read\", \"payload\": {\"Key\": {\"id\": \"5678EFGH\"}}}'You should see output like one of the following depending on whether you chose the Node.js or Python function code:Node.js{\"$metadata\":{\"httpStatusCode\":200,\"requestId\":\"7BP3G5Q0C0O1E50FBQI9NS099JVV4KQNSO5AEMVJF66Q9ASUAAJG\",\"attempts\":1,\"totalRetryDelay\":0},\"Item\":{\"id\":\"5678EFGH\",\"number\":15}}Python{\"Item\":{\"id\":\"5678EFGH\",\"number\":15},\"ResponseMetadata\":{\"RequestId\":\"QNDJICE52E86B82VETR6RKBE5BVV4KQNSO5AEMVJF66Q9ASUAAJG\",\"HTTPStatusCode\":200,\"HTTPHeaders\":{\"server\":\"Server\",\"date\":\"Wed, 31 Jul 2024 00:37:01 GMT\",\"content-type\":\"application/x-amz-json-1.0\",\"content-length\":\"52\",\"connection\":\"keep-alive\",\"x-amzn-requestid\":\"QNDJICE52E86B82VETR6RKBE5BVV4KQNSO5AEMVJF66Q9ASUAAJG\",\"x-amz-crc32\":\"2589610852\"},\"RetryAttempts\":0}}anchoranchorNode.jsPython{\"$metadata\":{\"httpStatusCode\":200,\"requestId\":\"7BP3G5Q0C0O1E50FBQI9NS099JVV4KQNSO5AEMVJF66Q9ASUAAJG\",\"attempts\":1,\"totalRetryDelay\":0},\"Item\":{\"id\":\"5678EFGH\",\"number\":15}}",
                                    {
                                        "code_example": "curl https://avos4dr2rk.execute-api.us-east-2.amazonaws.com/test/DynamoDBManager -d \\\n'{\"operation\": \"read\", \"payload\": {\"Key\": {\"id\": \"5678EFGH\"}}}'"
                                    },
                                    "To update the item in your DynamoDB table using curl",
                                    " 1 : Run the following curl command to update the item you just created by changing the number value. Use your own invoke URL. ",
                                    {
                                        "code_example": "curl https://avos4dr2rk.execute-api.us-east-2.amazonaws.com/test/DynamoDBManager \\\n-d '{\"operation\": \"update\", \"payload\": {\"Key\": {\"id\": \"5678EFGH\"}, \"UpdateExpression\": \"SET #num = :new_value\", \"ExpressionAttributeNames\": {\"#num\": \"number\"}, \"ExpressionAttributeValues\": {\":new_value\": 42}}}'"
                                    },
                                    " 2 : To confirm that the value of number for the item has been updated, run another read command: ",
                                    {
                                        "code_example": "curl https://avos4dr2rk.execute-api.us-east-2.amazonaws.com/test/DynamoDBManager \\\n-d '{\"operation\": \"read\", \"payload\": {\"Key\": {\"id\": \"5678EFGH\"}}}'"
                                    },
                                    "To delete the item in your DynamoDB table using curl",
                                    " 1 : Run the following curl command to delete the item you just created. Use your own invoke URL. ",
                                    {
                                        "code_example": "curl https://l8togsqxd8.execute-api.us-east-2.amazonaws.com/test/DynamoDBManager \\\n-d '{\"operation\": \"delete\", \"payload\": {\"Key\": {\"id\": \"5678EFGH\"}}}'"
                                    },
                                    "  2 : Confirm that the delete operation was successful. In the Items returned pane of the DynamoDB console       Explore items page, verify that the item with id 5678EFGH is no longer in the table."
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources (optional)",
                                "content": [
                                    "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the API",
                                    "  1 : Open the APIs page of the API Gateway console.",
                                    "  2 : Select the API you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Choose Delete.",
                                    "To delete the DynamoDB table",
                                    "  1 : Open the Tables page of the DynamoDB console.",
                                    "  2 : Select the table you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter delete in the text box.",
                                    "  5 : Choose Delete table."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Errors",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-errors.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "API Gateway treats all invocation and function errors as internal errors. If the Lambda API rejects the invocation        request, API Gateway returns a 500 error code. If the function runs but returns an error, or returns a response in the        wrong format, API Gateway returns a 502. In both cases, the body of the response from API Gateway is {\"message\":            \"Internal server error\"}.",
                            "Note",
                            "API Gateway does not retry any Lambda invocations. If Lambda returns an error, API Gateway returns an error response to            the client.",
                            "The following example shows an X-Ray trace map for a request that resulted in a function error and a 502 from        API Gateway. The client receives the generic error message.",
                            "To customize the error response, you must catch errors in your code and format a response in the required        format.",
                            "Example index.mjs – Error            formatting",
                            {
                                "code_example": "var formatError = function(error){\n  var response = {\n    \"statusCode\": error.statusCode,\n    \"headers\": {\n      \"Content-Type\": \"text/plain\",\n      \"x-amzn-ErrorType\": error.code\n    },\n    \"isBase64Encoded\": false,\n    \"body\": error.code + \": \" + error.message\n  }\n  return response\n}"
                            },
                            "API Gateway converts this response into an HTTP error with a custom status code and body. In the trace map, the        function node is green because it handled the error."
                        ]
                    },
                    {
                        "title": "Select an HTTP invoke method for Lambda",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/apig-http-invoke-decision.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Many common use cases for Lambda involve invoking your function using an HTTP request. For example, you might want to invoke a function     directly from a web browser, or to use a tool like curl or Postman.",
                            "The following sections explain what your choices are for invoking Lambda through HTTP and provide information to help you make the right decision for your particular use case.",
                            {
                                "sub_header": "What are your choices when selecting an HTTP invoke method?",
                                "content": [
                                    "Lambda offers two main methods to invoke a function using an HTTP request - function URLs and       API Gateway. The key differences between these two options are as follows:",
                                    "  1.Lambda function URLs :  provide a simple, direct HTTP endpoint for a Lambda function. They are optimized for         simplicity and cost-effectiveness and provide the fastest path to expose a Lambda function via HTTP.",
                                    "  2.API Gateway :  is a more advanced service for building fully-featured APIs.  is optimized for building and managing           productions APIs at scale and provides comprehensive tools for security, monitoring, and traffic management."
                                ]
                            },
                            {
                                "sub_header": "Recommendations if you already know your requirements",
                                "content": [
                                    "If you're already clear on your requirements, here are our basic recommendations:",
                                    "We recommend function URLs for simple applications or prototyping where       you only need basic authentication methods and request/response handling and where you want to keep costs and complexity to a minimum.",
                                    "API Gateway is a better choice for production applications at scale or for cases where you need more advanced features       like OpenAPI Description support, a choice of authentication options, custom domain names, or rich request/response       handling including throttling, caching, and request/response transformation."
                                ]
                            },
                            {
                                "sub_header": "What to consider when selecting a method to invoke your Lambda function",
                                "content": [
                                    "When selecting between function URLs and API Gateway, you need to consider the following factors:",
                                    "  1.Your authentication needs, such as whether you require OAuth or Amazon Cognito to authenticate users",
                                    "  2.Your scaling requirements and the complexity of the API you want to implement",
                                    "  3.Whether you need advanced features such as request validation and request/response formatting",
                                    "  4.Your monitoring requirements",
                                    "  5.Your cost goals",
                                    "By understanding these factors, you can select the option that best balances your security, complexity, and cost requirements.",
                                    "The following information summarizes the main differences between the two options.",
                                    "  1.Function URLs :  provide basic authentication options through AWS Identity and Access Management (IAM). You can configure your endpoints to be               either public (no authentication) or to require IAM authentication. With IAM authentication, you can use standard AWS credentials or IAM roles to               control access. While straightforward to set up, this approach provides limited options compared with other authenticaton methods.",
                                    "  2.API Gateway :  provides access to a more comprehensive range of authentication options. As well as IAM authentication,               you can use Lambda authorizers               (custom authentication logic), Amazon Cognito user pools, and OAuth2.0               flows. This flexibility allows you to implement complex authentication schemes, including third-party authentication providers, token-based authentication, and multi-factor               authentication.",
                                    "Authentication",
                                    "  1.Function URLs :  provide basic authentication options through AWS Identity and Access Management (IAM). You can configure your endpoints to be               either public (no authentication) or to require IAM authentication. With IAM authentication, you can use standard AWS credentials or IAM roles to               control access. While straightforward to set up, this approach provides limited options compared with other authenticaton methods.",
                                    "  2.API Gateway :  provides access to a more comprehensive range of authentication options. As well as IAM authentication,               you can use Lambda authorizers               (custom authentication logic), Amazon Cognito user pools, and OAuth2.0               flows. This flexibility allows you to implement complex authentication schemes, including third-party authentication providers, token-based authentication, and multi-factor               authentication.",
                                    "  1.Function URLs :  provide basic HTTP request and response handling. They support standard HTTP methods and               include built-in cross-origin resource sharing (CORS) support. While they can handle JSON payloads and query parameters naturally, they don't offer request               transformation or validation capabilities. Response handling is similarly straightforward – the client receives the response from your Lambda function exactly as               Lambda returns it.",
                                    "  2.API Gateway :  provides sophisticated request and response handling capabilities. You can define request validators, transform               requests and responses using mapping templates, set up request/response headers, and implement response caching.  also supports binary payloads and custom domain               names and can modify responses before they reach the client. You can set up models for request/response validation and transformation using JSON Schema.",
                                    "Request/response handling",
                                    "  1.Function URLs :  provide basic HTTP request and response handling. They support standard HTTP methods and               include built-in cross-origin resource sharing (CORS) support. While they can handle JSON payloads and query parameters naturally, they don't offer request               transformation or validation capabilities. Response handling is similarly straightforward – the client receives the response from your Lambda function exactly as               Lambda returns it.",
                                    "  2.API Gateway :  provides sophisticated request and response handling capabilities. You can define request validators, transform               requests and responses using mapping templates, set up request/response headers, and implement response caching.  also supports binary payloads and custom domain               names and can modify responses before they reach the client. You can set up models for request/response validation and transformation using JSON Schema.",
                                    "  1.Function URLs :  scale directly with your Lambda function's concurrency limits and handle traffic spikes by scaling your function             up to its maximum configured concurrency limit. Once that limit is reached, Lambda responds to additional requests with HTTP 429 responses. There's no built-in queuing             mechanism, so handling scaling is entirely dependent on your Lambda function's configuration. By default, Lambda functions have a limit of 1,000 concurrent executions             per AWS Region.",
                                    "  2.API Gateway :  provides additional scaling capabilities on top of Lambda's own scaling. It includes built-in request queuing and throttling             controls, allowing you to manage traffic spikes more gracefully.  can handle up to 10,000 requests per second per region by default, with a burst capacity of             5,000 requests per second. It also provides tools to throttle requests at different levels (API, stage, or method) to protect your backend.",
                                    "Scaling",
                                    "  1.Function URLs :  scale directly with your Lambda function's concurrency limits and handle traffic spikes by scaling your function             up to its maximum configured concurrency limit. Once that limit is reached, Lambda responds to additional requests with HTTP 429 responses. There's no built-in queuing             mechanism, so handling scaling is entirely dependent on your Lambda function's configuration. By default, Lambda functions have a limit of 1,000 concurrent executions             per AWS Region.",
                                    "  2.API Gateway :  provides additional scaling capabilities on top of Lambda's own scaling. It includes built-in request queuing and throttling             controls, allowing you to manage traffic spikes more gracefully.  can handle up to 10,000 requests per second per region by default, with a burst capacity of             5,000 requests per second. It also provides tools to throttle requests at different levels (API, stage, or method) to protect your backend.",
                                    "  1.Function URLs :  offer basic monitoring through Amazon CloudWatch metrics, including request count, latency, and error rates. You get               access to standard Lambda metrics and logs, which show the raw requests coming into your function. While this provides essential operational visibility, the metrics               are focused mainly on function execution.",
                                    "  2.API Gateway :  provides comprehensive monitoring capabilities including detailed metrics, logging, and tracing options. You can               monitor API calls, latency, error rates, and cache hit/miss rates through CloudWatch.  also integrates with AWS X-Ray for distributed tracing and provides               customizable logging formats.",
                                    "Monitoring",
                                    "  1.Function URLs :  offer basic monitoring through Amazon CloudWatch metrics, including request count, latency, and error rates. You get               access to standard Lambda metrics and logs, which show the raw requests coming into your function. While this provides essential operational visibility, the metrics               are focused mainly on function execution.",
                                    "  2.API Gateway :  provides comprehensive monitoring capabilities including detailed metrics, logging, and tracing options. You can               monitor API calls, latency, error rates, and cache hit/miss rates through CloudWatch.  also integrates with AWS X-Ray for distributed tracing and provides               customizable logging formats.",
                                    "  1.Function URLs :  follow the standard Lambda pricing model – you only pay for function invocations and compute time. There are               no additional charges for the URL endpoint itself. This makes it a cost-effective choice for simple APIs or low-traffic applications if you don't need the additional               features of API Gateway.",
                                    "  2.API Gateway :  offers a free tier that includes one million API calls               received for REST APIs and one million API calls received for HTTP APIs. After this,  charges for API calls, data transfer, and caching (if enabled). Refer to the                pricing page to understand the costs for your own use case.",
                                    "Cost",
                                    "  1.Function URLs :  follow the standard Lambda pricing model – you only pay for function invocations and compute time. There are               no additional charges for the URL endpoint itself. This makes it a cost-effective choice for simple APIs or low-traffic applications if you don't need the additional               features of API Gateway.",
                                    "  2.API Gateway :  offers a free tier that includes one million API calls               received for REST APIs and one million API calls received for HTTP APIs. After this,  charges for API calls, data transfer, and caching (if enabled). Refer to the                pricing page to understand the costs for your own use case.",
                                    "  1.Function URLs :  are designed for simplicity and direct Lambda integration. They support both HTTP and HTTPS endpoints, offer               built-in CORS support, and provide dual-stack (IPv4 and IPv6) endpoints. While they lack advanced features, they excel in scenarios where you need a quick,               straightforward way to expose Lambda functions via HTTP.",
                                    "  2.API Gateway :  includes numerous additional features such as API versioning, stage management, API keys for usage plans, API documentation               through Swagger/OpenAPI, WebSocket APIs, private APIs within a VPC, and WAF integration for additional security. It also supports canary deployments, mock integrations               for testing, and integration with other AWS services beyond Lambda.",
                                    "Other features",
                                    "  1.Function URLs :  are designed for simplicity and direct Lambda integration. They support both HTTP and HTTPS endpoints, offer               built-in CORS support, and provide dual-stack (IPv4 and IPv6) endpoints. While they lack advanced features, they excel in scenarios where you need a quick,               straightforward way to expose Lambda functions via HTTP.",
                                    "  2.API Gateway :  includes numerous additional features such as API versioning, stage management, API keys for usage plans, API documentation               through Swagger/OpenAPI, WebSocket APIs, private APIs within a VPC, and WAF integration for additional security. It also supports canary deployments, mock integrations               for testing, and integration with other AWS services beyond Lambda."
                                ]
                            },
                            {
                                "sub_header": "Select a method to invoke your Lambda function",
                                "content": [
                                    "Now that you've read about the criteria for selecting between Lambda function URLs and API Gateway and the key differences between them, you can select the option     that best meets your needs and use the following resources to help you get started using it.",
                                    "  1.Function URLs : \n\nGet started with function URLs with the following resources\n\nFollow the tutorial Creating a Lambda function with a function URL\n\nLearn more about function URLs in the Creating and managing Lambda function URLs chapter of this guide\n\nTry the in-console guided tutorial Create a simple web app by doing the following:\n\n\nOpen the functions page of the Lambda console.\n\nOpen the help panel by choosing the icon in the top right corner of the screen.\n\n\n\n\nSelect Tutorials.\n\nIn Create a simple web app, choose Start tutorial.\n\n",
                                    "  2.API Gateway : \n\nGet started with Lambda and API Gateway with the following resources\n\nFollow the tutorial Using Lambda with API Gateway to create a REST API integrated with a backend \n              Lambda function.\n\nLearn more about the different kinds of API offered by API Gateway in the following sections of the Amazon API Gateway Developer Guide:\n\n\nAPI Gateway REST APIs\n\nAPI Gateway HTTP APIs\n\nAPI Gateway WebSocket APIs\n\n\nTry one or more of the examples in the Tutorials and workshops \n                section of the Amazon API Gateway Developer Guide.\n\n",
                                    "anchor",
                                    "anchor",
                                    "Get started with function URLs with the following resources",
                                    "  1.Follow the tutorial Creating a Lambda function with a function URL",
                                    "  2.Learn more about function URLs in the Creating and managing Lambda function URLs chapter of this guide",
                                    "  3.Create a simple web app : Try the in-console guided tutorial  by doing the following:",
                                    "  1 : Open the functions page of the Lambda console.",
                                    "  2 : Open the help panel by choosing the icon in the top right corner of the screen.",
                                    "  3 : Select Tutorials.",
                                    "  4 : In Create a simple web app, choose Start tutorial."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "You can create a web API with an HTTP endpoint for your Lambda function by using Amazon API Gateway. API Gateway provides tools    for creating and documenting web APIs that route HTTP requests to Lambda functions. You can secure access to your API    with authentication and authorization controls. Your APIs can serve traffic over the internet or can be accessible    only within your VPC.",
                    "Resources in your API define one or more methods, such as GET or POST. Methods have an integration that routes    requests to a Lambda function or another integration type. You can define each resource and method individually, or    use special resource and method types to match all requests that fit a pattern. A proxy      resource catches all paths beneath a resource. The ANY method catches all HTTP    methods.",
                    "Sections",
                    {
                        "sub_header": "Choosing an API type",
                        "content": [
                            "API Gateway supports three types of APIs that invoke Lambda functions:",
                            "  1.HTTP API: A lightweight, low-latency RESTful API.",
                            "  2.REST API: A customizable, feature-rich RESTful API.",
                            "  3.WebSocket API: A web API that maintains persistent connections          with clients for full-duplex communication.",
                            "HTTP APIs and REST APIs are both RESTful APIs that process HTTP requests and return responses. HTTP APIs are      newer and are built with the API Gateway version 2 API. The following features are new for HTTP APIs:",
                            "HTTP API features",
                            "  1.Automatic deployments :  – When you modify routes or integrations,          changes deploy automatically to stages that have automatic deployment enabled.",
                            "  2.Default stage :  – You can create a default stage          ($default) to serve requests at the root path of your API's URL. For named stages, you must          include the stage name at the beginning of the path.",
                            "  3.CORS configuration :  – You can configure your API to add CORS          headers to outgoing responses, instead of adding them manually in your function code.",
                            "REST APIs are the classic RESTful APIs that API Gateway has supported since launch. REST APIs currently have more      customization, integration, and management features.",
                            "REST API features",
                            "  1.Integration types :  – REST APIs support custom Lambda integrations.          With a custom integration, you can send just the body of the request to the function, or apply a transform          template to the request body before sending it to the function.",
                            "  2.Access control :  – REST APIs support more options for authentication          and authorization.",
                            "  3.Monitoring and tracing :  – REST APIs support AWS X-Ray tracing and          additional logging options.",
                            "For a detailed comparison, see Choose between HTTP APIs and REST APIs in the API Gateway Developer Guide.",
                            "WebSocket APIs also use the API Gateway version 2 API and support a similar feature set. Use a WebSocket API for      applications that benefit from a persistent connection between the client and API. WebSocket APIs provide      full-duplex communication, which means that both the client and the API can send messages continuously without      waiting for a response.",
                            "HTTP APIs support a simplified event format (version 2.0). For an example of an event from an HTTP      API, see Create AWS Lambda proxy integrations for HTTP APIs in API Gateway.",
                            "For more information, see Create AWS Lambda proxy integrations for HTTP APIs in API Gateway."
                        ]
                    },
                    {
                        "sub_header": "Adding an endpoint to your Lambda function",
                        "content": [
                            "To add a public endpoint to your Lambda function",
                            "  1 : Open the Functions page of the Lambda console.",
                            "  2 : Choose a function.",
                            "  3 : Under Function overview, choose Add trigger.",
                            "  4 : Select API Gateway.",
                            "  5 : Choose Create an API or Use an existing API.New API: For API type, choose HTTP API. For more information, see Choosing an API type.Existing API: Select the API from the dropdown list or enter the API ID (for example, r3pmxmplak).",
                            "  6 : For Security, choose Open.",
                            "  7 : Choose Add."
                        ]
                    },
                    {
                        "sub_header": "Proxy integration",
                        "content": [
                            "API Gateway APIs are comprised of stages, resources, methods, and integrations. The stage and resource determine the      path of the endpoint:",
                            "API path format",
                            "  1./prod/ – The prod stage and root resource.",
                            "  2./prod/user – The prod stage and user resource.",
                            "  3./dev/{proxy+} – Any route in the dev stage.",
                            "  4./ – (HTTP APIs) The default stage and root resource.",
                            "A Lambda integration maps a path and HTTP method combination to a Lambda function. You can configure API Gateway to pass      the body of the HTTP request as-is (custom integration), or to encapsulate the request body in a document that      includes all of the request information including headers, resource, path, and method.",
                            "For more information, see Lambda proxy integrations in API Gateway."
                        ]
                    },
                    {
                        "sub_header": "Event format",
                        "content": [
                            "Amazon API Gateway invokes your function synchronously with an event that contains      a JSON representation of the HTTP request. For a custom integration, the event is the body of the request. For a      proxy integration, the event has a defined structure. For an example of a proxy event from an API Gateway REST      API, see Input format of a Lambda function for proxy integration in the API Gateway Developer Guide."
                        ]
                    },
                    {
                        "sub_header": "Response format",
                        "content": [
                            "API Gateway waits for a response from your function and relays the result to the caller. For a custom integration, you      define an integration response and a method response to convert the output from the function to an HTTP response.      For a proxy integration, the function must respond with a representation of the response in a specific      format.",
                            "The following example shows a response object from a Node.js function. The response object represents a      successful HTTP response that contains a JSON document.",
                            "Example index.mjs – Proxy integration response object (Node.js)",
                            {
                                "code_example": "var response = {\n      \"statusCode\": 200,\n      \"headers\": {\n        \"Content-Type\": \"application/json\"\n      },\n      \"isBase64Encoded\": false,\n      \"multiValueHeaders\": { \n        \"X-Custom-Header\": [\"My value\", \"My other value\"],\n      },\n      \"body\": \"{\\n  \\\"TotalCodeSize\\\": 104330022,\\n  \\\"FunctionCount\\\": 26\\n}\"\n    }"
                            },
                            "The Lambda runtime serializes the response object into JSON and sends it to the API. The API parses the response      and uses it to create an HTTP response, which it then sends to the client that made the original request.",
                            "Example HTTP response",
                            {
                                "code_example": "< HTTP/1.1 200 OK\n  < Content-Type: application/json\n  < Content-Length: 55\n  < Connection: keep-alive\n  < x-amzn-RequestId: 32998fea-xmpl-4268-8c72-16138d629356\n  < X-Custom-Header: My value\n  < X-Custom-Header: My other value\n  < X-Amzn-Trace-Id: Root=1-5e6aa925-ccecxmplbae116148e52f036\n  <\n  {\n    \"TotalCodeSize\": 104330022,\n    \"FunctionCount\": 26\n  }"
                            }
                        ]
                    },
                    {
                        "sub_header": "Permissions",
                        "content": [
                            "Amazon API Gateway gets permission to invoke your function from the function's resource-based policy. You can grant invoke permission to an      entire API, or grant limited access to a stage, resource, or method.",
                            "When you add an API to your function by using the Lambda console, using the API Gateway console, or in an AWS SAM      template, the function's resource-based policy is updated automatically. The following is an example function policy.",
                            "Example function policy",
                            {
                                "code_example": "{\n  \"Version\": \"2012-10-17\",\n  \"Id\": \"default\",\n  \"Statement\": [\n    {\n      \"Sid\": \"nodejs-apig-functiongetEndpointPermissionProd-BWDBXMPLXE2F\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"Service\": \"apigateway.amazonaws.com\"\n      },\n      \"Action\": \"lambda:InvokeFunction\",\n      \"Resource\": \"arn:aws:lambda:us-east-2:111122223333:function:nodejs-apig-function-1G3MXMPLXVXYI\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:SourceAccount\": \"111122223333\"\n        },\n        \"ArnLike\": {\n          \"aws:SourceArn\": \"arn:aws:execute-api:us-east-2:111122223333:ktyvxmpls1/*/GET/\"\n        }\n      }\n    }\n  ]\n}"
                            },
                            "You can manage function policy permissions manually with the following API operations:",
                            "  1.AddPermission",
                            "  2.RemovePermission",
                            "  3.GetPolicy",
                            "To grant invocation permission to an existing API, use the add-permission command. Example:",
                            "aws lambda add-permission \\  --function-name my-function \\  --statement-id apigateway-get --action lambda:InvokeFunction \\  --principal apigateway.amazonaws.com \\  --source-arn \"arn:aws:execute-api:us-east-2:123456789012:mnh1xmpli7/default/GET/\"",
                            "You should see the following output:",
                            "{    \"Statement\": \"{\\\"Sid\\\":\\\"apigateway-test-2\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"apigateway.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-east-2:123456789012:function:my-function\\\",\\\"Condition\\\":{\\\"ArnLike\\\":{\\\"AWS:SourceArn\\\":\\\"arn:aws:execute-api:us-east-2:123456789012:mnh1xmpli7/default/GET\\\"}}}\"}",
                            "Note",
                            "If your function and API are in different AWS Regions, the Region identifier in the source ARN must match the        Region of the function, not the Region of the API. When API Gateway invokes a function, it uses a resource ARN that is        based on the ARN of the API, but modified to match the function's Region.",
                            "The source ARN in this example grants permission to an integration on the GET method of the root resource in      the default stage of an API, with ID mnh1xmpli7. You can use an asterisk in the source ARN to grant      permissions to multiple stages, methods, or resources.",
                            "Resource patterns",
                            "  1.mnh1xmpli7/*/GET/* – GET method on all resources in all stages.",
                            "  2.mnh1xmpli7/prod/ANY/user – ANY method on the user resource in the            prod stage.",
                            "  3.mnh1xmpli7/*/*/* – Any method on all resources in all stages.",
                            "For details on viewing the policy and removing statements, see Working with resource-based IAM policies in Lambda."
                        ]
                    },
                    {
                        "sub_header": "Sample application",
                        "content": [
                            "The API Gateway with Node.js sample app includes a function with an AWS SAM      template that creates a REST API that has AWS X-Ray tracing enabled. It also includes scripts for deploying,      invoking the function, testing the API, and cleanup."
                        ]
                    }
                ]
            },
            {
                "title": "Infrastructure Composer",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-appcomposer.html",
                "source": "aws_lamda",
                "parent_content": [
                    "AWS Infrastructure Composer is a visual builder for desiging modern applications on AWS. You design your application architecture by dragging, grouping, and   connecting AWS services in a visual canvas. Infrastructure Composer creates infrastructure as code (IaC) templates from your design that you can deploy using     AWS SAM or     AWS CloudFormation.",
                    {
                        "sub_header": "Exporting a Lambda function to Infrastructure Composer",
                        "content": [
                            "You can get started using Infrastructure Composer by creating a new project based on the configuration of an existing Lambda function using the Lambda console.      To export your function's configuration and code to Infrastructure Composer to create a new project, do the following:",
                            "  1 : Open the Functions page of the Lambda console.",
                            "  2 : Select the function you want to use as a basis for your Infrastructure Composer project.",
                            "  3 : In the Function overview pane, choose Export to Infrastructure Composer.To export your function's configuration and code to Infrastructure Composer, Lambda creates an Amazon S3 bucket in your account to temporarily store this data.",
                            "  4 : In the dialog box, choose Confirm and create project to accept the default name for this bucket and export your function's          configuration and code to Infrastructure Composer.",
                            "  5 : (Optional) To choose another name for the Amazon S3 bucket that Lambda creates, enter a new name and choose Confirm and create project.          Amazon S3 bucket names must be globally unique and follow the bucket naming rules.",
                            "  6 : To save your project and function files in Infrastructure Composer, activate local sync mode.",
                            "Note",
                            "If you've used the Export to Application Composer feature before and created an Amazon S3 bucket using the default name,        Lambda can re-use this bucket if it still exists. Accept the default bucket name in the dialog box to re-use the existing bucket.",
                            {
                                "sub_header": "Amazon S3 transfer bucket configuration",
                                "content": [
                                    "The Amazon S3 bucket that Lambda creates to transfer your function's configuration automatically encrypts objects using the AES 256 encryption        standard. Lambda also configures the bucket to use the bucket owner condition        to ensure that only your AWS account is able to add objects to the bucket.",
                                    "Lambda configures the bucket to automatically delete objects 10 days after they are uploaded. However, Lambda doesn't        automaticaly delete the bucket itself. To delete the bucket from your AWS account, follow the instructions in Deleting a bucket.        The default bucket name uses the prefix lambdasam, a 10-digit alphanumeric string, and the AWS Region you created your function in:",
                                    "lambdasam-06f22da95b-us-east-1",
                                    "To avoid additional charges being added to your AWS account, we recommend that you delete the Amazon S3 bucket as soon as you have finished exporting        your function to Infrastructure Composer.",
                                    "Standard Amazon S3 pricing applies."
                                ]
                            },
                            {
                                "sub_header": "Required permissions",
                                "content": [
                                    "To use the Lambda integration with Infrastructure Composer feature, you need certain permissions to download an AWS SAM template and to write your      function's configuration to Amazon S3.",
                                    "To download an AWS SAM template, you must have permission to use the following API actions:",
                                    "  1.GetPolicy",
                                    "  2.iam:GetPolicyVersion",
                                    "  3.iam:GetRole",
                                    "  4.iam:GetRolePolicy",
                                    "  5.iam:ListAttachedRolePolicies",
                                    "  6.iam:ListRolePolicies",
                                    "  7.iam:ListRoles",
                                    "You can grant permission to use all of these actions by adding the AWSLambda_ReadOnlyAccess        AWS managed policy to your IAM user role.",
                                    "For Lambda to write your function's configuration to Amazon S3, you must have permission to use the following API actions:",
                                    "  1.S3:PutObject",
                                    "  2.S3:CreateBucket",
                                    "  3.S3:PutBucketEncryption",
                                    "  4.S3:PutBucketLifecycleConfiguration",
                                    "If you are unable to export your function's configuration to Infrastructure Composer, check that your account has the required permissions for these        operations. If you have the required permissions, but still cannot export your function's configuration, check for any        resource-based policies that might limit access to Amazon S3."
                                ]
                            }
                        ]
                    },
                    {
                        "sub_header": "Other resources",
                        "content": [
                            "For a more detailed tutorial on how to design a serverless application in Infrastructure Composer based on an existing Lambda function, see       Using Lambda with infrastructure as code (IaC).",
                            "To use Infrastructure Composer and AWS SAM to design and deploy a complete serverless application using Lambda, you can also       follow the AWS Infrastructure Composer tutorial in the       AWS Serverless Patterns Workshop."
                        ]
                    }
                ]
            },
            {
                "title": "CloudFormation",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-cloudformation.html",
                "source": "aws_lamda",
                "parent_content": [
                    "In an AWS CloudFormation template, you can specify a Lambda function as the target of a custom resource. Use custom    resources to process parameters, retrieve configuration values, or call other AWS services during stack lifecycle    events.",
                    "The following example invokes a function that's defined elsewhere in the template.",
                    "Example  – Custom resource definition",
                    {
                        "code_example": "Resources:\n  primerinvoke:\n    Type: AWS::CloudFormation::CustomResource\n    Version: \"1.0\"\n    Properties:\n      ServiceToken: !GetAtt primer.Arn\n      FunctionName: !Ref randomerror"
                    },
                    "The service token is the Amazon Resource Name (ARN) of the function that AWS CloudFormation invokes when you create, update,    or delete the stack. You can also include additional properties like FunctionName, which AWS CloudFormation passes    to your function as is.",
                    "AWS CloudFormation invokes your Lambda function asynchronously with an event that    includes a callback URL.",
                    "Example  – AWS CloudFormation message event",
                    {
                        "code_example": "{\n    \"RequestType\": \"Create\",\n    \"ServiceToken\": \"arn:aws:lambda:us-east-1:123456789012:function:lambda-error-processor-primer-14ROR2T3JKU66\",\n    \"ResponseURL\": \"https://cloudformation-custom-resource-response-useast1.s3-us-east-1.amazonaws.com/arn%3Aaws%3Acloudformation%3Aus-east-1%3A123456789012%3Astack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456%7Cprimerinvoke%7C5d478078-13e9-baf0-464a-7ef285ecc786?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&Expires=1555451971&Signature=28UijZePE5I4dvukKQqM%2F9Rf1o4%3D\",\n    \"StackId\": \"arn:aws:cloudformation:us-east-1:123456789012:stack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456\",\n    \"RequestId\": \"5d478078-13e9-baf0-464a-7ef285ecc786\",\n    \"LogicalResourceId\": \"primerinvoke\",\n    \"ResourceType\": \"AWS::CloudFormation::CustomResource\",\n    \"ResourceProperties\": {\n        \"ServiceToken\": \"arn:aws:lambda:us-east-1:123456789012:function:lambda-error-processor-primer-14ROR2T3JKU66\",\n        \"FunctionName\": \"lambda-error-processor-randomerror-ZWUC391MQAJK\"\n    }\n}"
                    },
                    "The function is responsible for returning a response to the callback URL that indicates success or failure. For    the full response syntax, see Custom resource response      objects.",
                    "Example  – AWS CloudFormation custom resource response",
                    {
                        "code_example": "{\n    \"Status\": \"SUCCESS\",\n    \"PhysicalResourceId\": \"2019/04/18/[$LATEST]b3d1bfc65f19ec610654e4d9b9de47a0\",\n    \"StackId\": \"arn:aws:cloudformation:us-east-1:123456789012:stack/lambda-error-processor/1134083a-2608-1e91-9897-022501a2c456\",\n    \"RequestId\": \"5d478078-13e9-baf0-464a-7ef285ecc786\",\n    \"LogicalResourceId\": \"primerinvoke\"\n}"
                    },
                    "AWS CloudFormation provides a library called cfn-response that handles sending the response. If you define your    function within a template, you can require the library by name. AWS CloudFormation then adds the library to the deployment    package that it creates for the function.",
                    "If your function that a Custom Resource uses has an Elastic Network Interface attached to it,     add the following resources to the VPC policy where region is the Region the function is in without the dashes. For example,     us-east-1 is useast1. This will allow the Custom Resource to respond to the callback URL that sends a signal back to the AWS CloudFormation stack.",
                    "arn:aws:s3:::cloudformation-custom-resource-response-region\",\"arn:aws:s3:::cloudformation-custom-resource-response-region/*\",",
                    "The following example function invokes a second function. If the call succeeds, the function sends a success    response to AWS CloudFormation, and the stack update continues. The template uses the AWS::Serverless::Function resource type provided by    AWS Serverless Application Model.",
                    "Example  – Custom resource function",
                    {
                        "code_example": "Transform: 'AWS::Serverless-2016-10-31'\nResources:\n  primer:\n    Type: AWS::Serverless::Function\n    Properties:\n      Handler: index.handler\n      Runtime: nodejs16.x\n      InlineCode: |\n        var aws = require('aws-sdk');\n        var response = require('cfn-response');\n        exports.handler = function(event, context) {\n            // For Delete requests, immediately send a SUCCESS response.\n            if (event.RequestType == \"Delete\") {\n                response.send(event, context, \"SUCCESS\");\n                return;\n            }\n            var responseStatus = \"FAILED\";\n            var responseData = {};\n            var functionName = event.ResourceProperties.FunctionName\n            var lambda = new aws.Lambda();\n            lambda.invoke({ FunctionName: functionName }, function(err, invokeResult) {\n                if (err) {\n                    responseData = {Error: \"Invoke call failed\"};\n                    console.log(responseData.Error + \":\\n\", err);\n                }\n                else responseStatus = \"SUCCESS\";\n                response.send(event, context, responseStatus, responseData);\n            });\n        };\n      Description: Invoke a function to create a log stream.\n      MemorySize: 128\n      Timeout: 8\n      Role: !GetAtt role.Arn\n      Tracing: Active"
                    },
                    "If the function that the custom resource invokes isn't defined in a template, you can get the source code for      cfn-response from cfn-response module in the AWS CloudFormation User Guide.",
                    "For more information about custom resources, see Custom      resources in the AWS CloudFormation User Guide."
                ]
            },
            {
                "title": "Amazon DocumentDB",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb.html",
                "contents": [
                    {
                        "title": "Tutorial",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-documentdb-tutorial.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "    In this tutorial, you create a basic Lambda function that consumes events from an Amazon DocumentDB (with MongoDB compatibility) change stream.    To complete this tutorial, you will go through the following stages:  ",
                            "  1.Set up your Amazon DocumentDB cluster, connect to it, and activate change streams on it.",
                            "  2.Create your Lambda function, and configure your Amazon DocumentDB cluster as an event source for your function.",
                            "  3.Test the end-to-end setup by inserting items into your Amazon DocumentDB database.",
                            "Topics",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "Sign up for an AWS account",
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "Create a user with administrative access",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "If you have not yet installed the AWS Command Line Interface, follow the steps at  Installing or updating the latest version of the AWS CLI           to install it.",
                                    "The tutorial requires a command line terminal or shell to run commands. In Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.             To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.          ",
                                    "Install the AWS Command Line Interface",
                                    "If you have not yet installed the AWS Command Line Interface, follow the steps at  Installing or updating the latest version of the AWS CLI           to install it.",
                                    "The tutorial requires a command line terminal or shell to run commands. In Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.             To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.          "
                                ]
                            },
                            {
                                "sub_header": "Create the AWS Cloud9 environment",
                                "content": [
                                    "      Before creating the Lambda function, you need to create and configure your Amazon DocumentDB cluster. The steps to set up      your cluster in this tutorial is based on the procedure in      Get Started with Amazon DocumentDB.    ",
                                    "Note",
                                    "If you already have an Amazon DocumentDB cluster set up, ensure that you activate change streams and      create the necessary interface VPC endpoints. Then, you can skip directly to the      function creation steps.",
                                    "      First, create an AWS Cloud9 environment. You’ll use this environment throughout this tutorial to connect to and query your Amazon DocumentDB cluster.    ",
                                    "To create an AWS Cloud9 environment",
                                    "  1 : Open the AWS Cloud9 console and choose          Create environment.",
                                    "  2 : Create an environment with the following configuration:Under Details:Name: DocumentDBCloud9EnvironmentEnvironment type: New EC2 instanceUnder New EC2 instance:Instance type: t2.micro (1 GiB RAM + 1 vCPU)Platform: Amazon Linux 2Timeout: 30 minutesUnder Network settings:Connection: AWS Systems Manager (SSM)Expand the VPC settingsdropdown.Amazon Virtual Private Cloud (VPC):Choose your                  default VPC.Subnet: No preferenceKeep all other default settings.",
                                    "  3 : Choose Create. Provisioning your new AWS Cloud9 environment can take several minutes."
                                ]
                            },
                            {
                                "sub_header": "Create the Amazon EC2 security group",
                                "content": [
                                    "      Next, create an Amazon EC2 security group      with rules that allow traffic between your Amazon DocumentDB cluster and your AWS Cloud9 environment.    ",
                                    "To create an EC2 security group",
                                    "  1 : Open the EC2 console. Under          Network and Security, choose Security groups.",
                                    "  2 : Choose Create security group.",
                                    "  3 : Create a security group with the following configuration:Under Basic details:Security group name: DocDBTutorialDescription: Security group for traffic between AWS Cloud9 and Amazon DocumentDB.VPC: Choose your default VPC.Under Inbound rules, choose Add rule.              Create a rule with the following configuration:Type: Custom TCPPort range: 27017Source: CustomIn the search box next to Source, choose the security group for the AWS Cloud9 environment                  you created in the previous step. To see a list of available security groups, enter cloud9 in the search box.                  Choose the security group with the name aws-cloud9-<environment_name>.Keep all other default settings.",
                                    "  4 : Choose Create security group."
                                ]
                            },
                            {
                                "sub_header": "Create the Amazon DocumentDB cluster",
                                "content": [
                                    "      In this step, you’ll create an Amazon DocumentDB cluster using the security group from the previous step.    ",
                                    "To create an Amazon DocumentDB cluster",
                                    "  1 : Open the Amazon DocumentDB console.          Under Clusters, choose Create.",
                                    "  2 : Create a cluster with the following configuration:For Cluster type, choose Instance Based Cluster.Under Configuration:Engine version: 5.0.0Instance class: db.t3.medium (free trial eligible)Number of instances: 1Under Authentication:Enter the Usernameand Passwordneeded                  to connect to your cluster (same credentials as you used to create the secret in the previous step). In                  Confirm password, confirm your password.Toggle on Show advanced settings.Under Network settings:Virtual Private Cloud (VPC): Choose your                  default VPC.Subnet group: defaultVPC security groups: In addition to default (VPC),                  choose the DocDBTutorial (VPC) security group you created in the previous step.Keep all other default settings.",
                                    "  3 : Choose Create cluster. Provisioning your Amazon DocumentDB cluster can take several minutes."
                                ]
                            },
                            {
                                "sub_header": "Create the secret in Secrets Manager",
                                "content": [
                                    "      To access your Amazon DocumentDB cluster manually, you must provide username and password credentials. For Lambda to access your cluster,      you must provide a Secrets Manager secret that contains these same access credentials when setting up your event source mapping.      In this step, you’ll create this secret.    ",
                                    "To create the secret in Secrets Manager",
                                    "  1 : Open the Secrets Manager console and choose          Store a new secret.",
                                    "  2 : For Choose secret type, choose the following options:Under Basic details:Secret type: Credentials for your Amazon DocumentDB databaseUnder Credentials, enter the username and password you’ll use to access your Amazon DocumentDB cluster.Database: Choose your Amazon DocumentDB cluster.Choose Next.",
                                    "  3 : For Configure secret, choose the following options:Secret name– DocumentDBSecretChoose Next.",
                                    "  4 : Choose Next.",
                                    "  5 : Choose Store.",
                                    "  6 : Refresh the console to verify that you successfully stored the DocumentDBSecret secret.",
                                    "      Note down the Secret ARNof your secret. You’ll need it in a later step.    "
                                ]
                            },
                            {
                                "sub_header": "Install the mongo shell",
                                "content": [
                                    "      In this step, you’ll install the mongo shell in your AWS Cloud9 environment. The mongo shell is a command-line utility      that you use to connect to and query your Amazon DocumentDB cluster.    ",
                                    "To install the mongo shell on your AWS Cloud9 environment",
                                    "  1 : Open the AWS Cloud9 console. Next to the          DocumentDBCloud9Environment environment you created earlier, click on the Open          link under the AWS Cloud9 IDE column.",
                                    " 2 : In the terminal window, create the MongoDB repository file with the following command: ",
                                    {
                                        "code_example": "echo -e \"[mongodb-org-5.0] \\nname=MongoDB Repository\\nbaseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/5.0/x86_64/\\ngpgcheck=1 \\nenabled=1 \\ngpgkey=https://www.mongodb.org/static/pgp/server-5.0.asc\" | sudo tee /etc/yum.repos.d/mongodb-org-5.0.repo"
                                    },
                                    " 3 : Then, install the mongo shell with the following command: ",
                                    {
                                        "code_example": "sudo yum install -y mongodb-org-shell"
                                    },
                                    " 4 : To encrypt data in transit, download the public key for Amazon DocumentDB.          The following command downloads a file named global-bundle.pem: ",
                                    {
                                        "code_example": "wget https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Connect to the Amazon DocumentDB cluster",
                                "content": [
                                    "      You’re now ready to connect to your Amazon DocumentDB cluster using the mongo shell.    ",
                                    "To connect to your Amazon DocumentDB cluster",
                                    "  1 : Open the Amazon DocumentDB console. Under          Clusters, choose your cluster by choosing its cluster identifier.",
                                    "  2 : In the Connectivity & securitytab, under          Connect to this cluster with the mongo shell,          choose Copy.",
                                    "  3 : In your AWS Cloud9 environment, paste this command into the terminal. Replace <insertYourPassword>          with the correct password.",
                                    "After entering this command, if the command prompt becomes rs0:PRIMARY>, then you’re connected to your Amazon DocumentDB cluster."
                                ]
                            },
                            {
                                "sub_header": "Activate change streams",
                                "content": [
                                    "For this tutorial, you’ll track changes to the products collection of the docdbdemo database      in your Amazon DocumentDB cluster. You do this by activating change streams. First, create the docdbdemo database and test it by inserting a record.",
                                    "To create a new database within your cluster",
                                    "  1 : In your AWS Cloud9 environment, ensure that you’re still connected to your Amazon DocumentDB cluster.",
                                    " 2 : In the terminal window, use the following command to create a new database called docdbdemo: ",
                                    {
                                        "code_example": "use docdbdemo"
                                    },
                                    " 3 : Then, use the following command to insert a record into docdbdemo: You should see output that looks like this:WriteResult({ \"nInserted\" : 1 })",
                                    {
                                        "code_example": "db.products.insert({\"hello\":\"world\"})"
                                    },
                                    " 4 : Use the following command to list all databases: Ensure that your output contains the docdbdemo database:docdbdemo  0.000GB",
                                    {
                                        "code_example": "show dbs"
                                    },
                                    "      Next, activate change streams on the products collection of the docdbdemo database using the following command:    ",
                                    "db.adminCommand({modifyChangeStreams: 1,    database: \"docdbdemo\",    collection: \"products\",     enable: true});",
                                    "      You should see output that looks like this:    ",
                                    "{ \"ok\" : 1, \"operationTime\" : Timestamp(1680126165, 1) }"
                                ]
                            },
                            {
                                "sub_header": "Create interface VPC endpoints",
                                "content": [
                                    "      Next, create interface VPC endpoints      to ensure that Lambda and Secrets Manager (used later to store our cluster access credentials) can connect to your default VPC.     ",
                                    "To create interface VPC endpoints",
                                    "  1 : Open the VPC console. In the left menu, under Virtual private cloud,          choose Endpoints.",
                                    "  2 : Choose Create endpoint. Create an endpoint with the following configuration:For Name tag, enter lambda-default-vpc.For Service category, choose AWS services.For Services, enter lambda in the search box. Choose the service with format com.amazonaws.<region>.lambda.For VPC, choose your default VPC.For Subnets, check the boxes next to each availability zone. Choose the correct subnet ID for each availability zone.For IP address type, select IPv4.For Security groups, choose the default VPC security group (Group name of default), and the security group you created earlier (Group name of DocDBTutorial).Keep all other default settings.Choose Create endpoint.",
                                    "  3 : Again, choose Create endpoint. Create an endpoint with the following configuration:For Name tag, enter secretsmanager-default-vpc.For Service category, choose AWS services.For Services, enter secretsmanager in the search box. Choose the service with format com.amazonaws.<region>.secretsmanager.For VPC, choose your default VPC.For Subnets, check the boxes next to each availability zone. Choose the correct subnet ID for each availability zone.For IP address type, select IPv4.For Security groups, choose the default VPC security group (Group name of default), and the security group you created earlier (Group name of DocDBTutorial).Keep all other default settings.Choose Create endpoint.",
                                    "      This completes the cluster setup portion of this tutorial.    "
                                ]
                            },
                            {
                                "sub_header": "Create the execution role",
                                "content": [
                                    "      In the next set of steps, you’ll create your Lambda function. First, you need to create the execution role that gives      your function permission to access your cluster. You do this by creating an IAM policy first, then attaching this      policy to an IAM role.    ",
                                    "To create IAM policy",
                                    "  1 : Open the Policies page in the IAM console          and choose Create policy.",
                                    " 2 : Choose the JSONtab. In the following policy, replace the Secrets Manager resource ARN          in the final line of the statement with your secret ARN from earlier, and copy the policy into the editor. ",
                                    {
                                        "code_example": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"LambdaESMNetworkingAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"ec2:CreateNetworkInterface\",\n                \"ec2:DescribeNetworkInterfaces\",\n                \"ec2:DescribeVpcs\",\n                \"ec2:DeleteNetworkInterface\",\n                \"ec2:DescribeSubnets\",\n                \"ec2:DescribeSecurityGroups\",\n                \"kms:Decrypt\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Sid\": \"LambdaDocDBESMAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"rds:DescribeDBClusters\",\n                \"rds:DescribeDBClusterParameters\",\n                \"rds:DescribeDBSubnetGroups\"\n            ],\n            \"Resource\": \"*\"\n        },\n        {\n            \"Sid\": \"LambdaDocDBESMGetSecretValueAccess\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"secretsmanager:GetSecretValue\"\n            ],\n            \"Resource\": \"arn:aws:secretsmanager:us-east-1:123456789012:secret:DocumentDBSecret\"\n        }\n    ]\n}"
                                    },
                                    "  3 : Choose Next: Tags, then choose Next: Review.",
                                    "  4 : For Name, enter AWSDocumentDBLambdaPolicy.",
                                    "  5 : Choose Create policy.",
                                    "To create the IAM role",
                                    "  1 : Open the Roles page in the IAM console and choose          Create role.",
                                    "  2 : For Select trusted entity, choose the following options:Trusted entity type– AWS serviceUse case– LambdaChoose Next.",
                                    "  3 : For Add permissions, choose the AWSDocumentDBLambdaPolicy policy you just created,          as well as the AWSLambdaBasicExecutionRole to give your function permissions to write to Amazon CloudWatch Logs.",
                                    "  4 : Choose Next.",
                                    "  5 : For Role name, enter AWSDocumentDBLambdaExecutionRole.",
                                    "  6 : Choose Create role."
                                ]
                            },
                            {
                                "sub_header": "Create the Lambda function",
                                "content": [
                                    "      The following example code receives an Amazon DocumentDB event input and processes the message that it contains.    ",
                                    "  1..NET : using Amazon.Lambda.Core;\nusing System.Text.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Text.Json.Serialization;\n//Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace LambdaDocDb;\n\npublic class Function\n{\n    \n     /// <summary>\n    /// Lambda function entry point to process Amazon DocumentDB events.\n    /// </summary>\n    /// <param name=\"event\">The Amazon DocumentDB event.</param>\n    /// <param name=\"context\">The Lambda context object.</param>\n    /// <returns>A string to indicate successful processing.</returns>\n    public string FunctionHandler(Event evnt, ILambdaContext context)\n    {\n        \n        foreach (var record in evnt.Events)\n        {\n            ProcessDocumentDBEvent(record, context);\n        }\n\n        return \"OK\";\n    }\n\n     private void ProcessDocumentDBEvent(DocumentDBEventRecord record, ILambdaContext context)\n    {\n        \n        var eventData = record.Event;\n        var operationType = eventData.OperationType;\n        var databaseName = eventData.Ns.Db;\n        var collectionName = eventData.Ns.Coll;\n        var fullDocument = JsonSerializer.Serialize(eventData.FullDocument, new JsonSerializerOptions { WriteIndented = true });\n\n        context.Logger.LogLine($\"Operation type: {operationType}\");\n        context.Logger.LogLine($\"Database: {databaseName}\");\n        context.Logger.LogLine($\"Collection: {collectionName}\");\n        context.Logger.LogLine($\"Full document:\\n{fullDocument}\");\n    }\n\n\n\n    public class Event\n    {\n        [JsonPropertyName(\"eventSourceArn\")]\n        public string EventSourceArn { get; set; }\n\n        [JsonPropertyName(\"events\")]\n        public List<DocumentDBEventRecord> Events { get; set; }\n\n        [JsonPropertyName(\"eventSource\")]\n        public string EventSource { get; set; }\n    }\n\n    public class DocumentDBEventRecord\n    {\n        [JsonPropertyName(\"event\")]\n        public EventData Event { get; set; }\n    }\n\n    public class EventData\n    {\n        [JsonPropertyName(\"_id\")]\n        public IdData Id { get; set; }\n\n        [JsonPropertyName(\"clusterTime\")]\n        public ClusterTime ClusterTime { get; set; }\n\n        [JsonPropertyName(\"documentKey\")]\n        public DocumentKey DocumentKey { get; set; }\n\n        [JsonPropertyName(\"fullDocument\")]\n        public Dictionary<string, object> FullDocument { get; set; }\n\n        [JsonPropertyName(\"ns\")]\n        public Namespace Ns { get; set; }\n\n        [JsonPropertyName(\"operationType\")]\n        public string OperationType { get; set; }\n    }\n\n    public class IdData\n    {\n        [JsonPropertyName(\"_data\")]\n        public string Data { get; set; }\n    }\n\n    public class ClusterTime\n    {\n        [JsonPropertyName(\"$timestamp\")]\n        public Timestamp Timestamp { get; set; }\n    }\n\n    public class Timestamp\n    {\n        [JsonPropertyName(\"t\")]\n        public long T { get; set; }\n\n        [JsonPropertyName(\"i\")]\n        public int I { get; set; }\n    }\n\n    public class DocumentKey\n    {\n        [JsonPropertyName(\"_id\")]\n        public Id Id { get; set; }\n    }\n\n    public class Id\n    {\n        [JsonPropertyName(\"$oid\")]\n        public string Oid { get; set; }\n    }\n\n    public class Namespace\n    {\n        [JsonPropertyName(\"db\")]\n        public string Db { get; set; }\n\n        [JsonPropertyName(\"coll\")]\n        public string Coll { get; set; }\n    }\n}\n\n",
                                    "  2.AWS SDK for .NET : using Amazon.Lambda.Core;\nusing System.Text.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Text.Json.Serialization;\n//Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace LambdaDocDb;\n\npublic class Function\n{\n    \n     /// <summary>\n    /// Lambda function entry point to process Amazon DocumentDB events.\n    /// </summary>\n    /// <param name=\"event\">The Amazon DocumentDB event.</param>\n    /// <param name=\"context\">The Lambda context object.</param>\n    /// <returns>A string to indicate successful processing.</returns>\n    public string FunctionHandler(Event evnt, ILambdaContext context)\n    {\n        \n        foreach (var record in evnt.Events)\n        {\n            ProcessDocumentDBEvent(record, context);\n        }\n\n        return \"OK\";\n    }\n\n     private void ProcessDocumentDBEvent(DocumentDBEventRecord record, ILambdaContext context)\n    {\n        \n        var eventData = record.Event;\n        var operationType = eventData.OperationType;\n        var databaseName = eventData.Ns.Db;\n        var collectionName = eventData.Ns.Coll;\n        var fullDocument = JsonSerializer.Serialize(eventData.FullDocument, new JsonSerializerOptions { WriteIndented = true });\n\n        context.Logger.LogLine($\"Operation type: {operationType}\");\n        context.Logger.LogLine($\"Database: {databaseName}\");\n        context.Logger.LogLine($\"Collection: {collectionName}\");\n        context.Logger.LogLine($\"Full document:\\n{fullDocument}\");\n    }\n\n\n\n    public class Event\n    {\n        [JsonPropertyName(\"eventSourceArn\")]\n        public string EventSourceArn { get; set; }\n\n        [JsonPropertyName(\"events\")]\n        public List<DocumentDBEventRecord> Events { get; set; }\n\n        [JsonPropertyName(\"eventSource\")]\n        public string EventSource { get; set; }\n    }\n\n    public class DocumentDBEventRecord\n    {\n        [JsonPropertyName(\"event\")]\n        public EventData Event { get; set; }\n    }\n\n    public class EventData\n    {\n        [JsonPropertyName(\"_id\")]\n        public IdData Id { get; set; }\n\n        [JsonPropertyName(\"clusterTime\")]\n        public ClusterTime ClusterTime { get; set; }\n\n        [JsonPropertyName(\"documentKey\")]\n        public DocumentKey DocumentKey { get; set; }\n\n        [JsonPropertyName(\"fullDocument\")]\n        public Dictionary<string, object> FullDocument { get; set; }\n\n        [JsonPropertyName(\"ns\")]\n        public Namespace Ns { get; set; }\n\n        [JsonPropertyName(\"operationType\")]\n        public string OperationType { get; set; }\n    }\n\n    public class IdData\n    {\n        [JsonPropertyName(\"_data\")]\n        public string Data { get; set; }\n    }\n\n    public class ClusterTime\n    {\n        [JsonPropertyName(\"$timestamp\")]\n        public Timestamp Timestamp { get; set; }\n    }\n\n    public class Timestamp\n    {\n        [JsonPropertyName(\"t\")]\n        public long T { get; set; }\n\n        [JsonPropertyName(\"i\")]\n        public int I { get; set; }\n    }\n\n    public class DocumentKey\n    {\n        [JsonPropertyName(\"_id\")]\n        public Id Id { get; set; }\n    }\n\n    public class Id\n    {\n        [JsonPropertyName(\"$oid\")]\n        public string Oid { get; set; }\n    }\n\n    public class Namespace\n    {\n        [JsonPropertyName(\"db\")]\n        public string Db { get; set; }\n\n        [JsonPropertyName(\"coll\")]\n        public string Coll { get; set; }\n    }\n}\n\n",
                                    "  3.Go : \npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype Event struct {\n\tEvents []Record `json:\"events\"`\n}\n\ntype Record struct {\n\tEvent struct {\n\t\tOperationType string `json:\"operationType\"`\n\t\tNS            struct {\n\t\t\tDB   string `json:\"db\"`\n\t\t\tColl string `json:\"coll\"`\n\t\t} `json:\"ns\"`\n\t\tFullDocument interface{} `json:\"fullDocument\"`\n\t} `json:\"event\"`\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\nfunc handler(ctx context.Context, event Event) (string, error) {\n\tfmt.Println(\"Loading function\")\n\tfor _, record := range event.Events {\n\t\tlogDocumentDBEvent(record)\n\t}\n\n\treturn \"OK\", nil\n}\n\nfunc logDocumentDBEvent(record Record) {\n\tfmt.Printf(\"Operation type: %s\\n\", record.Event.OperationType)\n\tfmt.Printf(\"db: %s\\n\", record.Event.NS.DB)\n\tfmt.Printf(\"collection: %s\\n\", record.Event.NS.Coll)\n\tdocBytes, _ := json.MarshalIndent(record.Event.FullDocument, \"\", \"  \")\n\tfmt.Printf(\"Full document: %s\\n\", string(docBytes))\n}\n\n",
                                    "  4.SDK for Go V2 : \npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype Event struct {\n\tEvents []Record `json:\"events\"`\n}\n\ntype Record struct {\n\tEvent struct {\n\t\tOperationType string `json:\"operationType\"`\n\t\tNS            struct {\n\t\t\tDB   string `json:\"db\"`\n\t\t\tColl string `json:\"coll\"`\n\t\t} `json:\"ns\"`\n\t\tFullDocument interface{} `json:\"fullDocument\"`\n\t} `json:\"event\"`\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\nfunc handler(ctx context.Context, event Event) (string, error) {\n\tfmt.Println(\"Loading function\")\n\tfor _, record := range event.Events {\n\t\tlogDocumentDBEvent(record)\n\t}\n\n\treturn \"OK\", nil\n}\n\nfunc logDocumentDBEvent(record Record) {\n\tfmt.Printf(\"Operation type: %s\\n\", record.Event.OperationType)\n\tfmt.Printf(\"db: %s\\n\", record.Event.NS.DB)\n\tfmt.Printf(\"collection: %s\\n\", record.Event.NS.Coll)\n\tdocBytes, _ := json.MarshalIndent(record.Event.FullDocument, \"\", \"  \")\n\tfmt.Printf(\"Full document: %s\\n\", string(docBytes))\n}\n\n",
                                    "  5.JavaScript : console.log('Loading function');\nexports.handler = async (event, context) => {\n    event.events.forEach(record => {\n        logDocumentDBEvent(record);\n    });\n    return 'OK';\n};\n\nconst logDocumentDBEvent = (record) => {\n    console.log('Operation type: ' + record.event.operationType);\n    console.log('db: ' + record.event.ns.db);\n    console.log('collection: ' + record.event.ns.coll);\n    console.log('Full document:', JSON.stringify(record.event.fullDocument, null, 2));\n};\n\n\n",
                                    "  6.SDK for JavaScript (v3) : console.log('Loading function');\nexports.handler = async (event, context) => {\n    event.events.forEach(record => {\n        logDocumentDBEvent(record);\n    });\n    return 'OK';\n};\n\nconst logDocumentDBEvent = (record) => {\n    console.log('Operation type: ' + record.event.operationType);\n    console.log('db: ' + record.event.ns.db);\n    console.log('collection: ' + record.event.ns.coll);\n    console.log('Full document:', JSON.stringify(record.event.fullDocument, null, 2));\n};\n\n\n",
                                    "  7.PHP : <?php\n\nrequire __DIR__.'/vendor/autoload.php';\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Handler;\n\nclass DocumentDBEventHandler implements Handler\n{\n    public function handle($event, Context $context): string\n    {\n\n        $events = $event['events'] ?? [];\n        foreach ($events as $record) {\n            $this->logDocumentDBEvent($record['event']);\n        }\n        return 'OK';\n    }\n\n    private function logDocumentDBEvent($event): void\n    {\n        // Extract information from the event record\n\n        $operationType = $event['operationType'] ?? 'Unknown';\n        $db = $event['ns']['db'] ?? 'Unknown';\n        $collection = $event['ns']['coll'] ?? 'Unknown';\n        $fullDocument = $event['fullDocument'] ?? [];\n\n        // Log the event details\n\n        echo \"Operation type: $operationType\\n\";\n        echo \"Database: $db\\n\";\n        echo \"Collection: $collection\\n\";\n        echo \"Full document: \" . json_encode($fullDocument, JSON_PRETTY_PRINT) . \"\\n\";\n    }\n}\nreturn new DocumentDBEventHandler();\n",
                                    "  8.SDK for PHP : <?php\n\nrequire __DIR__.'/vendor/autoload.php';\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Handler;\n\nclass DocumentDBEventHandler implements Handler\n{\n    public function handle($event, Context $context): string\n    {\n\n        $events = $event['events'] ?? [];\n        foreach ($events as $record) {\n            $this->logDocumentDBEvent($record['event']);\n        }\n        return 'OK';\n    }\n\n    private function logDocumentDBEvent($event): void\n    {\n        // Extract information from the event record\n\n        $operationType = $event['operationType'] ?? 'Unknown';\n        $db = $event['ns']['db'] ?? 'Unknown';\n        $collection = $event['ns']['coll'] ?? 'Unknown';\n        $fullDocument = $event['fullDocument'] ?? [];\n\n        // Log the event details\n\n        echo \"Operation type: $operationType\\n\";\n        echo \"Database: $db\\n\";\n        echo \"Collection: $collection\\n\";\n        echo \"Full document: \" . json_encode($fullDocument, JSON_PRETTY_PRINT) . \"\\n\";\n    }\n}\nreturn new DocumentDBEventHandler();\n",
                                    "  9.Python : import json\n\ndef lambda_handler(event, context):\n    for record in event.get('events', []):\n        log_document_db_event(record)\n    return 'OK'\n\ndef log_document_db_event(record):\n    event_data = record.get('event', {})\n    operation_type = event_data.get('operationType', 'Unknown')\n    db = event_data.get('ns', {}).get('db', 'Unknown')\n    collection = event_data.get('ns', {}).get('coll', 'Unknown')\n    full_document = event_data.get('fullDocument', {})\n\n    print(f\"Operation type: {operation_type}\")\n    print(f\"db: {db}\")\n    print(f\"collection: {collection}\")\n    print(\"Full document:\", json.dumps(full_document, indent=2))\n",
                                    "  10.SDK for Python (Boto3) : import json\n\ndef lambda_handler(event, context):\n    for record in event.get('events', []):\n        log_document_db_event(record)\n    return 'OK'\n\ndef log_document_db_event(record):\n    event_data = record.get('event', {})\n    operation_type = event_data.get('operationType', 'Unknown')\n    db = event_data.get('ns', {}).get('db', 'Unknown')\n    collection = event_data.get('ns', {}).get('coll', 'Unknown')\n    full_document = event_data.get('fullDocument', {})\n\n    print(f\"Operation type: {operation_type}\")\n    print(f\"db: {db}\")\n    print(f\"collection: {collection}\")\n    print(\"Full document:\", json.dumps(full_document, indent=2))\n",
                                    "  11.Ruby : require 'json'\n\ndef lambda_handler(event:, context:)\n  event['events'].each do |record|\n    log_document_db_event(record)\n  end\n  'OK'\nend\n\ndef log_document_db_event(record)\n  event_data = record['event'] || {}\n  operation_type = event_data['operationType'] || 'Unknown'\n  db = event_data.dig('ns', 'db') || 'Unknown'\n  collection = event_data.dig('ns', 'coll') || 'Unknown'\n  full_document = event_data['fullDocument'] || {}\n\n  puts \"Operation type: #{operation_type}\"\n  puts \"db: #{db}\"\n  puts \"collection: #{collection}\"\n  puts \"Full document: #{JSON.pretty_generate(full_document)}\"\nend\n",
                                    "  12.SDK for Ruby : require 'json'\n\ndef lambda_handler(event:, context:)\n  event['events'].each do |record|\n    log_document_db_event(record)\n  end\n  'OK'\nend\n\ndef log_document_db_event(record)\n  event_data = record['event'] || {}\n  operation_type = event_data['operationType'] || 'Unknown'\n  db = event_data.dig('ns', 'db') || 'Unknown'\n  collection = event_data.dig('ns', 'coll') || 'Unknown'\n  full_document = event_data['fullDocument'] || {}\n\n  puts \"Operation type: #{operation_type}\"\n  puts \"db: #{db}\"\n  puts \"collection: #{collection}\"\n  puts \"Full document: #{JSON.pretty_generate(full_document)}\"\nend\n",
                                    "  13.Rust : \nuse lambda_runtime::{service_fn, tracing, Error, LambdaEvent};\nuse aws_lambda_events::{\n    event::documentdb::{DocumentDbEvent, DocumentDbInnerEvent},\n   };\n\n\n// Built with the following dependencies:\n//lambda_runtime = \"0.11.1\"\n//serde_json = \"1.0\"\n//tokio = { version = \"1\", features = [\"macros\"] }\n//tracing = { version = \"0.1\", features = [\"log\"] }\n//tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n//aws_lambda_events = \"0.15.0\"\n\nasync fn function_handler(event: LambdaEvent<DocumentDbEvent>) ->Result<(), Error> {\n    \n    tracing::info!(\"Event Source ARN: {:?}\", event.payload.event_source_arn);\n    tracing::info!(\"Event Source: {:?}\", event.payload.event_source);\n  \n    let records = &event.payload.events;\n   \n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    for record in records{\n        log_document_db_event(record);\n    }\n\n    tracing::info!(\"Document db records processed\");\n\n    // Prepare the response\n    Ok(())\n\n}\n\nfn log_document_db_event(record: &DocumentDbInnerEvent)-> Result<(), Error>{\n    tracing::info!(\"Change Event: {:?}\", record.event);\n    \n    Ok(())\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n    .with_max_level(tracing::Level::INFO)\n    .with_target(false)\n    .without_time()\n    .init();\n\n    let func = service_fn(function_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n    \n}\n\n",
                                    "  14.SDK for Rust : \nuse lambda_runtime::{service_fn, tracing, Error, LambdaEvent};\nuse aws_lambda_events::{\n    event::documentdb::{DocumentDbEvent, DocumentDbInnerEvent},\n   };\n\n\n// Built with the following dependencies:\n//lambda_runtime = \"0.11.1\"\n//serde_json = \"1.0\"\n//tokio = { version = \"1\", features = [\"macros\"] }\n//tracing = { version = \"0.1\", features = [\"log\"] }\n//tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n//aws_lambda_events = \"0.15.0\"\n\nasync fn function_handler(event: LambdaEvent<DocumentDbEvent>) ->Result<(), Error> {\n    \n    tracing::info!(\"Event Source ARN: {:?}\", event.payload.event_source_arn);\n    tracing::info!(\"Event Source: {:?}\", event.payload.event_source);\n  \n    let records = &event.payload.events;\n   \n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    for record in records{\n        log_document_db_event(record);\n    }\n\n    tracing::info!(\"Document db records processed\");\n\n    // Prepare the response\n    Ok(())\n\n}\n\nfn log_document_db_event(record: &DocumentDbInnerEvent)-> Result<(), Error>{\n    tracing::info!(\"Change Event: {:?}\", record.event);\n    \n    Ok(())\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n    .with_max_level(tracing::Level::INFO)\n    .with_target(false)\n    .without_time()\n    .init();\n\n    let func = service_fn(function_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n    \n}\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET : using Amazon.Lambda.Core;\nusing System.Text.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Text.Json.Serialization;\n//Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace LambdaDocDb;\n\npublic class Function\n{\n    \n     /// <summary>\n    /// Lambda function entry point to process Amazon DocumentDB events.\n    /// </summary>\n    /// <param name=\"event\">The Amazon DocumentDB event.</param>\n    /// <param name=\"context\">The Lambda context object.</param>\n    /// <returns>A string to indicate successful processing.</returns>\n    public string FunctionHandler(Event evnt, ILambdaContext context)\n    {\n        \n        foreach (var record in evnt.Events)\n        {\n            ProcessDocumentDBEvent(record, context);\n        }\n\n        return \"OK\";\n    }\n\n     private void ProcessDocumentDBEvent(DocumentDBEventRecord record, ILambdaContext context)\n    {\n        \n        var eventData = record.Event;\n        var operationType = eventData.OperationType;\n        var databaseName = eventData.Ns.Db;\n        var collectionName = eventData.Ns.Coll;\n        var fullDocument = JsonSerializer.Serialize(eventData.FullDocument, new JsonSerializerOptions { WriteIndented = true });\n\n        context.Logger.LogLine($\"Operation type: {operationType}\");\n        context.Logger.LogLine($\"Database: {databaseName}\");\n        context.Logger.LogLine($\"Collection: {collectionName}\");\n        context.Logger.LogLine($\"Full document:\\n{fullDocument}\");\n    }\n\n\n\n    public class Event\n    {\n        [JsonPropertyName(\"eventSourceArn\")]\n        public string EventSourceArn { get; set; }\n\n        [JsonPropertyName(\"events\")]\n        public List<DocumentDBEventRecord> Events { get; set; }\n\n        [JsonPropertyName(\"eventSource\")]\n        public string EventSource { get; set; }\n    }\n\n    public class DocumentDBEventRecord\n    {\n        [JsonPropertyName(\"event\")]\n        public EventData Event { get; set; }\n    }\n\n    public class EventData\n    {\n        [JsonPropertyName(\"_id\")]\n        public IdData Id { get; set; }\n\n        [JsonPropertyName(\"clusterTime\")]\n        public ClusterTime ClusterTime { get; set; }\n\n        [JsonPropertyName(\"documentKey\")]\n        public DocumentKey DocumentKey { get; set; }\n\n        [JsonPropertyName(\"fullDocument\")]\n        public Dictionary<string, object> FullDocument { get; set; }\n\n        [JsonPropertyName(\"ns\")]\n        public Namespace Ns { get; set; }\n\n        [JsonPropertyName(\"operationType\")]\n        public string OperationType { get; set; }\n    }\n\n    public class IdData\n    {\n        [JsonPropertyName(\"_data\")]\n        public string Data { get; set; }\n    }\n\n    public class ClusterTime\n    {\n        [JsonPropertyName(\"$timestamp\")]\n        public Timestamp Timestamp { get; set; }\n    }\n\n    public class Timestamp\n    {\n        [JsonPropertyName(\"t\")]\n        public long T { get; set; }\n\n        [JsonPropertyName(\"i\")]\n        public int I { get; set; }\n    }\n\n    public class DocumentKey\n    {\n        [JsonPropertyName(\"_id\")]\n        public Id Id { get; set; }\n    }\n\n    public class Id\n    {\n        [JsonPropertyName(\"$oid\")]\n        public string Oid { get; set; }\n    }\n\n    public class Namespace\n    {\n        [JsonPropertyName(\"db\")]\n        public string Db { get; set; }\n\n        [JsonPropertyName(\"coll\")]\n        public string Coll { get; set; }\n    }\n}\n\n",
                                    "To create the Lambda function",
                                    "  1 : Copy the sample code into a file named index.js.",
                                    " 2 : Create a deployment package with the following command. ",
                                    {
                                        "code_example": "zip function.zip index.js"
                                    },
                                    " 3 : Use the following CLI command to create the function. Replace us-east-1 with the AWS Region,          and 123456789012 with your account ID. ",
                                    {
                                        "code_example": "aws lambda create-function \\\n  --function-name ProcessDocumentDBRecords \\\n  --zip-file fileb://function.zip --handler index.handler --runtime nodejs22.x \\\n  --region us-east-1 \\\n  --role arn:aws:iam::123456789012:role/AWSDocumentDBLambdaExecutionRole"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Create the Lambda event source mapping",
                                "content": [
                                    "      Create the event source mapping that associates your Amazon DocumentDB change stream with your Lambda function.      After you create this event source mapping, AWS Lambda immediately starts polling the stream.    ",
                                    "To create the event source mapping",
                                    "  1 : Open the Functions page in the Lambda console.",
                                    "  2 : Choose the ProcessDocumentDBRecords function you created earlier.",
                                    "  3 : Choose the Configurationtab, then choose Triggersin the left menu.",
                                    "  4 : Choose Add trigger.",
                                    "  5 : Under Trigger configuration, for the source, select Amazon DocumentDB.",
                                    "  6 : Create the event source mapping with the following configuration:Amazon DocumentDB cluster– Choose the cluster you created earlier.Database name– docdbdemoCollection name– productsBatch size– 1Starting position– LatestAuthentication– BASIC_AUTHSecrets Manager key– Choose the DocumentDBSecret you just created.Batch window– 1Full document configuration– UpdateLookup",
                                    "  7 : Choose Add. Creating your event source mapping can take a few minutes."
                                ]
                            },
                            {
                                "sub_header": "Test your function - manual invoke",
                                "content": [
                                    "      To test that you created your function and event source mapping correctly, invoke your function using the invoke command.      To do this, first copy the following event JSON into a file called input.txt:    ",
                                    "{  \"eventSourceArn\": \"arn:aws:rds:us-east-1:123456789012:cluster:canaryclusterb2a659a2-qo5tcmqkcl03\",  \"events\": [    {      \"event\": {        \"_id\": {          \"_data\": \"0163eeb6e7000000090100000009000041e1\"        },        \"clusterTime\": {          \"$timestamp\": {            \"t\": 1676588775,            \"i\": 9          }        },        \"documentKey\": {          \"_id\": {            \"$oid\": \"63eeb6e7d418cd98afb1c1d7\"          }        },        \"fullDocument\": {          \"_id\": {            \"$oid\": \"63eeb6e7d418cd98afb1c1d7\"          },          \"anyField\": \"sampleValue\"        },        \"ns\": {          \"db\": \"docdbdemo\",          \"coll\": \"products\"        },        \"operationType\": \"insert\"      }    }  ],  \"eventSource\": \"aws:docdb\"}",
                                    "      Then, use the following command to invoke your function with this event:    ",
                                    "aws lambda invoke \\  --function-name ProcessDocumentDBRecords \\  --cli-binary-format raw-in-base64-out \\  --region us-east-1 \\  --payload file://input.txt out.txt",
                                    "      You should see a response that looks like the following:    ",
                                    "{   \"StatusCode\": 200,   \"ExecutedVersion\": \"$LATEST\"}",
                                    "      You can verify that your function successfully processed the event by checking CloudWatch Logs.    ",
                                    "To verify manual invocation via CloudWatch Logs",
                                    "  1 : Open the Functions page in the Lambda console.",
                                    "  2 : Choose the Monitor tab, then choose View CloudWatch logs.          This takes you to the specific log group associated with your function in the CloudWatch console.",
                                    "  3 : Choose the most recent log stream. Within the log messages, you should see the event JSON."
                                ]
                            },
                            {
                                "sub_header": "Test your function - insert a record",
                                "content": [
                                    "      Test your end-to-end setup by interacting directly with your Amazon DocumentDB database. In the next set of steps,      you’ll insert a record, update it, then delete it.    ",
                                    "To insert a record",
                                    "  1 : Reconnect to your Amazon DocumentDB cluster in your AWS Cloud9 environment.",
                                    " 2 : Use this command to ensure that you’re currently using the docdbdemo database: ",
                                    {
                                        "code_example": "use docdbdemo"
                                    },
                                    " 3 : Insert a record into the products collection of the docdbdemo database: ",
                                    {
                                        "code_example": "db.products.insert({\"name\":\"Pencil\", \"price\": 1.00})"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Test your function - update a record",
                                "content": [
                                    "      Next, update the record you just inserted with the following command:    ",
                                    "db.products.update(    { \"name\": \"Pencil\" },    { $set: { \"price\": 0.50 }})",
                                    "      Verify that your function successfully processed this event by checking CloudWatch Logs.    "
                                ]
                            },
                            {
                                "sub_header": "Test your function - delete a record",
                                "content": [
                                    "Finally, delete the record you just updated with the following command:",
                                    "db.products.remove( { \"name\": \"Pencil\" } )",
                                    "Verify that your function successfully processed this event by checking CloudWatch Logs."
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources",
                                "content": [
                                    "      You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS      resources that you're no longer using, you prevent unnecessary charges to your AWS account.    ",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the VPC endpoints",
                                    "  1 : Open the VPC console. In the left menu, under Virtual private cloud,      choose Endpoints.",
                                    "  2 : Select the endpoints you created.",
                                    "  3 : Choose Actions, Delete VPC endpoints.",
                                    "  4 : Enter delete in the text input field.",
                                    "  5 : Choose Delete.",
                                    "To delete the Amazon DocumentDB cluster",
                                    "  1 : Open the Amazon DocumentDB console.",
                                    "  2 : Choose the Amazon DocumentDB cluster you created for this tutorial, and disable deletion protection.",
                                    "  3 : In the main Clusters page, choose your Amazon DocumentDB cluster again.",
                                    "  4 : Choose Actions, Delete.",
                                    "  5 : For Create final cluster snapshot, select No.",
                                    "  6 : Enter delete in the text input field.",
                                    "  7 : Choose Delete.",
                                    "To delete the secret in Secrets Manager",
                                    "  1 : Open the Secrets Manager console.",
                                    "  2 : Choose the secret you created for this tutorial.",
                                    "  3 : Choose Actions, Delete secret.",
                                    "  4 : Choose Schedule deletion.",
                                    "To delete the Amazon EC2 security group",
                                    "  1 : Open the EC2 console. Under      Network and Security, choose Security groups.",
                                    "  2 : Select the security group you created for this tutorial.",
                                    "  3 : Choose Actions, Delete security groups.",
                                    "  4 : Choose Delete.",
                                    "To delete the AWS Cloud9 environment",
                                    "  1 : Open the AWS Cloud9 console.",
                                    "  2 : Select the environment you created for this tutorial.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter delete in the text input field.",
                                    "  5 : Choose Delete."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "You can use a Lambda function to process events in an Amazon DocumentDB (with MongoDB compatibility) change stream by configuring an    Amazon DocumentDB cluster as an event source. Then, you can automate event-driven workloads by invoking your Lambda function    each time that data changes with your Amazon DocumentDB cluster.",
                    "Note",
                    "Lambda supports version 4.0 and 5.0 of Amazon DocumentDB only. Lambda doesn't support version 3.6.",
                    "Also, for event source mappings, Lambda supports instance-based clusters and      regional clusters only. Lambda doesn't support              elastic clusters or              global clusters. This limitation doesn't apply when using Lambda as a client to connect to Amazon DocumentDB. Lambda can connect to     all cluster types to perform CRUD operations.",
                    "Lambda processes events from Amazon DocumentDB change streams sequentially in the order in which they arrive.    Because of this, your function can handle only one concurrent invocation from Amazon DocumentDB at a time.    To monitor your function, you can track its concurrency metrics.",
                    "Warning",
                    "Lambda event source mappings process each event at least once, and duplicate processing of records can occur. To avoid potential issues related to duplicate events, we strongly recommend that you make your function code idempotent. To learn more, see How do I make my Lambda function idempotent in the AWS Knowledge Center.",
                    "Topics",
                    {
                        "sub_header": "Example Amazon DocumentDB event",
                        "content": [
                            "{    \"eventSourceArn\": \"arn:aws:rds:us-east-1:123456789012:cluster:canaryclusterb2a659a2-qo5tcmqkcl03\",    \"events\": [        {            \"event\": {                \"_id\": {                    \"_data\": \"0163eeb6e7000000090100000009000041e1\"                },                \"clusterTime\": {                    \"$timestamp\": {                        \"t\": 1676588775,                        \"i\": 9                    }                },                \"documentKey\": {                    \"_id\": {                        \"$oid\": \"63eeb6e7d418cd98afb1c1d7\"                    }                },                \"fullDocument\": {                    \"_id\": {                        \"$oid\": \"63eeb6e7d418cd98afb1c1d7\"                    },                    \"anyField\": \"sampleValue\"                },                \"ns\": {                    \"db\": \"test_database\",                    \"coll\": \"test_collection\"                },                \"operationType\": \"insert\"            }        }    ],    \"eventSource\": \"aws:docdb\"}",
                            "For more information about the events in this example and their shapes, see Change Events on the MongoDB      Documentation website."
                        ]
                    },
                    {
                        "sub_header": "Prerequisites and permissions",
                        "content": [
                            "Before you can use Amazon DocumentDB as an event source for your Lambda function, note the following prerequisites. You      must:",
                            "  1.Have an existing Amazon DocumentDB cluster in the same AWS account and AWS Region as your\n            function. :  If you don't have an existing cluster, you can create one by following the steps in            Get Started with              Amazon DocumentDB in the Amazon DocumentDB Developer Guide. Alternatively, the first set of steps in            Tutorial: Using AWS Lambda with Amazon DocumentDB Streams guide you            through creating an Amazon DocumentDB cluster with all the necessary prerequisites.",
                            "  2.Allow Lambda to access the Amazon Virtual Private Cloud (Amazon VPC) resources associated with your Amazon DocumentDB\n            cluster. :  For more information, see Configure network security.",
                            "  3.Enable TLS on your Amazon DocumentDB cluster. :  This is the default setting. If you          disable TLS, then Lambda cannot communicate with your cluster.",
                            "  4.Activate change streams on your Amazon DocumentDB cluster. :  For more information,          see Using Change            Streams with Amazon DocumentDB in the Amazon DocumentDB Developer Guide.",
                            "  5.Provide Lambda with credentials to access your Amazon DocumentDB cluster. :  When          setting up the event source, provide the AWS Secrets Manager key that contains the authentication          details (username and password) required to access your cluster. To provide this key during setup, do either          of the following:If you're using the Lambda console for setup, then provide the key in the Secrets manager                key field.If you're using the AWS Command Line Interface (AWS CLI) for setup, then provide this key in the                source-access-configurations option. You can include this option with either the create-event-source-mapping command or the update-event-source-mapping command. For example:aws lambda create-event-source-mapping \\    ...    --source-access-configurations  '[{\"Type\":\"BASIC_AUTH\",\"URI\":\"arn:aws:secretsmanager:us-west-2:123456789012:secret:DocDBSecret-AbC4E6\"}]' \\    ...",
                            {
                                "code_example": "aws lambda create-event-source-mapping \\\n    ...\n    --source-access-configurations  '[{\"Type\":\"BASIC_AUTH\",\"URI\":\"arn:aws:secretsmanager:us-west-2:123456789012:secret:DocDBSecret-AbC4E6\"}]' \\\n    ..."
                            },
                            "  6.Secrets manager\n                key : If you're using the Lambda console for setup, then provide the key in the  field.",
                            "  7.If you're using the AWS Command Line Interface (AWS CLI) for setup, then provide this key in the                source-access-configurations option. You can include this option with either the create-event-source-mapping command or the update-event-source-mapping command. For example:aws lambda create-event-source-mapping \\    ...    --source-access-configurations  '[{\"Type\":\"BASIC_AUTH\",\"URI\":\"arn:aws:secretsmanager:us-west-2:123456789012:secret:DocDBSecret-AbC4E6\"}]' \\    ...",
                            {
                                "code_example": "aws lambda create-event-source-mapping \\\n    ...\n    --source-access-configurations  '[{\"Type\":\"BASIC_AUTH\",\"URI\":\"arn:aws:secretsmanager:us-west-2:123456789012:secret:DocDBSecret-AbC4E6\"}]' \\\n    ..."
                            },
                            "  8.Grant Lambda permissions to manage resources related to your Amazon DocumentDB\n            stream. :  Manually add the following permissions to your function's execution role:rds:DescribeDBClustersrds:DescribeDBClusterParametersrds:DescribeDBSubnetGroupsec2:CreateNetworkInterfaceec2:DescribeNetworkInterfacesec2:DescribeVpcsec2:DeleteNetworkInterfaceec2:DescribeSubnetsec2:DescribeSecurityGroupskms:Decryptsecretsmanager:GetSecretValue",
                            "  9.rds:DescribeDBClusters",
                            "  10.rds:DescribeDBClusterParameters",
                            "  11.rds:DescribeDBSubnetGroups",
                            "  12.ec2:CreateNetworkInterface",
                            "  13.ec2:DescribeNetworkInterfaces",
                            "  14.ec2:DescribeVpcs",
                            "  15.ec2:DeleteNetworkInterface",
                            "  16.ec2:DescribeSubnets",
                            "  17.ec2:DescribeSecurityGroups",
                            "  18.kms:Decrypt",
                            "  19.secretsmanager:GetSecretValue",
                            "  20.Keep the size of Amazon DocumentDB change stream events that you send to Lambda under 6\n            MB. :  Lambda supports payload sizes of up to 6 MB. If your change stream tries to send Lambda an          event larger than 6 MB, then Lambda drops the message and emits the OversizedRecordCount metric.          Lambda emits all metrics on a best-effort basis.",
                            "Note",
                            "While Lambda functions typically have a maximum timeout limit of 15 minutes,      event source mappings for Amazon MSK, self-managed Apache Kafka, Amazon DocumentDB, and Amazon MQ for ActiveMQ and RabbitMQ only support functions with      maximum timeout limits of 14 minutes. This constraint ensures that the event source mapping can properly      handle function errors and retries."
                        ]
                    },
                    {
                        "sub_header": "Configure network security",
                        "content": [
                            "To give Lambda full access to Amazon DocumentDB through your event source mapping, either your cluster must use a public endpoint             (public IP address), or you must provide access to the Amazon VPC you created the cluster in.",
                            "When you use Amazon DocumentDB with Lambda, create AWS PrivateLink VPC endpoints that provide your function            access to the resources in your Amazon VPC.",
                            "Note",
                            "AWS PrivateLink VPC endpoints are required for functions with event source mappings that use the default (on-demand) mode                for event pollers. If your event source mapping uses                 provisioned mode, you don't need to configure AWS PrivateLink VPC endpoints.",
                            "Create an endpoint to provide access to the following resources:",
                            "  1.                    Lambda — Create an endpoint for the Lambda service principal.                ",
                            "  2.                    AWS STS — Create an endpoint for the AWS STS in order for a service principal to assume a role on your behalf.                ",
                            "  3.                    Secrets Manager — If your cluster uses Secrets Manager to store credentials, create an endpoint for Secrets Manager.                ",
                            "Alternatively, configure a NAT gateway on each public subnet in the Amazon VPC. For more information,             see Enable internet access for VPC-connected Lambda functions.",
                            "When you create an event source mapping for Amazon DocumentDB, Lambda checks whether Elastic Network Interfaces (ENIs)             are already present for the subnets and security groups configured for your Amazon VPC. If Lambda finds existing ENIs, it             attempts to re-use them. Otherwise, Lambda creates new ENIs to connect to the event source and invoke your function.",
                            "Note",
                            "Lambda functions always run inside VPCs owned by the Lambda service. Your function's VPC configuration                does not affect the event source mapping. Only the networking configuration of the event source's determines                 how Lambda connects to your event source.",
                            "Configure the security groups for the Amazon VPC containing your cluster. By default,            Amazon DocumentDB uses the following ports: 27017.",
                            "  1.Inbound rules – Allow all traffic on the default cluster port for the security group associated with your event source.",
                            "  2.Outbound rules – Allow all traffic on port 443 for all destinations. Allow all traffic on the default cluster port                    for the security group associated with your event source.",
                            "  3.Amazon VPC endpoint inbound rules — If you are using an Amazon VPC endpoint, the security group associated with your Amazon VPC endpoint must allow inbound traffic                    on port 443 from the cluster security group.",
                            "If your cluster uses authentication, you can also restrict the endpoint policy for the Secrets Manager endpoint.             To call the Secrets Manager API, Lambda uses your function role, not the Lambda service principal.",
                            "Example VPC endpoint policy — Secrets Manager endpoint",
                            {
                                "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"secretsmanager:GetSecretValue\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"AWS\": [\n                      \"arn:aws::iam::123456789012:role/my-role\"\n                  ]\n              },\n              \"Resource\": \"arn:aws::secretsmanager:us-west-2:123456789012:secret:my-secret\"\n          }\n      ]\n  }"
                            },
                            "When you use Amazon VPC endpoints, AWS routes your API calls to invoke your function using the endpoint's Elastic Network Interface (ENI).            The Lambda service principal needs to call lambda:InvokeFunction on any roles and functions that use those ENIs.",
                            "By default, Amazon VPC endpoints have open IAM policies that allow broad access to resources. Best practice is to restrict these            policies to perform the needed actions using that endpoint. To ensure that your event source mapping is able to invoke your Lambda            function, the VPC endpoint policy must allow the Lambda service principal to call sts:AssumeRole and            lambda:InvokeFunction. Restricting your VPC endpoint policies to allow only API calls originating within your organization            prevents the event source mapping from functioning properly, so \"Resource\": \"*\" is required in these policies.",
                            "The following example VPC endpoint policies show how to grant the required access to the Lambda service principal for the            AWS STS and Lambda endpoints.",
                            "Example VPC Endpoint policy — AWS STS endpoint",
                            {
                                "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"sts:AssumeRole\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"Service\": [\n                      \"lambda.amazonaws.com\"\n                  ]\n              },\n              \"Resource\": \"*\"\n          }\n      ]\n    }"
                            },
                            "Example VPC Endpoint policy — Lambda endpoint",
                            {
                                "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"lambda:InvokeFunction\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"Service\": [\n                      \"lambda.amazonaws.com\"\n                  ]\n              },\n              \"Resource\": \"*\"\n          }\n      ]\n  }"
                            }
                        ]
                    },
                    {
                        "sub_header": "Creating an Amazon DocumentDB event source mapping (console)",
                        "content": [
                            "For a Lambda function to read from an Amazon DocumentDB cluster's change stream, create an event source mapping. This section describes how to do this from      the Lambda console. For AWS SDK and AWS CLI instructions, see Creating an Amazon DocumentDB event source mapping (SDK or CLI).",
                            "To create an Amazon DocumentDB event source mapping (console)",
                            "  1 : Open the Functions page of the Lambda console.",
                            "  2 : Choose the name of a function.",
                            "  3 : Under Function overview, choose Add          trigger.",
                            "  4 : Under Trigger configuration, in the dropdown list, choose          DocumentDB.",
                            "  5 : Configure the required options, and then choose Add.",
                            "Lambda supports the following options for Amazon DocumentDB event sources:",
                            "  1.DocumentDB cluster :  – Select an Amazon .",
                            "  2.Activate trigger :  – Choose whether you want to activate the trigger          immediately. If you select this check box, then your function immediately starts receiving traffic from the          specified Amazon DocumentDB change stream upon creation of the event source mapping. We recommend that you clear the          check box to create the event source mapping in a deactivated state for testing. After creation, you can          activate the event source mapping at any time.",
                            "  3.Database name :  – Enter the name of a database within the cluster to          consume.",
                            "  4.Collection name : (Optional)  – Enter the name of a collection within the          database to consume. If you don't specify a collection, then Lambda listens to all events from each collection          in the database.",
                            "  5.Batch size :  – Set the maximum number of messages to retrieve in a single batch,          up to 10,000. The default batch size is 100.",
                            "  6.Starting position :  – Choose the position in the stream to start reading records          from.Latest – Process only new records that are added to the stream. Your              function starts processing records only after Lambda finishes creating your event source. This means that              some records may be dropped until your event source is created successfully.Trim horizon – Process all records in the stream. Lambda uses the log              retention duration of your cluster to determine where to start reading events from. Specifically, Lambda              starts reading from current_time - log_retention_duration. Your change stream must already be              active before this timestamp for Lambda to read all events properly.At timestamp – Process records starting from a specific time. Your change              stream must already be active before the specified timestamp for Lambda to read all events properly.",
                            "  7.Latest :  – Process only new records that are added to the stream. Your              function starts processing records only after Lambda finishes creating your event source. This means that              some records may be dropped until your event source is created successfully.",
                            "  8.Trim horizon :  – Process all records in the stream. Lambda uses the log              retention duration of your cluster to determine where to start reading events from. Specifically, Lambda              starts reading from current_time - log_retention_duration. Your change stream must already be              active before this timestamp for Lambda to read all events properly.",
                            "  9.At timestamp :  – Process records starting from a specific time. Your change              stream must already be active before the specified timestamp for Lambda to read all events properly.",
                            "  10.Authentication :  – Choose the authentication method for accessing the brokers in          your cluster.BASIC_AUTH – With basic authentication, you must provide the Secrets Manager key              that contains the credentials to access your cluster.",
                            "  11.BASIC_AUTH :  – With basic authentication, you must provide the Secrets Manager key              that contains the credentials to access your cluster.",
                            "  12.Secrets Manager key :  – Choose the  that contains the authentication details          (username and password) required to access your Amazon DocumentDB cluster.",
                            "  13.Batch window : (Optional)  – Set the maximum amount of time in seconds to gather          records before invoking your function, up to 300.",
                            "  14.Full document configuration : (Optional)  – For document update operations,          choose what you want to send to the stream. The default value is Default, which means that for          each change stream event, Amazon DocumentDB sends only a delta describing the changes made. For more information about          this field, see FullDocument in the MongoDB Javadoc API documentation.Default – Lambda sends only a partial document describing the changes              made.UpdateLookup – Lambda sends a delta describing the changes, along with a              copy of the entire document.",
                            "  15.Default :  – Lambda sends only a partial document describing the changes              made.",
                            "  16.UpdateLookup :  – Lambda sends a delta describing the changes, along with a              copy of the entire document."
                        ]
                    },
                    {
                        "sub_header": "Creating an Amazon DocumentDB event source mapping (SDK or CLI)",
                        "content": [
                            "To create or manage an Amazon DocumentDB event source mapping with an AWS SDK, you can use the following API      operations:",
                            "  1.CreateEventSourceMapping",
                            "  2.ListEventSourceMappings",
                            "  3.GetEventSourceMapping",
                            "  4.UpdateEventSourceMapping",
                            "  5.DeleteEventSourceMapping",
                            "To create the event source mapping with the AWS CLI, use the create-event-source-mapping command. The following example uses this command to map a      function named my-function to an Amazon DocumentDB change stream. The event source is specified by an Amazon      Resource Name (ARN), with a batch size of 500, starting from the timestamp in Unix time. The command also      specifies the Secrets Manager key that Lambda uses to connect to Amazon DocumentDB. Additionally, it includes        document-db-event-source-config parameters that specify the database and the collection to read      from.",
                            "aws lambda create-event-source-mapping --function-name my-function \\    --event-source-arn arn:aws:rds:us-west-2:123456789012:cluster:privatecluster7de2-epzcyvu4pjoy    --batch-size 500 \\    --starting-position AT_TIMESTAMP \\    --starting-position-timestamp 1541139109 \\    --source-access-configurations '[{\"Type\":\"BASIC_AUTH\",\"URI\":\"arn:aws:secretsmanager:us-east-1:123456789012:secret:DocDBSecret-BAtjxi\"}]' \\    --document-db-event-source-config '{\"DatabaseName\":\"test_database\", \"CollectionName\": \"test_collection\"}' \\",
                            "You should see output that looks like this:",
                            "{    \"UUID\": \"2b733gdc-8ac3-cdf5-af3a-1827b3b11284\",    \"BatchSize\": 500,    \"DocumentDBEventSourceConfig\": {        \"CollectionName\": \"test_collection\",        \"DatabaseName\": \"test_database\",        \"FullDocument\": \"Default\"    },    \"MaximumBatchingWindowInSeconds\": 0,    \"EventSourceArn\": \"arn:aws:rds:us-west-2:123456789012:cluster:privatecluster7de2-epzcyvu4pjoy\",    \"FunctionArn\": \"arn:aws:lambda:us-west-2:123456789012:function:my-function\",    \"LastModified\": 1541348195.412,    \"LastProcessingResult\": \"No records processed\",    \"State\": \"Creating\",    \"StateTransitionReason\": \"User action\"}",
                            "After creation, you can use the update-event-source-mapping command to update the settings for your Amazon DocumentDB event      source. The following example updates the batch size to 1,000 and the batch window to 10 seconds. For this      command, you need the UUID of your event source mapping, which you can retrieve using the        list-event-source-mapping command or the Lambda console.",
                            "aws lambda update-event-source-mapping --function-name my-function \\    --uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\    --batch-size 1000 \\    --batch-window 10",
                            "You should see this output that looks like this:",
                            "{    \"UUID\": \"2b733gdc-8ac3-cdf5-af3a-1827b3b11284\",    \"BatchSize\": 500,    \"DocumentDBEventSourceConfig\": {        \"CollectionName\": \"test_collection\",        \"DatabaseName\": \"test_database\",        \"FullDocument\": \"Default\"    },    \"MaximumBatchingWindowInSeconds\": 0,    \"EventSourceArn\": \"arn:aws:rds:us-west-2:123456789012:cluster:privatecluster7de2-epzcyvu4pjoy\",    \"FunctionArn\": \"arn:aws:lambda:us-west-2:123456789012:function:my-function\",    \"LastModified\": 1541359182.919,    \"LastProcessingResult\": \"OK\",    \"State\": \"Updating\",    \"StateTransitionReason\": \"User action\"}",
                            "Lambda updates settings asynchronously, so you may not see these changes in the output until the process      completes. To view the current settings of your event source mapping, use the get-event-source-mapping command.",
                            "aws lambda get-event-source-mapping --uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b",
                            "You should see this output that looks like this:",
                            "{    \"UUID\": \"2b733gdc-8ac3-cdf5-af3a-1827b3b11284\",    \"DocumentDBEventSourceConfig\": {        \"CollectionName\": \"test_collection\",        \"DatabaseName\": \"test_database\",        \"FullDocument\": \"Default\"    },    \"BatchSize\": 1000,    \"MaximumBatchingWindowInSeconds\": 10,    \"EventSourceArn\": \"arn:aws:rds:us-west-2:123456789012:cluster:privatecluster7de2-epzcyvu4pjoy\",    \"FunctionArn\": \"arn:aws:lambda:us-west-2:123456789012:function:my-function\",    \"LastModified\": 1541359182.919,    \"LastProcessingResult\": \"OK\",    \"State\": \"Enabled\",    \"StateTransitionReason\": \"User action\"}",
                            "To delete your Amazon DocumentDB event source mapping, use the delete-event-source-mapping command.",
                            "aws lambda delete-event-source-mapping \\    --uuid 2b733gdc-8ac3-cdf5-af3a-1827b3b11284"
                        ]
                    },
                    {
                        "sub_header": "Polling and stream starting positions",
                        "content": [
                            "Be aware that stream polling during event source mapping creation and updates is eventually consistent.",
                            "  1.During event source mapping creation, it may take several minutes to start polling events from the stream.",
                            "  2.During event source mapping updates, it may take several minutes to stop and restart polling events from the stream.",
                            "This behavior means that if you specify LATEST as the starting position for the stream, the event source mapping could     miss events during creation or updates. To ensure that no events are missed, specify the stream starting position as TRIM_HORIZON     or AT_TIMESTAMP."
                        ]
                    },
                    {
                        "sub_header": "Monitoring your Amazon DocumentDB event source",
                        "content": [
                            "To help you monitor your Amazon DocumentDB event source, Lambda emits the IteratorAge metric when your      function finishes processing a batch of records. Iterator age is the difference between the      timestamp of the most recent event and the current timestamp. Essentially, the IteratorAge metric      indicates how old the last processed record in the batch is. If your function is currently processing new events,      then you can use the iterator age to estimate the latency between when a record is added and when your function      processes it. An increasing trend in IteratorAge can indicate issues with your function.      For more information, see Using CloudWatch metrics with Lambda.",
                            "Amazon DocumentDB change streams aren't optimized to handle large time gaps between events. If your Amazon DocumentDB event source doesn't      receive any events for an extended period of time, Lambda may disable the event source mapping. The length of      this time period can vary from a few weeks to a few months depending on cluster size and other workloads.",
                            "Lambda supports payloads of up to 6 MB. However, Amazon DocumentDB change stream events can be up to 16 MB in size. If      your change stream tries to send Lambda a change stream event larger than 6 MB, then Lambda drops the message and      emits the OversizedRecordCount metric. Lambda emits all metrics on a best-effort basis."
                        ]
                    }
                ]
            },
            {
                "title": "DynamoDB",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-ddb.html",
                "contents": [
                    {
                        "title": "Create mapping",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-dynamodb-eventsourcemapping.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Create an event source mapping to tell Lambda to send records from your stream to a Lambda function. You can        create multiple event source mappings to process the same data with multiple Lambda functions, or to process items        from multiple streams with a single function.",
                            "To configure your function to read from DynamoDB Streams, attach the AWSLambdaDynamoDBExecutionRole AWS managed policy to your execution role and then create a DynamoDB        trigger.",
                            "To add permissions and create a trigger",
                            "  1 : Open the Functions page of the Lambda console.",
                            "  2 : Choose the name of a function.",
                            "  3 : Choose the Configuration tab, and then choose Permissions.",
                            "  4 : Under Role name, choose the link to your execution role. This link opens the role in the IAM console.",
                            "  5 : Choose Add permissions, and then choose Attach policies.",
                            "  6 : In the search field, enter AWSLambdaDynamoDBExecutionRole. Add this policy to your execution role. This is an AWS managed policy that contains the permissions your function needs to read from the DynamoDB stream. For more information about this policy, see AWSLambdaDynamoDBExecutionRole in the AWS Managed Policy Reference.",
                            "  7 : Go back to your function in the Lambda console. Under Function overview, choose Add trigger.",
                            "  8 : Choose a trigger type.",
                            "  9 : Configure the required options, and then choose Add.",
                            "Lambda supports the following options for DynamoDB event sources:",
                            "Event source options",
                            "  1.DynamoDB table :  – The  to read records from.",
                            "  2.Batch size :  – The number of records to send to the function in each batch, up                to 10,000. Lambda passes all of the records in the batch to the function in a single call, as long as the total                size of the events doesn't exceed the payload limit for                synchronous invocation (6 MB).",
                            "  3.Batch window :  – Specify the maximum amount of time to gather records before          invoking the function, in seconds.",
                            "  4.Starting position :  – Process only new records, or all existing records.Latest – Process new records that are added to the stream.Trim horizon – Process all records in the stream.After processing any existing records, the function is caught up and continues to process new                records.",
                            "  5.Latest :  – Process new records that are added to the stream.",
                            "  6.Trim horizon :  – Process all records in the stream.",
                            "  7.On-failure destination :  – A standard SQS queue or standard SNS topic  for records that can't be processed. When Lambda discards a batch of records that's too old or has exhausted  all retries, Lambda sends details about the batch to the queue or topic.",
                            "  8.Retry attempts :  – The maximum number of times that  Lambda retries when the function returns an error. This doesn't apply to service errors or throttles where the  batch didn't reach the function.",
                            "  9.Maximum age of record :  – The maximum age of a record that  Lambda sends to your function.",
                            "  10.Split batch on error :  – When the function returns an error,  split the batch into two before retrying. Your original batch size setting remains unchanged.",
                            "  11.Concurrent batches per shard :  – Concurrently process multiple batches from the same shard.",
                            "  12.Enabled :  – Set to true to enable the event source mapping. Set to false to stop                processing records. Lambda keeps track of the last record processed and resumes processing from that point when                the mapping is reenabled.",
                            "Note",
                            "You are not charged for GetRecords API calls invoked by Lambda as part of DynamoDB triggers.",
                            "To manage the event source configuration later, choose the trigger in the designer."
                        ]
                    },
                    {
                        "title": "Batch item failures",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-ddb-batchfailurereporting.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "When consuming and processing streaming data from an event source, by default Lambda checkpoints to the highest    sequence number of a batch only when the batch is a complete success. Lambda treats all other results as a complete    failure and retries processing the batch up to the retry limit. To allow for partial successes while processing    batches from a stream, turn on ReportBatchItemFailures. Allowing partial successes can help to reduce    the number of retries on a record, though it doesn’t entirely prevent the possibility of retries in a successful record.",
                            "To turn on ReportBatchItemFailures, include the enum value    ReportBatchItemFailures in the FunctionResponseTypes list. This list indicates    which response types are enabled for your function. You can configure this list when you create or update an event source mapping.",
                            {
                                "sub_header": "Report syntax",
                                "content": [
                                    "When configuring reporting on batch item failures, the StreamsEventResponse class is returned with a      list of batch item failures. You can use a StreamsEventResponse object to return the sequence number      of the first failed record in the batch. You can also create your own custom class using the correct response      syntax. The following JSON structure shows the required response syntax:",
                                    "{   \"batchItemFailures\": [         {            \"itemIdentifier\": \"<SequenceNumber>\"        }    ]}",
                                    "Note",
                                    "If the batchItemFailures array contains multiple items, Lambda uses the record with the lowest      sequence number as the checkpoint. Lambda then retries all records starting from that checkpoint."
                                ]
                            },
                            {
                                "sub_header": "Success and failure conditions",
                                "content": [
                                    "Lambda treats a batch as a complete success if you return any of the following:",
                                    "  1.An empty batchItemFailure list",
                                    "  2.A null batchItemFailure list",
                                    "  3.An empty EventResponse",
                                    "  4.A null EventResponse",
                                    "Lambda treats a batch as a complete failure if you return any of the following:",
                                    "  1.An empty string itemIdentifier",
                                    "  2.A null itemIdentifier",
                                    "  3.An itemIdentifier with a bad key name",
                                    "Lambda retries failures based on your retry strategy."
                                ]
                            },
                            {
                                "sub_header": "Bisecting a batch",
                                "content": [
                                    "If your invocation fails and BisectBatchOnFunctionError is turned on, the batch is bisected      regardless of your ReportBatchItemFailures setting.",
                                    "When a partial batch success response is received and both BisectBatchOnFunctionError and        ReportBatchItemFailures are turned on, the batch is bisected at the returned sequence number and      Lambda retries only the remaining records.",
                                    "Here are some examples of function code that return the list of failed message IDs in the batch:",
                                    "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public StreamsEventResponse FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new List<StreamsEventResponse.BatchItemFailure>();\n        StreamsEventResponse streamsEventResponse = new StreamsEventResponse();\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            try\n            {\n                var sequenceNumber = record.Dynamodb.SequenceNumber;\n                context.Logger.LogInformation(sequenceNumber);\n            }\n            catch (Exception ex)\n            {\n                context.Logger.LogError(ex.Message);\n                batchItemFailures.Add(new StreamsEventResponse.BatchItemFailure() { ItemIdentifier = record.Dynamodb.SequenceNumber });\n            }\n        }\n\n        if (batchItemFailures.Count > 0)\n        {\n            streamsEventResponse.BatchItemFailures = batchItemFailures;\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n        return streamsEventResponse;\n    }\n}\n",
                                    "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public StreamsEventResponse FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new List<StreamsEventResponse.BatchItemFailure>();\n        StreamsEventResponse streamsEventResponse = new StreamsEventResponse();\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            try\n            {\n                var sequenceNumber = record.Dynamodb.SequenceNumber;\n                context.Logger.LogInformation(sequenceNumber);\n            }\n            catch (Exception ex)\n            {\n                context.Logger.LogError(ex.Message);\n                batchItemFailures.Add(new StreamsEventResponse.BatchItemFailure() { ItemIdentifier = record.Dynamodb.SequenceNumber });\n            }\n        }\n\n        if (batchItemFailures.Count > 0)\n        {\n            streamsEventResponse.BatchItemFailures = batchItemFailures;\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n        return streamsEventResponse;\n    }\n}\n",
                                    "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype BatchItemFailure struct {\n\tItemIdentifier string `json:\"ItemIdentifier\"`\n}\n\ntype BatchResult struct {\n\tBatchItemFailures []BatchItemFailure `json:\"BatchItemFailures\"`\n}\n\nfunc HandleRequest(ctx context.Context, event events.DynamoDBEvent) (*BatchResult, error) {\n\tvar batchItemFailures []BatchItemFailure\n\tcurRecordSequenceNumber := \"\"\n\n\tfor _, record := range event.Records {\n\t\t// Process your record\n\t\tcurRecordSequenceNumber = record.Change.SequenceNumber\n\t}\n\n\tif curRecordSequenceNumber != \"\" {\n\t\tbatchItemFailures = append(batchItemFailures, BatchItemFailure{ItemIdentifier: curRecordSequenceNumber})\n\t}\n\t\n\tbatchResult := BatchResult{\n\t\tBatchItemFailures: batchItemFailures,\n\t}\n\n\treturn &batchResult, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                                    "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype BatchItemFailure struct {\n\tItemIdentifier string `json:\"ItemIdentifier\"`\n}\n\ntype BatchResult struct {\n\tBatchItemFailures []BatchItemFailure `json:\"BatchItemFailures\"`\n}\n\nfunc HandleRequest(ctx context.Context, event events.DynamoDBEvent) (*BatchResult, error) {\n\tvar batchItemFailures []BatchItemFailure\n\tcurRecordSequenceNumber := \"\"\n\n\tfor _, record := range event.Records {\n\t\t// Process your record\n\t\tcurRecordSequenceNumber = record.Change.SequenceNumber\n\t}\n\n\tif curRecordSequenceNumber != \"\" {\n\t\tbatchItemFailures = append(batchItemFailures, BatchItemFailure{ItemIdentifier: curRecordSequenceNumber})\n\t}\n\t\n\tbatchResult := BatchResult{\n\t\tBatchItemFailures: batchItemFailures,\n\t}\n\n\treturn &batchResult, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                                    "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent;\nimport com.amazonaws.services.lambda.runtime.events.StreamsEventResponse;\nimport com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProcessDynamodbRecords implements RequestHandler<DynamodbEvent, Serializable> {\n\n    @Override\n    public StreamsEventResponse handleRequest(DynamodbEvent input, Context context) {\n\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new ArrayList<>();\n        String curRecordSequenceNumber = \"\";\n\n        for (DynamodbEvent.DynamodbStreamRecord dynamodbStreamRecord : input.getRecords()) {\n          try {\n                //Process your record\n                StreamRecord dynamodbRecord = dynamodbStreamRecord.getDynamodb();\n                curRecordSequenceNumber = dynamodbRecord.getSequenceNumber();\n                \n            } catch (Exception e) {\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                batchItemFailures.add(new StreamsEventResponse.BatchItemFailure(curRecordSequenceNumber));\n                return new StreamsEventResponse(batchItemFailures);\n            }\n        }\n       \n       return new StreamsEventResponse();   \n    }\n}\n\n",
                                    "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent;\nimport com.amazonaws.services.lambda.runtime.events.StreamsEventResponse;\nimport com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProcessDynamodbRecords implements RequestHandler<DynamodbEvent, Serializable> {\n\n    @Override\n    public StreamsEventResponse handleRequest(DynamodbEvent input, Context context) {\n\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new ArrayList<>();\n        String curRecordSequenceNumber = \"\";\n\n        for (DynamodbEvent.DynamodbStreamRecord dynamodbStreamRecord : input.getRecords()) {\n          try {\n                //Process your record\n                StreamRecord dynamodbRecord = dynamodbStreamRecord.getDynamodb();\n                curRecordSequenceNumber = dynamodbRecord.getSequenceNumber();\n                \n            } catch (Exception e) {\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                batchItemFailures.add(new StreamsEventResponse.BatchItemFailure(curRecordSequenceNumber));\n                return new StreamsEventResponse(batchItemFailures);\n            }\n        }\n       \n       return new StreamsEventResponse();   \n    }\n}\n\n",
                                    "  7.JavaScript : export const handler = async (event) => {\n  const records = event.Records;\n  let curRecordSequenceNumber = \"\";\n\n  for (const record of records) {\n    try {\n      // Process your record\n      curRecordSequenceNumber = record.dynamodb.SequenceNumber;\n    } catch (e) {\n      // Return failed record's sequence number\n      return { batchItemFailures: [{ itemIdentifier: curRecordSequenceNumber }] };\n    }\n  }\n\n  return { batchItemFailures: [] };\n};\n\n",
                                    "  8.SDK for JavaScript (v3) : export const handler = async (event) => {\n  const records = event.Records;\n  let curRecordSequenceNumber = \"\";\n\n  for (const record of records) {\n    try {\n      // Process your record\n      curRecordSequenceNumber = record.dynamodb.SequenceNumber;\n    } catch (e) {\n      // Return failed record's sequence number\n      return { batchItemFailures: [{ itemIdentifier: curRecordSequenceNumber }] };\n    }\n  }\n\n  return { batchItemFailures: [] };\n};\n\n",
                                    "  9.PHP : <?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\DynamoDb\\DynamoDbEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $dynamoDbEvent = new DynamoDbEvent($event);\n        $this->logger->info(\"Processing records\");\n\n        $records = $dynamoDbEvent->getRecords();\n        $failedRecords = [];\n        foreach ($records as $record) {\n            try {\n                $data = $record->getData();\n                $this->logger->info(json_encode($data));\n                // TODO: Do interesting work based on the new data\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $failedRecords[] = $record->getSequenceNumber();\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n\n        // change format for the response\n        $failures = array_map(\n            fn(string $sequenceNumber) => ['itemIdentifier' => $sequenceNumber],\n            $failedRecords\n        );\n\n        return [\n            'batchItemFailures' => $failures\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  10.SDK for PHP : <?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\DynamoDb\\DynamoDbEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $dynamoDbEvent = new DynamoDbEvent($event);\n        $this->logger->info(\"Processing records\");\n\n        $records = $dynamoDbEvent->getRecords();\n        $failedRecords = [];\n        foreach ($records as $record) {\n            try {\n                $data = $record->getData();\n                $this->logger->info(json_encode($data));\n                // TODO: Do interesting work based on the new data\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $failedRecords[] = $record->getSequenceNumber();\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n\n        // change format for the response\n        $failures = array_map(\n            fn(string $sequenceNumber) => ['itemIdentifier' => $sequenceNumber],\n            $failedRecords\n        );\n\n        return [\n            'batchItemFailures' => $failures\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef handler(event, context):\n    records = event.get(\"Records\")\n    curRecordSequenceNumber = \"\"\n    \n    for record in records:\n        try:\n            # Process your record\n            curRecordSequenceNumber = record[\"dynamodb\"][\"SequenceNumber\"]\n        except Exception as e:\n            # Return failed record's sequence number\n            return {\"batchItemFailures\":[{\"itemIdentifier\": curRecordSequenceNumber}]}\n\n    return {\"batchItemFailures\":[]}\n\n",
                                    "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef handler(event, context):\n    records = event.get(\"Records\")\n    curRecordSequenceNumber = \"\"\n    \n    for record in records:\n        try:\n            # Process your record\n            curRecordSequenceNumber = record[\"dynamodb\"][\"SequenceNumber\"]\n        except Exception as e:\n            # Return failed record's sequence number\n            return {\"batchItemFailures\":[{\"itemIdentifier\": curRecordSequenceNumber}]}\n\n    return {\"batchItemFailures\":[]}\n\n",
                                    "  13.Ruby : def lambda_handler(event:, context:)\n    records = event[\"Records\"]\n    cur_record_sequence_number = \"\"\n  \n    records.each do |record|\n      begin\n        # Process your record\n        cur_record_sequence_number = record[\"dynamodb\"][\"SequenceNumber\"]\n      rescue StandardError => e\n        # Return failed record's sequence number\n        return {\"batchItemFailures\" => [{\"itemIdentifier\" => cur_record_sequence_number}]}\n      end\n    end\n  \n    {\"batchItemFailures\" => []}\n  end\n",
                                    "  14.SDK for Ruby : def lambda_handler(event:, context:)\n    records = event[\"Records\"]\n    cur_record_sequence_number = \"\"\n  \n    records.each do |record|\n      begin\n        # Process your record\n        cur_record_sequence_number = record[\"dynamodb\"][\"SequenceNumber\"]\n      rescue StandardError => e\n        # Return failed record's sequence number\n        return {\"batchItemFailures\" => [{\"itemIdentifier\" => cur_record_sequence_number}]}\n      end\n    end\n  \n    {\"batchItemFailures\" => []}\n  end\n",
                                    "  15.Rust : use aws_lambda_events::{\n    event::dynamodb::{Event, EventRecord, StreamRecord},\n    streams::{DynamoDbBatchItemFailure, DynamoDbEventResponse},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\n/// Process the stream record\nfn process_record(record: &EventRecord) -> Result<(), Error> {\n    let stream_record: &StreamRecord = &record.change;\n\n    // process your stream record here...\n    tracing::info!(\"Data: {:?}\", stream_record);\n\n    Ok(())\n}\n\n/// Main Lambda handler here...\nasync fn function_handler(event: LambdaEvent<Event>) -> Result<DynamoDbEventResponse, Error> {\n    let mut response = DynamoDbEventResponse {\n        batch_item_failures: vec![],\n    };\n\n    let records = &event.payload.records;\n\n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(response);\n    }\n\n    for record in records {\n        tracing::info!(\"EventId: {}\", record.event_id);\n\n        // Couldn't find a sequence number\n        if record.change.sequence_number.is_none() {\n            response.batch_item_failures.push(DynamoDbBatchItemFailure {\n                item_identifier: Some(\"\".to_string()),\n            });\n            return Ok(response);\n        }\n\n        // Process your record here...\n        if process_record(record).is_err() {\n            response.batch_item_failures.push(DynamoDbBatchItemFailure {\n                item_identifier: record.change.sequence_number.clone(),\n            });\n            /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n            return Ok(response);\n        }\n    }\n\n    tracing::info!(\"Successfully processed {} record(s)\", records.len());\n\n    Ok(response)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n\n",
                                    "  16.SDK for Rust : use aws_lambda_events::{\n    event::dynamodb::{Event, EventRecord, StreamRecord},\n    streams::{DynamoDbBatchItemFailure, DynamoDbEventResponse},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\n/// Process the stream record\nfn process_record(record: &EventRecord) -> Result<(), Error> {\n    let stream_record: &StreamRecord = &record.change;\n\n    // process your stream record here...\n    tracing::info!(\"Data: {:?}\", stream_record);\n\n    Ok(())\n}\n\n/// Main Lambda handler here...\nasync fn function_handler(event: LambdaEvent<Event>) -> Result<DynamoDbEventResponse, Error> {\n    let mut response = DynamoDbEventResponse {\n        batch_item_failures: vec![],\n    };\n\n    let records = &event.payload.records;\n\n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(response);\n    }\n\n    for record in records {\n        tracing::info!(\"EventId: {}\", record.event_id);\n\n        // Couldn't find a sequence number\n        if record.change.sequence_number.is_none() {\n            response.batch_item_failures.push(DynamoDbBatchItemFailure {\n                item_identifier: Some(\"\".to_string()),\n            });\n            return Ok(response);\n        }\n\n        // Process your record here...\n        if process_record(record).is_err() {\n            response.batch_item_failures.push(DynamoDbBatchItemFailure {\n                item_identifier: record.change.sequence_number.clone(),\n            });\n            /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n            return Ok(response);\n        }\n    }\n\n    tracing::info!(\"Successfully processed {} record(s)\", records.len());\n\n    Ok(response)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public StreamsEventResponse FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new List<StreamsEventResponse.BatchItemFailure>();\n        StreamsEventResponse streamsEventResponse = new StreamsEventResponse();\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            try\n            {\n                var sequenceNumber = record.Dynamodb.SequenceNumber;\n                context.Logger.LogInformation(sequenceNumber);\n            }\n            catch (Exception ex)\n            {\n                context.Logger.LogError(ex.Message);\n                batchItemFailures.Add(new StreamsEventResponse.BatchItemFailure() { ItemIdentifier = record.Dynamodb.SequenceNumber });\n            }\n        }\n\n        if (batchItemFailures.Count > 0)\n        {\n            streamsEventResponse.BatchItemFailures = batchItemFailures;\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n        return streamsEventResponse;\n    }\n}\n"
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Error handling",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-dynamodb-errors.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Error handling for DynamoDB event source mappings depends on whether the error occurs before the function is invoked or during function invocation:",
                            "  1.Before invocation: :  If a Lambda event source mapping is unable to invoke the function due to throttling or other issues, it retries until the records expire or exceed the maximum age configured on the event source mapping (MaximumRecordAgeInSeconds).",
                            "  2.During invocation: :  If the function is invoked but returns an error, Lambda retries until the records expire, exceed the maximum age (MaximumRecordAgeInSeconds), or reach the configured retry quota (MaximumRetryAttempts). For function errors, you can also configure BisectBatchOnFunctionError, which splits a failed batch into two smaller batches, isolating bad records and avoiding timeouts. Splitting batches doesn't consume the retry quota.",
                            "If the error handling measures fail, Lambda discards the records and continues processing  batches from the stream. With the default settings, this means that a bad record can block processing on the affected  shard for up to one day. To avoid this, configure your function's event source mapping with a reasonable  number of retries and a maximum record age that fits your use case.",
                            {
                                "sub_header": "Configuring destinations for failed invocations",
                                "content": [
                                    "To retain records of failed event source mapping invocations, add a destination to your function's event source mapping. Each record sent to the destination is a JSON document containing metadata about the failed invocation. For Amazon S3 destinations, Lambda also sends the entire invocation record along with the metadata. You can configure any Amazon SNS topic, Amazon SQS queue, or S3 bucket as a destination.",
                                    "With Amazon S3 destinations, you can use the Amazon S3 Event Notifications feature to receive notifications when objects are uploaded to your destination S3 bucket. You can also configure S3 Event Notifications to invoke another Lambda function to perform automated processing on failed batches.",
                                    "Your execution role must have permissions for the destination:",
                                    "  1.For SQS destinations: :  sqs:SendMessage",
                                    "  2.For SNS destinations: :  sns:Publish",
                                    "  3.For S3 bucket destinations: :   s3:PutObject and s3:ListBucket",
                                    "If you've enabled encryption with your own KMS key for an S3 destination, your function's execution role must also have permission to call             kms:GenerateDataKey.            If the KMS key and S3 bucket destination are in a different account from your Lambda function            and execution role, configure the KMS key to trust the execution role to allow            kms:GenerateDataKey.",
                                    "To configure an on-failure destination using the console, follow these steps:",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Choose a function.",
                                    "  3 : Under Function overview, choose Add destination.",
                                    "  4 : For Source, choose Event source mapping invocation.",
                                    "  5 : For Event source mapping, choose an event source that's configured              for this function.",
                                    "  6 : For Condition, select On failure. For event              source mapping invocations, this is the only accepted condition.",
                                    "  7 : For Destination type, choose the destination type that Lambda sends              invocation records to.",
                                    "  8 : For Destination, choose a resource.",
                                    "  9 : Choose Save.",
                                    "You can also configure an on-failure destination using the AWS Command Line Interface (AWS CLI). For example, the following          create-event-source-mapping command adds an event source mapping with an SQS on-failure destination to          MyFunction:",
                                    "aws lambda create-event-source-mapping \\--function-name \"MyFunction\" \\--event-source-arn arn:aws:dynamodb:us-east-2:123456789012:table/my-table/stream/2024-06-10T19:26:16.525 \\--destination-config '{\"OnFailure\": {\"Destination\": \"arn:aws:sqs:us-east-1:123456789012:dest-queue\"}}'",
                                    "The following update-event-source-mapping command updates an event source mapping to send failed invocation records to an SNS destination after two retry attempts, or if the records are more than an hour old.",
                                    "aws lambda update-event-source-mapping \\--uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\--maximum-retry-attempts 2 \\--maximum-record-age-in-seconds 3600 \\--destination-config '{\"OnFailure\": {\"Destination\": \"arn:aws:sns:us-east-1:123456789012:dest-topic\"}}'",
                                    "Updated settings are applied asynchronously and aren't reflected in the output until the process completes. Use    the get-event-source-mapping command to view the current status.",
                                    "To remove a destination, supply an empty string as the argument to the          destination-config parameter:",
                                    "aws lambda update-event-source-mapping \\--uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\--destination-config '{\"OnFailure\": {\"Destination\": \"\"}}'",
                                    {
                                        "sub_header": "Security best practices for Amazon S3 destinations",
                                        "content": [
                                            "Deleting an S3 bucket that's configured as a destination without removing the destination from your function's configuration can create a security risk. If another       user knows your destination bucket's name, they can recreate the bucket in their AWS account. Records of failed invocations will be sent to their bucket, potentially       exposing data from your function.",
                                            "Warning",
                                            "To ensure that invocation records from your function can't be sent to an S3 bucket in another AWS account, add a condition to your function's execution role         that limits s3:PutObject permissions to buckets in your account. ",
                                            "The following example shows an IAM policy that limits your function's s3:PutObject permissions to buckets in your account. This policy also gives Lambda        the s3:ListBucket permission it needs to use an S3 bucket as a destination.",
                                            "{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Sid\": \"S3BucketResourceAccountWrite\",            \"Effect\": \"Allow\",            \"Action\": [                \"s3:PutObject\",                \"s3:ListBucket\"            ],            \"Resource\": \"arn:aws:s3:::*/*\",            \"Condition\": {                \"StringEquals\": {                    \"s3:ResourceAccount\": \"111122223333\"                }            }        }    ]}",
                                            "To add a permissions policy to your funcion's execution role using the AWS Management Console or AWS CLI, refer to the instructions in the following procedures:",
                                            "  1.Console : \nTo add a permissions policy to a function's execution role (console)Open the Functions page of the Lambda console.\nSelect the Lambda function whose execution role you want to modify.\n\nIn the Configuration tab, select Permissions.\n\nIn the Execution role tab, select your function's Role name to open the role's IAM console page.\n\nAdd a permissions policy to the role by doing the following:\n\nIn the Permissions policies pane, choose Add permissions and select Create inline policy.\n\nIn Policy editor, select JSON.\n\nPaste the policy you want to add into the editor (replacing the existing JSON), and then choose Next.\n\nUnder Policy details, enter a Policy name.\n\nChoose Create policy.\n\n\n",
                                            "  2.AWS CLI : put-role-policy",
                                            "anchor",
                                            "anchor",
                                            "To add a permissions policy to a function's execution role (console)",
                                            "  1 : Open the Functions page of the Lambda console.",
                                            "  2 : Select the Lambda function whose execution role you want to modify.",
                                            "  3 : In the Configuration tab, select Permissions.",
                                            "  4 : In the Execution role tab, select your function's Role name to open the role's IAM console page.",
                                            "  5 : Add a permissions policy to the role by doing the following:In the Permissions policies pane, choose Add permissions and select Create inline policy.In Policy editor, select JSON.Paste the policy you want to add into the editor (replacing the existing JSON), and then choose Next.Under Policy details, enter a Policy name.Choose Create policy."
                                        ]
                                    },
                                    {
                                        "sub_header": "Example Amazon SNS and Amazon SQS invocation record",
                                        "content": [
                                            "The following example shows an invocation record Lambda sends to an SQS or SNS destination for a DynamoDB stream.",
                                            "{    \"requestContext\": {        \"requestId\": \"316aa6d0-8154-xmpl-9af7-85d5f4a6bc81\",        \"functionArn\": \"arn:aws:lambda:us-east-2:123456789012:function:myfunction\",        \"condition\": \"RetryAttemptsExhausted\",        \"approximateInvokeCount\": 1    },    \"responseContext\": {        \"statusCode\": 200,        \"executedVersion\": \"$LATEST\",        \"functionError\": \"Unhandled\"    },    \"version\": \"1.0\",    \"timestamp\": \"2019-11-14T00:13:49.717Z\",    \"DDBStreamBatchInfo\": {        \"shardId\": \"shardId-00000001573689847184-864758bb\",        \"startSequenceNumber\": \"800000000003126276362\",        \"endSequenceNumber\": \"800000000003126276362\",        \"approximateArrivalOfFirstRecord\": \"2019-11-14T00:13:19Z\",        \"approximateArrivalOfLastRecord\": \"2019-11-14T00:13:19Z\",        \"batchSize\": 1,        \"streamArn\": \"arn:aws:dynamodb:us-east-2:123456789012:table/mytable/stream/2019-11-14T00:04:06.388\"    }}",
                                            "You can use this information to retrieve the affected records from the stream for  troubleshooting. The actual records aren't included, so you must process this record and retrieve them from the  stream before they expire and are lost."
                                        ]
                                    },
                                    {
                                        "sub_header": "Example Amazon S3 invocation record",
                                        "content": [
                                            "The following example shows an invocation record Lambda sends to an S3 bucket for a DynamoDB stream. In addition to all of the fields from the previous example for SQS and SNS destinations, the payload field       contains the original invocation record as an escaped JSON string.",
                                            "{    \"requestContext\": {        \"requestId\": \"316aa6d0-8154-xmpl-9af7-85d5f4a6bc81\",        \"functionArn\": \"arn:aws:lambda:us-east-2:123456789012:function:myfunction\",        \"condition\": \"RetryAttemptsExhausted\",        \"approximateInvokeCount\": 1    },    \"responseContext\": {        \"statusCode\": 200,        \"executedVersion\": \"$LATEST\",        \"functionError\": \"Unhandled\"    },    \"version\": \"1.0\",    \"timestamp\": \"2019-11-14T00:13:49.717Z\",    \"DDBStreamBatchInfo\": {        \"shardId\": \"shardId-00000001573689847184-864758bb\",        \"startSequenceNumber\": \"800000000003126276362\",        \"endSequenceNumber\": \"800000000003126276362\",        \"approximateArrivalOfFirstRecord\": \"2019-11-14T00:13:19Z\",        \"approximateArrivalOfLastRecord\": \"2019-11-14T00:13:19Z\",        \"batchSize\": 1,        \"streamArn\": \"arn:aws:dynamodb:us-east-2:123456789012:table/mytable/stream/2019-11-14T00:04:06.388\"    },    \"payload\": \"<Whole Event>\" // Only available in S3}",
                                            "The S3 object containing the invocation record uses the following naming convention:",
                                            "aws/lambda/<ESM-UUID>/<shardID>/YYYY/MM/DD/YYYY-MM-DDTHH.MM.SS-<Random UUID>"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Stateful processing",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-ddb-windows.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Lambda functions can run continuous stream processing applications. A stream represents unbounded data that flows    continuously through your application. To analyze information from this continuously updating input, you can bound    the included records using a window defined in terms of time.",
                            "Tumbling windows are distinct time windows that open and close at regular intervals. By default, Lambda invocations    are stateless—you cannot use them for processing data across multiple continuous invocations without an external database.    However, with tumbling windows, you can maintain your state across invocations. This state contains the aggregate result    of the messages previously processed for the current window. Your state can be a maximum of 1 MB per shard. If it exceeds    that size, Lambda terminates the window early.",
                            "Each record in a stream belongs to a specific window. Lambda will process each record at least once, but doesn't guarantee that each record will be processed only once. In rare cases, such as error handling, some records might be processed more than once. Records are always processed in order the first time. If records are processed more than once, they might be processed out of order.",
                            {
                                "sub_header": "Aggregation and processing",
                                "content": [
                                    "Your user managed function is invoked both for aggregation and for processing the final results of that      aggregation. Lambda aggregates all records received in the window. You can receive these records in multiple      batches, each as a separate invocation. Each invocation receives a state. Thus, when using tumbling windows,      your Lambda function response must contain a state property. If the response does not contain a      state property, Lambda considers this a failed invocation. To satisfy this condition, your function      can return a TimeWindowEventResponse object, which has the following JSON shape:",
                                    "Example TimeWindowEventResponse values",
                                    {
                                        "code_example": "{\n    \"state\": {\n        \"1\": 282,\n        \"2\": 715\n    },\n    \"batchItemFailures\": []\n}"
                                    },
                                    "Note",
                                    "For Java functions, we recommend using a Map<String, String> to represent the state.",
                                    "At the end of the window, the flag isFinalInvokeForWindow is set to true to indicate      that this is the final state and that it’s ready for processing. After processing, the window completes and your      final invocation completes, and then the state is dropped.",
                                    "At the end of your window, Lambda uses final processing for actions on the aggregation results. Your final      processing is synchronously invoked. After successful invocation, your function checkpoints the sequence number      and stream processing continues. If invocation is unsuccessful, your Lambda function suspends further processing      until a successful invocation.",
                                    "Example  DynamodbTimeWindowEvent",
                                    {
                                        "code_example": "\n{\n   \"Records\":[\n      {\n         \"eventID\":\"1\",\n         \"eventName\":\"INSERT\",\n         \"eventVersion\":\"1.0\",\n         \"eventSource\":\"aws:dynamodb\",\n         \"awsRegion\":\"us-east-1\",\n         \"dynamodb\":{\n            \"Keys\":{\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"NewImage\":{\n               \"Message\":{\n                  \"S\":\"New item!\"\n               },\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"SequenceNumber\":\"111\",\n            \"SizeBytes\":26,\n            \"StreamViewType\":\"NEW_AND_OLD_IMAGES\"\n         },\n         \"eventSourceARN\":\"stream-ARN\"\n      },\n      {\n         \"eventID\":\"2\",\n         \"eventName\":\"MODIFY\",\n         \"eventVersion\":\"1.0\",\n         \"eventSource\":\"aws:dynamodb\",\n         \"awsRegion\":\"us-east-1\",\n         \"dynamodb\":{\n            \"Keys\":{\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"NewImage\":{\n               \"Message\":{\n                  \"S\":\"This item has changed\"\n               },\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"OldImage\":{\n               \"Message\":{\n                  \"S\":\"New item!\"\n               },\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"SequenceNumber\":\"222\",\n            \"SizeBytes\":59,\n            \"StreamViewType\":\"NEW_AND_OLD_IMAGES\"\n         },\n         \"eventSourceARN\":\"stream-ARN\"\n      },\n      {\n         \"eventID\":\"3\",\n         \"eventName\":\"REMOVE\",\n         \"eventVersion\":\"1.0\",\n         \"eventSource\":\"aws:dynamodb\",\n         \"awsRegion\":\"us-east-1\",\n         \"dynamodb\":{\n            \"Keys\":{\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"OldImage\":{\n               \"Message\":{\n                  \"S\":\"This item has changed\"\n               },\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"SequenceNumber\":\"333\",\n            \"SizeBytes\":38,\n            \"StreamViewType\":\"NEW_AND_OLD_IMAGES\"\n         },\n         \"eventSourceARN\":\"stream-ARN\"\n      }\n   ],\n    \"window\": {\n        \"start\": \"2020-07-30T17:00:00Z\",\n        \"end\": \"2020-07-30T17:05:00Z\"\n    },\n    \"state\": {\n        \"1\": \"state1\"\n    },\n    \"shardId\": \"shard123456789\",\n    \"eventSourceARN\": \"stream-ARN\",\n    \"isFinalInvokeForWindow\": false,\n    \"isWindowTerminatedEarly\": false\n}\n"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Configuration",
                                "content": [
                                    "You can configure tumbling windows when you create or update an event source mapping. To configure a tumbling window, specify the window in seconds (TumblingWindowInSeconds). The following        example AWS Command Line Interface (AWS CLI) command creates a streaming event source mapping that has a tumbling window of 120        seconds. The Lambda function defined for aggregation and processing is named        tumbling-window-example-function.",
                                    "aws lambda create-event-source-mapping \\--event-source-arn arn:aws:dynamodb:us-east-2:123456789012:table/my-table/stream/2024-06-10T19:26:16.525 \\--function-name tumbling-window-example-function \\--starting-position TRIM_HORIZON \\--tumbling-window-in-seconds 120",
                                    "Lambda determines tumbling window boundaries based on the time when records were inserted into the stream. All      records have an approximate timestamp available that Lambda uses in boundary determinations.",
                                    "Tumbling window aggregations do not support resharding. When the shard ends, Lambda considers the window      closed, and the child shards start their own window in a fresh state.",
                                    "Tumbling windows fully support the existing retry policies maxRetryAttempts and        maxRecordAge.",
                                    "Example  Handler.py – Aggregation and processing",
                                    "The following Python function demonstrates how to aggregate and then process your final state:",
                                    {
                                        "code_example": "def lambda_handler(event, context):\n    print('Incoming event: ', event)\n    print('Incoming state: ', event['state'])\n\n#Check if this is the end of the window to either aggregate or process.\n    if event['isFinalInvokeForWindow']:\n        # logic to handle final state of the window\n        print('Destination invoke')\n    else:\n        print('Aggregate invoke')\n\n#Check for early terminations\n    if event['isWindowTerminatedEarly']:\n        print('Window terminated early')\n\n    #Aggregation logic\n    state = event['state']\n    for record in event['Records']:\n        state[record['dynamodb']['NewImage']['Id']] = state.get(record['dynamodb']['NewImage']['Id'], 0) + 1\n\n    print('Returning state: ', state)\n    return {'state': state}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Parameters",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-ddb-params.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "All Lambda event source types share the same CreateEventSourceMapping and UpdateEventSourceMapping      API operations. However, only some of the parameters apply to DynamoDB Streams.",
                            "ParameterRequiredDefaultNotesBatchSizeN100Maximum: 10,000BisectBatchOnFunctionErrorNfalsenoneDestinationConfigNN/AStandard Amazon SQS queue or standard Amazon SNS topic destination for discarded recordsEnabledNtruenoneEventSourceArnYN/AARN of the data stream or a stream consumerFilterCriteriaNN/AControl which events Lambda sends to your functionFunctionNameYN/AnoneFunctionResponseTypesNN/ATo let your function report specific failures in a batch, include the value                ReportBatchItemFailures in FunctionResponseTypes. For more information, see                Configuring partial batch response with DynamoDB and Lambda.MaximumBatchingWindowInSecondsN0noneMaximumRecordAgeInSecondsN-1-1 means infinite: failed records are retried until the record expires. The data retention limit for DynamoDB Streams is 24 hours.Minimum: -1Maximum: 604,800MaximumRetryAttemptsN-1-1 means infinite: failed records are retried until the record expiresMinimum: 0Maximum: 10,000ParallelizationFactorN1Maximum: 10StartingPositionYN/ATRIM_HORIZON or LATESTTumblingWindowInSecondsNN/AMinimum: 0Maximum: 900"
                        ]
                    },
                    {
                        "title": "Event filtering",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-ddb-filtering.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "You can use event filtering to control which records from a stream or queue Lambda sends to your function.    For general information about how event filtering works, see Control which events Lambda sends to your function.",
                            "This section focuses on event filtering for DynamoDB event sources.",
                            "Topics",
                            {
                                "sub_header": "DynamoDB event",
                                "content": [
                                    "Suppose you have a DynamoDB table with the primary key CustomerName and attributes AccountManager and       PaymentTerms. The following shows an example record from your DynamoDB table’s stream.",
                                    "{      \"eventID\": \"1\",      \"eventVersion\": \"1.0\",      \"dynamodb\": {          \"ApproximateCreationDateTime\": \"1678831218.0\",          \"Keys\": {              \"CustomerName\": {                  \"S\": \"AnyCompany Industries\"              },              \"NewImage\": {                  \"AccountManager\": {                      \"S\": \"Pat Candella\"                  },                  \"PaymentTerms\": {                      \"S\": \"60 days\"                  },                  \"CustomerName\": {                      \"S\": \"AnyCompany Industries\"                  }              },              \"SequenceNumber\": \"111\",              \"SizeBytes\": 26,              \"StreamViewType\": \"NEW_IMAGE\"          }      }  }",
                                    "To filter based on the key and attribute values in your DynamoDB table, use the dynamodb key in the record.       The following sections provide examples for different filter types.",
                                    {
                                        "sub_header": "Filtering with table keys",
                                        "content": [
                                            "Suppose you want your function to process only those records where the primary key CustomerName is “AnyCompany Industries.” The       FilterCriteria object would be as follows.",
                                            "{     \"Filters\": [          {              \"Pattern\": \"{ \\\"dynamodb\\\" : { \\\"Keys\\\" : { \\\"CustomerName\\\" : { \\\"S\\\" : [ \\\"AnyCompany Industries\\\" ] } } } }\"          }      ] }",
                                            "For added clarity, here is the value of the filter's Pattern expanded in plain JSON. ",
                                            "{     \"dynamodb\": {          \"Keys\": {              \"CustomerName\": {                  \"S\": [ \"AnyCompany Industries\" ]                  }              }          } }",
                                            "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                            "  1.Console : { \"dynamodb\" : { \"Keys\" : { \"CustomerName\" : { \"S\" : [ \"AnyCompany Industries\" ] } } } }",
                                            "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:dynamodb:us-east-2:123456789012:table/my-table \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"dynamodb\\\" : { \\\"Keys\\\" : { \\\"CustomerName\\\" : { \\\"S\\\" : [ \\\"AnyCompany Industries\\\" ] } } } }\"}]}'",
                                            "  3.AWS SAM : FilterCriteria:\n   Filters:\n     - Pattern: '{ \"dynamodb\" : { \"Keys\" : { \"CustomerName\" : { \"S\" : [ \"AnyCompany Industries\" ] } } } }'",
                                            "anchor",
                                            "anchor",
                                            "anchor",
                                            "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following             string for the Filter criteria.",
                                            {
                                                "code_example": "{ \"dynamodb\" : { \"Keys\" : { \"CustomerName\" : { \"S\" : [ \"AnyCompany Industries\" ] } } } }"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Filtering with table attributes",
                                "content": [
                                    "With DynamoDB, you can also use the NewImage and OldImage keys to filter for attribute values. Suppose you want       to filter records where the AccountManager attribute in the latest table image is “Pat Candella” or \"Shirley Rodriguez.\" The       FilterCriteria object would be as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"dynamodb\\\" : { \\\"NewImage\\\" : { \\\"AccountManager\\\" : { \\\"S\\\" : [ \\\"Pat Candella\\\", \\\"Shirley Rodriguez\\\" ] } } } }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON.",
                                    "{    \"dynamodb\": {        \"NewImage\": {            \"AccountManager\": {                \"S\": [ \"Pat Candella\", \"Shirley Rodriguez\" ]            }        }    }}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"dynamodb\" : { \"NewImage\" : { \"AccountManager\" : { \"S\" : [ \"Pat Candella\", \"Shirley Rodriguez\" ] } } } }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:dynamodb:us-east-2:123456789012:table/my-table \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"dynamodb\\\" : { \\\"NewImage\\\" : { \\\"AccountManager\\\" : { \\\"S\\\" : [ \\\"Pat Candella\\\", \\\"Shirley Rodriguez\\\" ] } } } }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"dynamodb\" : { \"NewImage\" : { \"AccountManager\" : { \"S\" : [ \"Pat Candella\", \"Shirley Rodriguez\" ] } } } }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following             string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"dynamodb\" : { \"NewImage\" : { \"AccountManager\" : { \"S\" : [ \"Pat Candella\", \"Shirley Rodriguez\" ] } } } }"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Filtering with Boolean expressions",
                                "content": [
                                    "You can also create filters using Boolean AND expressions. These expressions can include both your table's key and attribute parameters.     Suppose you want to filter records where the NewImage value of AccountManager is \"Pat Candella\" and the     OldImage value is \"Terry Whitlock\". The FilterCriteria object would be as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"dynamodb\\\" : { \\\"NewImage\\\" : { \\\"AccountManager\\\" : { \\\"S\\\" : [ \\\"Pat Candella\\\" ] } } } , \\\"dynamodb\\\" : { \\\"OldImage\\\" : { \\\"AccountManager\\\" : { \\\"S\\\" : [ \\\"Terry Whitlock\\\" ] } } } }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON.",
                                    "{     \"dynamodb\" : {         \"NewImage\" : {             \"AccountManager\" : {                 \"S\" : [                     \"Pat Candella\"                 ]             }         }     },     \"dynamodb\": {         \"OldImage\": {             \"AccountManager\": {                 \"S\": [                     \"Terry Whitlock\"                 ]             }         }     } }",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"dynamodb\" : { \"NewImage\" : { \"AccountManager\" : { \"S\" : [ \"Pat Candella\" ] } } } , \"dynamodb\" : { \"OldImage\" : { \"AccountManager\" : { \"S\" : [ \"Terry Whitlock\" ] } } } }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:dynamodb:us-east-2:123456789012:table/my-table \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"dynamodb\\\" : { \\\"NewImage\\\" : { \\\"AccountManager\\\" : { \\\"S\\\" : [ \\\"Pat Candella\\\" ] } } } , \\\"dynamodb\\\" : { \\\"OldImage\\\" : { \\\"AccountManager\\\" : { \\\"S\\\" : [ \\\"Terry Whitlock\\\" ] } } } } \"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"dynamodb\" : { \"NewImage\" : { \"AccountManager\" : { \"S\" : [ \"Pat Candella\" ] } } } , \"dynamodb\" : { \"OldImage\" : { \"AccountManager\" : { \"S\" : [ \"Terry Whitlock\" ] } } } }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following             string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"dynamodb\" : { \"NewImage\" : { \"AccountManager\" : { \"S\" : [ \"Pat Candella\" ] } } } , \"dynamodb\" : { \"OldImage\" : { \"AccountManager\" : { \"S\" : [ \"Terry Whitlock\" ] } } } }"
                                    },
                                    "Note",
                                    "DynamoDB event filtering doesn’t support the use of numeric operators (numeric equals and numeric range). Even if items in your         table are stored as numbers, these parameters are converted to strings in the JSON record object."
                                ]
                            },
                            {
                                "sub_header": "Using the Exists operator",
                                "content": [
                                    "Because of the way that JSON event objects from DynamoDB are structured, using the Exists operator requires special care.       The Exists operator only works on leaf nodes in the event JSON, so if your filter pattern uses Exists to test for an intermediate       node, it won't work. Consider the following DynamoDB table item:",
                                    "{  \"UserID\": {\"S\": \"12345\"},  \"Name\": {\"S\": \"John Doe\"},  \"Organizations\": {\"L\": [      {\"S\":\"Sales\"},      {\"S\":\"Marketing\"},      {\"S\":\"Support\"}    ]  }}",
                                    "You might want to create a filter pattern like the following that would test for events containing \"Organizations\":",
                                    "{ \"dynamodb\" : { \"NewImage\" : { \"Organizations\" : [ { \"exists\": true } ] } } }",
                                    "However, this filter pattern would never return a match because \"Organizations\" is not a leaf node. The following         example shows how to properly use the Exists operator to construct the desired filter pattern:",
                                    "{ \"dynamodb\" : { \"NewImage\" : {\"Organizations\": {\"L\": {\"S\": [ {\"exists\": true } ] } } } } }"
                                ]
                            },
                            {
                                "sub_header": "JSON format for DynamoDB filtering",
                                "content": [
                                    "To properly filter events from DynamoDB sources, both the data field and your filter criteria for the data field (dynamodb)       must be in valid JSON format. If either field isn't in a valid JSON format, Lambda drops the message or throws an exception. The following       table summarizes the specific behavior: ",
                                    "Incoming data formatFilter pattern format for data propertiesResulting actionValid JSONValid JSONLambda filters based on your filter criteria.Valid JSONNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONNon-JSONLambda throws an exception at the time of the event source mapping creation or update. The filter pattern                for data properties must be in a valid JSON format.Non-JSONValid JSONLambda drops the record.Non-JSONNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Non-JSONNon-JSONLambda throws an exception at the time of the event source mapping creation or update. The filter pattern                for data properties must be in a valid JSON format."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Tutorial",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-ddb-example.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            " In this tutorial, you create a Lambda function to consume events from an Amazon DynamoDB stream.",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "This tutorial assumes that you have some knowledge of basic Lambda operations and the Lambda console. If you      haven't already, follow the instructions in Create a Lambda function with the console to create your first Lambda function.",
                                    "To complete the following steps, you need the AWS CLI version 2. Commands and the expected output are listed in separate blocks:",
                                    "aws --version",
                                    "You should see the following output:",
                                    "aws-cli/2.13.27 Python/3.11.6 Linux/4.14.328-248.540.amzn2.x86_64 exe/x86_64.amzn.2",
                                    "For long commands, an escape character (\\) is used to split a command over multiple lines.",
                                    "On Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.     To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.     Example CLI commands in this guide use Linux formatting. Commands which include inline JSON documents must be reformatted if you are using the Windows CLI.    "
                                ]
                            },
                            {
                                "sub_header": "Create the execution role",
                                "content": [
                                    "Create the execution role that gives your function      permission to access AWS resources.",
                                    "To create an execution role",
                                    "  1 : Open the roles page in the IAM console.",
                                    "  2 : Choose Create role.",
                                    "  3 : Create a role with the following properties.Trusted entity – Lambda.Permissions – AWSLambdaDynamoDBExecutionRole.Role name – lambda-dynamodb-role.",
                                    "The AWSLambdaDynamoDBExecutionRole has the permissions that the function needs to read      items from DynamoDB and write logs to CloudWatch Logs."
                                ]
                            },
                            {
                                "sub_header": "Create the function",
                                "content": [
                                    "Create a Lambda function that processes your DynamoDB events. The function code writes some of      the incoming event data to CloudWatch Logs.",
                                    "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public void FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            context.Logger.LogInformation($\"Event ID: {record.EventID}\");\n            context.Logger.LogInformation($\"Event Name: {record.EventName}\");\n\n            context.Logger.LogInformation(JsonSerializer.Serialize(record));\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n    }\n}\n\n",
                                    "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public void FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            context.Logger.LogInformation($\"Event ID: {record.EventID}\");\n            context.Logger.LogInformation($\"Event Name: {record.EventName}\");\n\n            context.Logger.LogInformation(JsonSerializer.Serialize(record));\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n    }\n}\n\n",
                                    "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"fmt\"\n)\n\nfunc HandleRequest(ctx context.Context, event events.DynamoDBEvent) (*string, error) {\n\tif len(event.Records) == 0 {\n\t\treturn nil, fmt.Errorf(\"received empty event\")\n\t}\n\n\tfor _, record := range event.Records {\n\t \tLogDynamoDBRecord(record)\n\t}\n\n\tmessage := fmt.Sprintf(\"Records processed: %d\", len(event.Records))\n\treturn &message, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\nfunc LogDynamoDBRecord(record events.DynamoDBEventRecord){\n\tfmt.Println(record.EventID)\n\tfmt.Println(record.EventName)\n\tfmt.Printf(\"%+v\\n\", record.Change)\n}\n",
                                    "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"fmt\"\n)\n\nfunc HandleRequest(ctx context.Context, event events.DynamoDBEvent) (*string, error) {\n\tif len(event.Records) == 0 {\n\t\treturn nil, fmt.Errorf(\"received empty event\")\n\t}\n\n\tfor _, record := range event.Records {\n\t \tLogDynamoDBRecord(record)\n\t}\n\n\tmessage := fmt.Sprintf(\"Records processed: %d\", len(event.Records))\n\treturn &message, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\nfunc LogDynamoDBRecord(record events.DynamoDBEventRecord){\n\tfmt.Println(record.EventID)\n\tfmt.Println(record.EventName)\n\tfmt.Printf(\"%+v\\n\", record.Change)\n}\n",
                                    "  5.Java : import com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent.DynamodbStreamRecord;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class example implements RequestHandler<DynamodbEvent, Void> {\n\n    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n\n    @Override\n    public Void handleRequest(DynamodbEvent event, Context context) {\n        System.out.println(GSON.toJson(event));\n        event.getRecords().forEach(this::logDynamoDBRecord);\n        return null;\n    }\n\n    private void logDynamoDBRecord(DynamodbStreamRecord record) {\n        System.out.println(record.getEventID());\n        System.out.println(record.getEventName());\n        System.out.println(\"DynamoDB Record: \" + GSON.toJson(record.getDynamodb()));\n    }\n}\n",
                                    "  6.SDK for Java 2.x : import com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent.DynamodbStreamRecord;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class example implements RequestHandler<DynamodbEvent, Void> {\n\n    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n\n    @Override\n    public Void handleRequest(DynamodbEvent event, Context context) {\n        System.out.println(GSON.toJson(event));\n        event.getRecords().forEach(this::logDynamoDBRecord);\n        return null;\n    }\n\n    private void logDynamoDBRecord(DynamodbStreamRecord record) {\n        System.out.println(record.getEventID());\n        System.out.println(record.getEventName());\n        System.out.println(\"DynamoDB Record: \" + GSON.toJson(record.getDynamodb()));\n    }\n}\n",
                                    "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n    console.log(JSON.stringify(event, null, 2));\n    event.Records.forEach(record => {\n        logDynamoDBRecord(record);\n    });\n};\n\nconst logDynamoDBRecord = (record) => {\n    console.log(record.eventID);\n    console.log(record.eventName);\n    console.log(`DynamoDB Record: ${JSON.stringify(record.dynamodb)}`);\n};\n\n",
                                    "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n    console.log(JSON.stringify(event, null, 2));\n    event.Records.forEach(record => {\n        logDynamoDBRecord(record);\n    });\n};\n\nconst logDynamoDBRecord = (record) => {\n    console.log(record.eventID);\n    console.log(record.eventName);\n    console.log(`DynamoDB Record: ${JSON.stringify(record.dynamodb)}`);\n};\n\n",
                                    "  9.PHP : <?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\DynamoDb\\DynamoDbEvent;\nuse Bref\\Event\\DynamoDb\\DynamoDbHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends DynamoDbHandler\n{\n    private StderrLogger $logger;\n\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleDynamoDb(DynamoDbEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing DynamoDb table items\");\n        $records = $event->getRecords();\n\n        foreach ($records as $record) {\n            $eventName = $record->getEventName();\n            $keys = $record->getKeys();\n            $old = $record->getOldImage();\n            $new = $record->getNewImage();\n            \n            $this->logger->info(\"Event Name:\".$eventName.\"\\n\");\n            $this->logger->info(\"Keys:\". json_encode($keys).\"\\n\");\n            $this->logger->info(\"Old Image:\". json_encode($old).\"\\n\");\n            $this->logger->info(\"New Image:\". json_encode($new));\n            \n            // TODO: Do interesting work based on the new data\n\n            // Any exception thrown will be logged and the invocation will be marked as failed\n        }\n\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords items\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n",
                                    "  10.SDK for PHP : <?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\DynamoDb\\DynamoDbEvent;\nuse Bref\\Event\\DynamoDb\\DynamoDbHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends DynamoDbHandler\n{\n    private StderrLogger $logger;\n\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleDynamoDb(DynamoDbEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing DynamoDb table items\");\n        $records = $event->getRecords();\n\n        foreach ($records as $record) {\n            $eventName = $record->getEventName();\n            $keys = $record->getKeys();\n            $old = $record->getOldImage();\n            $new = $record->getNewImage();\n            \n            $this->logger->info(\"Event Name:\".$eventName.\"\\n\");\n            $this->logger->info(\"Keys:\". json_encode($keys).\"\\n\");\n            $this->logger->info(\"Old Image:\". json_encode($old).\"\\n\");\n            $this->logger->info(\"New Image:\". json_encode($new));\n            \n            // TODO: Do interesting work based on the new data\n\n            // Any exception thrown will be logged and the invocation will be marked as failed\n        }\n\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords items\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n",
                                    "  11.Python : \nimport json\n\ndef lambda_handler(event, context):\n    print(json.dumps(event, indent=2))\n\n    for record in event['Records']:\n        log_dynamodb_record(record)\n\ndef log_dynamodb_record(record):\n    print(record['eventID'])\n    print(record['eventName'])\n    print(f\"DynamoDB Record: {json.dumps(record['dynamodb'])}\")\n\n",
                                    "  12.SDK for Python (Boto3) : \nimport json\n\ndef lambda_handler(event, context):\n    print(json.dumps(event, indent=2))\n\n    for record in event['Records']:\n        log_dynamodb_record(record)\n\ndef log_dynamodb_record(record):\n    print(record['eventID'])\n    print(record['eventName'])\n    print(f\"DynamoDB Record: {json.dumps(record['dynamodb'])}\")\n\n",
                                    "  13.Ruby : \ndef lambda_handler(event:, context:)\n    return 'received empty event' if event['Records'].empty?\n  \n    event['Records'].each do |record|\n      log_dynamodb_record(record)\n    end\n  \n    \"Records processed: #{event['Records'].length}\"\n  end\n  \n  def log_dynamodb_record(record)\n    puts record['eventID']\n    puts record['eventName']\n    puts \"DynamoDB Record: #{JSON.generate(record['dynamodb'])}\"\n  end\n  \n",
                                    "  14.SDK for Ruby : \ndef lambda_handler(event:, context:)\n    return 'received empty event' if event['Records'].empty?\n  \n    event['Records'].each do |record|\n      log_dynamodb_record(record)\n    end\n  \n    \"Records processed: #{event['Records'].length}\"\n  end\n  \n  def log_dynamodb_record(record)\n    puts record['eventID']\n    puts record['eventName']\n    puts \"DynamoDB Record: #{JSON.generate(record['dynamodb'])}\"\n  end\n  \n",
                                    "  15.Rust : \nuse lambda_runtime::{service_fn, tracing, Error, LambdaEvent};\nuse aws_lambda_events::{\n    event::dynamodb::{Event, EventRecord},\n   };\n\n\n// Built with the following dependencies:\n//lambda_runtime = \"0.11.1\"\n//serde_json = \"1.0\"\n//tokio = { version = \"1\", features = [\"macros\"] }\n//tracing = { version = \"0.1\", features = [\"log\"] }\n//tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n//aws_lambda_events = \"0.15.0\"\n\nasync fn function_handler(event: LambdaEvent<Event>) ->Result<(), Error> {\n    \n    let records = &event.payload.records;\n    tracing::info!(\"event payload: {:?}\",records);\n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    for record in records{\n        log_dynamo_dbrecord(record);\n    }\n\n    tracing::info!(\"Dynamo db records processed\");\n\n    // Prepare the response\n    Ok(())\n\n}\n\nfn log_dynamo_dbrecord(record: &EventRecord)-> Result<(), Error>{\n    tracing::info!(\"EventId: {}\", record.event_id);\n    tracing::info!(\"EventName: {}\", record.event_name);\n    tracing::info!(\"DynamoDB Record: {:?}\", record.change );\n    Ok(())\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n    .with_max_level(tracing::Level::INFO)\n    .with_target(false)\n    .without_time()\n    .init();\n\n    let func = service_fn(function_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n    \n}\n\n",
                                    "  16.SDK for Rust : \nuse lambda_runtime::{service_fn, tracing, Error, LambdaEvent};\nuse aws_lambda_events::{\n    event::dynamodb::{Event, EventRecord},\n   };\n\n\n// Built with the following dependencies:\n//lambda_runtime = \"0.11.1\"\n//serde_json = \"1.0\"\n//tokio = { version = \"1\", features = [\"macros\"] }\n//tracing = { version = \"0.1\", features = [\"log\"] }\n//tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n//aws_lambda_events = \"0.15.0\"\n\nasync fn function_handler(event: LambdaEvent<Event>) ->Result<(), Error> {\n    \n    let records = &event.payload.records;\n    tracing::info!(\"event payload: {:?}\",records);\n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    for record in records{\n        log_dynamo_dbrecord(record);\n    }\n\n    tracing::info!(\"Dynamo db records processed\");\n\n    // Prepare the response\n    Ok(())\n\n}\n\nfn log_dynamo_dbrecord(record: &EventRecord)-> Result<(), Error>{\n    tracing::info!(\"EventId: {}\", record.event_id);\n    tracing::info!(\"EventName: {}\", record.event_name);\n    tracing::info!(\"DynamoDB Record: {:?}\", record.change );\n    Ok(())\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n    .with_max_level(tracing::Level::INFO)\n    .with_target(false)\n    .without_time()\n    .init();\n\n    let func = service_fn(function_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n    \n}\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public void FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            context.Logger.LogInformation($\"Event ID: {record.EventID}\");\n            context.Logger.LogInformation($\"Event Name: {record.EventName}\");\n\n            context.Logger.LogInformation(JsonSerializer.Serialize(record));\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n    }\n}\n\n",
                                    "To create the function",
                                    "  1 : Copy the sample code into a file named example.js.",
                                    " 2 : Create a deployment package. ",
                                    {
                                        "code_example": "zip function.zip example.js"
                                    },
                                    " 3 : Create a Lambda function with the create-function command. ",
                                    {
                                        "code_example": "aws lambda create-function --function-name ProcessDynamoDBRecords \\\n    --zip-file fileb://function.zip --handler example.handler --runtime nodejs18.x \\\n    --role arn:aws:iam::111122223333:role/lambda-dynamodb-role"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Test the Lambda function",
                                "content": [
                                    "In this step, you invoke your Lambda function manually using the invoke AWS Lambda CLI command and      the following sample DynamoDB event. Copy the following into a file named input.txt.",
                                    "Example input.txt",
                                    {
                                        "code_example": "{\n   \"Records\":[\n      {\n         \"eventID\":\"1\",\n         \"eventName\":\"INSERT\",\n         \"eventVersion\":\"1.0\",\n         \"eventSource\":\"aws:dynamodb\",\n         \"awsRegion\":\"us-east-1\",\n         \"dynamodb\":{\n            \"Keys\":{\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"NewImage\":{\n               \"Message\":{\n                  \"S\":\"New item!\"\n               },\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"SequenceNumber\":\"111\",\n            \"SizeBytes\":26,\n            \"StreamViewType\":\"NEW_AND_OLD_IMAGES\"\n         },\n         \"eventSourceARN\":\"stream-ARN\"\n      },\n      {\n         \"eventID\":\"2\",\n         \"eventName\":\"MODIFY\",\n         \"eventVersion\":\"1.0\",\n         \"eventSource\":\"aws:dynamodb\",\n         \"awsRegion\":\"us-east-1\",\n         \"dynamodb\":{\n            \"Keys\":{\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"NewImage\":{\n               \"Message\":{\n                  \"S\":\"This item has changed\"\n               },\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"OldImage\":{\n               \"Message\":{\n                  \"S\":\"New item!\"\n               },\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"SequenceNumber\":\"222\",\n            \"SizeBytes\":59,\n            \"StreamViewType\":\"NEW_AND_OLD_IMAGES\"\n         },\n         \"eventSourceARN\":\"stream-ARN\"\n      },\n      {\n         \"eventID\":\"3\",\n         \"eventName\":\"REMOVE\",\n         \"eventVersion\":\"1.0\",\n         \"eventSource\":\"aws:dynamodb\",\n         \"awsRegion\":\"us-east-1\",\n         \"dynamodb\":{\n            \"Keys\":{\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"OldImage\":{\n               \"Message\":{\n                  \"S\":\"This item has changed\"\n               },\n               \"Id\":{\n                  \"N\":\"101\"\n               }\n            },\n            \"SequenceNumber\":\"333\",\n            \"SizeBytes\":38,\n            \"StreamViewType\":\"NEW_AND_OLD_IMAGES\"\n         },\n         \"eventSourceARN\":\"stream-ARN\"\n      }\n   ]\n}"
                                    },
                                    "Run the following invoke command. ",
                                    "aws lambda invoke --function-name ProcessDynamoDBRecords \\    --cli-binary-format raw-in-base64-out \\    --payload file://input.txt outputfile.txt",
                                    "The cli-binary-format option is required if you're using AWS CLI version 2. To make this the default setting, run aws configure set cli-binary-format raw-in-base64-out. For more information, see AWS CLI supported global command line options in the AWS Command Line Interface User Guide for Version 2.",
                                    "The function returns the string message in the response body. ",
                                    "Verify the output in the outputfile.txt file."
                                ]
                            },
                            {
                                "sub_header": "Create a DynamoDB table with a stream enabled",
                                "content": [
                                    "Create an Amazon DynamoDB table with a stream enabled.",
                                    "To create a DynamoDB table",
                                    "  1 : Open the DynamoDB console.",
                                    "  2 : Choose Create table.",
                                    "  3 : Create a table with the following settings.Table name – lambda-dynamodb-streamPrimary key – id (string)",
                                    "  4 : Choose Create.",
                                    "To enable streams",
                                    "  1 : Open the DynamoDB console.",
                                    "  2 : Choose Tables.",
                                    "  3 : Choose the lambda-dynamodb-stream table.",
                                    "  4 : Under Exports and streams, choose DynamoDB stream details.",
                                    "  5 : Choose Turn on.",
                                    "  6 : For View type, choose Key attributes only.",
                                    "  7 : Choose Turn on stream.",
                                    "Write down the stream ARN. You need this in the next step when you associate the stream with your Lambda      function. For more information on enabling streams, see Capturing table        activity with DynamoDB Streams."
                                ]
                            },
                            {
                                "sub_header": "Add an event source in AWS Lambda",
                                "content": [
                                    "Create an event source mapping in AWS Lambda. This event source mapping associates the DynamoDB stream with      your Lambda function. After you create this event source mapping, AWS Lambda starts polling the stream.",
                                    "Run the following AWS CLI create-event-source-mapping command. After the command runs, note      down the UUID. You'll need this UUID to refer to the event source mapping in any commands, for example, when      deleting the event source mapping.",
                                    "aws lambda create-event-source-mapping --function-name ProcessDynamoDBRecords \\    --batch-size 100 --starting-position LATEST --event-source DynamoDB-stream-arn",
                                    " This creates a mapping between the specified DynamoDB stream and the Lambda function. You can associate a DynamoDB      stream with multiple Lambda functions, and associate the same Lambda function with multiple streams. However, the      Lambda functions will share the read throughput for the stream they share. ",
                                    "You can get the list of event source mappings by running the following command.",
                                    "aws lambda list-event-source-mappings",
                                    "The list returns all of the event source mappings you created, and for each mapping it shows the        LastProcessingResult, among other things. This field is used to provide an informative message if      there are any problems. Values such as No records processed (indicates that AWS Lambda has not started      polling or that there are no records in the stream) and OK (indicates AWS Lambda successfully read      records from the stream and invoked your Lambda function) indicate that there are no issues. If there are issues,      you receive an error message.",
                                    "If you have a lot of event source mappings, use the function name parameter to narrow down the results.",
                                    "aws lambda list-event-source-mappings --function-name ProcessDynamoDBRecords"
                                ]
                            },
                            {
                                "sub_header": "Test the setup",
                                "content": [
                                    "Test the end-to-end experience. As you perform table updates, DynamoDB writes event records to the stream. As      AWS Lambda polls the stream, it detects new records in the stream and invokes your Lambda function on your behalf      by passing events to the function. ",
                                    "  1 : In the DynamoDB console, add, update, and delete items to the table. DynamoDB writes records of these actions to          the stream.",
                                    "  2 : AWS Lambda polls the stream and when it detects updates to the stream, it invokes your Lambda function by          passing in the event data it finds in the stream.",
                                    "  3 : Your function runs and creates logs in Amazon CloudWatch. You can verify the logs reported in the Amazon CloudWatch          console."
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources",
                                "content": [
                                    "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the DynamoDB table",
                                    "  1 : Open the Tables page of the DynamoDB console.",
                                    "  2 : Select the table you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter delete in the text box.",
                                    "  5 : Choose Delete table."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "Note",
                    "If you want to send data to a target other than a Lambda function or enrich the data before sending it, see     Amazon EventBridge Pipes.",
                    "You can use an AWS Lambda function to process records in an Amazon DynamoDB      stream. With DynamoDB Streams, you can trigger a Lambda function to perform additional work each time a DynamoDB table is    updated.",
                    "Topics",
                    {
                        "sub_header": "Polling and batching streams",
                        "content": [
                            "Lambda polls shards in your DynamoDB stream for records at a base rate of 4 times per second. When records are      available, Lambda invokes your function and waits for the result. If processing succeeds, Lambda resumes polling until      it receives more records.",
                            "By default, Lambda invokes your function as soon as records are available. If the batch      that Lambda reads from the event source has only one record in it, Lambda sends only one record to the function. To avoid invoking the function      with a small number of records, you can tell the event source to buffer records for up to 5 minutes by configuring a        batching window. Before invoking the function, Lambda continues to read records from the event source      until it has gathered a full batch, the batching window expires, or the batch reaches the payload limit of 6 MB. For more information,      see Batching behavior.",
                            "Warning",
                            "Lambda event source mappings process each event at least once, and duplicate processing of records can occur. To avoid potential issues related to duplicate events, we strongly recommend that you make your function code idempotent. To learn more, see How do I make my Lambda function idempotent in the AWS Knowledge Center.",
                            "Lambda doesn't wait for any configured extensions to complete      before sending the next batch for processing. In other words, your extensions may continue to run as Lambda      processes the next batch of records. This can cause throttling issues if you breach any of your account's       concurrency settings or limits. To detect whether this is a      potential issue, monitor your functions and check whether you're seeing higher      concurrency metrics than expected for your event      source mapping. Due to short times in between invokes, Lambda may briefly report higher concurrency usage      than the number of shards. This can be true even for Lambda functions without extensions.",
                            "Configure the       ParallelizationFactor setting to process one shard of a DynamoDB stream with more than one Lambda invocation simultaneously.       You can specify the number of concurrent batches that Lambda polls from a shard via a parallelization factor from 1      (default) to 10. For example, when you set ParallelizationFactor to 2, you can have 200 concurrent      Lambda invocations at maximum to process 100 DynamoDB stream shards (though in practice, you may see different values      for the ConcurrentExecutions metric). This helps scale up the processing throughput when the data volume      is volatile and the IteratorAge is high. When you increase the number of concurrent batches per shard,      Lambda still ensures in-order processing at the item (partition and sort key) level."
                        ]
                    },
                    {
                        "sub_header": "Polling and stream starting positions",
                        "content": [
                            "Be aware that stream polling during event source mapping creation and updates is eventually consistent.",
                            "  1.During event source mapping creation, it may take several minutes to start polling events from the stream.",
                            "  2.During event source mapping updates, it may take several minutes to stop and restart polling events from the stream.",
                            "This behavior means that if you specify LATEST as the starting position for the stream, the event source mapping could     miss events during creation or updates. To ensure that no events are missed, specify the stream starting position as TRIM_HORIZON."
                        ]
                    },
                    {
                        "sub_header": "Simultaneous readers of a shard in DynamoDB Streams",
                        "content": [
                            "For single-Region tables that are not global tables, you can design for up to two Lambda functions to read from the same DynamoDB Streams shard at the same time. Exceeding this limit can result in request throttling.      For global tables, we recommend you limit the number of simultaneous functions to one to avoid request throttling."
                        ]
                    },
                    {
                        "sub_header": "Example event",
                        "content": [
                            {
                                "code_example": "{\n  \"Records\": [\n    {\n      \"eventID\": \"1\",\n      \"eventVersion\": \"1.0\",\n      \"dynamodb\": {\n        \"Keys\": {\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"NewImage\": {\n          \"Message\": {\n            \"S\": \"New item!\"\n          },\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"StreamViewType\": \"NEW_AND_OLD_IMAGES\",\n        \"SequenceNumber\": \"111\",\n        \"SizeBytes\": 26\n      },\n      \"awsRegion\": \"us-west-2\",\n      \"eventName\": \"INSERT\",\n      \"eventSourceARN\": \"arn:aws:dynamodb:us-east-2:123456789012:table/my-table/stream/2024-06-10T19:26:16.525\",\n      \"eventSource\": \"aws:dynamodb\"\n    },\n    {\n      \"eventID\": \"2\",\n      \"eventVersion\": \"1.0\",\n      \"dynamodb\": {\n        \"OldImage\": {\n          \"Message\": {\n            \"S\": \"New item!\"\n          },\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"SequenceNumber\": \"222\",\n        \"Keys\": {\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"SizeBytes\": 59,\n        \"NewImage\": {\n          \"Message\": {\n            \"S\": \"This item has changed\"\n          },\n          \"Id\": {\n            \"N\": \"101\"\n          }\n        },\n        \"StreamViewType\": \"NEW_AND_OLD_IMAGES\"\n      },\n      \"awsRegion\": \"us-west-2\",\n      \"eventName\": \"MODIFY\",\n      \"eventSourceARN\": \"arn:aws:dynamodb:us-east-2:123456789012:table/my-table/stream/2024-06-10T19:26:16.525\",\n      \"eventSource\": \"aws:dynamodb\"\n    }\n  ]}"
                            }
                        ]
                    }
                ]
            },
            {
                "title": "EC2",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-ec2.html",
                "source": "aws_lamda",
                "parent_content": [
                    "You can use AWS Lambda to process lifecycle events from Amazon Elastic Compute Cloud and manage Amazon EC2 resources. Amazon EC2 sends events    to Amazon EventBridge (CloudWatch Events) for    lifecycle events    such as when an instance changes state, when an Amazon Elastic Block Store volume snapshot completes, or when a spot instance    is scheduled to be terminated. You configure EventBridge (CloudWatch Events) to forward those events to a Lambda function for processing.",
                    "EventBridge (CloudWatch Events) invokes your Lambda function asynchronously with the event document from Amazon EC2.",
                    "Example instance lifecycle event",
                    {
                        "code_example": "{\n    \"version\": \"0\",\n    \"id\": \"b6ba298a-7732-2226-xmpl-976312c1a050\",\n    \"detail-type\": \"EC2 Instance State-change Notification\",\n    \"source\": \"aws.ec2\",\n    \"account\": \"111122223333\",\n    \"time\": \"2019-10-02T17:59:30Z\",\n    \"region\": \"us-east-1\",\n    \"resources\": [\n        \"arn:aws:ec2:us-east-1:111122223333:instance/i-0c314xmplcd5b8173\"\n    ],\n    \"detail\": {\n        \"instance-id\": \"i-0c314xmplcd5b8173\",\n        \"state\": \"running\"\n    }\n}\n"
                    },
                    "For details on configuring events, see Invoke a Lambda function on a schedule. For an example function that processes Amazon EBS snapshot notifications, see    EventBridge Scheduler for Amazon EBS.",
                    "You can also use the AWS SDK to manage instances and other resources with the Amazon EC2 API.         ",
                    {
                        "sub_header": "Granting permissions to EventBridge (CloudWatch Events)",
                        "content": [
                            "To process lifecycle events from Amazon EC2, EventBridge (CloudWatch Events) needs permission to invoke your function. This permission comes      from the function's resource-based policy. If you use the      EventBridge (CloudWatch Events) console to configure an event trigger, the console updates the resource-based policy on your behalf.      Otherwise, add a statement like the following:",
                            "Example resource-based policy statement for Amazon EC2 lifecycle notifications",
                            {
                                "code_example": "{\n  \"Sid\": \"ec2-events\",\n  \"Effect\": \"Allow\",\n  \"Principal\": {\n    \"Service\": \"events.amazonaws.com\"\n  },\n  \"Action\": \"lambda:InvokeFunction\",\n  \"Resource\": \"arn:aws:lambda:us-east-1:12456789012:function:my-function\",\n  \"Condition\": {\n    \"ArnLike\": {\n      \"AWS:SourceArn\": \"arn:aws:events:us-east-1:12456789012:rule/*\"\n    }\n  }\n}"
                            },
                            "To add a statement, use the add-permission AWS CLI command.",
                            "aws lambda add-permission --action lambda:InvokeFunction --statement-id ec2-events \\--principal events.amazonaws.com --function-name my-function --source-arn 'arn:aws:events:us-east-1:12456789012:rule/*'",
                            "If your function uses the AWS SDK to manage Amazon EC2 resources, add Amazon EC2 permissions to the function's execution role."
                        ]
                    }
                ]
            },
            {
                "title": "Elastic Load Balancing (Application Load Balancer)",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-alb.html",
                "source": "aws_lamda",
                "parent_content": [
                    "You can use a Lambda function to process requests from an Application Load Balancer. Elastic Load Balancing supports Lambda functions as a target for    an Application Load Balancer. Use load balancer rules to route HTTP requests to a function, based on path or header values. Process the    request and return an HTTP response from your Lambda function.",
                    "Elastic Load Balancing invokes your Lambda function synchronously with an event that contains the request body and    metadata.",
                    "Example Application Load Balancer request event",
                    {
                        "code_example": "{\n    \"requestContext\": {\n        \"elb\": {\n            \"targetGroupArn\": \"arn:aws:elasticloadbalancing:us-east-1:123456789012:targetgroup/lambda-279XGJDqGZ5rsrHC2Fjr/49e9d65c45c6791a\"\n        }\n    },\n    \"httpMethod\": \"GET\",\n    \"path\": \"/lambda\",\n    \"queryStringParameters\": {\n        \"query\": \"1234ABCD\"\n    },\n    \"headers\": {\n        \"accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\",\n        \"accept-encoding\": \"gzip\",\n        \"accept-language\": \"en-US,en;q=0.9\",\n        \"connection\": \"keep-alive\",\n        \"host\": \"lambda-alb-123578498.us-east-1.elb.amazonaws.com\",\n        \"upgrade-insecure-requests\": \"1\",\n        \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\",\n        \"x-amzn-trace-id\": \"Root=1-5c536348-3d683b8b04734faae651f476\",\n        \"x-forwarded-for\": \"72.12.164.125\",\n        \"x-forwarded-port\": \"80\",\n        \"x-forwarded-proto\": \"http\",\n        \"x-imforwards\": \"20\"\n    },\n    \"body\": \"\",\n    \"isBase64Encoded\": False\n}"
                    },
                    "Your function processes the event and returns a response document to the load balancer in JSON. Elastic Load Balancing converts    the document to an HTTP success or error response and returns it to the user.",
                    "Example response document format",
                    {
                        "code_example": "{\n    \"statusCode\": 200,\n    \"statusDescription\": \"200 OK\",\n    \"isBase64Encoded\": False,\n    \"headers\": {\n        \"Content-Type\": \"text/html\"\n    },\n    \"body\": \"<h1>Hello from Lambda!</h1>\"\n}"
                    },
                    "To configure an Application Load Balancer as a function trigger, grant Elastic Load Balancing permission to run the function, create a target    group that routes requests to the function, and add a rule to the load balancer that sends requests to the target    group.",
                    "Use the add-permission command to add a permission statement to your function's resource-based    policy.",
                    "aws lambda add-permission --function-name alb-function \\--statement-id load-balancer --action \"lambda:InvokeFunction\" \\--principal elasticloadbalancing.amazonaws.com",
                    "You should see the following output:",
                    "{    \"Statement\": \"{\\\"Sid\\\":\\\"load-balancer\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"elasticloadbalancing.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-west-2:123456789012:function:alb-function\\\"}\"}",
                    "For instructions on configuring the Application Load Balancer listener and target group, see Lambda functions as a target in the      User Guide for Application Load Balancers."
                ]
            },
            {
                "title": "Invoke using an EventBridge Scheduler",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-eventbridge-scheduler.html",
                "source": "aws_lamda",
                "parent_content": [
                    "Amazon EventBridge Scheduler is a serverless scheduler that allows you to create, run, and manage tasks    from one central, managed service. With EventBridge Scheduler, you can create schedules using cron and rate expressions for recurring patterns, or configure one-time invocations. You can set    up flexible time windows for delivery, define retry limits, and set the maximum retention time for unprocessed events.",
                    "When you set up EventBridge Scheduler with Lambda, EventBridge Scheduler invokes your Lambda function asynchronously.      This page explains how to use EventBridge Scheduler to invoke a Lambda function on a schedule.",
                    {
                        "sub_header": "Set up the execution role",
                        "content": [
                            " When you create a new schedule, EventBridge Scheduler must have permission to invoke its target API operation on your behalf. You grant these permissions to EventBridge Scheduler        using an execution role. The permission policy you attach to your schedule's execution role defines the required permissions.        These permissions depend on the target API you want EventBridge Scheduler to invoke.",
                            "        When you use the EventBridge Scheduler console to create a schedule, as in the following procedure, EventBridge Scheduler automatically sets up an execution role based on your selected target.        If you want to create a schedule using one of the EventBridge Scheduler SDKs, the AWS CLI, or AWS CloudFormation, you must have an existing execution role that grants the permissions        EventBridge Scheduler requires to invoke a target. For more information about manually setting up an execution role for your schedule, see Setting up an execution role        in the EventBridge Scheduler User Guide.    "
                        ]
                    },
                    {
                        "sub_header": "Create a schedule",
                        "content": [
                            "To create a schedule by using the console",
                            "  1 : Open the Amazon EventBridge Scheduler console at https://console.aws.amazon.com/scheduler/home.",
                            "  2 :                         On the Schedules page, choose Create schedule.                    ",
                            "  3 :                         On the Specify schedule detail page, in the Schedule name and description section, do the following:                    For Schedule name, enter a name for your                                schedule. For example, MyTestSchedule. (Optional) For Description, enter a                                description for your schedule. For example, My first                                    schedule.For Schedule group, choose a schedule group from                                the dropdown list. If you don't have a group, choose                                    default. To create a schedule group, choose                                    create your own schedule. You use schedule groups to add tags to groups of schedules. ",
                            "  4 : Choose your schedule options.OccurrenceDo this...One-time scheduleA one-time schedule invokes a target only once                                                    at the date and time that you specify. For Date and time, do the                                                    following:Enter a valid date in                                                            YYYY/MM/DD format.Enter a timestamp in 24-hour                                                            hh:mm format.For Timezone, choose                                                            the timezone.Recurring scheduleA recurring schedule invokes a target at a                                                    rate that you specify using a                                                    cron expression or rate                                                    expression. For Schedule type, do                                                            one of the following:To use a cron expression to define the                                                                    schedule, choose Cron-based                                                                        schedule and enter the cron                                                                    expression.To use a rate expression to define the                                                                    schedule, choose Rate-based                                                                        schedule and enter the rate                                                                    expression.For more information about cron and rate                                                                    expressions, see Schedule types on EventBridge Scheduler in the Amazon EventBridge Scheduler User Guide.                                                                For Flexible time                                                            window, choose Off                                                            to turn off the option, or choose one of the                                                            pre-defined time windows.                                                            For example, if you choose 15                                                                minutes and you set a recurring                                                            schedule to invoke its target once every hour, the                                                            schedule runs within 15 minutes after the start of                                                            every hour. ",
                            "  5 : (Optional) If you chose Recurring schedule in the previous step,                        in the Timeframe section, do the following: For Timezone,                                choose a timezone. For Start date and time, enter a valid date in                                    YYYY/MM/DD format, and then specify a timestamp in                                24-hour hh:mm format. For End date and time, enter a valid date in                                    YYYY/MM/DD format, and then specify a timestamp in                                24-hour hh:mm format. ",
                            "  6 : Choose Next. ",
                            "  7 : On the Select target page, choose the AWS API operation that EventBridge Scheduler invokes: Choose AWS Lambda Invoke.In the Invoke section, select a function or choose Create new Lambda function.(Optional) Enter a JSON payload. If you don't enter a payload, EventBridge Scheduler uses an empty event to invoke the function.",
                            "  8 : Choose Next. ",
                            "  9 : On the Settings page, do the following: To turn on the schedule, under Schedule                                state, toggle Enable schedule. To configure a retry policy for your schedule, under                                Retry policy and dead-letter queue (DLQ),                                do the following:Toggle Retry.For Maximum age of event,                                        enter the maximum hour(s) and                                        min(s) that EventBridge Scheduler must keep an                                        unprocessed event.The maximum time is 24 hours.For Maximum retries, enter the                                        maximum number of times EventBridge Scheduler retries the schedule if the                                        target returns an error.   The maximum value is 185 retries. With retry policies, if a schedule fails to invoke its target,                                EventBridge Scheduler re-runs the schedule. If configured, you must set the maximum                                retention time and retries for the schedule.Choose where EventBridge Scheduler stores undelivered events. Dead-letter queue (DLQ)                                                optionDo this...Don't storeChoose None.Store the event in the same AWS account where                                                you're creating the scheduleChoose Select an Amazon SQS queue in                                                      my AWS account as a DLQ.Choose the Amazon Resource Name (ARN) of                                                      the Amazon SQS queue. Store the event in a different AWS account from                                                where you're creating the scheduleChoose Specify an Amazon SQS queue in                                                      other AWS accounts as a DLQ.Enter the Amazon Resource Name (ARN) of                                                      the Amazon SQS queue. To use a customer managed key to encrypt your target input, under                                    Encryption, choose Customize                                    encryption settings (advanced). If you choose this option, enter an existing KMS key ARN or choose                                    Create an AWS KMS key to navigate to the                                AWS KMS console. For more information about how EventBridge Scheduler encrypts your data                                at rest, see Encryption at                                    rest in the Amazon EventBridge Scheduler User                                    Guide. To have EventBridge Scheduler create a new execution role for you, choose                                Create new role for this schedule.                                Then, enter a name for Role name. If you choose                                this option, EventBridge Scheduler attaches the required permissions necessary for                                your templated target to the role.",
                            "  10 : Choose Next. ",
                            "  11 :  In the Review and create schedule page, review the                        details of your schedule. In each section, choose Edit to                        go back to that step and edit its details. ",
                            "  12 : Choose Create schedule. You can view a list of your new and existing schedules on the                        Schedules page. Under the                        Status column, verify that your new schedule is                        Enabled. ",
                            "To confirm that EventBridge Scheduler invoked the function, check the function's Amazon CloudWatch logs."
                        ]
                    },
                    {
                        "sub_header": "Related resources",
                        "content": [
                            "        For more information about EventBridge Scheduler, see the following:    ",
                            "  1.EventBridge Scheduler User Guide",
                            "  2.EventBridge Scheduler API Reference",
                            "  3.EventBridge Scheduler Pricing"
                        ]
                    }
                ]
            },
            {
                "title": "IoT",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-iot.html",
                "source": "aws_lamda",
                "parent_content": [
                    "AWS IoT provides secure communication between internet-connected devices (such as sensors) and the AWS Cloud.    This makes it possible for you to collect, store, and analyze telemetry data from multiple devices.",
                    "You can create AWS IoT rules for your devices to interact with AWS services. The AWS IoT Rules Engine provides a SQL-based language to select data    from message payloads and send the data to other services, such as Amazon S3, Amazon DynamoDB, and AWS Lambda. You define a rule    to invoke a Lambda function when you want to invoke another AWS service or a third-party service. ",
                    "When an incoming IoT message triggers the rule, AWS IoT invokes your Lambda function asynchronously and passes data from the IoT message to the function. ",
                    "The following example shows a moisture reading from a greenhouse sensor. The row and pos values identify the location of the sensor. This example    event is based on the greenhouse type in the AWS IoT Rules tutorials. ",
                    "Example AWS IoT message event",
                    {
                        "code_example": "\n{\n    \"row\" : \"10\",\n    \"pos\" : \"23\",\n    \"moisture\" : \"75\"\n}"
                    },
                    "For asynchronous invocation, Lambda queues the message and retries  if your function returns an error. Configure your function with a destination to retain  events that your function could not process.",
                    "You need to grant permission for the AWS IoT service to invoke your Lambda function. Use the      add-permission command to add a permission statement to your function's resource-based policy.",
                    "aws lambda add-permission --function-name my-function \\--statement-id iot-events --action \"lambda:InvokeFunction\" --principal iot.amazonaws.com",
                    "You should see the following output:",
                    "{    \"Statement\": \"{\\\"Sid\\\":\\\"iot-events\\\",\\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"iot.amazonaws.com\\\"},\\\"Action\\\":\\\"lambda:InvokeFunction\\\",\\\"Resource\\\":\\\"arn:aws:lambda:us-east-1:123456789012:function:my-function\\\"}\"} ",
                    "For more information about how to use Lambda with AWS IoT, see Creating an AWS Lambda rule.  "
                ]
            },
            {
                "title": "Kinesis Data Streams",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html",
                "contents": [
                    {
                        "title": "Create mapping",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-kinesis-create.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "To process Amazon Kinesis Data Streams records with Lambda, create a consumer for your stream and then create a Lambda event source mapping.",
                            {
                                "sub_header": "Configuring your data stream and function",
                                "content": [
                                    "Your Lambda function is a consumer application for your data stream. It processes one batch of records at a      time from each shard. You can map a Lambda function to a shared-throughput consumer (standard iterator), or to a dedicated-throughput consumer with enhanced fan-out.",
                                    "  1.Standard iterator: :  Lambda polls each shard in your Kinesis stream for records at a base rate of once per          second. When more records are available, Lambda keeps processing batches until the function catches up with the          stream. The event source mapping shares read throughput with other consumers of the shard.",
                                    "  2.Enhanced fan-out: :  To minimize latency and maximize read throughput, create a data stream consumer with enhanced fan-out. Enhanced fan-out consumers get a dedicated connection to each shard that doesn't impact other applications reading from the stream. Stream consumers use HTTP/2 to reduce latency by pushing records to Lambda over a long-lived          connection and by compressing request headers. You can create a stream consumer with the Kinesis RegisterStreamConsumer API.",
                                    "aws kinesis register-stream-consumer \\--consumer-name con1 \\--stream-arn arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream",
                                    "You should see the following output:",
                                    "{    \"Consumer\": {        \"ConsumerName\": \"con1\",        \"ConsumerARN\": \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream/consumer/con1:1540591608\",        \"ConsumerStatus\": \"CREATING\",        \"ConsumerCreationTimestamp\": 1540591608.0    }}",
                                    "To increase the speed at which your function processes records, add shards to your data stream. Lambda      processes records in each shard in order. It stops processing additional records in a shard if your function      returns an error. With more shards, there are more batches being processed at once, which lowers the impact of      errors on concurrency.",
                                    "If your function can't scale up to handle the total number of concurrent batches, request a quota increase or reserve concurrency for your function."
                                ]
                            },
                            {
                                "sub_header": "Create an event source mapping to invoke a Lambda function",
                                "content": [
                                    "To invoke your Lambda function with records from your data stream, create an event source mapping.       You can create multiple event source mappings to process the same data with multiple Lambda functions, or to process items       from multiple data streams with a single function. When processing items from multiple streams, each batch contains records       from only a single shard or stream.",
                                    "You can configure event source mappings to process records from a stream in a different AWS account.       To learn more, see Creating a cross-account event source mapping.",
                                    "Before you create an event source mapping, you need to give your Lambda function permission to read from a Kinesis data stream.       Lambda needs the following permissions to manage resources related to your Kinesis data stream:",
                                    "  1.kinesis:DescribeStream",
                                    "  2.kinesis:DescribeStreamSummary",
                                    "  3.kinesis:GetRecords",
                                    "  4.kinesis:GetShardIterator",
                                    "  5.kinesis:ListShards",
                                    "  6.kinesis:ListStreams",
                                    "  7.kinesis:SubscribeToShard",
                                    "The AWS managed policy AWSLambdaKinesisExecutionRole       includes these permissions. Add this managed policy to your function as described in the following procedure.",
                                    "  1.AWS Management Console : AWSLambdaKinesisExecutionRole",
                                    "  2.AWS CLI : AWSLambdaKinesisExecutionRole",
                                    "  3.AWS SAM : Policies",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add Kinesis permissions to your function",
                                    "  1 : Open the Functions page of the Lambda console           and select your function.",
                                    "  2 : In the Configuration tab, select Permissions.",
                                    "  3 : In the Execution role pane, under Role name, choose the link to           your function’s execution role. This link opens the page for that role in the IAM console.",
                                    "  4 : In the Permissions policies pane, choose Add permissions, then           select Attach policies.",
                                    "  5 : In the search field, enter AWSLambdaKinesisExecutionRole.",
                                    "  6 : Select the checkbox next to the policy and choose Add permission.",
                                    "After configuring the required permissions, create the event source mapping.",
                                    "  1.AWS Management Console : \nTo create the Kinesis event source mapping\nOpen the Functions page of the Lambda console \n                and select your function.\n\nIn the Function overview pane, choose Add trigger.\n\nUnder Trigger configuration, for the source, select Kinesis.\n\nSelect the Kinesis stream you want to create the event source mapping for and, optionally, a consumer of your stream.\n\n(Optional) edit the Batch size, Starting position, and Batch window \n                for your event source mapping.\n\nChoose Add.\n\nWhen creating your event source mapping from the console, your IAM role must have the\n            kinesis:ListStreams and\n            kinesis:ListStreamConsumers permissions.\n",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n--function-name MyFunction \\\n--event-source-arn arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream \\\n--starting-position LATEST \\\n--batch-size 100",
                                    "  3.AWS SAM : KinesisEvent",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To create the Kinesis event source mapping",
                                    "  1 : Open the Functions page of the Lambda console                 and select your function.",
                                    "  2 : In the Function overview pane, choose Add trigger.",
                                    "  3 : Under Trigger configuration, for the source, select Kinesis.",
                                    "  4 : Select the Kinesis stream you want to create the event source mapping for and, optionally, a consumer of your stream.",
                                    "  5 : (Optional) edit the Batch size, Starting position, and Batch window                 for your event source mapping.",
                                    "  6 : Choose Add.",
                                    "When creating your event source mapping from the console, your IAM role must have the            kinesis:ListStreams and            kinesis:ListStreamConsumers permissions."
                                ]
                            },
                            {
                                "sub_header": "Polling and stream starting position",
                                "content": [
                                    "Be aware that stream polling during event source mapping creation and updates is eventually consistent.",
                                    "  1.During event source mapping creation, it may take several minutes to start polling events from the stream.",
                                    "  2.During event source mapping updates, it may take several minutes to stop and restart polling events from the stream.",
                                    "This behavior means that if you specify LATEST as the starting position for the stream, the event source mapping could     miss events during creation or updates. To ensure that no events are missed, specify the stream starting position as TRIM_HORIZON     or AT_TIMESTAMP."
                                ]
                            },
                            {
                                "sub_header": "Creating a cross-account event source mapping",
                                "content": [
                                    "Amazon Kinesis Data Streams supports resource-based policies.       Because of this, you can process data ingested into a stream in one AWS account with a Lambda function in another account.",
                                    "To create an event source mapping for your Lambda function using a Kinesis stream in a different AWS account, you must       configure the stream using a resource-based policy to give your Lambda function permission to read items. To learn how to       configure your stream to allow cross-account access, see Sharing access with cross-account AWS Lambda functions       in the Amazon Kinesis Streams Developer guide.",
                                    "Once you’ve configured your stream with a resource-based policy that gives your Lambda function the required       permissions, create the event source mapping using any of the methods described in the previous section.",
                                    "If you choose to create your event source mapping using the Lambda console, paste the ARN of your stream directly       into the input field. If you want to specify a consumer for your stream, pasting the ARN of the       consumer automatically populates the stream field."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Batch item failures",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-kinesis-batchfailurereporting.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "When consuming and processing streaming data from an event source, by default Lambda checkpoints to the highest    sequence number of a batch only when the batch is a complete success. Lambda treats all other results as a complete    failure and retries processing the batch up to the retry limit. To allow for partial successes while processing    batches from a stream, turn on ReportBatchItemFailures. Allowing partial successes can help to reduce    the number of retries on a record, though it doesn’t entirely prevent the possibility of retries in a successful record.",
                            "To turn on ReportBatchItemFailures, include the enum value    ReportBatchItemFailures in the FunctionResponseTypes list. This list indicates    which response types are enabled for your function. You can configure this list when you create or update an event source mapping.",
                            {
                                "sub_header": "Report syntax",
                                "content": [
                                    "When configuring reporting on batch item failures, the StreamsEventResponse class is returned with a      list of batch item failures. You can use a StreamsEventResponse object to return the sequence number      of the first failed record in the batch. You can also create your own custom class using the correct response      syntax. The following JSON structure shows the required response syntax:",
                                    "{   \"batchItemFailures\": [         {            \"itemIdentifier\": \"<SequenceNumber>\"        }    ]}",
                                    "Note",
                                    "If the batchItemFailures array contains multiple items, Lambda uses the record with the lowest      sequence number as the checkpoint. Lambda then retries all records starting from that checkpoint."
                                ]
                            },
                            {
                                "sub_header": "Success and failure conditions",
                                "content": [
                                    "Lambda treats a batch as a complete success if you return any of the following:",
                                    "  1.An empty batchItemFailure list",
                                    "  2.A null batchItemFailure list",
                                    "  3.An empty EventResponse",
                                    "  4.A null EventResponse",
                                    "Lambda treats a batch as a complete failure if you return any of the following:",
                                    "  1.An empty string itemIdentifier",
                                    "  2.A null itemIdentifier",
                                    "  3.An itemIdentifier with a bad key name",
                                    "Lambda retries failures based on your retry strategy."
                                ]
                            },
                            {
                                "sub_header": "Bisecting a batch",
                                "content": [
                                    "If your invocation fails and BisectBatchOnFunctionError is turned on, the batch is bisected      regardless of your ReportBatchItemFailures setting.",
                                    "When a partial batch success response is received and both BisectBatchOnFunctionError and        ReportBatchItemFailures are turned on, the batch is bisected at the returned sequence number and      Lambda retries only the remaining records.",
                                    "Here are some examples of function code that return the list of failed message IDs in the batch:",
                                    "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing System.Text.Json.Serialization;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegration;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task<StreamsEventResponse> FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return new StreamsEventResponse();\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                return new StreamsEventResponse\n                {\n                    BatchItemFailures = new List<StreamsEventResponse.BatchItemFailure>\n                    {\n                        new StreamsEventResponse.BatchItemFailure { ItemIdentifier = record.Kinesis.SequenceNumber }\n                    }\n                };\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n        return new StreamsEventResponse();\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n\npublic class StreamsEventResponse\n{\n    [JsonPropertyName(\"batchItemFailures\")]\n    public IList<BatchItemFailure> BatchItemFailures { get; set; }\n    public class BatchItemFailure\n    {\n        [JsonPropertyName(\"itemIdentifier\")]\n        public string ItemIdentifier { get; set; }\n    }\n}\n",
                                    "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing System.Text.Json.Serialization;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegration;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task<StreamsEventResponse> FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return new StreamsEventResponse();\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                return new StreamsEventResponse\n                {\n                    BatchItemFailures = new List<StreamsEventResponse.BatchItemFailure>\n                    {\n                        new StreamsEventResponse.BatchItemFailure { ItemIdentifier = record.Kinesis.SequenceNumber }\n                    }\n                };\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n        return new StreamsEventResponse();\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n\npublic class StreamsEventResponse\n{\n    [JsonPropertyName(\"batchItemFailures\")]\n    public IList<BatchItemFailure> BatchItemFailures { get; set; }\n    public class BatchItemFailure\n    {\n        [JsonPropertyName(\"itemIdentifier\")]\n        public string ItemIdentifier { get; set; }\n    }\n}\n",
                                    "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) (map[string]interface{}, error) {\n\tbatchItemFailures := []map[string]interface{}{}\n\n\tfor _, record := range kinesisEvent.Records {\n\t\tcurRecordSequenceNumber := \"\"\n\n\t\t// Process your record\n\t\tif /* Your record processing condition here */ {\n\t\t\tcurRecordSequenceNumber = record.Kinesis.SequenceNumber\n\t\t}\n\n\t\t// Add a condition to check if the record processing failed\n\t\tif curRecordSequenceNumber != \"\" {\n\t\t\tbatchItemFailures = append(batchItemFailures, map[string]interface{}{\"itemIdentifier\": curRecordSequenceNumber})\n\t\t}\n\t}\n\n\tkinesisBatchResponse := map[string]interface{}{\n\t\t\"batchItemFailures\": batchItemFailures,\n\t}\n\treturn kinesisBatchResponse, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                                    "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) (map[string]interface{}, error) {\n\tbatchItemFailures := []map[string]interface{}{}\n\n\tfor _, record := range kinesisEvent.Records {\n\t\tcurRecordSequenceNumber := \"\"\n\n\t\t// Process your record\n\t\tif /* Your record processing condition here */ {\n\t\t\tcurRecordSequenceNumber = record.Kinesis.SequenceNumber\n\t\t}\n\n\t\t// Add a condition to check if the record processing failed\n\t\tif curRecordSequenceNumber != \"\" {\n\t\t\tbatchItemFailures = append(batchItemFailures, map[string]interface{}{\"itemIdentifier\": curRecordSequenceNumber})\n\t\t}\n\t}\n\n\tkinesisBatchResponse := map[string]interface{}{\n\t\t\"batchItemFailures\": batchItemFailures,\n\t}\n\treturn kinesisBatchResponse, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                                    "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KinesisEvent;\nimport com.amazonaws.services.lambda.runtime.events.StreamsEventResponse;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProcessKinesisRecords implements RequestHandler<KinesisEvent, StreamsEventResponse> {\n\n    @Override\n    public StreamsEventResponse handleRequest(KinesisEvent input, Context context) {\n\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new ArrayList<>();\n        String curRecordSequenceNumber = \"\";\n\n        for (KinesisEvent.KinesisEventRecord kinesisEventRecord : input.getRecords()) {\n            try {\n                //Process your record\n                KinesisEvent.Record kinesisRecord = kinesisEventRecord.getKinesis();\n                curRecordSequenceNumber = kinesisRecord.getSequenceNumber();\n\n            } catch (Exception e) {\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                batchItemFailures.add(new StreamsEventResponse.BatchItemFailure(curRecordSequenceNumber));\n                return new StreamsEventResponse(batchItemFailures);\n            }\n        }\n       \n       return new StreamsEventResponse(batchItemFailures);   \n    }\n}\n\n",
                                    "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KinesisEvent;\nimport com.amazonaws.services.lambda.runtime.events.StreamsEventResponse;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProcessKinesisRecords implements RequestHandler<KinesisEvent, StreamsEventResponse> {\n\n    @Override\n    public StreamsEventResponse handleRequest(KinesisEvent input, Context context) {\n\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new ArrayList<>();\n        String curRecordSequenceNumber = \"\";\n\n        for (KinesisEvent.KinesisEventRecord kinesisEventRecord : input.getRecords()) {\n            try {\n                //Process your record\n                KinesisEvent.Record kinesisRecord = kinesisEventRecord.getKinesis();\n                curRecordSequenceNumber = kinesisRecord.getSequenceNumber();\n\n            } catch (Exception e) {\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                batchItemFailures.add(new StreamsEventResponse.BatchItemFailure(curRecordSequenceNumber));\n                return new StreamsEventResponse(batchItemFailures);\n            }\n        }\n       \n       return new StreamsEventResponse(batchItemFailures);   \n    }\n}\n\n",
                                    "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    try {\n      console.log(`Processed Kinesis Event - EventID: ${record.eventID}`);\n      const recordData = await getRecordDataAsync(record.kinesis);\n      console.log(`Record Data: ${recordData}`);\n      // TODO: Do interesting work based on the new data\n    } catch (err) {\n      console.error(`An error occurred ${err}`);\n      /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n      return {\n        batchItemFailures: [{ itemIdentifier: record.kinesis.sequenceNumber }],\n      };\n    }\n  }\n  console.log(`Successfully processed ${event.Records.length} records.`);\n  return { batchItemFailures: [] };\n};\n\nasync function getRecordDataAsync(payload) {\n  var data = Buffer.from(payload.data, \"base64\").toString(\"utf-8\");\n  await Promise.resolve(1); //Placeholder for actual async work\n  return data;\n}\n\n",
                                    "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    try {\n      console.log(`Processed Kinesis Event - EventID: ${record.eventID}`);\n      const recordData = await getRecordDataAsync(record.kinesis);\n      console.log(`Record Data: ${recordData}`);\n      // TODO: Do interesting work based on the new data\n    } catch (err) {\n      console.error(`An error occurred ${err}`);\n      /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n      return {\n        batchItemFailures: [{ itemIdentifier: record.kinesis.sequenceNumber }],\n      };\n    }\n  }\n  console.log(`Successfully processed ${event.Records.length} records.`);\n  return { batchItemFailures: [] };\n};\n\nasync function getRecordDataAsync(payload) {\n  var data = Buffer.from(payload.data, \"base64\").toString(\"utf-8\");\n  await Promise.resolve(1); //Placeholder for actual async work\n  return data;\n}\n\n",
                                    "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kinesis\\KinesisEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $kinesisEvent = new KinesisEvent($event);\n        $this->logger->info(\"Processing records\");\n        $records = $kinesisEvent->getRecords();\n\n        $failedRecords = [];\n        foreach ($records as $record) {\n            try {\n                $data = $record->getData();\n                $this->logger->info(json_encode($data));\n                // TODO: Do interesting work based on the new data\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $failedRecords[] = $record->getSequenceNumber();\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n\n        // change format for the response\n        $failures = array_map(\n            fn(string $sequenceNumber) => ['itemIdentifier' => $sequenceNumber],\n            $failedRecords\n        );\n\n        return [\n            'batchItemFailures' => $failures\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kinesis\\KinesisEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $kinesisEvent = new KinesisEvent($event);\n        $this->logger->info(\"Processing records\");\n        $records = $kinesisEvent->getRecords();\n\n        $failedRecords = [];\n        foreach ($records as $record) {\n            try {\n                $data = $record->getData();\n                $this->logger->info(json_encode($data));\n                // TODO: Do interesting work based on the new data\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $failedRecords[] = $record->getSequenceNumber();\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n\n        // change format for the response\n        $failures = array_map(\n            fn(string $sequenceNumber) => ['itemIdentifier' => $sequenceNumber],\n            $failedRecords\n        );\n\n        return [\n            'batchItemFailures' => $failures\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef handler(event, context):\n    records = event.get(\"Records\")\n    curRecordSequenceNumber = \"\"\n    \n    for record in records:\n        try:\n            # Process your record\n            curRecordSequenceNumber = record[\"kinesis\"][\"sequenceNumber\"]\n        except Exception as e:\n            # Return failed record's sequence number\n            return {\"batchItemFailures\":[{\"itemIdentifier\": curRecordSequenceNumber}]}\n\n    return {\"batchItemFailures\":[]}\n\n",
                                    "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef handler(event, context):\n    records = event.get(\"Records\")\n    curRecordSequenceNumber = \"\"\n    \n    for record in records:\n        try:\n            # Process your record\n            curRecordSequenceNumber = record[\"kinesis\"][\"sequenceNumber\"]\n        except Exception as e:\n            # Return failed record's sequence number\n            return {\"batchItemFailures\":[{\"itemIdentifier\": curRecordSequenceNumber}]}\n\n    return {\"batchItemFailures\":[]}\n\n",
                                    "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'aws-sdk'\n\ndef lambda_handler(event:, context:)\n  batch_item_failures = []\n\n  event['Records'].each do |record|\n    begin\n      puts \"Processed Kinesis Event - EventID: #{record['eventID']}\"\n      record_data = get_record_data_async(record['kinesis'])\n      puts \"Record Data: #{record_data}\"\n      # TODO: Do interesting work based on the new data\n    rescue StandardError => err\n      puts \"An error occurred #{err}\"\n      # Since we are working with streams, we can return the failed item immediately.\n      # Lambda will immediately begin to retry processing from this failed item onwards.\n      return { batchItemFailures: [{ itemIdentifier: record['kinesis']['sequenceNumber'] }] }\n    end\n  end\n\n  puts \"Successfully processed #{event['Records'].length} records.\"\n  { batchItemFailures: batch_item_failures }\nend\n\ndef get_record_data_async(payload)\n  data = Base64.decode64(payload['data']).force_encoding('utf-8')\n  # Placeholder for actual async work\n  sleep(1)\n  data\nend\n",
                                    "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'aws-sdk'\n\ndef lambda_handler(event:, context:)\n  batch_item_failures = []\n\n  event['Records'].each do |record|\n    begin\n      puts \"Processed Kinesis Event - EventID: #{record['eventID']}\"\n      record_data = get_record_data_async(record['kinesis'])\n      puts \"Record Data: #{record_data}\"\n      # TODO: Do interesting work based on the new data\n    rescue StandardError => err\n      puts \"An error occurred #{err}\"\n      # Since we are working with streams, we can return the failed item immediately.\n      # Lambda will immediately begin to retry processing from this failed item onwards.\n      return { batchItemFailures: [{ itemIdentifier: record['kinesis']['sequenceNumber'] }] }\n    end\n  end\n\n  puts \"Successfully processed #{event['Records'].length} records.\"\n  { batchItemFailures: batch_item_failures }\nend\n\ndef get_record_data_async(payload)\n  data = Base64.decode64(payload['data']).force_encoding('utf-8')\n  # Placeholder for actual async work\n  sleep(1)\n  data\nend\n",
                                    "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::{\n    event::kinesis::KinesisEvent,\n    kinesis::KinesisEventRecord,\n    streams::{KinesisBatchItemFailure, KinesisEventResponse},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<KinesisEvent>) -> Result<KinesisEventResponse, Error> {\n    let mut response = KinesisEventResponse {\n        batch_item_failures: vec![],\n    };\n\n    if event.payload.records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(response);\n    }\n\n    for record in &event.payload.records {\n        tracing::info!(\n            \"EventId: {}\",\n            record.event_id.as_deref().unwrap_or_default()\n        );\n\n        let record_processing_result = process_record(record);\n\n        if record_processing_result.is_err() {\n            response.batch_item_failures.push(KinesisBatchItemFailure {\n                item_identifier: record.kinesis.sequence_number.clone(),\n            });\n            /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n            return Ok(response);\n        }\n    }\n\n    tracing::info!(\n        \"Successfully processed {} records\",\n        event.payload.records.len()\n    );\n\n    Ok(response)\n}\n\nfn process_record(record: &KinesisEventRecord) -> Result<(), Error> {\n    let record_data = std::str::from_utf8(record.kinesis.data.as_slice());\n\n    if let Some(err) = record_data.err() {\n        tracing::error!(\"Error: {}\", err);\n        return Err(Error::from(err));\n    }\n\n    let record_data = record_data.unwrap_or_default();\n\n    // do something interesting with the data\n    tracing::info!(\"Data: {}\", record_data);\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                                    "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::{\n    event::kinesis::KinesisEvent,\n    kinesis::KinesisEventRecord,\n    streams::{KinesisBatchItemFailure, KinesisEventResponse},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<KinesisEvent>) -> Result<KinesisEventResponse, Error> {\n    let mut response = KinesisEventResponse {\n        batch_item_failures: vec![],\n    };\n\n    if event.payload.records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(response);\n    }\n\n    for record in &event.payload.records {\n        tracing::info!(\n            \"EventId: {}\",\n            record.event_id.as_deref().unwrap_or_default()\n        );\n\n        let record_processing_result = process_record(record);\n\n        if record_processing_result.is_err() {\n            response.batch_item_failures.push(KinesisBatchItemFailure {\n                item_identifier: record.kinesis.sequence_number.clone(),\n            });\n            /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n            return Ok(response);\n        }\n    }\n\n    tracing::info!(\n        \"Successfully processed {} records\",\n        event.payload.records.len()\n    );\n\n    Ok(response)\n}\n\nfn process_record(record: &KinesisEventRecord) -> Result<(), Error> {\n    let record_data = std::str::from_utf8(record.kinesis.data.as_slice());\n\n    if let Some(err) = record_data.err() {\n        tracing::error!(\"Error: {}\", err);\n        return Err(Error::from(err));\n    }\n\n    let record_data = record_data.unwrap_or_default();\n\n    // do something interesting with the data\n    tracing::info!(\"Data: {}\", record_data);\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing System.Text.Json.Serialization;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegration;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task<StreamsEventResponse> FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return new StreamsEventResponse();\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                return new StreamsEventResponse\n                {\n                    BatchItemFailures = new List<StreamsEventResponse.BatchItemFailure>\n                    {\n                        new StreamsEventResponse.BatchItemFailure { ItemIdentifier = record.Kinesis.SequenceNumber }\n                    }\n                };\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n        return new StreamsEventResponse();\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n\npublic class StreamsEventResponse\n{\n    [JsonPropertyName(\"batchItemFailures\")]\n    public IList<BatchItemFailure> BatchItemFailures { get; set; }\n    public class BatchItemFailure\n    {\n        [JsonPropertyName(\"itemIdentifier\")]\n        public string ItemIdentifier { get; set; }\n    }\n}\n"
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Error handling",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/kinesis-on-failure-destination.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Error handling for Kinesis event source mappings depends on whether the error occurs before the function is invoked or during function invocation:",
                            "  1.Before invocation: :  If a Lambda event source mapping is unable to invoke the function due to throttling or other issues, it retries until the records expire or exceed the maximum age configured on the event source mapping (MaximumRecordAgeInSeconds).",
                            "  2.During invocation: :  If the function is invoked but returns an error, Lambda retries until the records expire, exceed the maximum age (MaximumRecordAgeInSeconds), or reach the configured retry quota (MaximumRetryAttempts). For function errors, you can also configure BisectBatchOnFunctionError, which splits a failed batch into two smaller batches, isolating bad records and avoiding timeouts. Splitting batches doesn't consume the retry quota.",
                            "If the error handling measures fail, Lambda discards the records and continues processing  batches from the stream. With the default settings, this means that a bad record can block processing on the affected  shard for up to one week. To avoid this, configure your function's event source mapping with a reasonable  number of retries and a maximum record age that fits your use case.",
                            {
                                "sub_header": "Configuring destinations for failed invocations",
                                "content": [
                                    "To retain records of failed event source mapping invocations, add a destination to your function's event source mapping. Each record sent to the destination is a JSON document containing metadata about the failed invocation. For Amazon S3 destinations, Lambda also sends the entire invocation record along with the metadata. You can configure any Amazon SNS topic, Amazon SQS queue, or S3 bucket as a destination.",
                                    "With Amazon S3 destinations, you can use the Amazon S3 Event Notifications feature to receive notifications when objects are uploaded to your destination S3 bucket. You can also configure S3 Event Notifications to invoke another Lambda function to perform automated processing on failed batches.",
                                    "Your execution role must have permissions for the destination:",
                                    "  1.For SQS destinations: :  sqs:SendMessage",
                                    "  2.For SNS destinations: :  sns:Publish",
                                    "  3.For S3 bucket destinations: :   s3:PutObject and s3:ListBucket",
                                    "If you've enabled encryption with your own KMS key for an S3 destination, your function's execution role must also have permission to call             kms:GenerateDataKey.            If the KMS key and S3 bucket destination are in a different account from your Lambda function            and execution role, configure the KMS key to trust the execution role to allow            kms:GenerateDataKey.",
                                    "To configure an on-failure destination using the console, follow these steps:",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Choose a function.",
                                    "  3 : Under Function overview, choose Add destination.",
                                    "  4 : For Source, choose Event source mapping invocation.",
                                    "  5 : For Event source mapping, choose an event source that's configured              for this function.",
                                    "  6 : For Condition, select On failure. For event              source mapping invocations, this is the only accepted condition.",
                                    "  7 : For Destination type, choose the destination type that Lambda sends              invocation records to.",
                                    "  8 : For Destination, choose a resource.",
                                    "  9 : Choose Save.",
                                    "You can also configure an on-failure destination using the AWS Command Line Interface (AWS CLI). For example, the following          create-event-source-mapping command adds an event source mapping with an SQS on-failure destination to          MyFunction:",
                                    "aws lambda create-event-source-mapping \\--function-name \"MyFunction\" \\--event-source-arn arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream \\--destination-config '{\"OnFailure\": {\"Destination\": \"arn:aws:sqs:us-east-1:123456789012:dest-queue\"}}'",
                                    "The following update-event-source-mapping command updates an event source mapping to send failed invocation records to an SNS destination after two retry attempts, or if the records are more than an hour old.",
                                    "aws lambda update-event-source-mapping \\--uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\--maximum-retry-attempts 2 \\--maximum-record-age-in-seconds 3600 \\--destination-config '{\"OnFailure\": {\"Destination\": \"arn:aws:sns:us-east-1:123456789012:dest-topic\"}}'",
                                    "Updated settings are applied asynchronously and aren't reflected in the output until the process completes. Use    the get-event-source-mapping command to view the current status.",
                                    "To remove a destination, supply an empty string as the argument to the          destination-config parameter:",
                                    "aws lambda update-event-source-mapping \\--uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\--destination-config '{\"OnFailure\": {\"Destination\": \"\"}}'",
                                    {
                                        "sub_header": "Security best practices for Amazon S3 destinations",
                                        "content": [
                                            "Deleting an S3 bucket that's configured as a destination without removing the destination from your function's configuration can create a security risk. If another       user knows your destination bucket's name, they can recreate the bucket in their AWS account. Records of failed invocations will be sent to their bucket, potentially       exposing data from your function.",
                                            "Warning",
                                            "To ensure that invocation records from your function can't be sent to an S3 bucket in another AWS account, add a condition to your function's execution role         that limits s3:PutObject permissions to buckets in your account. ",
                                            "The following example shows an IAM policy that limits your function's s3:PutObject permissions to buckets in your account. This policy also gives Lambda        the s3:ListBucket permission it needs to use an S3 bucket as a destination.",
                                            "{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Sid\": \"S3BucketResourceAccountWrite\",            \"Effect\": \"Allow\",            \"Action\": [                \"s3:PutObject\",                \"s3:ListBucket\"            ],            \"Resource\": \"arn:aws:s3:::*/*\",            \"Condition\": {                \"StringEquals\": {                    \"s3:ResourceAccount\": \"111122223333\"                }            }        }    ]}",
                                            "To add a permissions policy to your funcion's execution role using the AWS Management Console or AWS CLI, refer to the instructions in the following procedures:",
                                            "  1.Console : \nTo add a permissions policy to a function's execution role (console)Open the Functions page of the Lambda console.\nSelect the Lambda function whose execution role you want to modify.\n\nIn the Configuration tab, select Permissions.\n\nIn the Execution role tab, select your function's Role name to open the role's IAM console page.\n\nAdd a permissions policy to the role by doing the following:\n\nIn the Permissions policies pane, choose Add permissions and select Create inline policy.\n\nIn Policy editor, select JSON.\n\nPaste the policy you want to add into the editor (replacing the existing JSON), and then choose Next.\n\nUnder Policy details, enter a Policy name.\n\nChoose Create policy.\n\n\n",
                                            "  2.AWS CLI : put-role-policy",
                                            "anchor",
                                            "anchor",
                                            "To add a permissions policy to a function's execution role (console)",
                                            "  1 : Open the Functions page of the Lambda console.",
                                            "  2 : Select the Lambda function whose execution role you want to modify.",
                                            "  3 : In the Configuration tab, select Permissions.",
                                            "  4 : In the Execution role tab, select your function's Role name to open the role's IAM console page.",
                                            "  5 : Add a permissions policy to the role by doing the following:In the Permissions policies pane, choose Add permissions and select Create inline policy.In Policy editor, select JSON.Paste the policy you want to add into the editor (replacing the existing JSON), and then choose Next.Under Policy details, enter a Policy name.Choose Create policy."
                                        ]
                                    },
                                    {
                                        "sub_header": "Example Amazon SNS and Amazon SQS invocation record",
                                        "content": [
                                            "The following example shows what Lambda sends to an SQS queue or SNS topic for a failed Kinesis      event source invocation. Because Lambda sends only the metadata for these destination types, use the      streamArn, shardId, startSequenceNumber, and      endSequenceNumber fields to obtain the full original record. All of the fields shown in the       KinesisBatchInfo property will always be present.",
                                            "{    \"requestContext\": {        \"requestId\": \"c9b8fa9f-5a7f-xmpl-af9c-0c604cde93a5\",        \"functionArn\": \"arn:aws:lambda:us-east-2:123456789012:function:myfunction\",        \"condition\": \"RetryAttemptsExhausted\",        \"approximateInvokeCount\": 1    },    \"responseContext\": {        \"statusCode\": 200,        \"executedVersion\": \"$LATEST\",        \"functionError\": \"Unhandled\"    },    \"version\": \"1.0\",    \"timestamp\": \"2019-11-14T00:38:06.021Z\",    \"KinesisBatchInfo\": {        \"shardId\": \"shardId-000000000001\",        \"startSequenceNumber\": \"49601189658422359378836298521827638475320189012309704722\",        \"endSequenceNumber\": \"49601189658422359378836298522902373528957594348623495186\",        \"approximateArrivalOfFirstRecord\": \"2019-11-14T00:38:04.835Z\",        \"approximateArrivalOfLastRecord\": \"2019-11-14T00:38:05.580Z\",        \"batchSize\": 500,        \"streamArn\": \"arn:aws:kinesis:us-east-2:123456789012:stream/mystream\"    }}",
                                            "You can use this information to retrieve the affected records from the stream for  troubleshooting. The actual records aren't included, so you must process this record and retrieve them from the  stream before they expire and are lost."
                                        ]
                                    },
                                    {
                                        "sub_header": "Example Amazon S3 invocation record",
                                        "content": [
                                            "The following example shows what Lambda sends to an Amazon S3 bucket for a failed Kinesis      event source invocation. In addition to all of the fields from the previous example for SQS and SNS destinations, the payload field       contains the original invocation record as an escaped JSON string.",
                                            "{    \"requestContext\": {        \"requestId\": \"c9b8fa9f-5a7f-xmpl-af9c-0c604cde93a5\",        \"functionArn\": \"arn:aws:lambda:us-east-2:123456789012:function:myfunction\",        \"condition\": \"RetryAttemptsExhausted\",        \"approximateInvokeCount\": 1    },    \"responseContext\": {        \"statusCode\": 200,        \"executedVersion\": \"$LATEST\",        \"functionError\": \"Unhandled\"    },    \"version\": \"1.0\",    \"timestamp\": \"2019-11-14T00:38:06.021Z\",    \"KinesisBatchInfo\": {        \"shardId\": \"shardId-000000000001\",        \"startSequenceNumber\": \"49601189658422359378836298521827638475320189012309704722\",        \"endSequenceNumber\": \"49601189658422359378836298522902373528957594348623495186\",        \"approximateArrivalOfFirstRecord\": \"2019-11-14T00:38:04.835Z\",        \"approximateArrivalOfLastRecord\": \"2019-11-14T00:38:05.580Z\",        \"batchSize\": 500,        \"streamArn\": \"arn:aws:kinesis:us-east-2:123456789012:stream/mystream\"    },    \"payload\": \"<Whole Event>\" // Only available in S3}",
                                            "The S3 object containing the invocation record uses the following naming convention:",
                                            "aws/lambda/<ESM-UUID>/<shardID>/YYYY/MM/DD/YYYY-MM-DDTHH.MM.SS-<Random UUID>"
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Stateful processing",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-kinesis-windows.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Lambda functions can run continuous stream processing applications. A stream represents unbounded data that flows    continuously through your application. To analyze information from this continuously updating input, you can bound    the included records using a window defined in terms of time.",
                            "Tumbling windows are distinct time windows that open and close at regular intervals. By default, Lambda invocations    are stateless—you cannot use them for processing data across multiple continuous invocations without an external database.    However, with tumbling windows, you can maintain your state across invocations. This state contains the aggregate result    of the messages previously processed for the current window. Your state can be a maximum of 1 MB per shard. If it exceeds    that size, Lambda terminates the window early.",
                            "Each record in a stream belongs to a specific window. Lambda will process each record at least once, but doesn't guarantee that each record will be processed only once. In rare cases, such as error handling, some records might be processed more than once. Records are always processed in order the first time. If records are processed more than once, they might be processed out of order.",
                            {
                                "sub_header": "Aggregation and processing",
                                "content": [
                                    "Your user managed function is invoked both for aggregation and for processing the final results of that      aggregation. Lambda aggregates all records received in the window. You can receive these records in multiple      batches, each as a separate invocation. Each invocation receives a state. Thus, when using tumbling windows,      your Lambda function response must contain a state property. If the response does not contain a      state property, Lambda considers this a failed invocation. To satisfy this condition, your function      can return a TimeWindowEventResponse object, which has the following JSON shape:",
                                    "Example TimeWindowEventResponse values",
                                    {
                                        "code_example": "{\n    \"state\": {\n        \"1\": 282,\n        \"2\": 715\n    },\n    \"batchItemFailures\": []\n}"
                                    },
                                    "Note",
                                    "For Java functions, we recommend using a Map<String, String> to represent the state.",
                                    "At the end of the window, the flag isFinalInvokeForWindow is set to true to indicate      that this is the final state and that it’s ready for processing. After processing, the window completes and your      final invocation completes, and then the state is dropped.",
                                    "At the end of your window, Lambda uses final processing for actions on the aggregation results. Your final      processing is synchronously invoked. After successful invocation, your function checkpoints the sequence number      and stream processing continues. If invocation is unsuccessful, your Lambda function suspends further processing      until a successful invocation.",
                                    "Example  KinesisTimeWindowEvent",
                                    {
                                        "code_example": "\n{\n    \"Records\": [\n        {\n            \"kinesis\": {\n                \"kinesisSchemaVersion\": \"1.0\",\n                \"partitionKey\": \"1\",\n                \"sequenceNumber\": \"49590338271490256608559692538361571095921575989136588898\",\n                \"data\": \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",\n                \"approximateArrivalTimestamp\": 1607497475.000\n            },\n            \"eventSource\": \"aws:kinesis\",\n            \"eventVersion\": \"1.0\",\n            \"eventID\": \"shardId-000000000006:49590338271490256608559692538361571095921575989136588898\",\n            \"eventName\": \"aws:kinesis:record\",\n            \"invokeIdentityArn\": \"arn:aws:iam::123456789012:role/lambda-kinesis-role\",\n            \"awsRegion\": \"us-east-1\",\n            \"eventSourceARN\": \"arn:aws:kinesis:us-east-1:123456789012:stream/lambda-stream\"\n        }\n    ],\n    \"window\": {\n        \"start\": \"2020-12-09T07:04:00Z\",\n        \"end\": \"2020-12-09T07:06:00Z\"\n    },\n    \"state\": {\n        \"1\": 282,\n        \"2\": 715\n    },\n    \"shardId\": \"shardId-000000000006\",\n    \"eventSourceARN\": \"arn:aws:kinesis:us-east-1:123456789012:stream/lambda-stream\",\n    \"isFinalInvokeForWindow\": false,\n    \"isWindowTerminatedEarly\": false\n}\n"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Configuration",
                                "content": [
                                    "You can configure tumbling windows when you create or update an event source mapping. To configure a tumbling window, specify the window in seconds (TumblingWindowInSeconds). The following            example AWS Command Line Interface (AWS CLI) command creates a streaming event source mapping that has a tumbling window of 120            seconds. The Lambda function defined for aggregation and processing is named            tumbling-window-example-function.",
                                    "aws lambda create-event-source-mapping \\--event-source-arn arn:aws:kinesis:us-east-1:123456789012:stream/lambda-stream \\--function-name tumbling-window-example-function \\--starting-position TRIM_HORIZON \\--tumbling-window-in-seconds 120",
                                    "Lambda determines tumbling window boundaries based on the time when records were inserted into the stream. All            records have an approximate timestamp available that Lambda uses in boundary determinations.",
                                    "Tumbling window aggregations do not support resharding. When a shard ends, Lambda considers the current window to be closed, and any child shards will start their own window in a fresh state. When no new records are being added to the current window, Lambda waits for up to 2 minutes before assuming that the window is over. This helps ensure that the function reads all records in the current window, even if the records are added intermittently.",
                                    "Tumbling windows fully support the existing retry policies maxRetryAttempts and            maxRecordAge.",
                                    "Example  Handler.py – Aggregation and processing",
                                    "The following Python function demonstrates how to aggregate and then process your final state:",
                                    {
                                        "code_example": "def lambda_handler(event, context):\n    print('Incoming event: ', event)\n    print('Incoming state: ', event['state'])\n\n#Check if this is the end of the window to either aggregate or process.\n    if event['isFinalInvokeForWindow']:\n        # logic to handle final state of the window\n        print('Destination invoke')\n    else:\n        print('Aggregate invoke')\n\n#Check for early terminations\n    if event['isWindowTerminatedEarly']:\n        print('Window terminated early')\n\n    #Aggregation logic\n    state = event['state']\n    for record in event['Records']:\n        state[record['kinesis']['partitionKey']] = state.get(record['kinesis']['partitionKey'], 0) + 1\n\n    print('Returning state: ', state)\n    return {'state': state}"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Parameters",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-kinesis-parameters.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "All Lambda event source mappings share the same CreateEventSourceMapping and UpdateEventSourceMapping        API operations. However, only some of the parameters apply to Kinesis.",
                            "ParameterRequiredDefaultNotesBatchSizeN100Maximum: 10,000BisectBatchOnFunctionErrorNfalse noneDestinationConfigNN/AAmazon SQS queue or Amazon SNS topic destination for discarded records. For more information, see Configuring destinations for failed invocations.EnabledNtrue noneEventSourceArnYN/AARN of the data stream or a stream consumerFunctionNameYN/A noneFunctionResponseTypesN N/ATo let your function report specific failures in a batch, include the value                            ReportBatchItemFailures in FunctionResponseTypes. For more information, see                            Configuring partial batch response with Kinesis Data Streams and Lambda.MaximumBatchingWindowInSecondsN0 noneMaximumRecordAgeInSecondsN-1-1 means infinite: Lambda doesn't discard records (Kinesis Data Streams data retention settings still apply)Minimum: -1Maximum: 604,800MaximumRetryAttemptsN-1-1 means infinite: failed records are retried until the record expiresMinimum: -1Maximum: 10,000ParallelizationFactorN1Maximum: 10StartingPositionY N/AAT_TIMESTAMP, TRIM_HORIZON, or LATESTStartingPositionTimestampN N/AOnly valid if StartingPosition is set to AT_TIMESTAMP. The time from which to start reading, in Unix time secondsTumblingWindowInSecondsN N/AMinimum: 0Maximum: 900"
                        ]
                    },
                    {
                        "title": "Event filtering",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis-filtering.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "You can use event filtering to control which records from a stream or queue Lambda sends to your function.    For general information about how event filtering works, see Control which events Lambda sends to your function.",
                            "This section focuses on event filtering for Kinesis event sources.",
                            "Topics",
                            {
                                "sub_header": "Kinesis event filtering basics",
                                "content": [
                                    "Suppose a producer is putting JSON formatted data into your Kinesis data stream. An example record would look like the following, with the             JSON data converted to a Base64 encoded string in the data field.",
                                    "{    \"kinesis\": {        \"kinesisSchemaVersion\": \"1.0\",        \"partitionKey\": \"1\",        \"sequenceNumber\": \"49590338271490256608559692538361571095921575989136588898\",        \"data\": \"eyJSZWNvcmROdW1iZXIiOiAiMDAwMSIsICJUaW1lU3RhbXAiOiAieXl5eS1tbS1kZFRoaDptbTpzcyIsICJSZXF1ZXN0Q29kZSI6ICJBQUFBIn0=\",        \"approximateArrivalTimestamp\": 1545084650.987        },    \"eventSource\": \"aws:kinesis\",    \"eventVersion\": \"1.0\",    \"eventID\": \"shardId-000000000006:49590338271490256608559692538361571095921575989136588898\",    \"eventName\": \"aws:kinesis:record\",    \"invokeIdentityArn\": \"arn:aws:iam::123456789012:role/lambda-role\",    \"awsRegion\": \"us-east-2\",    \"eventSourceARN\": \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\"}",
                                    "As long as the data the producer puts into the stream is valid JSON, you can use event filtering to filter records using the data             key. Suppose a producer is putting records into your Kinesis stream in the following JSON format.",
                                    "{    \"record\": 12345,    \"order\": {        \"type\": \"buy\",        \"stock\": \"ANYCO\",        \"quantity\": 1000        }}",
                                    "To filter only those records where the order type is “buy,” the FilterCriteria object would be as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"data\\\" : { \\\"order\\\" : { \\\"type\\\" : [ \\\"buy\\\" ] } } }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON. ",
                                    "{    \"data\": {        \"order\": {            \"type\": [ \"buy\" ]            }      }}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"data\" : { \"order\" : { \"type\" : [ \"buy\" ] } } }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:kinesis:us-east-2:123456789012:stream/my-stream \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"data\\\" : { \\\"order\\\" : { \\\"type\\\" : [ \\\"buy\\\" ] } } }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"data\" : { \"order\" : { \"type\" : [ \"buy\" ] } } }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"data\" : { \"order\" : { \"type\" : [ \"buy\" ] } } }"
                                    },
                                    "To properly filter events from Kinesis sources, both the data field and your filter criteria for the data field must be in valid JSON format.             If either field isn't in a valid JSON format, Lambda drops the message or throws an exception. The following table summarizes the specific behavior: ",
                                    "Incoming data formatFilter pattern format for data propertiesResulting actionValid JSONValid JSONLambda filters based on your filter criteria.Valid JSONNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONNon-JSONLambda throws an exception at the time of the event source mapping creation or update. The filter pattern                                for data properties must be in a valid JSON format.Non-JSONValid JSONLambda drops the record.Non-JSONNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Non-JSONNon-JSONLambda throws an exception at the time of the event source mapping creation or update. The filter pattern                                for data properties must be in a valid JSON format."
                                ]
                            },
                            {
                                "sub_header": "Filtering Kinesis aggregated records",
                                "content": [
                                    "With Kinesis, you can aggregate multiple records into a single Kinesis Data Streams record to increase your data throughput. Lambda can only apply             filter criteria to aggregated records when you use Kinesis enhanced fan-out.             Filtering aggregated records with standard Kinesis isn't supported. When using enhanced fan-out, you configure a Kinesis dedicated-throughput consumer             to act as the trigger for your Lambda function. Lambda then filters the aggregated records and passes only those records that meet your filter criteria.",
                                    "To learn more about Kinesis record aggregation, refer to the Aggregation             section on the Kinesis Producer Library (KPL) Key Concepts page. To Learn more about using Lambda with Kinesis enhanced fan-out, see             Increasing real-time stream processing performance with Amazon Kinesis Data Streams enhanced fan-out and AWS Lambda             on the AWS compute blog."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Tutorial",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis-example.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "In this tutorial, you create a Lambda function to consume events from a Amazon Kinesis data stream. ",
                            "  1 : Custom app writes records to the stream.",
                            "  2 : AWS Lambda polls the stream and, when it detects new records in the stream, invokes your Lambda        function.",
                            "  3 : AWS Lambda runs the Lambda function by assuming the execution role you specified at the time you created        the Lambda function.",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "This tutorial assumes that you have some knowledge of basic Lambda operations and the Lambda console. If you      haven't already, follow the instructions in Create a Lambda function with the console to create your first Lambda function.",
                                    "To complete the following steps, you need the AWS CLI version 2. Commands and the expected output are listed in separate blocks:",
                                    "aws --version",
                                    "You should see the following output:",
                                    "aws-cli/2.13.27 Python/3.11.6 Linux/4.14.328-248.540.amzn2.x86_64 exe/x86_64.amzn.2",
                                    "For long commands, an escape character (\\) is used to split a command over multiple lines.",
                                    "On Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.     To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.     Example CLI commands in this guide use Linux formatting. Commands which include inline JSON documents must be reformatted if you are using the Windows CLI.    "
                                ]
                            },
                            {
                                "sub_header": "Create the execution role",
                                "content": [
                                    "Create the execution role that gives your function      permission to access AWS resources.",
                                    "To create an execution role",
                                    "  1 : Open the roles page in the IAM console.",
                                    "  2 : Choose Create role.",
                                    "  3 : Create a role with the following properties.Trusted entity – AWS Lambda.Permissions – AWSLambdaKinesisExecutionRole.Role name – lambda-kinesis-role.",
                                    "The AWSLambdaKinesisExecutionRole policy has the permissions that the function needs to      read items from Kinesis and write logs to CloudWatch Logs."
                                ]
                            },
                            {
                                "sub_header": "Create the function",
                                "content": [
                                    "Create a Lambda function that processes your Kinesis messages. The function code logs the event ID      and event data of the Kinesis record to CloudWatch Logs.",
                                    "This tutorial uses the Node.js 18.x runtime, but we've also provided example code in other runtime      languages. You can select the tab in the following box to see code for the runtime you're interested in.      The JavaScript code you'll use in this step is in the first example shown in the      JavaScript tab.",
                                    "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegrationSampleCode;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return;\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                throw;\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n",
                                    "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegrationSampleCode;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return;\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                throw;\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n",
                                    "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) error {\n\tif len(kinesisEvent.Records) == 0 {\n\t\tlog.Printf(\"empty Kinesis event received\")\n\t\treturn nil\n\t}\n\n\tfor _, record := range kinesisEvent.Records {\n\t\tlog.Printf(\"processed Kinesis event with EventId: %v\", record.EventID)\n\t\trecordDataBytes := record.Kinesis.Data\n\t\trecordDataText := string(recordDataBytes)\n\t\tlog.Printf(\"record data: %v\", recordDataText)\n\t\t// TODO: Do interesting work based on the new data\n\t}\n\tlog.Printf(\"successfully processed %v records\", len(kinesisEvent.Records))\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                                    "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) error {\n\tif len(kinesisEvent.Records) == 0 {\n\t\tlog.Printf(\"empty Kinesis event received\")\n\t\treturn nil\n\t}\n\n\tfor _, record := range kinesisEvent.Records {\n\t\tlog.Printf(\"processed Kinesis event with EventId: %v\", record.EventID)\n\t\trecordDataBytes := record.Kinesis.Data\n\t\trecordDataText := string(recordDataBytes)\n\t\tlog.Printf(\"record data: %v\", recordDataText)\n\t\t// TODO: Do interesting work based on the new data\n\t}\n\tlog.Printf(\"successfully processed %v records\", len(kinesisEvent.Records))\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                                    "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KinesisEvent;\n\npublic class Handler implements RequestHandler<KinesisEvent, Void> {\n    @Override\n    public Void handleRequest(final KinesisEvent event, final Context context) {\n        LambdaLogger logger = context.getLogger();\n        if (event.getRecords().isEmpty()) {\n            logger.log(\"Empty Kinesis Event received\");\n            return null;\n        }\n        for (KinesisEvent.KinesisEventRecord record : event.getRecords()) {\n            try {\n                logger.log(\"Processed Event with EventId: \"+record.getEventID());\n                String data = new String(record.getKinesis().getData().array());\n                logger.log(\"Data:\"+ data);\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex) {\n                logger.log(\"An error occurred:\"+ex.getMessage());\n                throw ex;\n            }\n        }\n        logger.log(\"Successfully processed:\"+event.getRecords().size()+\" records\");\n        return null;\n    }\n\n}\n\n",
                                    "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KinesisEvent;\n\npublic class Handler implements RequestHandler<KinesisEvent, Void> {\n    @Override\n    public Void handleRequest(final KinesisEvent event, final Context context) {\n        LambdaLogger logger = context.getLogger();\n        if (event.getRecords().isEmpty()) {\n            logger.log(\"Empty Kinesis Event received\");\n            return null;\n        }\n        for (KinesisEvent.KinesisEventRecord record : event.getRecords()) {\n            try {\n                logger.log(\"Processed Event with EventId: \"+record.getEventID());\n                String data = new String(record.getKinesis().getData().array());\n                logger.log(\"Data:\"+ data);\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex) {\n                logger.log(\"An error occurred:\"+ex.getMessage());\n                throw ex;\n            }\n        }\n        logger.log(\"Successfully processed:\"+event.getRecords().size()+\" records\");\n        return null;\n    }\n\n}\n\n",
                                    "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    try {\n      console.log(`Processed Kinesis Event - EventID: ${record.eventID}`);\n      const recordData = await getRecordDataAsync(record.kinesis);\n      console.log(`Record Data: ${recordData}`);\n      // TODO: Do interesting work based on the new data\n    } catch (err) {\n      console.error(`An error occurred ${err}`);\n      throw err;\n    }\n  }\n  console.log(`Successfully processed ${event.Records.length} records.`);\n};\n\nasync function getRecordDataAsync(payload) {\n  var data = Buffer.from(payload.data, \"base64\").toString(\"utf-8\");\n  await Promise.resolve(1); //Placeholder for actual async work\n  return data;\n}\n\n",
                                    "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    try {\n      console.log(`Processed Kinesis Event - EventID: ${record.eventID}`);\n      const recordData = await getRecordDataAsync(record.kinesis);\n      console.log(`Record Data: ${recordData}`);\n      // TODO: Do interesting work based on the new data\n    } catch (err) {\n      console.error(`An error occurred ${err}`);\n      throw err;\n    }\n  }\n  console.log(`Successfully processed ${event.Records.length} records.`);\n};\n\nasync function getRecordDataAsync(payload) {\n  var data = Buffer.from(payload.data, \"base64\").toString(\"utf-8\");\n  await Promise.resolve(1); //Placeholder for actual async work\n  return data;\n}\n\n",
                                    "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kinesis\\KinesisEvent;\nuse Bref\\Event\\Kinesis\\KinesisHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends KinesisHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleKinesis(KinesisEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing records\");\n        $records = $event->getRecords();\n        foreach ($records as $record) {\n            $data = $record->getData();\n            $this->logger->info(json_encode($data));\n            // TODO: Do interesting work based on the new data\n\n            // Any exception thrown will be logged and the invocation will be marked as failed\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kinesis\\KinesisEvent;\nuse Bref\\Event\\Kinesis\\KinesisHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends KinesisHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleKinesis(KinesisEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing records\");\n        $records = $event->getRecords();\n        foreach ($records as $record) {\n            $data = $record->getData();\n            $this->logger->info(json_encode($data));\n            // TODO: Do interesting work based on the new data\n\n            // Any exception thrown will be logged and the invocation will be marked as failed\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport base64\ndef lambda_handler(event, context):\n\n    for record in event['Records']:\n        try:\n            print(f\"Processed Kinesis Event - EventID: {record['eventID']}\")\n            record_data = base64.b64decode(record['kinesis']['data']).decode('utf-8')\n            print(f\"Record Data: {record_data}\")\n            # TODO: Do interesting work based on the new data\n        except Exception as e:\n            print(f\"An error occurred {e}\")\n            raise e\n    print(f\"Successfully processed {len(event['Records'])} records.\")\n\n",
                                    "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport base64\ndef lambda_handler(event, context):\n\n    for record in event['Records']:\n        try:\n            print(f\"Processed Kinesis Event - EventID: {record['eventID']}\")\n            record_data = base64.b64decode(record['kinesis']['data']).decode('utf-8')\n            print(f\"Record Data: {record_data}\")\n            # TODO: Do interesting work based on the new data\n        except Exception as e:\n            print(f\"An error occurred {e}\")\n            raise e\n    print(f\"Successfully processed {len(event['Records'])} records.\")\n\n",
                                    "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'aws-sdk'\n\ndef lambda_handler(event:, context:)\n  event['Records'].each do |record|\n    begin\n      puts \"Processed Kinesis Event - EventID: #{record['eventID']}\"\n      record_data = get_record_data_async(record['kinesis'])\n      puts \"Record Data: #{record_data}\"\n      # TODO: Do interesting work based on the new data\n    rescue => err\n      $stderr.puts \"An error occurred #{err}\"\n      raise err\n    end\n  end\n  puts \"Successfully processed #{event['Records'].length} records.\"\nend\n\ndef get_record_data_async(payload)\n  data = Base64.decode64(payload['data']).force_encoding('UTF-8')\n  # Placeholder for actual async work\n  # You can use Ruby's asynchronous programming tools like async/await or fibers here.\n  return data\nend\n",
                                    "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'aws-sdk'\n\ndef lambda_handler(event:, context:)\n  event['Records'].each do |record|\n    begin\n      puts \"Processed Kinesis Event - EventID: #{record['eventID']}\"\n      record_data = get_record_data_async(record['kinesis'])\n      puts \"Record Data: #{record_data}\"\n      # TODO: Do interesting work based on the new data\n    rescue => err\n      $stderr.puts \"An error occurred #{err}\"\n      raise err\n    end\n  end\n  puts \"Successfully processed #{event['Records'].length} records.\"\nend\n\ndef get_record_data_async(payload)\n  data = Base64.decode64(payload['data']).force_encoding('UTF-8')\n  # Placeholder for actual async work\n  # You can use Ruby's asynchronous programming tools like async/await or fibers here.\n  return data\nend\n",
                                    "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::kinesis::KinesisEvent;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<KinesisEvent>) -> Result<(), Error> {\n    if event.payload.records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    event.payload.records.iter().for_each(|record| {\n        tracing::info!(\"EventId: {}\",record.event_id.as_deref().unwrap_or_default());\n\n        let record_data = std::str::from_utf8(&record.kinesis.data);\n\n        match record_data {\n            Ok(data) => {\n                // log the record data\n                tracing::info!(\"Data: {}\", data);\n            }\n            Err(e) => {\n                tracing::error!(\"Error: {}\", e);\n            }\n        }\n    });\n\n    tracing::info!(\n        \"Successfully processed {} records\",\n        event.payload.records.len()\n    );\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                                    "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::kinesis::KinesisEvent;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<KinesisEvent>) -> Result<(), Error> {\n    if event.payload.records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    event.payload.records.iter().for_each(|record| {\n        tracing::info!(\"EventId: {}\",record.event_id.as_deref().unwrap_or_default());\n\n        let record_data = std::str::from_utf8(&record.kinesis.data);\n\n        match record_data {\n            Ok(data) => {\n                // log the record data\n                tracing::info!(\"Data: {}\", data);\n            }\n            Err(e) => {\n                tracing::error!(\"Error: {}\", e);\n            }\n        }\n    });\n\n    tracing::info!(\n        \"Successfully processed {} records\",\n        event.payload.records.len()\n    );\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegrationSampleCode;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return;\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                throw;\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n",
                                    "To create the function",
                                    " 1 : Create a directory for the project, and then switch to that directory. ",
                                    {
                                        "code_example": "mkdir kinesis-tutorial\ncd kinesis-tutorial"
                                    },
                                    "  2 : Copy the sample JavaScript code into a new file named index.js.",
                                    " 3 : Create a deployment package. ",
                                    {
                                        "code_example": "zip function.zip index.js"
                                    },
                                    " 4 : Create a Lambda function with the create-function command. ",
                                    {
                                        "code_example": "aws lambda create-function --function-name ProcessKinesisRecords \\\n--zip-file fileb://function.zip --handler index.handler --runtime nodejs18.x \\\n--role arn:aws:iam::111122223333:role/lambda-kinesis-role"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Test the\n        Lambda function",
                                "content": [
                                    "Invoke your Lambda function manually using the invoke AWS Lambda CLI command and a sample Kinesis      event.",
                                    "To test the Lambda function",
                                    " 1 : Copy the following JSON into a file and save it as input.txt.  ",
                                    {
                                        "code_example": "{\n    \"Records\": [\n        {\n            \"kinesis\": {\n                \"kinesisSchemaVersion\": \"1.0\",\n                \"partitionKey\": \"1\",\n                \"sequenceNumber\": \"49590338271490256608559692538361571095921575989136588898\",\n                \"data\": \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",\n                \"approximateArrivalTimestamp\": 1545084650.987\n            },\n            \"eventSource\": \"aws:kinesis\",\n            \"eventVersion\": \"1.0\",\n            \"eventID\": \"shardId-000000000006:49590338271490256608559692538361571095921575989136588898\",\n            \"eventName\": \"aws:kinesis:record\",\n            \"invokeIdentityArn\": \"arn:aws:iam::111122223333:role/lambda-kinesis-role\",\n            \"awsRegion\": \"us-east-2\",\n            \"eventSourceARN\": \"arn:aws:kinesis:us-east-2:111122223333:stream/lambda-stream\"\n        }\n    ]\n}"
                                    },
                                    " 2 : Use the invoke command to send the event to the function. The cli-binary-format option is required if you're using AWS CLI version 2. To make this the default setting, run aws configure set cli-binary-format raw-in-base64-out. For more information, see AWS CLI supported global command line options in the AWS Command Line Interface User Guide for Version 2.The response is saved to out.txt.",
                                    {
                                        "code_example": "aws lambda invoke --function-name ProcessKinesisRecords \\\n--cli-binary-format raw-in-base64-out \\\n--payload file://input.txt outputfile.txt"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Create a Kinesis stream",
                                "content": [
                                    "Use the create-stream  command to create a stream.",
                                    "aws kinesis create-stream --stream-name lambda-stream --shard-count 1",
                                    "Run the following describe-stream command to get the stream ARN.",
                                    "aws kinesis describe-stream --stream-name lambda-stream",
                                    "You should see the following output:",
                                    "{    \"StreamDescription\": {        \"Shards\": [            {                \"ShardId\": \"shardId-000000000000\",                \"HashKeyRange\": {                    \"StartingHashKey\": \"0\",                    \"EndingHashKey\": \"340282366920746074317682119384634633455\"                },                \"SequenceNumberRange\": {                    \"StartingSequenceNumber\": \"49591073947768692513481539594623130411957558361251844610\"                }            }        ],        \"StreamARN\": \"arn:aws:kinesis:us-east-1:111122223333:stream/lambda-stream\",        \"StreamName\": \"lambda-stream\",        \"StreamStatus\": \"ACTIVE\",        \"RetentionPeriodHours\": 24,        \"EnhancedMonitoring\": [            {                \"ShardLevelMetrics\": []            }        ],        \"EncryptionType\": \"NONE\",        \"KeyId\": null,        \"StreamCreationTimestamp\": 1544828156.0    }}",
                                    "You use the stream ARN in the next step to associate the stream with your Lambda function."
                                ]
                            },
                            {
                                "sub_header": "Add an event source in\n        AWS Lambda",
                                "content": [
                                    "Run the following AWS CLI add-event-source command.",
                                    "aws lambda create-event-source-mapping --function-name ProcessKinesisRecords \\--event-source  arn:aws:kinesis:us-east-1:111122223333:stream/lambda-stream \\--batch-size 100 --starting-position LATEST",
                                    "Note the mapping ID for later use. You can get a list of event source mappings by running the        list-event-source-mappings command.",
                                    "aws lambda list-event-source-mappings --function-name ProcessKinesisRecords \\--event-source arn:aws:kinesis:us-east-1:111122223333:stream/lambda-stream",
                                    "In the response, you can verify the status value is enabled. Event source mappings can be      disabled to pause polling temporarily without losing any records."
                                ]
                            },
                            {
                                "sub_header": "Test the setup",
                                "content": [
                                    "To test the event source mapping, add event records to your Kinesis stream. The --data value is a      string that the CLI encodes to base64 prior to sending it to Kinesis. You can run the same command more than once to      add multiple records to the stream.",
                                    "aws kinesis put-record --stream-name lambda-stream --partition-key 1 \\--data \"Hello, this is a test.\"",
                                    "Lambda uses the execution role to read records from the stream. Then it invokes your Lambda function, passing in      batches of records. The function decodes data from each record and logs it, sending the output to CloudWatch Logs. View the      logs in the CloudWatch console."
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources",
                                "content": [
                                    "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "To delete the Kinesis stream",
                                    "  1 : Sign in to the AWS Management Console and open the Kinesis console at         https://console.aws.amazon.com/kinesis.",
                                    "  2 : Select the stream you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Enter delete in the text input field.",
                                    "  5 : Choose Delete."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "You can use a Lambda function to process records in an Amazon Kinesis data stream. You can map a Lambda function to a Kinesis Data Streams shared-throughput consumer (standard iterator), or to a    dedicated-throughput consumer with enhanced fan-out. For standard iterators, Lambda polls each shard in your Kinesis stream for records using HTTP protocol. The event source mapping shares read throughput with other consumers of the shard.",
                    " For details about Kinesis data streams, see Reading Data from      Amazon Kinesis Data Streams.",
                    "Note",
                    "Kinesis charges for each shard and, for enhanced fan-out, data read from the stream. For pricing details, see      Amazon Kinesis pricing.",
                    "Topics",
                    {
                        "sub_header": " Polling and batching streams",
                        "content": [
                            "Lambda reads records from the data stream and invokes your function synchronously with an event that contains stream records. Lambda reads records in batches and invokes your    function to process records from the batch. Each batch contains records from a single shard/data stream.",
                            "For standard Kinesis data streams, Lambda polls shards in your stream for records at a rate of once per second for each shard.       For Kinesis enhanced fan-out,     Lambda uses an HTTP/2 connection to listen for records being pushed from Kinesis. When records are available, Lambda invokes your     function and waits for the result.",
                            "By default, Lambda invokes your function as soon as records are available. If the batch      that Lambda reads from the event source has only one record in it, Lambda sends only one record to the function. To avoid invoking the function      with a small number of records, you can tell the event source to buffer records for up to 5 minutes by configuring a        batching window. Before invoking the function, Lambda continues to read records from the event source      until it has gathered a full batch, the batching window expires, or the batch reaches the payload limit of 6 MB. For more information,      see Batching behavior.",
                            "Warning",
                            "Lambda event source mappings process each event at least once, and duplicate processing of records can occur. To avoid potential issues related to duplicate events, we strongly recommend that you make your function code idempotent. To learn more, see How do I make my Lambda function idempotent in the AWS Knowledge Center.",
                            "Lambda doesn't wait for any configured extensions to complete      before sending the next batch for processing. In other words, your extensions may continue to run as Lambda      processes the next batch of records. This can cause throttling issues if you breach any of your account's       concurrency settings or limits. To detect whether this is a      potential issue, monitor your functions and check whether you're seeing higher      concurrency metrics than expected for your event      source mapping. Due to short times in between invokes, Lambda may briefly report higher concurrency usage      than the number of shards. This can be true even for Lambda functions without extensions.",
                            "Configure the ParallelizationFactor setting to process one shard of a Kinesis data stream with more than one Lambda invocation simultaneously.       You can specify the number of concurrent batches that Lambda polls from a shard via a parallelization factor from 1 (default) to 10. For example, when you set ParallelizationFactor       to 2, you can have 200 concurrent Lambda invocations at maximum to process 100 Kinesis data shards (though in practice, you may see different values for the ConcurrentExecutions metric).      This helps scale up the processing throughput when the data volume is volatile and       the IteratorAge is high. When you increase the number of concurrent batches per shard, Lambda still ensures in-order processing at the partition-key level.",
                            "You can also use ParallelizationFactor with Kinesis aggregation. The behavior of the event source mapping      depends on whether you're using enhanced fan-out:",
                            "  1.Without enhanced fan-out : : All of the events inside an aggregated event must have the same          partition key. The partition key must also match that of the aggregated event. If the events inside the aggregated event have          different partition keys, Lambda cannot guarantee in-order processing of the events by partition key.",
                            "  2.With enhanced fan-out : : First, Lambda decodes the aggregated event into its individual events.          The aggregated event can have a different partition key than events it contains. However, events that don't correspond to          the partition key are dropped and lost.          Lambda doesn't process these events, and doesn't send them to a configured failure destination."
                        ]
                    },
                    {
                        "sub_header": " Example event",
                        "content": [
                            {
                                "code_example": "{\n    \"Records\": [\n        {\n            \"kinesis\": {\n                \"kinesisSchemaVersion\": \"1.0\",\n                \"partitionKey\": \"1\",\n                \"sequenceNumber\": \"49590338271490256608559692538361571095921575989136588898\",\n                \"data\": \"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",\n                \"approximateArrivalTimestamp\": 1545084650.987\n            },\n            \"eventSource\": \"aws:kinesis\",\n            \"eventVersion\": \"1.0\",\n            \"eventID\": \"shardId-000000000006:49590338271490256608559692538361571095921575989136588898\",\n            \"eventName\": \"aws:kinesis:record\",\n            \"invokeIdentityArn\": \"arn:aws:iam::123456789012:role/lambda-role\",\n            \"awsRegion\": \"us-east-2\",\n            \"eventSourceARN\": \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\"\n        },\n        {\n            \"kinesis\": {\n                \"kinesisSchemaVersion\": \"1.0\",\n                \"partitionKey\": \"1\",\n                \"sequenceNumber\": \"49590338271490256608559692540925702759324208523137515618\",\n                \"data\": \"VGhpcyBpcyBvbmx5IGEgdGVzdC4=\",\n                \"approximateArrivalTimestamp\": 1545084711.166\n            },\n            \"eventSource\": \"aws:kinesis\",\n            \"eventVersion\": \"1.0\",\n            \"eventID\": \"shardId-000000000006:49590338271490256608559692540925702759324208523137515618\",\n            \"eventName\": \"aws:kinesis:record\",\n            \"invokeIdentityArn\": \"arn:aws:iam::123456789012:role/lambda-role\",\n            \"awsRegion\": \"us-east-2\",\n            \"eventSourceARN\": \"arn:aws:kinesis:us-east-2:123456789012:stream/lambda-stream\"\n        }\n    ]\n}"
                            }
                        ]
                    }
                ]
            },
            {
                "title": "MQ",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-mq.html",
                "contents": [
                    {
                        "title": "Configure event source",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/process-mq-messages-with-lambda.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Topics",
                            {
                                "sub_header": "Configure network security",
                                "content": [
                                    "To give Lambda full access to Amazon MQ through your event source mapping, either your broker must use a public endpoint             (public IP address), or you must provide access to the Amazon VPC you created the broker in.",
                                    "When you use Amazon MQ with Lambda, create AWS PrivateLink VPC endpoints that provide your function            access to the resources in your Amazon VPC.",
                                    "Note",
                                    "AWS PrivateLink VPC endpoints are required for functions with event source mappings that use the default (on-demand) mode                for event pollers. If your event source mapping uses                 provisioned mode, you don't need to configure AWS PrivateLink VPC endpoints.",
                                    "Create an endpoint to provide access to the following resources:",
                                    "  1.                    Lambda — Create an endpoint for the Lambda service principal.                ",
                                    "  2.                    AWS STS — Create an endpoint for the AWS STS in order for a service principal to assume a role on your behalf.                ",
                                    "  3.                    Secrets Manager — If your broker uses Secrets Manager to store credentials, create an endpoint for Secrets Manager.                ",
                                    "Alternatively, configure a NAT gateway on each public subnet in the Amazon VPC. For more information,             see Enable internet access for VPC-connected Lambda functions.",
                                    "When you create an event source mapping for Amazon MQ, Lambda checks whether Elastic Network Interfaces (ENIs)             are already present for the subnets and security groups configured for your Amazon VPC. If Lambda finds existing ENIs, it             attempts to re-use them. Otherwise, Lambda creates new ENIs to connect to the event source and invoke your function.",
                                    "Note",
                                    "Lambda functions always run inside VPCs owned by the Lambda service. Your function's VPC configuration                does not affect the event source mapping. Only the networking configuration of the event source's determines                 how Lambda connects to your event source.",
                                    "Configure the security groups for the Amazon VPC containing your broker. By default,            Amazon MQ uses the following ports: 61617 (Amazon MQ for ActiveMQ), and 5671 (Amazon MQ for RabbitMQ).",
                                    "  1.Inbound rules – Allow all traffic on the default broker port for the security group associated with your event source.",
                                    "  2.Outbound rules – Allow all traffic on port 443 for all destinations. Allow all traffic on the default broker port                    for the security group associated with your event source.",
                                    "  3.Amazon VPC endpoint inbound rules — If you are using an Amazon VPC endpoint, the security group associated with your Amazon VPC endpoint must allow inbound traffic                    on port 443 from the broker security group.",
                                    "If your broker uses authentication, you can also restrict the endpoint policy for the Secrets Manager endpoint.             To call the Secrets Manager API, Lambda uses your function role, not the Lambda service principal.",
                                    "Example VPC endpoint policy — Secrets Manager endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"secretsmanager:GetSecretValue\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"AWS\": [\n                      \"arn:aws::iam::123456789012:role/my-role\"\n                  ]\n              },\n              \"Resource\": \"arn:aws::secretsmanager:us-west-2:123456789012:secret:my-secret\"\n          }\n      ]\n  }"
                                    },
                                    "When you use Amazon VPC endpoints, AWS routes your API calls to invoke your function using the endpoint's Elastic Network Interface (ENI).            The Lambda service principal needs to call lambda:InvokeFunction on any roles and functions that use those ENIs.",
                                    "By default, Amazon VPC endpoints have open IAM policies that allow broad access to resources. Best practice is to restrict these            policies to perform the needed actions using that endpoint. To ensure that your event source mapping is able to invoke your Lambda            function, the VPC endpoint policy must allow the Lambda service principal to call sts:AssumeRole and            lambda:InvokeFunction. Restricting your VPC endpoint policies to allow only API calls originating within your organization            prevents the event source mapping from functioning properly, so \"Resource\": \"*\" is required in these policies.",
                                    "The following example VPC endpoint policies show how to grant the required access to the Lambda service principal for the            AWS STS and Lambda endpoints.",
                                    "Example VPC Endpoint policy — AWS STS endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"sts:AssumeRole\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"Service\": [\n                      \"lambda.amazonaws.com\"\n                  ]\n              },\n              \"Resource\": \"*\"\n          }\n      ]\n    }"
                                    },
                                    "Example VPC Endpoint policy — Lambda endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"lambda:InvokeFunction\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"Service\": [\n                      \"lambda.amazonaws.com\"\n                  ]\n              },\n              \"Resource\": \"*\"\n          }\n      ]\n  }"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Create the event source mapping",
                                "content": [
                                    "Create        an event source mapping to tell Lambda to        send records from an Amazon MQ broker to a Lambda function. You can create multiple event source mappings to process        the same data with multiple functions, or to process items from multiple sources with a single function.",
                                    "To configure your function to read from Amazon MQ, add the required permissions and create an          MQ trigger in the Lambda console.",
                                    "To read records from an Amazon MQ broker, your Lambda function needs the following permissions. You grant Lambda permission to interact with your Amazon MQ broker        and its underlying resouces by adding permission statements to your function execution role:",
                                    "  1.mq:DescribeBroker",
                                    "  2.secretsmanager:GetSecretValue",
                                    "  3.ec2:CreateNetworkInterface",
                                    "  4.ec2:DeleteNetworkInterface",
                                    "  5.ec2:DescribeNetworkInterfaces",
                                    "  6.ec2:DescribeSecurityGroups",
                                    "  7.ec2:DescribeSubnets",
                                    "  8.ec2:DescribeVpcs",
                                    "  9.logs:CreateLogGroup",
                                    "  10.logs:CreateLogStream",
                                    "  11.logs:PutLogEvents",
                                    "Note",
                                    "When using an encrypted customer managed key, add the kms:Decrypt permission as well.",
                                    "To add permissions and create a trigger",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Choose the name of a function.",
                                    "  3 : Choose the Configuration tab, and then choose Permissions.",
                                    "  4 : Under Role name, choose the link to your execution role. This link opens the role in the IAM console.",
                                    "  5 : Choose Add permissions, and then choose Create inline policy.",
                                    " 6 : In the Policy editor, choose JSON. Enter the following policy. Your function needs these permissions to read from an Amazon MQ broker. NoteWhen using an encrypted customer managed key, you must also add the kms:Decrypt permission.",
                                    {
                                        "code_example": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n          \"mq:DescribeBroker\",\n          \"secretsmanager:GetSecretValue\",\n          \"ec2:CreateNetworkInterface\",\n          \"ec2:DeleteNetworkInterface\",\n          \"ec2:DescribeNetworkInterfaces\", \n          \"ec2:DescribeSecurityGroups\",\n          \"ec2:DescribeSubnets\",\n          \"ec2:DescribeVpcs\",\n          \"logs:CreateLogGroup\",\n          \"logs:CreateLogStream\", \n          \"logs:PutLogEvents\"\t\t\n        ],\n        \"Resource\": \"*\"\n      }\n    ]\n  }"
                                    },
                                    "  7 : Choose Next. Enter a policy name and then choose Create policy.",
                                    "  8 : Go back to your function in the Lambda console. Under Function overview, choose Add trigger.",
                                    "  9 : Choose the MQ trigger type.",
                                    "  10 : Configure the required options, and then choose Add.",
                                    "Lambda supports the following options for Amazon MQ event sources:",
                                    "  1.MQ broker :  – Select an Amazon .",
                                    "  2.Batch size :  – Set the maximum number of messages to retrieve in a single            batch.",
                                    "  3.Queue name :  – Enter the Amazon MQ queue to consume.",
                                    "  4.Source access configuration :  – Enter virtual host information and the Secrets Manager            secret that stores your broker credentials.",
                                    "  5.Enable trigger :  – Disable the trigger to stop processing records.",
                                    "To enable or disable the trigger (or delete it), choose the MQ trigger in the designer. To reconfigure the trigger, use the event source mapping API        operations."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Parameters",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-mq-params.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "All Lambda event source types share the same CreateEventSourceMapping and UpdateEventSourceMapping        API operations. However, only some of the parameters apply to Amazon MQ and RabbitMQ.",
                            "ParameterRequiredDefaultNotesBatchSizeN100Maximum: 10,000EnabledNtruenoneFunctionNameYN/A noneFilterCriteriaNN/A Control which events Lambda sends to your functionMaximumBatchingWindowInSecondsN500 msBatching behaviorQueuesNN/AThe name of the Amazon MQ broker destination queue to consume.SourceAccessConfigurationsNN/A For ActiveMQ, BASIC_AUTH credentials. For RabbitMQ, can contain both BASIC_AUTH credentials and VIRTUAL_HOST information."
                        ]
                    },
                    {
                        "title": "Event filtering",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-mq-filtering.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "You can use event filtering to control which records from a stream or queue Lambda sends to your function.    For general information about how event filtering works, see Control which events Lambda sends to your function.",
                            "This section focuses on event filtering for Amazon MQ event sources.",
                            "Topics",
                            {
                                "sub_header": "Amazon MQ event filtering basics",
                                "content": [
                                    "Suppose your Amazon MQ message queue contains messages either in valid JSON format or as plain strings. An example record would look like the             following, with the data converted to a Base64 encoded string in the data field.",
                                    "  1.ActiveMQ : { \n    \"messageID\": \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-east-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\", \n    \"messageType\": \"jms/text-message\",\n    \"deliveryMode\": 1,\n    \"replyTo\": null,\n    \"type\": null,\n    \"expiration\": \"60000\",\n    \"priority\": 1,\n    \"correlationId\": \"myJMSCoID\",\n    \"redelivered\": false,\n    \"destination\": { \n      \"physicalName\": \"testQueue\" \n    },\n    \"data\":\"QUJDOkFBQUE=\",\n    \"timestamp\": 1598827811958,\n    \"brokerInTime\": 1598827811958, \n    \"brokerOutTime\": 1598827811959, \n    \"properties\": {\n      \"index\": \"1\",\n      \"doAlarm\": \"false\",\n      \"myCustomProperty\": \"value\"\n    }\n}",
                                    "  2.RabbitMQ : {\n    \"basicProperties\": {\n        \"contentType\": \"text/plain\",\n        \"contentEncoding\": null,\n        \"headers\": {\n            \"header1\": {\n                \"bytes\": [\n                  118,\n                  97,\n                  108,\n                  117,\n                  101,\n                  49\n                ]\n            },\n            \"header2\": {\n                \"bytes\": [\n                  118,\n                  97,\n                  108,\n                  117,\n                  101,\n                  50\n                ]\n            },\n            \"numberInHeader\": 10\n        },\n        \"deliveryMode\": 1,\n        \"priority\": 34,\n        \"correlationId\": null,\n        \"replyTo\": null,\n        \"expiration\": \"60000\",\n        \"messageId\": null,\n        \"timestamp\": \"Jan 1, 1970, 12:33:41 AM\",\n        \"type\": null,\n        \"userId\": \"AIDACKCEVSQ6C2EXAMPLE\",\n        \"appId\": null,\n        \"clusterId\": null,\n        \"bodySize\": 80\n        },\n    \"redelivered\": false,\n    \"data\": \"eyJ0aW1lb3V0IjowLCJkYXRhIjoiQ1pybWYwR3c4T3Y0YnFMUXhENEUifQ==\"\n}",
                                    "anchor",
                                    "anchor",
                                    {
                                        "code_example": "{ \n    \"messageID\": \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-east-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\", \n    \"messageType\": \"jms/text-message\",\n    \"deliveryMode\": 1,\n    \"replyTo\": null,\n    \"type\": null,\n    \"expiration\": \"60000\",\n    \"priority\": 1,\n    \"correlationId\": \"myJMSCoID\",\n    \"redelivered\": false,\n    \"destination\": { \n      \"physicalName\": \"testQueue\" \n    },\n    \"data\":\"QUJDOkFBQUE=\",\n    \"timestamp\": 1598827811958,\n    \"brokerInTime\": 1598827811958, \n    \"brokerOutTime\": 1598827811959, \n    \"properties\": {\n      \"index\": \"1\",\n      \"doAlarm\": \"false\",\n      \"myCustomProperty\": \"value\"\n    }\n}"
                                    },
                                    "For both Active MQ and Rabbit MQ brokers, you can use event filtering to filter records using the data key. Suppose your             Amazon MQ queue contains messages in the following JSON format.",
                                    "{    \"timeout\": 0,    \"IPAddress\": \"203.0.113.254\"}",
                                    "To filter only those records where the timeout field is greater than 0, the FilterCriteria object would be             as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"data\\\" : { \\\"timeout\\\" : [ { \\\"numeric\\\": [ \\\">\\\", 0] } } ] } }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON.",
                                    "{    \"data\": {        \"timeout\": [ { \"numeric\": [ \">\", 0 ] } ]        }}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"data\" : { \"timeout\" : [ { \"numeric\": [ \">\", 0 ] } ] } }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:mq:us-east-2:123456789012:broker:my-broker:b-8ac7cc01-5898-482d-be2f-a6b596050ea8 \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"data\\\" : { \\\"timeout\\\" : [ { \\\"numeric\\\": [ \\\">\\\", 0 ] } ] } }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"data\" : { \"timeout\" : [ { \"numeric\": [ \">\", 0 ] } ] } }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "to add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"data\" : { \"timeout\" : [ { \"numeric\": [ \">\", 0 ] } ] } }"
                                    },
                                    "With Amazon MQ, you can also filter records where the message is a plain string. Suppose you want to process only records where the             message begins with \"Result: \". The FilterCriteria object would look as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"data\\\" : [ { \\\"prefix\\\": \\\"Result: \\\" } ] }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON.",
                                    "{    \"data\": [        {        \"prefix\": \"Result: \"        }    ]}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"data\" : [ { \"prefix\": \"Result: \" } ] }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:mq:us-east-2:123456789012:broker:my-broker:b-8ac7cc01-5898-482d-be2f-a6b596050ea8 \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"data\\\" : [ { \\\"prefix\\\": \\\"Result: \\\" } ] }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"data\" : [ { \"prefix\": \"Result \" } ] }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"data\" : [ { \"prefix\": \"Result: \" } ] }"
                                    },
                                    "Amazon MQ messages must be UTF-8 encoded strings, either plain strings or in JSON format. That's because Lambda decodes Amazon MQ byte arrays into UTF-8 before             applying filter criteria. If your messages use another encoding, such as UTF-16 or ASCII, or if the message format doesn't match the             FilterCriteria format, Lambda processes metadata filters only. The following table summarizes the specific behavior:",
                                    "Incoming message formatFilter pattern format for message propertiesResulting actionPlain stringPlain stringLambda filters based on your filter criteria.Plain stringNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Plain stringValid JSONLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONPlain stringLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONValid JSONLambda filters based on your filter criteria.Non-UTF-8 encoded stringJSON, plain string, or no patternLambda filters (on the other metadata properties only) based on your filter criteria."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Troubleshoot",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-mq-errors.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "When a Lambda function encounters an unrecoverable error, your Amazon MQ consumer stops processing records. Any        other consumers can continue processing, provided that they do not encounter the same error. To determine the        potential cause of a stopped consumer, check the StateTransitionReason field in the return details of        your EventSourceMapping for one of the following codes:",
                            "  1.ESM_CONFIG_NOT_VALID : \nThe event source mapping configuration is not valid.\n",
                            "  2.EVENT_SOURCE_AUTHN_ERROR : \nLambda failed to authenticate the event source.\n",
                            "  3.EVENT_SOURCE_AUTHZ_ERROR : \nLambda does not have the required permissions to access the event source.\n",
                            "  4.FUNCTION_CONFIG_NOT_VALID : \nThe function's configuration is not valid.\n",
                            "Records also go unprocessed if Lambda drops        them due to their size. The size limit for Lambda records is 6 MB. To        redeliver messages upon function error, you can use a dead-letter queue (DLQ). For more information, see Message Redelivery and            DLQ Handling on the Apache ActiveMQ website and Reliability Guide on the RabbitMQ        website.",
                            "Note",
                            "Lambda does not support custom redelivery policies. Instead, Lambda uses a policy with the default values from the Redelivery Policy page on the Apache ActiveMQ website, with maximumRedeliveries set to 6."
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "Note",
                    "If you want to send data to a target other than a Lambda function or enrich the data before sending it, see     Amazon EventBridge Pipes.",
                    "Amazon MQ is a managed message broker service for Apache ActiveMQ    and RabbitMQ. A message broker enables software    applications and components to communicate using various programming languages, operating systems, and formal    messaging protocols through either topic or queue event destinations.",
                    "Amazon MQ can also manage Amazon Elastic Compute Cloud (Amazon EC2) instances on your behalf by installing ActiveMQ or RabbitMQ brokers and by providing    different network topologies and other infrastructure needs.",
                    "You can use a Lambda function to process records from your Amazon MQ message broker. Lambda invokes your function    through an event source mapping, a Lambda resource that reads    messages from your broker and invokes the function synchronously.",
                    "Warning",
                    "Lambda event source mappings process each event at least once, and duplicate processing of records can occur. To avoid potential issues related to duplicate events, we strongly recommend that you make your function code idempotent. To learn more, see How do I make my Lambda function idempotent in the AWS Knowledge Center.",
                    "The Amazon MQ event source mapping has the following configuration restrictions:",
                    "  1.Concurrency – Lambda functions that use an Amazon MQ event source mapping have a default maximum concurrency       setting. For ActiveMQ, the Lambda service limits the number of concurrent execution environments to five per Amazon MQ      event source mapping. For RabbitMQ, the number of concurrent execution environments is limited to 1 per Amazon MQ      event source mapping. Even if you change your function's reserved or provisioned concurrency settings, the Lambda       service won't make more execution environments available. To request an increase in the default maximum concurrency      for a single Amazon MQ event source mapping, contact AWS Support with the event source mapping UUID, as well as the region.      Because increases are applied at the specific event source mapping level, not the account or region level,      you need to manually request a scaling increase for each event source mapping.",
                    "  2.Cross account – Lambda does not support cross-account processing. You cannot use Lambda to process records        from an Amazon MQ message broker that is in a different AWS account.",
                    "  3.Authentication – For ActiveMQ, only the ActiveMQ SimpleAuthenticationPlugin is        supported. For RabbitMQ, only the PLAIN authentication mechanism is supported. Users must use AWS Secrets Manager to manage their credentials.        For more information about ActiveMQ authentication, see Integrating ActiveMQ brokers          with LDAP in the Amazon MQ Developer Guide.",
                    "  4.Quotas in Amazon MQ : Connection quota – Brokers have a maximum number of allowed connections per wire-level protocol. This        quota is based on the broker instance type. For more information, see the Brokers        section of  in the          Amazon MQ Developer Guide.",
                    "  5.Connectivity – You can create brokers in a public or private virtual private cloud (VPC). For private VPCs, your Lambda function needs access to the VPC to receive messages. For more information, see Configure network security later in this        section.",
                    "  6.Event destinations – Only queue destinations are supported. However, you can use a virtual topic,        which behaves  as a topic internally while interacting with Lambda as a queue. For more information, see Virtual Destinations        on the Apache ActiveMQ website, and Virtual Hosts        on the RabbitMQ website.",
                    "  7.Network topology – For ActiveMQ, only one single-instance or standby broker is supported per event source mapping.        For RabbitMQ, only one single-instance broker or cluster deployment is supported per event source mapping.        Single-instance brokers require a failover endpoint. For more information about these broker deployment modes, see        Active MQ Broker Architecture and        Rabbit MQ Broker Architecturein the Amazon MQ Developer Guide.",
                    "  8.Protocols – Supported protocols depend on the type of Amazon MQ integration.For ActiveMQ integrations, Lambda consumes messages using the OpenWire/Java Message Service (JMS) protocol. No other protocols are supported for consuming messages. Within the JMS protocol, only TextMessage and BytesMessage are supported. Lambda also supports JMS custom properties. For more information about the OpenWire protocol, see              OpenWire on the Apache ActiveMQ website.For RabbitMQ integrations, Lambda consumes messages using the AMQP 0-9-1 protocol. No other protocols are supported            for consuming messages. For more information about RabbitMQ's implementation of the AMQP 0-9-1 protocol, see              AMQP 0-9-1 Complete Reference              Guide on the RabbitMQ website.",
                    "  9.For ActiveMQ integrations, Lambda consumes messages using the OpenWire/Java Message Service (JMS) protocol. No other protocols are supported for consuming messages. Within the JMS protocol, only TextMessage and BytesMessage are supported. Lambda also supports JMS custom properties. For more information about the OpenWire protocol, see              OpenWire on the Apache ActiveMQ website.",
                    "  10.For RabbitMQ integrations, Lambda consumes messages using the AMQP 0-9-1 protocol. No other protocols are supported            for consuming messages. For more information about RabbitMQ's implementation of the AMQP 0-9-1 protocol, see              AMQP 0-9-1 Complete Reference              Guide on the RabbitMQ website.",
                    "Lambda automatically supports the latest versions of ActiveMQ and RabbitMQ that Amazon MQ supports. For the latest    supported versions, see Amazon MQ release notes in the      Amazon MQ Developer Guide.",
                    "Note",
                    "By default, Amazon MQ has a weekly maintenance window for brokers. During that      window of time, brokers are unavailable. For brokers without standby, Lambda cannot process any messages during that window.",
                    "Topics",
                    {
                        "sub_header": "Understanding the Lambda consumer group for Amazon MQ",
                        "content": [
                            "To interact with Amazon MQ, Lambda creates a consumer group which can read from your Amazon MQ brokers. The consumer      group is created with the same ID as the event source mapping UUID.",
                            "For Amazon MQ event sources, Lambda batches records together and sends them to your function in a single payload.      To control behavior, you can configure the batching window and batch size. Lambda pulls messages until it processes      the payload size maximum of 6 MB, the batching window expires, or the number of records reaches the full batch      size. For more information, see Batching behavior.",
                            "The consumer group retrieves the messages as a BLOB of bytes, base64-encodes them into a single JSON payload, and then invokes your function. If your function returns an error for any of the messages in a batch, Lambda retries the      whole batch of messages until processing succeeds or the messages expire.",
                            "Note",
                            "While Lambda functions typically have a maximum timeout limit of 15 minutes,      event source mappings for Amazon MSK, self-managed Apache Kafka, Amazon DocumentDB, and Amazon MQ for ActiveMQ and RabbitMQ only support functions with      maximum timeout limits of 14 minutes. This constraint ensures that the event source mapping can properly      handle function errors and retries.",
                            "You can monitor a given function's concurrency usage using the ConcurrentExecutions metric in      Amazon CloudWatch. For more information about concurrency, see Configuring reserved concurrency for a function.",
                            "Example Amazon MQ record events",
                            "  1.ActiveMQ : {\n   \"eventSource\": \"aws:mq\",\n   \"eventSourceArn\": \"arn:aws:mq:us-east-2:111122223333:broker:test:b-9bcfa592-423a-4942-879d-eb284b418fc8\",\n   \"messages\": [\n      { \n        \"messageID\": \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-east-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\", \n        \"messageType\": \"jms/text-message\",\n        \"deliveryMode\": 1,\n        \"replyTo\": null,\n        \"type\": null,\n        \"expiration\": \"60000\",\n        \"priority\": 1,\n        \"correlationId\": \"myJMSCoID\",\n        \"redelivered\": false,\n        \"destination\": { \n          \"physicalName\": \"testQueue\" \n        },\n        \"data\":\"QUJDOkFBQUE=\",\n        \"timestamp\": 1598827811958,\n        \"brokerInTime\": 1598827811958, \n        \"brokerOutTime\": 1598827811959, \n        \"properties\": {\n          \"index\": \"1\",\n          \"doAlarm\": \"false\",\n          \"myCustomProperty\": \"value\"\n        }\n      },\n      { \n        \"messageID\": \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-east-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\",\n        \"messageType\": \"jms/bytes-message\",\n        \"deliveryMode\": 1,\n        \"replyTo\": null,\n        \"type\": null,\n        \"expiration\": \"60000\",\n        \"priority\": 2,\n        \"correlationId\": \"myJMSCoID1\",\n        \"redelivered\": false,\n        \"destination\": { \n          \"physicalName\": \"testQueue\" \n        },\n        \"data\":\"LQaGQ82S48k=\",\n        \"timestamp\": 1598827811958,\n        \"brokerInTime\": 1598827811958, \n        \"brokerOutTime\": 1598827811959, \n        \"properties\": {\n          \"index\": \"1\",\n          \"doAlarm\": \"false\",\n          \"myCustomProperty\": \"value\"\n        }\n      }\n   ]\n}",
                            "  2.RabbitMQ : \n{\n  \"eventSource\": \"aws:rmq\",\n  \"eventSourceArn\": \"arn:aws:mq:us-east-2:111122223333:broker:pizzaBroker:b-9bcfa592-423a-4942-879d-eb284b418fc8\",\n  \"rmqMessagesByQueue\": {\n    \"pizzaQueue::/\": [\n      {\n        \"basicProperties\": {\n          \"contentType\": \"text/plain\",\n          \"contentEncoding\": null,\n          \"headers\": {\n            \"header1\": {\n              \"bytes\": [\n                118,\n                97,\n                108,\n                117,\n                101,\n                49\n              ]\n            },\n            \"header2\": {\n              \"bytes\": [\n                118,\n                97,\n                108,\n                117,\n                101,\n                50\n              ]\n            },\n            \"numberInHeader\": 10\n          },\n          \"deliveryMode\": 1,\n          \"priority\": 34,\n          \"correlationId\": null,\n          \"replyTo\": null,\n          \"expiration\": \"60000\",\n          \"messageId\": null,\n          \"timestamp\": \"Jan 1, 1970, 12:33:41 AM\",\n          \"type\": null,\n          \"userId\": \"AIDACKCEVSQ6C2EXAMPLE\",\n          \"appId\": null,\n          \"clusterId\": null,\n          \"bodySize\": 80\n        },\n        \"redelivered\": false,\n        \"data\": \"eyJ0aW1lb3V0IjowLCJkYXRhIjoiQ1pybWYwR3c4T3Y0YnFMUXhENEUifQ==\"\n      }\n    ]\n  }\n}",
                            "anchor",
                            "anchor",
                            {
                                "code_example": "{\n   \"eventSource\": \"aws:mq\",\n   \"eventSourceArn\": \"arn:aws:mq:us-east-2:111122223333:broker:test:b-9bcfa592-423a-4942-879d-eb284b418fc8\",\n   \"messages\": [\n      { \n        \"messageID\": \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-east-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\", \n        \"messageType\": \"jms/text-message\",\n        \"deliveryMode\": 1,\n        \"replyTo\": null,\n        \"type\": null,\n        \"expiration\": \"60000\",\n        \"priority\": 1,\n        \"correlationId\": \"myJMSCoID\",\n        \"redelivered\": false,\n        \"destination\": { \n          \"physicalName\": \"testQueue\" \n        },\n        \"data\":\"QUJDOkFBQUE=\",\n        \"timestamp\": 1598827811958,\n        \"brokerInTime\": 1598827811958, \n        \"brokerOutTime\": 1598827811959, \n        \"properties\": {\n          \"index\": \"1\",\n          \"doAlarm\": \"false\",\n          \"myCustomProperty\": \"value\"\n        }\n      },\n      { \n        \"messageID\": \"ID:b-9bcfa592-423a-4942-879d-eb284b418fc8-1.mq.us-east-2.amazonaws.com-37557-1234520418293-4:1:1:1:1\",\n        \"messageType\": \"jms/bytes-message\",\n        \"deliveryMode\": 1,\n        \"replyTo\": null,\n        \"type\": null,\n        \"expiration\": \"60000\",\n        \"priority\": 2,\n        \"correlationId\": \"myJMSCoID1\",\n        \"redelivered\": false,\n        \"destination\": { \n          \"physicalName\": \"testQueue\" \n        },\n        \"data\":\"LQaGQ82S48k=\",\n        \"timestamp\": 1598827811958,\n        \"brokerInTime\": 1598827811958, \n        \"brokerOutTime\": 1598827811959, \n        \"properties\": {\n          \"index\": \"1\",\n          \"doAlarm\": \"false\",\n          \"myCustomProperty\": \"value\"\n        }\n      }\n   ]\n}"
                            },
                            "Note",
                            "In the RabbitMQ example, pizzaQueue is the name of the RabbitMQ queue, and / is the          name of the virtual host. When receiving messages, the event source lists messages under          pizzaQueue::/."
                        ]
                    }
                ]
            },
            {
                "title": "MSK",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk.html",
                "contents": [
                    {
                        "title": "Configure event source",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk-configure.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Before you create an event source mapping for your Amazon MSK cluster, you need to ensure that        your cluster and the VPC it resides in are correctly configured. You also need to make sure        that your Lambda function's execution role has         the necessary IAM permissions.",
                            "Follow the instructions in the following sections to configure your Amazon MSK cluster, VPC, and Lambda        function. To learn how to create the event source mapping, see        Adding Amazon MSK as an event source.",
                            "Topics",
                            {
                                "sub_header": "MSK cluster authentication",
                                "content": [
                                    "Lambda needs permission to access the Amazon MSK cluster, retrieve records, and perform other tasks. Amazon MSK supports      several options for controlling client access to the MSK cluster.",
                                    "Cluster access options",
                                    {
                                        "sub_header": "Unauthenticated access",
                                        "content": [
                                            "If no clients access the cluster over the internet, you can use unauthenticated access."
                                        ]
                                    },
                                    {
                                        "sub_header": "SASL/SCRAM authentication",
                                        "content": [
                                            "Amazon MSK supports Simple Authentication and Security Layer/Salted Challenge Response Authentication Mechanism        (SASL/SCRAM) authentication with Transport Layer Security (TLS) encryption. For Lambda to connect to the cluster,        you store the authentication credentials (user name and password) in an AWS Secrets Manager secret.",
                                            "For more information about using Secrets Manager, see User name and password authentication with AWS Secrets Manager        in the Amazon Managed Streaming for Apache Kafka Developer Guide.",
                                            "Amazon MSK doesn't support SASL/PLAIN authentication."
                                        ]
                                    },
                                    {
                                        "sub_header": "IAM role-based authentication",
                                        "content": [
                                            "You can use IAM to authenticate the identity of clients that connect to the MSK cluster. If IAM auth is        active on your MSK cluster, and you don't provide a secret for auth, Lambda automatically defaults to using IAM auth.        To create and deploy user or role-based policies, use the IAM console or API. For more information, see IAM access control in        the Amazon Managed Streaming for Apache Kafka Developer Guide.",
                                            "To allow Lambda to connect to the MSK cluster, read records, and perform other required actions, add the        following permissions to your function's execution role.",
                                            "{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Effect\": \"Allow\",            \"Action\": [                \"kafka-cluster:Connect\",                \"kafka-cluster:DescribeGroup\",                \"kafka-cluster:AlterGroup\",                \"kafka-cluster:DescribeTopic\",                \"kafka-cluster:ReadData\",                \"kafka-cluster:DescribeClusterDynamicConfiguration\"            ],            \"Resource\": [                \"arn:aws:kafka:region:account-id:cluster/cluster-name/cluster-uuid\",                \"arn:aws:kafka:region:account-id:topic/cluster-name/cluster-uuid/topic-name\",                \"arn:aws:kafka:region:account-id:group/cluster-name/cluster-uuid/consumer-group-id\"            ]        }    ]}       ",
                                            "You can scope these permissions to a specific cluster, topic, and group. For more information, see the          Amazon MSK Kafka          actions in the Amazon Managed Streaming for Apache Kafka Developer Guide."
                                        ]
                                    },
                                    {
                                        "sub_header": "Mutual TLS authentication",
                                        "content": [
                                            "Mutual TLS (mTLS) provides two-way authentication between the client and server. The client sends a        certificate to the server for the server to verify the client, and the server sends a certificate to the client        for the client to verify the server. ",
                                            "For Amazon MSK, Lambda acts as the client. You configure a client certificate (as a secret in Secrets Manager) to        authenticate Lambda with the brokers in your MSK cluster. The client certificate must be signed by a CA in the        server's trust store. The MSK cluster sends a server certificate to Lambda to authenticate the brokers with        Lambda. The server certificate must be signed by a certificate authority (CA) that's in the AWS trust store. ",
                                            "For instructions on how to generate a client certificate, see         Introducing mutual TLS authentication for Amazon MSK as an event source.",
                                            "Amazon MSK doesn't support self-signed server certificates, because all brokers in Amazon MSK use public certificates signed by          Amazon Trust Services CAs, which Lambda trusts by        default.",
                                            "For more information about mTLS for Amazon MSK, see Mutual TLS Authentication in the          Amazon Managed Streaming for Apache Kafka Developer Guide."
                                        ]
                                    },
                                    {
                                        "sub_header": "Configuring the mTLS secret",
                                        "content": [
                                            "The CLIENT_CERTIFICATE_TLS_AUTH secret requires a certificate field and a private key field. For an        encrypted private key, the secret requires a private key password. Both the certificate and private key must be        in PEM format.",
                                            "Note",
                                            "Lambda supports the PBES1 (but not          PBES2) private key encryption algorithms.",
                                            "The certificate field must contain a list of certificates, beginning with the client certificate, followed        by any intermediate certificates, and ending with the root certificate. Each certificate must start on a new        line with the following structure:",
                                            "-----BEGIN CERTIFICATE-----          <certificate contents>-----END CERTIFICATE-----      ",
                                            "Secrets Manager supports secrets up to 65,536 bytes, which is enough space for long certificate chains.",
                                            "The private key must be in PKCS #8        format, with the following structure:",
                                            "-----BEGIN PRIVATE KEY-----           <private key contents>-----END PRIVATE KEY-----            ",
                                            "For an encrypted private key, use the following structure:",
                                            "-----BEGIN ENCRYPTED PRIVATE KEY-----            <private key contents>-----END ENCRYPTED PRIVATE KEY-----           ",
                                            "The following example shows the contents of a secret for mTLS authentication using an encrypted private key.        For an encrypted private key, you include the private key password in the secret.",
                                            "{ \"privateKeyPassword\": \"testpassword\", \"certificate\": \"-----BEGIN CERTIFICATE-----MIIE5DCCAsygAwIBAgIRAPJdwaFaNRrytHBto0j5BA0wDQYJKoZIhvcNAQELBQAw...j0Lh4/+1HfgyE2KlmII36dg4IMzNjAFEBZiCRoPimO40s1cRqtFHXoal0QQbIlxkcmUuiAii9R0=-----END CERTIFICATE----------BEGIN CERTIFICATE-----MIIFgjCCA2qgAwIBAgIQdjNZd6uFf9hbNC5RdfmHrzANBgkqhkiG9w0BAQsFADBb...rQoiowbbk5wXCheYSANQIfTZ6weQTgiCHCCbuuMKNVS95FkXm0vqVD/YpXKwA/noc8PH3PSoAaRwMMgOSA2ALJvbRz8mpg==-----END CERTIFICATE-----\", \"privateKey\": \"-----BEGIN ENCRYPTED PRIVATE KEY-----MIIFKzBVBgkqhkiG9w0BBQ0wSDAnBgkqhkiG9w0BBQwwGgQUiAFcK5hT/X7Kjmgp...QrSekqF+kWzmB6nAfSzgO9IaoAaytLvNgGTckWeUkWn/V0Ck+LdGUXzAC4RxZnoQzp2mwJn2NYB7AZ7+imp0azDZb+8YG2aUCiyqb6PnnA==-----END ENCRYPTED PRIVATE KEY-----\"} "
                                        ]
                                    },
                                    {
                                        "sub_header": "How Lambda chooses a bootstrap broker",
                                        "content": [
                                            "Lambda chooses a         bootstrap broker based on the authentication methods available on your cluster, and whether you provide a secret        for authentication. If you provide a secret for mTLS or SASL/SCRAM, Lambda automatically chooses that auth method.        If you don't provide a secret, Lambda selects the strongest auth method that's active on your cluster. The following is        the order of priority in which Lambda selects a broker, from strongest to weakest auth:",
                                            "  1.mTLS (secret provided for mTLS)",
                                            "  2.SASL/SCRAM (secret provided for SASL/SCRAM)",
                                            "  3.SASL IAM (no secret provided, and IAM auth active)",
                                            "  4.Unauthenticated TLS (no secret provided, and IAM auth not active)",
                                            "  5.Plaintext (no secret provided, and both IAM auth and unauthenticated TLS are not active)",
                                            "Note",
                                            "If Lambda can't connect to the most secure broker type, Lambda doesn't attempt to connect to a different (weaker)        broker type. If you want Lambda to choose a weaker broker type, deactivate all stronger auth methods on your cluster."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Managing API access and permissions",
                                "content": [
                                    "In addition to accessing the Amazon MSK cluster, your function needs permissions to perform various Amazon MSK API      actions. You add these permissions to the function's execution role. If your users need access to any of the Amazon MSK      API actions, add the required permissions to the identity policy for the user or role.",
                                    "You can add each of the following permissions to your execution role manually. Alternatively, you can attach the      AWS managed policy AWSLambdaMSKExecutionRole to your execution role. The      AWSLambdaMSKExecutionRole policy contains all required API actions and VPC permissions listed below.",
                                    {
                                        "sub_header": "Required Lambda function execution role permissions",
                                        "content": [
                                            "To create and store logs in a log group in Amazon CloudWatch Logs, your Lambda function must have the following        permissions in its execution role:",
                                            "  1.logs:CreateLogGroup",
                                            "  2.logs:CreateLogStream",
                                            "  3.logs:PutLogEvents",
                                            "For Lambda to access your Amazon MSK cluster on your behalf, your Lambda function must have the following        permissions in its execution role:",
                                            "  1.kafka:DescribeCluster",
                                            "  2.kafka:DescribeClusterV2",
                                            "  3.kafka:GetBootstrapBrokers",
                                            "  4.kafka:DescribeVpcConnection: Only required for cross-account event source mappings.",
                                            "  5.kafka:ListVpcConnections: Not required in execution role, but required for an IAM principal that is creating a cross-account event source mapping.",
                                            "You only need to add one of either kafka:DescribeCluster or kafka:DescribeClusterV2. For provisioned MSK        clusters, either permission works. For serverless MSK clusters, you must use kafka:DescribeClusterV2.",
                                            "Note",
                                            "Lambda eventually plans to remove the kafka:DescribeCluster permission from the        associated AWSLambdaMSKExecutionRole managed policy. If you use this policy, you should        migrate any applications using kafka:DescribeCluster to use        kafka:DescribeClusterV2 instead."
                                        ]
                                    },
                                    {
                                        "sub_header": "VPC permissions",
                                        "content": [
                                            "If only users within a VPC can access your Amazon MSK cluster, your Lambda function must have permission to        access your Amazon VPC resources. These resources include your VPC, subnets, security groups, and network        interfaces. To access these resources, your function's execution role must have the following        permissions. These permissions are included in the AWSLambdaMSKExecutionRole AWS managed policy.",
                                            "  1.ec2:CreateNetworkInterface",
                                            "  2.ec2:DescribeNetworkInterfaces",
                                            "  3.ec2:DescribeVpcs",
                                            "  4.ec2:DeleteNetworkInterface",
                                            "  5.ec2:DescribeSubnets",
                                            "  6.ec2:DescribeSecurityGroups"
                                        ]
                                    },
                                    {
                                        "sub_header": "Optional Lambda function permissions",
                                        "content": [
                                            "Your Lambda function might also need permissions to:",
                                            "  1.Access your SCRAM secret, if using SASL/SCRAM authentication.",
                                            "  2.Describe your Secrets Manager secret.",
                                            "  3.Access your AWS Key Management Service (AWS KMS) customer managed key.",
                                            "  4.Send records of failed invocations to a destination.",
                                            {
                                                "sub_header": "Secrets Manager and AWS KMS permissions",
                                                "content": [
                                                    "Depending on the type of access control that you're configuring for your Amazon MSK brokers, your Lambda          function might need permission to access your SCRAM secret (if using SASL/SCRAM authentication), or Secrets Manager          secret to decrypt your AWS KMS customer managed key. To access these resources, your function's execution role must have          the following permissions:",
                                                    "  1.              kafka:ListScramSecrets",
                                                    "  2.secretsmanager:GetSecretValue",
                                                    "  3.kms:Decrypt"
                                                ]
                                            }
                                        ]
                                    },
                                    {
                                        "sub_header": "Adding permissions to your execution role",
                                        "content": [
                                            "Follow these steps to add the AWS managed policy AWSLambdaMSKExecutionRole to your execution role using the IAM console.",
                                            "To add an AWS managed policy",
                                            "  1 : Open the Policies page of the IAM            console.",
                                            "  2 : In the search box, enter the policy name (AWSLambdaMSKExecutionRole).",
                                            "  3 : Select the policy from the list, and then choose Policy actions, Attach.",
                                            "  4 : On the Attach policy page, select your execution role from the list, and then            choose Attach policy."
                                        ]
                                    },
                                    {
                                        "sub_header": "Granting users access with an IAM policy",
                                        "content": [
                                            "By default, users and roles don't have permission to perform Amazon MSK API operations. To grant access to        users in your organization or account, you can add or update an identity-based policy. For more information, see          Amazon MSK          Identity-Based Policy Examples in the Amazon Managed Streaming for Apache Kafka Developer Guide."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Authentication and authorization errors",
                                "content": [
                                    "If any of the permissions required to consume data from the Amazon MSK cluster are missing, Lambda displays one of      the following error messages in the event source mapping under LastProcessingResult.",
                                    "Error messages",
                                    {
                                        "sub_header": "Cluster failed to authorize Lambda",
                                        "content": [
                                            "For SASL/SCRAM or mTLS, this error indicates that the provided user doesn't have all of the following        required Kafka access control list (ACL) permissions:",
                                            "  1.DescribeConfigs Cluster",
                                            "  2.Describe Group",
                                            "  3.Read Group",
                                            "  4.Describe Topic",
                                            "  5.Read Topic",
                                            "For IAM access control, your function's execution role is missing one or more of the permissions required        to access the group or topic. Review the list of required permissions in IAM role-based authentication.",
                                            "When you create either Kafka ACLs or an IAM policy with the required Kafka cluster permissions, specify        the topic and group as resources. The topic name must match the topic in the event source mapping. The group        name must match the event source mapping's UUID.",
                                            "After you add the required permissions to the execution role, it might take several minutes for the changes        to take effect."
                                        ]
                                    },
                                    {
                                        "sub_header": "SASL authentication failed",
                                        "content": [
                                            "For SASL/SCRAM, this error indicates that the provided user name and password aren't valid.",
                                            "For IAM access control, the execution role is missing the kafka-cluster:Connect permission        for the MSK cluster. Add this permission to the role and specify the cluster's Amazon Resource Name (ARN) as a        resource.",
                                            "You might see this error occurring intermittently. The cluster rejects connections after the number of TCP        connections exceeds the Amazon MSK service          quota. Lambda backs off and retries until a connection is successful. After Lambda connects to the        cluster and polls for records, the last processing result changes to OK."
                                        ]
                                    },
                                    {
                                        "sub_header": "Server failed to authenticate Lambda",
                                        "content": [
                                            "This error indicates that the Amazon MSK Kafka brokers failed to authenticate with Lambda. This can occur for        any of the following reasons:",
                                            "  1.You didn't provide a client certificate for mTLS authentication.",
                                            "  2.You provided a client certificate, but the brokers aren't configured to use mTLS.",
                                            "  3.A client certificate isn't trusted by the brokers."
                                        ]
                                    },
                                    {
                                        "sub_header": "Provided certificate or private key is invalid",
                                        "content": [
                                            "This error indicates that the Amazon MSK consumer couldn't use the provided certificate or private key. Make        sure that the certificate and key use PEM format, and that the private key encryption uses a PBES1        algorithm."
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Configure network security",
                                "content": [
                                    "To give Lambda full access to Amazon MSK through your event source mapping, either your cluster must use a public endpoint             (public IP address), or you must provide access to the Amazon VPC you created the cluster in.",
                                    "When you use Amazon MSK with Lambda, create AWS PrivateLink VPC endpoints that provide your function            access to the resources in your Amazon VPC.",
                                    "Note",
                                    "AWS PrivateLink VPC endpoints are required for functions with event source mappings that use the default (on-demand) mode                for event pollers. If your event source mapping uses                 provisioned mode, you don't need to configure AWS PrivateLink VPC endpoints.",
                                    "Create an endpoint to provide access to the following resources:",
                                    "  1.                    Lambda — Create an endpoint for the Lambda service principal.                ",
                                    "  2.                    AWS STS — Create an endpoint for the AWS STS in order for a service principal to assume a role on your behalf.                ",
                                    "  3.                    Secrets Manager — If your cluster uses Secrets Manager to store credentials, create an endpoint for Secrets Manager.                ",
                                    "Alternatively, configure a NAT gateway on each public subnet in the Amazon VPC. For more information,             see Enable internet access for VPC-connected Lambda functions.",
                                    "When you create an event source mapping for Amazon MSK, Lambda checks whether Elastic Network Interfaces (ENIs)             are already present for the subnets and security groups configured for your Amazon VPC. If Lambda finds existing ENIs, it             attempts to re-use them. Otherwise, Lambda creates new ENIs to connect to the event source and invoke your function.",
                                    "Note",
                                    "Lambda functions always run inside VPCs owned by the Lambda service. Your function's VPC configuration                does not affect the event source mapping. Only the networking configuration of the event source's determines                 how Lambda connects to your event source.",
                                    "Configure the security groups for the Amazon VPC containing your cluster. By default,            Amazon MSK uses the following ports: 9092 for plaintext, 9094 for TLS, 9096 for SASL, 9098 for IAM.",
                                    "  1.Inbound rules – Allow all traffic on the default cluster port for the security group associated with your event source.",
                                    "  2.Outbound rules – Allow all traffic on port 443 for all destinations. Allow all traffic on the default cluster port                    for the security group associated with your event source.",
                                    "  3.Amazon VPC endpoint inbound rules — If you are using an Amazon VPC endpoint, the security group associated with your Amazon VPC endpoint must allow inbound traffic                    on port 443 from the cluster security group.",
                                    "If your cluster uses authentication, you can also restrict the endpoint policy for the Secrets Manager endpoint.             To call the Secrets Manager API, Lambda uses your function role, not the Lambda service principal.",
                                    "Example VPC endpoint policy — Secrets Manager endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"secretsmanager:GetSecretValue\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"AWS\": [\n                      \"arn:aws::iam::123456789012:role/my-role\"\n                  ]\n              },\n              \"Resource\": \"arn:aws::secretsmanager:us-west-2:123456789012:secret:my-secret\"\n          }\n      ]\n  }"
                                    },
                                    "When you use Amazon VPC endpoints, AWS routes your API calls to invoke your function using the endpoint's Elastic Network Interface (ENI).            The Lambda service principal needs to call lambda:InvokeFunction on any roles and functions that use those ENIs.",
                                    "By default, Amazon VPC endpoints have open IAM policies that allow broad access to resources. Best practice is to restrict these            policies to perform the needed actions using that endpoint. To ensure that your event source mapping is able to invoke your Lambda            function, the VPC endpoint policy must allow the Lambda service principal to call sts:AssumeRole and            lambda:InvokeFunction. Restricting your VPC endpoint policies to allow only API calls originating within your organization            prevents the event source mapping from functioning properly, so \"Resource\": \"*\" is required in these policies.",
                                    "The following example VPC endpoint policies show how to grant the required access to the Lambda service principal for the            AWS STS and Lambda endpoints.",
                                    "Example VPC Endpoint policy — AWS STS endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"sts:AssumeRole\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"Service\": [\n                      \"lambda.amazonaws.com\"\n                  ]\n              },\n              \"Resource\": \"*\"\n          }\n      ]\n    }"
                                    },
                                    "Example VPC Endpoint policy — Lambda endpoint",
                                    {
                                        "code_example": "{\n      \"Statement\": [\n          {\n              \"Action\": \"lambda:InvokeFunction\",\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                  \"Service\": [\n                      \"lambda.amazonaws.com\"\n                  ]\n              },\n              \"Resource\": \"*\"\n          }\n      ]\n  }"
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Process messages",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk-process.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "Note",
                            "If you want to send data to a target other than a Lambda function or enrich the data before sending it, see     Amazon EventBridge Pipes.",
                            "Topics",
                            {
                                "sub_header": "Adding Amazon MSK as an event source",
                                "content": [
                                    "To create an event source mapping, add Amazon MSK as a Lambda            function trigger using the Lambda console, an AWS SDK, or the AWS Command Line Interface (AWS CLI). Note that when you add Amazon MSK            as a trigger, Lambda assumes the VPC settings of the Amazon MSK cluster, not the Lambda function's VPC settings.",
                                    "This section describes how to create an event source mapping using the Lambda console and the AWS CLI.",
                                    {
                                        "sub_header": "Prerequisites",
                                        "content": [
                                            "  1.An  Amazon MSK cluster and a Kafka topic. For more information, see Getting Started Using Amazon MSK in the                        Amazon Managed Streaming for Apache Kafka Developer Guide.",
                                            "  2.An execution role with permission to access the AWS resources that your MSK cluster uses."
                                        ]
                                    },
                                    {
                                        "sub_header": "Customizable consumer group ID",
                                        "content": [
                                            "When setting up Kafka as an event source, you can specify a consumer group ID. This consumer group ID is an    existing identifier for the Kafka consumer group that you want your Lambda function to join. You can use this feature to seamlessly migrate any    ongoing Kafka record processing setups from other consumers to Lambda.",
                                            "If you specify a consumer group ID and there are other active pollers within that consumer group, Kafka distributes messages across      all consumers. In other words, Lambda doesn't receive all message for the Kafka topic. If you want Lambda to handle all messages in the      topic, turn off any other pollers in that consumer group.",
                                            "Additionally, if you specify a consumer group ID, and Kafka finds a valid existing consumer group with the same ID, Lambda ignores the      StartingPosition parameter for your event source mapping. Instead, Lambda begins processing records according to the committed      offset of the consumer group. If you specify a consumer group ID, and Kafka cannot find an existing consumer group, then Lambda configures your      event source with the specified StartingPosition.",
                                            "The consumer group ID that you specify must be unique among all your Kafka event sources. After creating a Kafka event source mapping      with the consumer group ID specified, you cannot update this value."
                                        ]
                                    },
                                    {
                                        "sub_header": "Adding an Amazon MSK trigger (console)",
                                        "content": [
                                            "Follow these steps to add your Amazon MSK cluster and a Kafka topic as a trigger for your Lambda function.",
                                            "To add an Amazon MSK trigger to your Lambda function (console)",
                                            "  1 : Open the Functions page of the Lambda                        console.",
                                            "  2 : Choose the name of your Lambda function.",
                                            "  3 : Under Function overview, choose Add trigger.",
                                            "  4 : Under Trigger configuration, do the following:Choose the MSK trigger type.For MSK cluster, select your cluster.For Batch size, enter the maximum number of messages to receive in a single                                batch.For Batch window, enter the maximum amount of seconds that Lambda spends                                gathering records before invoking the function.For Topic name, enter the name of a Kafka topic.(Optional) For Consumer group ID, enter the ID of a Kafka consumer group to join.(Optional) For Starting position, choose Latest to start                                reading the stream from the latest record, Trim horizon to start at the                                earliest available record, or At timestamp to specify a timestamp to start                                reading from.(Optional) For Authentication, choose the secret key for authenticating with                                the brokers in your MSK cluster.To create the trigger in a disabled state for testing (recommended), clear Enable                                trigger. Or, to enable the trigger immediately, select Enable                                    trigger.",
                                            "  5 : To create the trigger, choose Add."
                                        ]
                                    },
                                    {
                                        "sub_header": "Adding an Amazon MSK trigger (AWS CLI)",
                                        "content": [
                                            "Use the following example AWS CLI commands to create and view an Amazon MSK trigger for your Lambda function.",
                                            {
                                                "sub_header": "Creating a trigger using the AWS CLI",
                                                "content": [
                                                    "Example — Create event source mapping for cluster that uses IAM authentication",
                                                    "The following example uses the create-event-source-mapping AWS CLI command to map a Lambda function named my-kafka-function to a Kafka topic named AWSKafkaTopic. The topic's starting position is set to LATEST.                        When the cluster uses IAM role-based authentication,                        you don't need a SourceAccessConfiguration object. Example:",
                                                    {
                                                        "code_example": "aws lambda create-event-source-mapping \\\n  --event-source-arn arn:aws:kafka:us-east-1:111122223333:cluster/my-cluster/fc2f5bdf-fd1b-45ad-85dd-15b4a5a6247e-2 \\\n  --topics AWSKafkaTopic \\\n  --starting-position LATEST \\\n  --function-name my-kafka-function"
                                                    },
                                                    "Example — Create event source mapping for cluster that uses SASL/SCRAM authentication",
                                                    "If the cluster uses SASL/SCRAM authentication,                        you must include a SourceAccessConfiguration object that specifies SASL_SCRAM_512_AUTH and a Secrets Manager secret ARN.",
                                                    {
                                                        "code_example": "aws lambda create-event-source-mapping \\\n  --event-source-arn arn:aws:kafka:us-east-1:111122223333:cluster/my-cluster/fc2f5bdf-fd1b-45ad-85dd-15b4a5a6247e-2 \\\n  --topics AWSKafkaTopic \\\n  --starting-position LATEST \\\n  --function-name my-kafka-function\n  --source-access-configurations '[{\"Type\": \"SASL_SCRAM_512_AUTH\",\"URI\": \"arn:aws:secretsmanager:us-east-1:111122223333:secret:my-secret\"}]'"
                                                    },
                                                    "Example — Create event source mapping for cluster that uses mTLS authentication",
                                                    "If the cluster uses mTLS authentication,                        you must include a SourceAccessConfiguration object that specifies CLIENT_CERTIFICATE_TLS_AUTH and a Secrets Manager secret ARN.",
                                                    {
                                                        "code_example": "aws lambda create-event-source-mapping \\\n  --event-source-arn arn:aws:kafka:us-east-1:111122223333:cluster/my-cluster/fc2f5bdf-fd1b-45ad-85dd-15b4a5a6247e-2 \\\n  --topics AWSKafkaTopic \\\n  --starting-position LATEST \\\n  --function-name my-kafka-function\n  --source-access-configurations '[{\"Type\": \"CLIENT_CERTIFICATE_TLS_AUTH\",\"URI\": \"arn:aws:secretsmanager:us-east-1:111122223333:secret:my-secret\"}]'"
                                                    },
                                                    "For more information, see the CreateEventSourceMapping API reference documentation."
                                                ]
                                            },
                                            {
                                                "sub_header": "Viewing the status using the AWS CLI",
                                                "content": [
                                                    "The following example uses the get-event-source-mapping AWS CLI command to describe the status of the event source mapping that you created.",
                                                    "aws lambda get-event-source-mapping \\  --uuid 6d9bce8e-836b-442c-8070-74e77903c815"
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Amazon MSK configuration parameters",
                                "content": [
                                    "All Lambda event source types share the same CreateEventSourceMapping and UpdateEventSourceMapping            API operations. However, only some of the parameters apply to Amazon MSK.",
                                    "ParameterRequiredDefaultNotesAmazonManagedKafkaEventSourceConfigNContains the ConsumerGroupId field, which defaults to a unique value.Can set only on CreateBatchSizeN100Maximum: 10,000DestinationConfigNN/ACapturing discarded batches for an Amazon MSK event sourceEnabledNTrueEventSourceArnYN/ACan set only on CreateFilterCriteriaNN/AControl which events Lambda sends to your functionFunctionNameYN/AKMSKeyArnNN/AEncryption of filter criteriaMaximumBatchingWindowInSecondsN500 msBatching behaviorProvisionedPollersConfigNMinimumPollers: default value of 1 if not specifiedMaximumPollers: default value of 200 if not specifiedConfiguring provisioned modeSourceAccessConfigurationsNNo credentialsSASL/SCRAM or CLIENT_CERTIFICATE_TLS_AUTH (MutualTLS) authentication credentials for your event sourceStartingPositionYN/AAT_TIMESTAMP, TRIM_HORIZON, or LATESTCan set only on CreateStartingPositionTimestampNN/ARequired if StartingPosition is set to AT_TIMESTAMPTagsNN/AUsing tags on event source mappingsTopicsYN/AKafka topic nameCan set only on Create"
                                ]
                            },
                            {
                                "sub_header": "Creating cross-account event source mappings",
                                "content": [
                                    "You can use multi-VPC private connectivity to connect a Lambda function to a provisioned MSK cluster in a different AWS account. Multi-VPC connectivity uses AWS PrivateLink, which keeps all traffic within the AWS network.",
                                    "Note",
                                    "You can't create cross-account event source mappings for serverless MSK clusters.",
                                    "To create a cross-account event source mapping, you must first configure multi-VPC connectivity for the MSK cluster. When you create the event source mapping, use the managed VPC connection ARN instead of the cluster ARN, as shown in the following examples. The CreateEventSourceMapping operation also differs depending on which authentication type the MSK cluster uses.",
                                    "Example — Create cross-account event source mapping for cluster that uses IAM authentication",
                                    "When the cluster uses IAM role-based authentication,                you don't need a SourceAccessConfiguration object. Example:",
                                    {
                                        "code_example": "aws lambda create-event-source-mapping \\\n  --event-source-arn arn:aws:kafka:us-east-1:111122223333:vpc-connection/444455556666/my-cluster-name/51jn98b4-0a61-46cc-b0a6-61g9a3d797d5-7 \\\n  --topics AWSKafkaTopic \\\n  --starting-position LATEST \\\n  --function-name my-kafka-function"
                                    },
                                    "Example — Create cross-account event source mapping for cluster that uses SASL/SCRAM authentication",
                                    "If the cluster uses SASL/SCRAM authentication,                you must include a SourceAccessConfiguration object that specifies SASL_SCRAM_512_AUTH and a Secrets Manager secret ARN.",
                                    "There are two ways to use secrets for cross-account Amazon MSK event source mappings with SASL/SCRAM authentication:",
                                    "  1.Create a secret in the Lambda function account and sync it with the cluster secret. Create a rotation to keep the two secrets in sync. This option allows you to control the secret from the function account.",
                                    "  2.Use the secret that's associated with the MSK cluster. This secret must allow cross-account access to the Lambda function account. For more information, see Permissions to AWS Secrets Manager secrets for users in a different account.",
                                    {
                                        "code_example": "aws lambda create-event-source-mapping \\\n  --event-source-arn arn:aws:kafka:us-east-1:111122223333:vpc-connection/444455556666/my-cluster-name/51jn98b4-0a61-46cc-b0a6-61g9a3d797d5-7 \\\n  --topics AWSKafkaTopic \\\n  --starting-position LATEST \\\n  --function-name my-kafka-function \\\n  --source-access-configurations '[{\"Type\": \"SASL_SCRAM_512_AUTH\",\"URI\": \"arn:aws:secretsmanager:us-east-1:444455556666:secret:my-secret\"}]'"
                                    },
                                    "Example — Create cross-account event source mapping for cluster that uses mTLS authentication",
                                    "If the cluster uses mTLS authentication,                you must include a SourceAccessConfiguration object that specifies CLIENT_CERTIFICATE_TLS_AUTH                and a Secrets Manager secret ARN. The secret can be stored in the cluster account or the Lambda function account.",
                                    {
                                        "code_example": "aws lambda create-event-source-mapping \\\n  --event-source-arn arn:aws:kafka:us-east-1:111122223333:vpc-connection/444455556666/my-cluster-name/51jn98b4-0a61-46cc-b0a6-61g9a3d797d5-7 \\\n  --topics AWSKafkaTopic \\\n  --starting-position LATEST \\\n  --function-name my-kafka-function \\\n  --source-access-configurations '[{\"Type\": \"CLIENT_CERTIFICATE_TLS_AUTH\",\"URI\": \"arn:aws:secretsmanager:us-east-1:444455556666:secret:my-secret\"}]'"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Using an Amazon MSK cluster as an event source",
                                "content": [
                                    "When you add your Apache Kafka or Amazon MSK cluster as a trigger for your Lambda function, the cluster is used as an event source.",
                                    "Lambda reads event data from the Kafka topics that you specify as Topics in a            CreateEventSourceMapping request, based on the StartingPosition that you specify. After            successful processing, your Kafka topic is committed to your Kafka cluster.",
                                    "If you specify the StartingPosition as LATEST, Lambda starts reading from the latest            message in each partition belonging to the topic. Because there can be some delay after trigger configuration            before Lambda starts reading the messages, Lambda doesn't read any messages produced during this window.",
                                    "Lambda reads messages sequentially for each Kafka topic partition. A single Lambda payload can contain            messages from multiple partitions. When more records are available, Lambda continues processing records            in batches, based on the BatchSize value that you specify in a CreateEventSourceMapping            request, until your function catches up with the topic.",
                                    "After Lambda processes each batch, it commits the offsets of the messages in that batch. If your            function returns an error for any of the messages in a batch, Lambda retries the whole batch of messages            until processing succeeds or the messages expire. You can send records that fail all retry attempts to            an on-failure destination for later processing.",
                                    "Note",
                                    "While Lambda functions typically have a maximum timeout limit of 15 minutes,      event source mappings for Amazon MSK, self-managed Apache Kafka, Amazon DocumentDB, and Amazon MQ for ActiveMQ and RabbitMQ only support functions with      maximum timeout limits of 14 minutes. This constraint ensures that the event source mapping can properly      handle function errors and retries."
                                ]
                            },
                            {
                                "sub_header": "Polling and stream starting positions",
                                "content": [
                                    "Be aware that stream polling during event source mapping creation and updates is eventually consistent.",
                                    "  1.During event source mapping creation, it may take several minutes to start polling events from the stream.",
                                    "  2.During event source mapping updates, it may take several minutes to stop and restart polling events from the stream.",
                                    "This behavior means that if you specify LATEST as the starting position for the stream, the event source mapping could     miss events during creation or updates. To ensure that no events are missed, specify the stream starting position as TRIM_HORIZON     or AT_TIMESTAMP."
                                ]
                            },
                            {
                                "sub_header": "Amazon CloudWatch metrics",
                                "content": [
                                    "Lambda emits the OffsetLag metric while your function processes records. The value of this metric      is the difference in offset between the last record written to the Kafka event source topic and the last record that your function's       consumer group processed. You can use OffsetLag to estimate the latency between when a record is added and when      your consumer group processes it.",
                                    "An increasing trend in OffsetLag can indicate issues with pollers in your function's consumer group. For more information, see      Using CloudWatch metrics with Lambda."
                                ]
                            },
                            {
                                "sub_header": "Message throughput scaling behavior for Amazon MSK event source mappings",
                                "content": [
                                    "You can choose between two modes of message throughput scaling behavior for your Amazon MSK            event source mapping:",
                                    "  1.Default (on-demand) mode",
                                    "  2.Provisioned mode",
                                    {
                                        "sub_header": "Default (on-demand) mode",
                                        "content": [
                                            "When you initially create an Amazon MSK event source, Lambda allocates a default number of event                pollers to process all partitions in the Kafka topic. Lambda automatically scales up or down the                number of event pollers based on message load.",
                                            "In one-minute intervals, Lambda evaluates the offset lag                 of all the partitions in the topic. If the offset lag is too high, the partition is                receiving messages faster than Lambda can process them. If necessary, Lambda adds or removes                event pollers from the topic. This autoscaling process of adding or removing event pollers                occurs within three minutes of evaluation.",
                                            "If your target Lambda function is throttled, Lambda reduces the number of event pollers. This                action reduces the workload on the function by reducing the number of messages that event                pollers can retrieve and send to the function."
                                        ]
                                    },
                                    {
                                        "sub_header": "Configuring provisioned mode",
                                        "content": [
                                            "For workloads where you need to fine-tune the throughput of your event source mapping,                you can use provisioned mode. In provisioned mode, you define minimum and maximum limits                for the amount of provisioned event pollers. These provisioned event pollers are dedicated                to your event source mapping, and can handle unexpected message spikes through responsive                autoscaling. We recommend that you use provisioned mode for Kafka workloads that have strict                performance requirements.",
                                            "In Lambda, an event poller is a compute unit capable of handling up to 5 MBps of throughput.    For reference, suppose your event source produces an average payload of 1MB, and the average function duration is 1 sec.    If the payload doesn’t undergo any transformation (such as filtering), a single poller can support 5 MBps throughput,    and 5 concurrent Lambda invocations. Using provisioned mode incurs additional costs. For pricing estimates,    see AWS Lambda pricing.",
                                            "Note",
                                            "When using provisioned mode, you don't need to create AWS PrivateLink VPC endpoints                    or grant the associated permissions as part of your                    network configuration.",
                                            "In provisioned mode, the range of accepted values for the minimum number of event pollers                (MinimumPollers) is between 1 and 200, inclusive. The range of                accepted values for the maximum number of event pollers (MaximumPollers)                is between 1 and 2,000, inclusive. MaximumPollers must be greater than                or equal to MinimumPollers. In addition, to maintain ordered                processing within partitions, Lambda caps the MaximumPollers to the                number of partitions in the topic.",
                                            "For more details about choosing appropriate values for minimum and maximum event pollers,                see Best practices and considerations when using provisioned mode.",
                                            "You can configure provisioned mode for your Amazon MSK event source mapping using the console                or the Lambda API.",
                                            "To configure provisioned mode for an existing Amazon MSK event source mapping (console)",
                                            "  1 : Open the Functions page of the Lambda console.",
                                            "  2 : Choose the function with the Amazon MSK event source mapping you want to configure                        provisioned mode for.",
                                            "  3 : Choose Configuration, then choose Triggers.",
                                            "  4 : Choose the Amazon MSK event source mapping that you want to configure provisioned mode for,                        then choose Edit.",
                                            "  5 : Under Event source mapping configuration, choose                         Configure provisioned mode.For Minimum event pollers, enter a value between 1 and 200.                                If you don't specify a value, Lambda chooses a default value of 1.For Maximum event pollers, enter a value between 1 and 2,000.                                This value must be greater than or equal to your value for Minimum event                                pollers. If you don't specify a value, Lambda chooses a default value of 200.",
                                            "  6 : Choose Save.",
                                            "You can configure provisioned mode programmatically using the ProvisionedPollerConfig object                in your                 EventSourceMappingConfiguration. For example, the following UpdateEventSourceMapping CLI                command configures a MinimumPollers value of 5, and a                MaximumPollers value of 100.",
                                            "aws lambda update-event-source-mapping \\    --uuid a1b2c3d4-5678-90ab-cdef-EXAMPLE11111 \\    --provisioned-poller-config '{\"MinimumPollers\": 5, \"MaximumPollers\": 100}'",
                                            "After configuring provisioned mode, you can observe the usage of event pollers for your workload by monitoring    the ProvisionedPollers metric. For more information, see Event source mapping metrics.",
                                            "To disable provisioned mode and return to default (on-demand) mode,                you can use the following UpdateEventSourceMapping CLI                command:",
                                            "aws lambda update-event-source-mapping \\    --uuid a1b2c3d4-5678-90ab-cdef-EXAMPLE11111 \\    --provisioned-poller-config '{}'"
                                        ]
                                    },
                                    {
                                        "sub_header": "Best practices and considerations when using provisioned mode",
                                        "content": [
                                            "The optimal configuration of minimum and maximum event pollers for your event source mapping                depends on your application's performance requirements. We recommend that you start with the                default minimum event pollers to baseline the performance profile. Adjust your configuration                based on observed message processing patterns and your desired performance profile.",
                                            "For workloads with spiky traffic and strict performance needs, increase the minimum event                pollers to handle sudden surges in messages. To determine the minimum event pollers required,                consider your workload's messages per second and average payload size, and use the throughput                capacity of a single event poller (up to 5 MBps) as a reference.",
                                            "To maintain ordered processing within a partition, Lambda limits the maximum event pollers                to the number of partitions in the topic. Additionally, the maximum event pollers your event                source mapping can scale to depends on the function's concurrency settings.",
                                            "When activating provisioned mode, update your network settings to remove AWS PrivateLink VPC                endpoints and associated permissions."
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Event filtering",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk-filtering.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "You can use event filtering to control which records from a stream or queue Lambda sends to your function.    For general information about how event filtering works, see Control which events Lambda sends to your function.",
                            "This section focuses on event filtering for Amazon MSK event sources.",
                            "Topics",
                            {
                                "sub_header": "Amazon MSK event filtering basics",
                                "content": [
                                    "Suppose a producer is writing messages to a topic in your Amazon MSK cluster, either in valid JSON format or as plain strings. An example record             would look like the following, with the message converted to a Base64 encoded string in the value field.",
                                    "{    \"mytopic-0\":[        {            \"topic\":\"mytopic\",            \"partition\":0,            \"offset\":15,            \"timestamp\":1545084650987,            \"timestampType\":\"CREATE_TIME\",            \"value\":\"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",            \"headers\":[]        }    ]}",
                                    "Suppose your Apache Kafka producer is writing messages to your topic in the following JSON format.",
                                    "{    \"device_ID\": \"AB1234\",    \"session\":{        \"start_time\": \"yyyy-mm-ddThh:mm:ss\",        \"duration\": 162    }}",
                                    "You can use the value key to filter records. Suppose you wanted to filter only those records where device_ID             begins with the letters AB. The FilterCriteria object would be as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"value\\\" : { \\\"device_ID\\\" : [ { \\\"prefix\\\": \\\"AB\\\" } ] } }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON.",
                                    "{    \"value\": {        \"device_ID\": [ { \"prefix\": \"AB\" } ]      }}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"value\" : { \"device_ID\" : [ { \"prefix\":  \"AB\" } ] } }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:kafka:us-east-2:123456789012:cluster/my-cluster/b-8ac7cc01-5898-482d-be2f-a6b596050ea8 \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"value\\\" : { \\\"device_ID\\\" : [ { \\\"prefix\\\":  \\\"AB\\\" } ] } }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"value\" : { \"device_ID\" : [ { \"prefix\":  \"AB\" } ] } }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"value\" : { \"device_ID\" : [ { \"prefix\":  \"AB\" } ] } }"
                                    },
                                    "With Amazon MSK, you can also filter records where the message is a plain string. Suppose you want to ignore those messages where the string is             \"error\". The FilterCriteria object would look as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"value\\\" : [ { \\\"anything-but\\\": [ \\\"error\\\" ] } ] }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON.",
                                    "{    \"value\": [        {        \"anything-but\": [ \"error\" ]        }    ]}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"value\" : [ { \"anything-but\": [ \"error\" ] } ] }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:kafka:us-east-2:123456789012:cluster/my-cluster/b-8ac7cc01-5898-482d-be2f-a6b596050ea8 \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"value\\\" : [ { \\\"anything-but\\\": [ \\\"error\\\" ] } ] }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"value\" : [ { \"anything-but\": [ \"error\" ] } ] }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"value\" : [ { \"anything-but\": [ \"error\" ] } ] }"
                                    },
                                    "Amazon MSK messages must be UTF-8 encoded strings, either plain strings or in JSON format. That's because Lambda decodes Amazon MSK byte arrays into UTF-8 before             applying filter criteria. If your messages use another encoding, such as UTF-16 or ASCII, or if the message format doesn't match the             FilterCriteria format, Lambda processes metadata filters only. The following table summarizes the specific behavior:",
                                    "Incoming message formatFilter pattern format for message propertiesResulting actionPlain stringPlain stringLambda filters based on your filter criteria.Plain stringNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Plain stringValid JSONLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONPlain stringLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONValid JSONLambda filters based on your filter criteria.Non-UTF-8 encoded stringJSON, plain string, or no patternLambda filters (on the other metadata properties only) based on your filter criteria."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "On-failure destinations",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-msk-on-failure.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "To retain records of failed event source mapping invocations, add a destination to your function's event source mapping. Each record sent to the destination is a JSON document containing metadata about the failed invocation. For Amazon S3 destinations, Lambda also sends the entire invocation record along with the metadata. You can configure any Amazon SNS topic, Amazon SQS queue, or S3 bucket as a destination.",
                            "With Amazon S3 destinations, you can use the Amazon S3 Event Notifications feature to receive notifications when objects are uploaded to your destination S3 bucket. You can also configure S3 Event Notifications to invoke another Lambda function to perform automated processing on failed batches.",
                            "Your execution role must have permissions for the destination:",
                            "  1.For SQS destinations: :  sqs:SendMessage",
                            "  2.For SNS destinations: :  sns:Publish",
                            "  3.For S3 bucket destinations: :   s3:PutObject and s3:ListBucket",
                            "You must deploy a VPC endpoint for your on-failure destination service inside your Amazon MSK cluster VPC.",
                            "Additionally, if you configured a KMS key on your destination, Lambda needs the following        permissions depending on the destination type:",
                            "  1.If you've enabled encryption with your own KMS key for an S3 destination,            kms:GenerateDataKey is required.            If the KMS key and S3 bucket destination are in a different account from your Lambda function            and execution role, configure the KMS key to trust the execution role to allow            kms:GenerateDataKey.",
                            "  2.If you've enabled encryption with your own KMS key for SQS destination,            kms:Decrypt and            kms:GenerateDataKey are            required. If the KMS key and SQS queue destination are in a different account from your            Lambda function and execution role, configure the KMS key to trust the execution role to            allow kms:Decrypt, kms:GenerateDataKey,            kms:DescribeKey, and            kms:ReEncrypt.",
                            "  3.If you've enabled encryption with your own KMS key for SNS destination,            kms:Decrypt and            kms:GenerateDataKey are            required. If the KMS key and SNS topic destination are in a different account from your            Lambda function and execution role, configure the KMS key to trust the execution role to            allow kms:Decrypt, kms:GenerateDataKey,            kms:DescribeKey, and            kms:ReEncrypt.",
                            {
                                "sub_header": "Configuring on-failure destinations for an Amazon MSK event source mapping",
                                "content": [
                                    "To configure an on-failure destination using the console, follow these steps:",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Choose a function.",
                                    "  3 : Under Function overview, choose Add destination.",
                                    "  4 : For Source, choose Event source mapping invocation.",
                                    "  5 : For Event source mapping, choose an event source that's configured              for this function.",
                                    "  6 : For Condition, select On failure. For event              source mapping invocations, this is the only accepted condition.",
                                    "  7 : For Destination type, choose the destination type that Lambda sends              invocation records to.",
                                    "  8 : For Destination, choose a resource.",
                                    "  9 : Choose Save.",
                                    "You can also configure an on-failure destination using the AWS CLI. For example, the following          create-event-source-mapping command adds an event source mapping with an SQS on-failure destination to          MyFunction:",
                                    "aws lambda create-event-source-mapping \\--function-name \"MyFunction\" \\--event-source-arn arn:aws:kafka:us-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2 \\--destination-config '{\"OnFailure\": {\"Destination\": \"arn:aws:sqs:us-east-1:123456789012:dest-queue\"}}'",
                                    "The following update-event-source-mapping command adds an S3 on-failure destination to the event source associated with the input uuid:",
                                    "aws lambda update-event-source-mapping \\--uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\--destination-config '{\"OnFailure\": {\"Destination\": \"arn:aws:s3:::dest-bucket\"}}'",
                                    "To remove a destination, supply an empty string as the argument to the          destination-config parameter:",
                                    "aws lambda update-event-source-mapping \\--uuid f89f8514-cdd9-4602-9e1f-01a5b77d449b \\--destination-config '{\"OnFailure\": {\"Destination\": \"\"}}'",
                                    {
                                        "sub_header": "Security best practices for Amazon S3 destinations",
                                        "content": [
                                            "Deleting an S3 bucket that's configured as a destination without removing the destination from your function's configuration can create a security risk. If another       user knows your destination bucket's name, they can recreate the bucket in their AWS account. Records of failed invocations will be sent to their bucket, potentially       exposing data from your function.",
                                            "Warning",
                                            "To ensure that invocation records from your function can't be sent to an S3 bucket in another AWS account, add a condition to your function's execution role         that limits s3:PutObject permissions to buckets in your account. ",
                                            "The following example shows an IAM policy that limits your function's s3:PutObject permissions to buckets in your account. This policy also gives Lambda        the s3:ListBucket permission it needs to use an S3 bucket as a destination.",
                                            "{    \"Version\": \"2012-10-17\",    \"Statement\": [        {            \"Sid\": \"S3BucketResourceAccountWrite\",            \"Effect\": \"Allow\",            \"Action\": [                \"s3:PutObject\",                \"s3:ListBucket\"            ],            \"Resource\": \"arn:aws:s3:::*/*\",            \"Condition\": {                \"StringEquals\": {                    \"s3:ResourceAccount\": \"111122223333\"                }            }        }    ]}",
                                            "To add a permissions policy to your funcion's execution role using the AWS Management Console or AWS CLI, refer to the instructions in the following procedures:",
                                            "  1.Console : \nTo add a permissions policy to a function's execution role (console)Open the Functions page of the Lambda console.\nSelect the Lambda function whose execution role you want to modify.\n\nIn the Configuration tab, select Permissions.\n\nIn the Execution role tab, select your function's Role name to open the role's IAM console page.\n\nAdd a permissions policy to the role by doing the following:\n\nIn the Permissions policies pane, choose Add permissions and select Create inline policy.\n\nIn Policy editor, select JSON.\n\nPaste the policy you want to add into the editor (replacing the existing JSON), and then choose Next.\n\nUnder Policy details, enter a Policy name.\n\nChoose Create policy.\n\n\n",
                                            "  2.AWS CLI : put-role-policy",
                                            "anchor",
                                            "anchor",
                                            "To add a permissions policy to a function's execution role (console)",
                                            "  1 : Open the Functions page of the Lambda console.",
                                            "  2 : Select the Lambda function whose execution role you want to modify.",
                                            "  3 : In the Configuration tab, select Permissions.",
                                            "  4 : In the Execution role tab, select your function's Role name to open the role's IAM console page.",
                                            "  5 : Add a permissions policy to the role by doing the following:In the Permissions policies pane, choose Add permissions and select Create inline policy.In Policy editor, select JSON.Paste the policy you want to add into the editor (replacing the existing JSON), and then choose Next.Under Policy details, enter a Policy name.Choose Create policy."
                                        ]
                                    },
                                    {
                                        "sub_header": "SNS and SQS example invocation record",
                                        "content": [
                                            "The following example shows what Lambda sends to an SNS topic or SQS queue destination for a          failed Kafka event source invocation. Each of the keys under recordsInfo contains          both the Kafka topic and partition, separated by a hyphen. For example, for the key          \"Topic-0\", Topic is the Kafka topic, and 0 is the          partition. For each topic and partition, you can use the offsets and timestamp data to find          the original invocation records.",
                                            "{    \"requestContext\": {        \"requestId\": \"316aa6d0-8154-xmpl-9af7-85d5f4a6bc81\",        \"functionArn\": \"arn:aws:lambda:us-east-1:123456789012:function:myfunction\",        \"condition\": \"RetryAttemptsExhausted\" | \"MaximumPayloadSizeExceeded\",        \"approximateInvokeCount\": 1    },    \"responseContext\": { // null if record is MaximumPayloadSizeExceeded        \"statusCode\": 200,        \"executedVersion\": \"$LATEST\",        \"functionError\": \"Unhandled\"    },    \"version\": \"1.0\",    \"timestamp\": \"2019-11-14T00:38:06.021Z\",    \"KafkaBatchInfo\": {        \"batchSize\": 500,        \"eventSourceArn\": \"arn:aws:kafka:us-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2\",        \"bootstrapServers\": \"...\",        \"payloadSize\": 2039086, // In bytes        \"recordsInfo\": {            \"Topic-0\": {                \"firstRecordOffset\": \"49601189658422359378836298521827638475320189012309704722\",                \"lastRecordOffset\": \"49601189658422359378836298522902373528957594348623495186\",                \"firstRecordTimestamp\": \"2019-11-14T00:38:04.835Z\",                \"lastRecordTimestamp\": \"2019-11-14T00:38:05.580Z\",            },            \"Topic-1\": {                \"firstRecordOffset\": \"49601189658422359378836298521827638475320189012309704722\",                \"lastRecordOffset\": \"49601189658422359378836298522902373528957594348623495186\",                \"firstRecordTimestamp\": \"2019-11-14T00:38:04.835Z\",                \"lastRecordTimestamp\": \"2019-11-14T00:38:05.580Z\",            }        }    }}"
                                        ]
                                    },
                                    {
                                        "sub_header": "S3 destination example invocation record",
                                        "content": [
                                            "For S3 destinations, Lambda sends the entire invocation record along with the metadata          to the destination. The following example shows that Lambda sends to an S3 bucket destination          for a failed Kafka event source invocation. In addition to all of the fields from the previous          example for SQS and SNS destinations, the payload field contains the original          invocation record as an escaped JSON string.",
                                            "{    \"requestContext\": {        \"requestId\": \"316aa6d0-8154-xmpl-9af7-85d5f4a6bc81\",        \"functionArn\": \"arn:aws:lambda:us-east-1:123456789012:function:myfunction\",        \"condition\": \"RetryAttemptsExhausted\" | \"MaximumPayloadSizeExceeded\",        \"approximateInvokeCount\": 1    },    \"responseContext\": { // null if record is MaximumPayloadSizeExceeded        \"statusCode\": 200,        \"executedVersion\": \"$LATEST\",        \"functionError\": \"Unhandled\"    },    \"version\": \"1.0\",    \"timestamp\": \"2019-11-14T00:38:06.021Z\",    \"KafkaBatchInfo\": {        \"batchSize\": 500,        \"eventSourceArn\": \"arn:aws:kafka:us-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2\",        \"bootstrapServers\": \"...\",        \"payloadSize\": 2039086, // In bytes        \"recordsInfo\": {            \"Topic-0\": {                \"firstRecordOffset\": \"49601189658422359378836298521827638475320189012309704722\",                \"lastRecordOffset\": \"49601189658422359378836298522902373528957594348623495186\",                \"firstRecordTimestamp\": \"2019-11-14T00:38:04.835Z\",                \"lastRecordTimestamp\": \"2019-11-14T00:38:05.580Z\",            },            \"Topic-1\": {                \"firstRecordOffset\": \"49601189658422359378836298521827638475320189012309704722\",                \"lastRecordOffset\": \"49601189658422359378836298522902373528957594348623495186\",                \"firstRecordTimestamp\": \"2019-11-14T00:38:04.835Z\",                \"lastRecordTimestamp\": \"2019-11-14T00:38:05.580Z\",            }        }    },    \"payload\": \"<Whole Event>\" // Only available in S3}",
                                            "Tip",
                                            "We recommend enabling S3 versioning on your destination bucket."
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Tutorial",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-msk-tutorial.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "In this tutorial, you will perform the following:",
                            "  1.Create a Lambda function in the same AWS account as an existing Amazon MSK cluster.",
                            "  2.Configure networking and authentication for Lambda to communicate with Amazon MSK.",
                            "  3.Set up a Lambda Amazon MSK event source mapping, which runs your Lambda function when events show up in the topic.",
                            "After you are finished with these steps, when events are sent to Amazon MSK, you will be able to set up a Lambda        function to process those events automatically with your own custom Lambda code.",
                            " What can you do with this feature? ",
                            "Example solution: Use an MSK event source mapping to deliver live scores to your        customers.",
                            "Consider the following scenario: Your company hosts a web application where        your customers can view information about live events, such as sports games. Information updates from the game        are provided to your team through a Kafka topic on Amazon MSK. You want to design a solution that consumes updates        from the MSK topic to provide an updated view of the live event to customers inside an application you develop.        You have decided on the following design approach: Your client applications will communicate with a serverless        backend hosted in AWS. Clients will connect over websocket sessions using the Amazon API Gateway WebSocket API.",
                            "In this solution, you need a component that reads MSK events, performs some custom logic to prepare those        events for the application layer and then forwards that information to the API Gateway API. You can implement this        component with AWS Lambda, by providing your custom logic in a Lambda function, then calling it with a        AWS Lambda Amazon MSK event source mapping.",
                            "For more information about implementing solutions using the Amazon API Gateway WebSocket API, see WebSocket API        tutorials in the API Gateway documentation.",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "An AWS account with the following preconfigured resources:",
                                    "To fulfill these prerequisites, we recommend following Getting started using Amazon MSK in the Amazon MSK            documentation.",
                                    "  1.An Amazon MSK cluster. See Create an Amazon MSK cluster in Getting started using Amazon MSK.",
                                    "  2.The following configuration:Ensure IAM role-based authentication is Enabled                            in your cluster security settings. This improves your security by limiting your Lambda                            function to only access the Amazon MSK resources needed. This is enabled by default on new Amazon MSK                            clusters.Ensure Public access is off in your cluster networking settings.                            Restricting your Amazon MSK cluster's access to the internet improves your security by limiting                            how many intermediaries handle your data. This is enabled by default on new Amazon MSK                            clusters.",
                                    "  3.IAM role-based authentication : Ensure  is Enabled                            in your cluster security settings. This improves your security by limiting your Lambda                            function to only access the Amazon MSK resources needed. This is enabled by default on new Amazon MSK                            clusters.",
                                    "  4.Public access : Ensure  is off in your cluster networking settings.                            Restricting your Amazon MSK cluster's access to the internet improves your security by limiting                            how many intermediaries handle your data. This is enabled by default on new Amazon MSK                            clusters.",
                                    "  5.A Kafka topic in your Amazon MSK cluster to use for this solution.  See Create a topic in Getting started using Amazon MSK.",
                                    "  6.A Kafka admin host set up to retrieve information from your Kafka cluster and send Kafka events to your topic                    for testing, such as an Amazon EC2 instance with the Kafka admin CLI and Amazon MSK IAM library                    installed. See Create a client machine in Getting started using Amazon MSK.",
                                    "Once you have set up these resources, gather the following information from your AWS account to confirm that you are ready to continue.",
                                    "  1.The name of your Amazon MSK cluster. You can find this information in the Amazon MSK console.",
                                    "  2.The cluster UUID, part of the ARN for                    your Amazon MSK cluster, which you can find in the Amazon MSK console. Follow                    the procedures in Listing clusters in the Amazon MSK                    documentation to find this information.",
                                    "  3.The security groups associated with your Amazon MSK cluster. You can find this information in the Amazon MSK                    console. In the following steps, refer to these as your clusterSecurityGroups.",
                                    "  4.The id of the Amazon VPC containing your Amazon MSK cluster. You can find this                    information by identifying subnets associated with your Amazon MSK cluster in the Amazon MSK console,                    then identifying the Amazon VPC associated with the subnet in the Amazon VPC Console.",
                                    "  5.The name of the Kafka topic used in your solution. You can find this information by calling your                    Amazon MSK cluster with the Kafka topics CLI from your Kafka admin host. For more                    information about the topics CLI, see Adding and removing topics                    in the Kafka documentation.",
                                    "  6.The name of a consumer group for your Kafka topic, suitable for use by your Lambda                    function. This group can be created automatically by Lambda, so you don't need to create it with the                    Kafka CLI. If you do need to manage your consumer groups, to learn more about the consumer-groups                    CLI, see Managing                    Consumer Groups in the Kafka documentation.",
                                    "The following permissions in your AWS account:",
                                    "  1.Permission to create and manage a Lambda function.",
                                    "  2.Permission to create IAM policies and associate them with your Lambda function.",
                                    "  3.Permission to create Amazon VPC endpoints and alter networking configuration in the Amazon VPC hosting your Amazon MSK cluster."
                                ]
                            },
                            {
                                "sub_header": "Configure network connectivity for Lambda to communicate with Amazon MSK",
                                "content": [
                                    " Use AWS PrivateLink to connect Lambda and Amazon MSK. You can do so by creating interface            Amazon VPC endpoints in the Amazon VPC console. For more information about networking configuration, see Configure network security.        ",
                                    "When a Amazon MSK event source mapping runs on the behalf of a Lambda function, it assumes the Lambda function’s execution role. This IAM role            authorizes the mapping to access resources secured by IAM, such as your Amazon MSK cluster. Although the            components share an execution role, the Amazon MSK mapping and your Lambda function have separate connectivity            requirements for their respective tasks, as shown in the following diagram.",
                                    "Your event source mapping belongs to your Amazon MSK cluster security group. In this networking step, create            Amazon VPC endpoints from your Amazon MSK cluster VPC to connect the event source mapping to the Lambda and STS            services. Secure these endpoints to accept traffic from your Amazon MSK cluster security group. Then, adjust the            Amazon MSK cluster security groups to allow the event source mapping to communicate with the Amazon MSK            cluster.",
                                    " You can configure the following steps using the AWS Management Console.",
                                    "To configure interface Amazon VPC endpoints to connect Lambda and Amazon MSK",
                                    "  1 : Create a security group for your interface Amazon VPC endpoints, endpointSecurityGroup, that allows                    inbound TCP traffic on 443 from clusterSecurityGroups. Follow the procedure in Create a                    security group in the Amazon EC2 documentation to create a security group. Then, follow the                    procedure in Add                    rules to a security group in the Amazon EC2 documentation to add appropriate rules. Create a security group with the following information:When adding your inbound rules, create a rule for each security group in                    clusterSecurityGroups. For each rule:For Type,                            select HTTPS.For Source, select one of                            clusterSecurityGroups.",
                                    " 2 :  Create an endpoint connecting the Lambda service to the Amazon VPC containing your Amazon MSK cluster.                    Follow the procedure in Create an interface endpoint.Create an interface endpoint with the following information:For Service name, select com.amazonaws.regionName.lambda, where regionName                            hosts your Lambda function.For VPC, select                            the Amazon VPC containing your Amazon MSK cluster.For Security groups, select                            endpointSecurityGroup, which you created earlier.For Subnets, select the subnets that host your Amazon MSK cluster.For Policy, provide the following policy document, which secures the endpoint for use by the Lambda service principal for the                            lambda:InvokeFunction action. Ensure Enable DNS name remains set.",
                                    {
                                        "code_example": "{\n    \"Statement\": [\n        {\n            \"Action\": \"lambda:InvokeFunction\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": [\n                    \"lambda.amazonaws.com\"\n                ]\n            },\n            \"Resource\": \"*\"\n        }\n    ]\n}"
                                    },
                                    " 3 :  Create an endpoint connecting the AWS STS service to the Amazon VPC containing your Amazon MSK cluster.                    Follow the procedure in Create an interface endpoint.Create an interface endpoint with the following information:For Service name, select AWS STS.For VPC, select                            the Amazon VPC containing your Amazon MSK cluster.For Security groups, select                            endpointSecurityGroup.For Subnets, select the subnets that host your Amazon MSK cluster.For Policy, provide the following policy document,                            which secures the endpoint for use by                            the Lambda service principal for the sts:AssumeRole action. Ensure Enable DNS name remains set.",
                                    {
                                        "code_example": "{\n    \"Statement\": [\n        {\n            \"Action\": \"sts:AssumeRole\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": [\n                    \"lambda.amazonaws.com\"\n                ]\n            },\n            \"Resource\": \"*\"\n        }\n    ]\n}"
                                    },
                                    "  4 : For each security group associated with your Amazon MSK cluster, that is, in                    clusterSecurityGroups, allow the following:Allow all inbound and outbound TCP traffic on 9098                            to all of clusterSecurityGroups, including within itself.Allow all outbound TCP traffic on 443.Some of this traffic is allowed by default security group                    rules, so if your cluster is attached to a single security group, and that group has default rules, additional rules                    are not necessary. To adjust security group rules, follow the procedures in Add                    rules to a security group in the Amazon EC2 documentation.Add rules to your security groups with the following information:For each inbound rule or outbound rule for port 9098, provideFor Type, select Custom TCP.For Port range, provide 9098.For Source, provide one of clusterSecurityGroups.For each inbound rule for port 443, for Type,                            select HTTPS."
                                ]
                            },
                            {
                                "sub_header": "Create an IAM role for Lambda to read from your Amazon MSK topic",
                                "content": [
                                    "Identify the auth requirements for Lambda to read from your Amazon MSK topic, then define them in a policy.            Create a role, lambdaAuthRole, that authorizes Lambda to use those            permissions. Authorize actions on your Amazon MSK cluster using kafka-cluster            IAM actions. Then, authorize Lambda to perform Amazon MSK kafka and Amazon EC2 actions            needed to discover and connect to your Amazon MSK cluster, as well as CloudWatch actions so Lambda can log what it has            done.",
                                    "To describe the auth requirements for Lambda to read from Amazon MSK",
                                    " 1 : Write an IAM policy document (a JSON document), clusterAuthPolicy, that allows Lambda to read from your Kafka topic in                    your Amazon MSK cluster using your Kafka consumer group. Lambda                    requires a Kafka consumer group to be set when reading.Alter the following template to align with your prerequisites: For more information, consult IAM role-based authentication. When writing your                    policy:For region and                            account-id, provide those that host your Amazon MSK cluster.For mskClusterName, provide the name of your Amazon MSK cluster.For cluster-uuid, provide the UUID in the ARN for                            your Amazon MSK cluster.For mskTopicName, provide the name of your Kafka topic.For mskGroupName, provide the name of your Kafka consumer                            group.",
                                    {
                                        "code_example": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kafka-cluster:Connect\",\n                \"kafka-cluster:DescribeGroup\",\n                \"kafka-cluster:AlterGroup\",\n                \"kafka-cluster:DescribeTopic\",\n                \"kafka-cluster:ReadData\",\n                \"kafka-cluster:DescribeClusterDynamicConfiguration\"\n            ],\n            \"Resource\": [\n                \"arn:aws:kafka:region:account-id:cluster/mskClusterName/cluster-uuid\",\n                \"arn:aws:kafka:region:account-id:topic/mskClusterName/cluster-uuid/mskTopicName\",\n                \"arn:aws:kafka:region:account-id:group/mskClusterName/cluster-uuid/mskGroupName\"\n            ]\n        }\n    ]\n}       "
                                    },
                                    "  2 : Identify the Amazon MSK, Amazon EC2 and CloudWatch permissions required for Lambda to discover and connect your Amazon MSK cluster, and log those events.The AWSLambdaMSKExecutionRole managed policy permissively defines the required permissions. Use it in the following steps.In a production environment, assess AWSLambdaMSKExecutionRole to restrict your execution role policy based on the principle of least privilege, then                     write a policy for your role that replaces this managed policy.",
                                    "For details about the IAM policy language, see            the IAM documentation.",
                                    "Now that you have written your policy document, create an IAM policy so you can attach it to your role. You can do this using the console with the following procedure.",
                                    "To create an IAM policy from your policy document",
                                    "  1 : Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.",
                                    "  2 : In the navigation pane on the left, choose Policies. ",
                                    "  3 : Choose Create policy.",
                                    "  4 : In the Policy editor section, choose the                    JSON option.",
                                    "  5 : Paste clusterAuthPolicy.",
                                    "  6 : When you are finished adding permissions to the policy, choose                    Next.",
                                    "  7 : On the Review and create page, type a Policy                    Name and a Description (optional) for the policy that                    you are creating. Review Permissions defined in this policy to see                    the permissions that are granted by your policy.",
                                    "  8 : Choose Create policy to save your new policy.",
                                    "For more information, see Creating IAM policies in the IAM documentation.",
                                    "Now that you have appropriate IAM policies, create a role and attach them to it. You can do this using the console with the following procedure.",
                                    "To create an execution role in the IAM console",
                                    "  1 : Open the Roles page in the IAM console.",
                                    "  2 : Choose Create role.",
                                    "  3 : Under Trusted entity type, choose AWS service.",
                                    "  4 : Under Use case, choose Lambda.",
                                    "  5 : Choose Next.",
                                    "  6 : Select the following policies:clusterAuthPolicyAWSLambdaMSKExecutionRole",
                                    "  7 : Choose Next.",
                                    "  8 : For Role name, enter lambdaAuthRole and then choose Create role.",
                                    "For more information, see Defining Lambda function permissions with an execution role."
                                ]
                            },
                            {
                                "sub_header": "Create a Lambda function to read from your Amazon MSK topic",
                                "content": [
                                    "Create a Lambda function configured to use your            IAM role. You can create your Lambda function using the console.",
                                    "To create a Lambda function using your auth configuration",
                                    "  1 :                 Open the Lambda console and select Create function from the header.            ",
                                    "  2 : Select Author from scratch.",
                                    "  3 : For Function name, provide an appropriate name of your choice.",
                                    "  4 : For Runtime, choose the Latest supported version of Node.js to use the code provided in this tutorial.",
                                    "  5 : Choose Change default execution role.",
                                    "  6 : Select Use an existing role.",
                                    "  7 : For Existing role, select lambdaAuthRole.",
                                    "In a production environment, you usually need to add further policies to the execution role for your Lambda function to             meaningfully process your Amazon MSK events. For more information on adding policies to your role, see Add or            remove identity permissions in the IAM documentation."
                                ]
                            },
                            {
                                "sub_header": "Create an event source mapping to your Lambda function",
                                "content": [
                                    "Your Amazon MSK event source mapping provides the Lambda service the information necessary to invoke your            Lambda when appropriate Amazon MSK events occur. You can create a Amazon MSK mapping using the console. Create a Lambda            trigger, then the event source mapping is automatically set up.",
                                    "To create a Lambda trigger (and event source mapping)",
                                    "  1 : Navigate to your Lambda function's overview page.",
                                    "  2 : In the function overview section, choose Add trigger on the bottom left.",
                                    "  3 : In the Select a source dropdown, select Amazon MSK.",
                                    "  4 : Don't set authentication.",
                                    "  5 : For MSK cluster, select your cluster's name.",
                                    "  6 : For Batch size, enter 1. This step makes this feature easier to test, and is not an ideal value in production.",
                                    "  7 : For Topic name, provide the name of your Kafka topic.",
                                    "  8 : For Consumer group ID, provide the id of your Kafka consumer group."
                                ]
                            },
                            {
                                "sub_header": "Update your Lambda function to read your streaming data",
                                "content": [
                                    "            Lambda provides information about Kafka events through the event method parameter. For an example structure of a Amazon MSK event, see  Example event.            After you understand how to interpret Lambda forwarded Amazon MSK events, you can alter your Lambda function code to use the information they provide.        ",
                                    "            Provide the following code to your Lambda function to log the contents of a Lambda Amazon MSK event for testing purposes:        ",
                                    "  1..NET : using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KafkaEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace MSKLambda;\n\npublic class Function\n{\n    \n    \n    /// <param name=\"input\">The event for the Lambda function handler to process.</param>\n    /// <param name=\"context\">The ILambdaContext that provides methods for logging and describing the Lambda environment.</param>\n    /// <returns></returns>\n    public void FunctionHandler(KafkaEvent evnt, ILambdaContext context)\n    {\n\n        foreach (var record in evnt.Records)\n        {\n            Console.WriteLine(\"Key:\" + record.Key); \n            foreach (var eventRecord in record.Value)\n            {\n                var valueBytes = eventRecord.Value.ToArray();    \n                var valueText = Encoding.UTF8.GetString(valueBytes);\n                \n                Console.WriteLine(\"Message:\" + valueText);\n            }\n        }\n    }\n    \n\n}\n\n",
                                    "  2.AWS SDK for .NET : using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KafkaEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace MSKLambda;\n\npublic class Function\n{\n    \n    \n    /// <param name=\"input\">The event for the Lambda function handler to process.</param>\n    /// <param name=\"context\">The ILambdaContext that provides methods for logging and describing the Lambda environment.</param>\n    /// <returns></returns>\n    public void FunctionHandler(KafkaEvent evnt, ILambdaContext context)\n    {\n\n        foreach (var record in evnt.Records)\n        {\n            Console.WriteLine(\"Key:\" + record.Key); \n            foreach (var eventRecord in record.Value)\n            {\n                var valueBytes = eventRecord.Value.ToArray();    \n                var valueText = Encoding.UTF8.GetString(valueBytes);\n                \n                Console.WriteLine(\"Message:\" + valueText);\n            }\n        }\n    }\n    \n\n}\n\n",
                                    "  3.Go : \npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(event events.KafkaEvent) {\n\tfor key, records := range event.Records {\n\t\tfmt.Println(\"Key:\", key)\n\n\t\tfor _, record := range records {\n\t\t\tfmt.Println(\"Record:\", record)\n\n\t\t\tdecodedValue, _ := base64.StdEncoding.DecodeString(record.Value)\n\t\t\tmessage := string(decodedValue)\n\t\t\tfmt.Println(\"Message:\", message)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n",
                                    "  4.SDK for Go V2 : \npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(event events.KafkaEvent) {\n\tfor key, records := range event.Records {\n\t\tfmt.Println(\"Key:\", key)\n\n\t\tfor _, record := range records {\n\t\t\tfmt.Println(\"Record:\", record)\n\n\t\t\tdecodedValue, _ := base64.StdEncoding.DecodeString(record.Value)\n\t\t\tmessage := string(decodedValue)\n\t\t\tfmt.Println(\"Message:\", message)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n",
                                    "  5.Java : \nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KafkaEvent;\nimport com.amazonaws.services.lambda.runtime.events.KafkaEvent.KafkaEventRecord;\n\nimport java.util.Base64;\nimport java.util.Map;\n\npublic class Example implements RequestHandler<KafkaEvent, Void> {\n\n    @Override\n    public Void handleRequest(KafkaEvent event, Context context) {\n        for (Map.Entry<String, java.util.List<KafkaEventRecord>> entry : event.getRecords().entrySet()) {\n            String key = entry.getKey();\n            System.out.println(\"Key: \" + key);\n\n            for (KafkaEventRecord record : entry.getValue()) {\n                System.out.println(\"Record: \" + record);\n\n                byte[] value = Base64.getDecoder().decode(record.getValue());\n                String message = new String(value);\n                System.out.println(\"Message: \" + message);\n            }\n        }\n\n        return null;\n    }\n}\n\n",
                                    "  6.SDK for Java 2.x : \nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KafkaEvent;\nimport com.amazonaws.services.lambda.runtime.events.KafkaEvent.KafkaEventRecord;\n\nimport java.util.Base64;\nimport java.util.Map;\n\npublic class Example implements RequestHandler<KafkaEvent, Void> {\n\n    @Override\n    public Void handleRequest(KafkaEvent event, Context context) {\n        for (Map.Entry<String, java.util.List<KafkaEventRecord>> entry : event.getRecords().entrySet()) {\n            String key = entry.getKey();\n            System.out.println(\"Key: \" + key);\n\n            for (KafkaEventRecord record : entry.getValue()) {\n                System.out.println(\"Record: \" + record);\n\n                byte[] value = Base64.getDecoder().decode(record.getValue());\n                String message = new String(value);\n                System.out.println(\"Message: \" + message);\n            }\n        }\n\n        return null;\n    }\n}\n\n",
                                    "  7.JavaScript : \nexports.handler = async (event) => {\n    // Iterate through keys\n    for (let key in event.records) {\n      console.log('Key: ', key)\n      // Iterate through records\n      event.records[key].map((record) => {\n        console.log('Record: ', record)\n        // Decode base64\n        const msg = Buffer.from(record.value, 'base64').toString()\n        console.log('Message:', msg)\n      }) \n    }\n}\n",
                                    "  8.SDK for JavaScript (v3) : \nexports.handler = async (event) => {\n    // Iterate through keys\n    for (let key in event.records) {\n      console.log('Key: ', key)\n      // Iterate through records\n      event.records[key].map((record) => {\n        console.log('Record: ', record)\n        // Decode base64\n        const msg = Buffer.from(record.value, 'base64').toString()\n        console.log('Message:', msg)\n      }) \n    }\n}\n",
                                    "  9.PHP : <?php\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kafka\\KafkaEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): void\n    {\n        $kafkaEvent = new KafkaEvent($event);\n        $this->logger->info(\"Processing records\");\n        $records = $kafkaEvent->getRecords();\n\n        foreach ($records as $record) {\n            try {\n                $key = $record->getKey();\n                $this->logger->info(\"Key: $key\");\n\n                $values = $record->getValue();\n                $this->logger->info(json_encode($values));\n\n                foreach ($values as $value) {\n                    $this->logger->info(\"Value: $value\");\n                }\n                \n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  10.SDK for PHP : <?php\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kafka\\KafkaEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): void\n    {\n        $kafkaEvent = new KafkaEvent($event);\n        $this->logger->info(\"Processing records\");\n        $records = $kafkaEvent->getRecords();\n\n        foreach ($records as $record) {\n            try {\n                $key = $record->getKey();\n                $this->logger->info(\"Key: $key\");\n\n                $values = $record->getValue();\n                $this->logger->info(json_encode($values));\n\n                foreach ($values as $value) {\n                    $this->logger->info(\"Value: $value\");\n                }\n                \n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  11.Python : \nimport base64\n\ndef lambda_handler(event, context):\n    # Iterate through keys\n    for key in event['records']:\n        print('Key:', key)\n        # Iterate through records\n        for record in event['records'][key]:\n            print('Record:', record)\n            # Decode base64\n            msg = base64.b64decode(record['value']).decode('utf-8')\n            print('Message:', msg)\n",
                                    "  12.SDK for Python (Boto3) : \nimport base64\n\ndef lambda_handler(event, context):\n    # Iterate through keys\n    for key in event['records']:\n        print('Key:', key)\n        # Iterate through records\n        for record in event['records'][key]:\n            print('Record:', record)\n            # Decode base64\n            msg = base64.b64decode(record['value']).decode('utf-8')\n            print('Message:', msg)\n",
                                    "  13.Ruby : \nrequire 'base64'\n\ndef lambda_handler(event:, context:)\n  # Iterate through keys\n  event['records'].each do |key, records|\n    puts \"Key: #{key}\"\n\n    # Iterate through records\n    records.each do |record|\n      puts \"Record: #{record}\"\n\n      # Decode base64\n      msg = Base64.decode64(record['value'])\n      puts \"Message: #{msg}\"\n    end\n  end\nend\n",
                                    "  14.SDK for Ruby : \nrequire 'base64'\n\ndef lambda_handler(event:, context:)\n  # Iterate through keys\n  event['records'].each do |key, records|\n    puts \"Key: #{key}\"\n\n    # Iterate through records\n    records.each do |record|\n      puts \"Record: #{record}\"\n\n      # Decode base64\n      msg = Base64.decode64(record['value'])\n      puts \"Message: #{msg}\"\n    end\n  end\nend\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET : using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KafkaEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace MSKLambda;\n\npublic class Function\n{\n    \n    \n    /// <param name=\"input\">The event for the Lambda function handler to process.</param>\n    /// <param name=\"context\">The ILambdaContext that provides methods for logging and describing the Lambda environment.</param>\n    /// <returns></returns>\n    public void FunctionHandler(KafkaEvent evnt, ILambdaContext context)\n    {\n\n        foreach (var record in evnt.Records)\n        {\n            Console.WriteLine(\"Key:\" + record.Key); \n            foreach (var eventRecord in record.Value)\n            {\n                var valueBytes = eventRecord.Value.ToArray();    \n                var valueText = Encoding.UTF8.GetString(valueBytes);\n                \n                Console.WriteLine(\"Message:\" + valueText);\n            }\n        }\n    }\n    \n\n}\n\n",
                                    "You can provide function code to your Lambda using the console.",
                                    "To update function code using the console code editor",
                                    "  1 : Open the Functions page of the Lambda console and select your function.",
                                    "  2 : Select the Code tab.",
                                    "  3 : In the Code source pane, select your source code file and edit it in the integrated code editor.",
                                    "  4 : In the DEPLOY section, choose Deploy to update your function's code:"
                                ]
                            },
                            {
                                "sub_header": "Test your Lambda function to verify it is connected to your Amazon MSK topic",
                                "content": [
                                    "You can now verify whether or not your Lambda is being invoked by the event source by inspecting CloudWatch event logs.",
                                    "To verify whether your Lambda function is being invoked",
                                    "  1 : Use your Kafka admin host to generate Kafka events using the                    kafka-console-producer CLI. For more information, see Write some events into the topic in the Kafka                    documentation. Send enough events to fill up the batch defined by batch size for your event source mapping                    defined in the previous step, or Lambda will wait for more information to invoke.",
                                    "  2 : If your function runs, Lambda writes what happened to CloudWatch. In the console, navigate to your                    Lambda function's detail page.",
                                    "  3 : Select the Configuration tab.",
                                    "  4 : From the sidebar, select Monitoring                    and operations tools.",
                                    "  5 : Identify the CloudWatch log group under                    Logging configuration. The log group should start with                    /aws/lambda. Choose the link to the log group.",
                                    "  6 : In the CloudWatch console, inspect the Log events for the log events Lambda has sent to the log stream.                    Identify if there are log events containing the message from your Kafka event, as in the following image. If there are, you                    have successfully connected a Lambda function to Amazon MSK with a Lambda event source mapping."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "Note",
                    "If you want to send data to a target other than a Lambda function or enrich the data before sending it, see     Amazon EventBridge Pipes.",
                    "Amazon Managed Streaming for Apache Kafka (Amazon MSK) is a    fully managed service that you can use to build and run applications that use Apache Kafka to process streaming data.    Amazon MSK simplifies the setup, scaling, and management of clusters running Kafka. Amazon MSK also makes it easier to    configure your application for multiple Availability Zones and for security with AWS Identity and Access Management (IAM). Amazon MSK supports    multiple open-source versions of Kafka.",
                    "Amazon MSK as an event source operates similarly to using Amazon Simple Queue Service (Amazon SQS) or Amazon Kinesis. Lambda internally polls for    new messages from the event source and then synchronously invokes the target Lambda function. Lambda reads the    messages in batches and provides these to your function as an event payload. The maximum batch size is configurable    (the default is 100 messages). For more information, see    Batching behavior.",
                    "By default, Lambda autoscales the number of event pollers for    your Amazon MSK event source mapping. To optimize the throughput of your Amazon MSK event source mapping, configure    provisioned mode. In provisioned mode, you can define the minimum and maximum number of event pollers allocated    to your event source mapping. This can improve the ability of your event source mapping to handle unexpected    message spikes. For more information, see provisioned mode.",
                    "Warning",
                    "Lambda event source mappings process each event at least once, and duplicate processing of records can occur. To avoid potential issues related to duplicate events, we strongly recommend that you make your function code idempotent. To learn more, see How do I make my Lambda function idempotent in the AWS Knowledge Center.",
                    "For an example of how to configure Amazon MSK as an event source, see Using Amazon MSK as an event source for    AWS Lambda on the AWS Compute Blog. For a complete tutorial, see  Amazon MSK Lambda Integration in the Amazon MSK    Labs.",
                    "Topics",
                    {
                        "sub_header": " Example event",
                        "content": [
                            "Lambda sends the batch of messages in the event parameter when it invokes your function. The event payload      contains an array of messages. Each array item contains details of the Amazon MSK topic and partition identifier,      together with a timestamp and a base64-encoded message.",
                            "{   \"eventSource\":\"aws:kafka\",   \"eventSourceArn\":\"arn:aws:kafka:us-east-1:123456789012:cluster/vpc-2priv-2pub/751d2973-a626-431c-9d4e-d7975eb44dd7-2\",   \"bootstrapServers\":\"b-2.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092,b-1.demo-cluster-1.a1bcde.c1.kafka.us-east-1.amazonaws.com:9092\",   \"records\":{      \"mytopic-0\":[         {            \"topic\":\"mytopic\",            \"partition\":0,            \"offset\":15,            \"timestamp\":1545084650987,            \"timestampType\":\"CREATE_TIME\",            \"key\":\"abcDEFghiJKLmnoPQRstuVWXyz1234==\",            \"value\":\"SGVsbG8sIHRoaXMgaXMgYSB0ZXN0Lg==\",            \"headers\":[               {                  \"headerKey\":[                     104,                     101,                     97,                     100,                     101,                     114,                     86,                     97,                     108,                     117,                     101                  ]               }            ]         }      ]   }}"
                        ]
                    }
                ]
            },
            {
                "title": "RDS",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-rds.html",
                "source": "aws_lamda",
                "parent_content": [
                    "You can connect a Lambda function to an Amazon Relational Database Service (Amazon RDS) database directly and through    an Amazon RDS Proxy. Direct connections are useful in simple scenarios, and proxies are recommended    for production. A database proxy manages a pool of shared database connections which enables    your function to reach high concurrency levels without exhausting database connections.",
                    "We recommend using Amazon RDS Proxy for Lambda functions that make frequent short database    connections, or open and close large numbers of database connections. For more information,    see     Automatically connecting a Lambda function and a DB instance in the Amazon Relational Database Service Developer Guide.",
                    {
                        "sub_header": "Configuring your function to work with RDS resources",
                        "content": [
                            "In the Lambda console, you can provision, and configure, Amazon RDS database instances and      proxy resources. You can do this by navigating to RDS databases under      the Configuration tab. Alternatively, you can also create and configure      connections to Lambda functions in the Amazon RDS console. When configuring an RDS database      instance to use with Lambda, note the following criteria:",
                            "  1.To connect to a database, your function must be in the same Amazon VPC where your          database runs.",
                            "  2.You can use Amazon RDS databases with MySQL, MariaDB, PostgreSQL, or Microsoft SQL Server          engines.",
                            "  3.You can also use Aurora DB clusters with MySQL or PostgreSQL engines.",
                            "  4.You need to provide a Secrets Manager secret for database authentication.",
                            "  5.An IAM role must provide permission to use the secret, and a trust policy must          allow Amazon RDS to assume the role.",
                            "  6.          The IAM principal that uses the console to configure the Amazon RDS resource, and connect          it to your function must have the following permissions:        Note            You need the Amazon RDS Proxy permissions only if you configure an Amazon RDS Proxy to             manage a pool of your database connections.          Example permission policy{  \"Version\": \"2012-10-17\",  \"Statement\": [    {      \"Effect\": \"Allow\",      \"Action\": [        \"ec2:CreateSecurityGroup\",        \"ec2:DescribeSecurityGroups\",        \"ec2:DescribeSubnets\",        \"ec2:DescribeVpcs\",        \"ec2:AuthorizeSecurityGroupIngress\",        \"ec2:AuthorizeSecurityGroupEgress\",        \"ec2:RevokeSecurityGroupEgress\",        \"ec2:CreateNetworkInterface\",        \"ec2:DeleteNetworkInterface\",        \"ec2:DescribeNetworkInterfaces\"      ],      \"Resource\": \"*\"    },    {      \"Effect\": \"Allow\",      \"Action\": [        \"rds-db:connect\",        \"rds:CreateDBProxy\",        \"rds:CreateDBInstance\",        \"rds:CreateDBSubnetGroup\",        \"rds:DescribeDBClusters\",        \"rds:DescribeDBInstances\",        \"rds:DescribeDBSubnetGroups\",        \"rds:DescribeDBProxies\",        \"rds:DescribeDBProxyTargets\",        \"rds:DescribeDBProxyTargetGroups\",        \"rds:RegisterDBProxyTargets\",        \"rds:ModifyDBInstance\",        \"rds:ModifyDBProxy\"      ],      \"Resource\": \"*\"    },    {      \"Effect\": \"Allow\",      \"Action\": [        \"lambda:CreateFunction\",        \"lambda:ListFunctions\",        \"lambda:UpdateFunctionConfiguration\"      ],      \"Resource\": \"*\"    },    {      \"Effect\": \"Allow\",      \"Action\": [        \"iam:AttachRolePolicy\",        \"iam:AttachPolicy\",        \"iam:CreateRole\",        \"iam:CreatePolicy\"      ],      \"Resource\": \"*\"    },    {      \"Effect\": \"Allow\",      \"Action\": [        \"secretsmanager:GetResourcePolicy\",        \"secretsmanager:GetSecretValue\",        \"secretsmanager:DescribeSecret\",        \"secretsmanager:ListSecretVersionIds\",        \"secretsmanager:CreateSecret\"      ],      \"Resource\": \"*\"    }  ]}",
                            {
                                "code_example": "{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:CreateSecurityGroup\",\n        \"ec2:DescribeSecurityGroups\",\n        \"ec2:DescribeSubnets\",\n        \"ec2:DescribeVpcs\",\n        \"ec2:AuthorizeSecurityGroupIngress\",\n        \"ec2:AuthorizeSecurityGroupEgress\",\n        \"ec2:RevokeSecurityGroupEgress\",\n        \"ec2:CreateNetworkInterface\",\n        \"ec2:DeleteNetworkInterface\",\n        \"ec2:DescribeNetworkInterfaces\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"rds-db:connect\",\n        \"rds:CreateDBProxy\",\n        \"rds:CreateDBInstance\",\n        \"rds:CreateDBSubnetGroup\",\n        \"rds:DescribeDBClusters\",\n        \"rds:DescribeDBInstances\",\n        \"rds:DescribeDBSubnetGroups\",\n        \"rds:DescribeDBProxies\",\n        \"rds:DescribeDBProxyTargets\",\n        \"rds:DescribeDBProxyTargetGroups\",\n        \"rds:RegisterDBProxyTargets\",\n        \"rds:ModifyDBInstance\",\n        \"rds:ModifyDBProxy\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"lambda:CreateFunction\",\n        \"lambda:ListFunctions\",\n        \"lambda:UpdateFunctionConfiguration\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:AttachRolePolicy\",\n        \"iam:AttachPolicy\",\n        \"iam:CreateRole\",\n        \"iam:CreatePolicy\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"secretsmanager:GetResourcePolicy\",\n        \"secretsmanager:GetSecretValue\",\n        \"secretsmanager:DescribeSecret\",\n        \"secretsmanager:ListSecretVersionIds\",\n        \"secretsmanager:CreateSecret\"\n      ],\n      \"Resource\": \"*\"\n    }\n  ]\n}\n"
                            },
                            "Amazon RDS charges an hourly rate for proxies based on the database instance size, see      RDS Proxy pricing for details.      For more information on proxy connections in general, see      Using Amazon RDS Proxy in the Amazon RDS User Guide.",
                            "Lambda and Amazon RDS setup",
                            "Both Lambda and Amazon RDS consoles will assist you in automatically configuring some of        the required resources to make a connection between Lambda and Amazon RDS."
                        ]
                    },
                    {
                        "sub_header": "Connecting to an Amazon RDS database in a Lambda function",
                        "content": [
                            "The following code example shows how to implement a Lambda function that connects      to an Amazon RDS database. The function makes a simple database request and returns the result.",
                            "  1.Go : /*\nGolang v2 code here.\n*/\n\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/rds/auth\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype MyEvent struct {\n\tName string `json:\"name\"`\n}\n\nfunc HandleRequest(event *MyEvent) (map[string]interface{}, error) {\n\n\tvar dbName string = os.Getenv(\"DatabaseName\")\n\tvar dbUser string = os.Getenv(\"DatabaseUser\")\n\tvar dbHost string = os.Getenv(\"DBHost\") // Add hostname without https\n\tvar dbPort int = os.Getenv(\"Port\")      // Add port number\n\tvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\n\tvar region string = os.Getenv(\"AWS_REGION\")\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tpanic(\"configuration error: \" + err.Error())\n\t}\n\n\tauthenticationToken, err := auth.BuildAuthToken(\n\t\tcontext.TODO(), dbEndpoint, region, dbUser, cfg.Credentials)\n\tif err != nil {\n\t\tpanic(\"failed to create authentication token: \" + err.Error())\n\t}\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?tls=true&allowCleartextPasswords=true\",\n\t\tdbUser, authenticationToken, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer db.Close()\n\n\tvar sum int\n\terr = db.QueryRow(\"SELECT ?+? AS sum\", 3, 2).Scan(&sum)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts := fmt.Sprint(sum)\n\tmessage := fmt.Sprintf(\"The selected sum is: %s\", s)\n\n\tmessageBytes, err := json.Marshal(message)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmessageString := string(messageBytes)\n\treturn map[string]interface{}{\n\t\t\"statusCode\": 200,\n\t\t\"headers\":    map[string]string{\"Content-Type\": \"application/json\"},\n\t\t\"body\":       messageString,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                            "  2.SDK for Go V2 : /*\nGolang v2 code here.\n*/\n\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/rds/auth\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype MyEvent struct {\n\tName string `json:\"name\"`\n}\n\nfunc HandleRequest(event *MyEvent) (map[string]interface{}, error) {\n\n\tvar dbName string = os.Getenv(\"DatabaseName\")\n\tvar dbUser string = os.Getenv(\"DatabaseUser\")\n\tvar dbHost string = os.Getenv(\"DBHost\") // Add hostname without https\n\tvar dbPort int = os.Getenv(\"Port\")      // Add port number\n\tvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\n\tvar region string = os.Getenv(\"AWS_REGION\")\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tpanic(\"configuration error: \" + err.Error())\n\t}\n\n\tauthenticationToken, err := auth.BuildAuthToken(\n\t\tcontext.TODO(), dbEndpoint, region, dbUser, cfg.Credentials)\n\tif err != nil {\n\t\tpanic(\"failed to create authentication token: \" + err.Error())\n\t}\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?tls=true&allowCleartextPasswords=true\",\n\t\tdbUser, authenticationToken, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer db.Close()\n\n\tvar sum int\n\terr = db.QueryRow(\"SELECT ?+? AS sum\", 3, 2).Scan(&sum)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts := fmt.Sprint(sum)\n\tmessage := fmt.Sprintf(\"The selected sum is: %s\", s)\n\n\tmessageBytes, err := json.Marshal(message)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmessageString := string(messageBytes)\n\treturn map[string]interface{}{\n\t\t\"statusCode\": 200,\n\t\t\"headers\":    map[string]string{\"Content-Type\": \"application/json\"},\n\t\t\"body\":       messageString,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                            "  3.Java : import com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\nimport software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.rdsdata.RdsDataClient;\nimport software.amazon.awssdk.services.rdsdata.model.ExecuteStatementRequest;\nimport software.amazon.awssdk.services.rdsdata.model.ExecuteStatementResponse;\nimport software.amazon.awssdk.services.rdsdata.model.Field;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\npublic class RdsLambdaHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n\n    @Override\n    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context) {\n        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();\n\n        try {\n            // Obtain auth token\n            String token = createAuthToken();\n\n            // Define connection configuration\n            String connectionString = String.format(\"jdbc:mysql://%s:%s/%s?useSSL=true&requireSSL=true\",\n                    System.getenv(\"ProxyHostName\"),\n                    System.getenv(\"Port\"),\n                    System.getenv(\"DBName\"));\n\n            // Establish a connection to the database\n            try (Connection connection = DriverManager.getConnection(connectionString, System.getenv(\"DBUserName\"), token);\n                 PreparedStatement statement = connection.prepareStatement(\"SELECT ? + ? AS sum\")) {\n\n                statement.setInt(1, 3);\n                statement.setInt(2, 2);\n\n                try (ResultSet resultSet = statement.executeQuery()) {\n                    if (resultSet.next()) {\n                        int sum = resultSet.getInt(\"sum\");\n                        response.setStatusCode(200);\n                        response.setBody(\"The selected sum is: \" + sum);\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            response.setStatusCode(500);\n            response.setBody(\"Error: \" + e.getMessage());\n        }\n\n        return response;\n    }\n\n    private String createAuthToken() {\n        // Create RDS Data Service client\n        RdsDataClient rdsDataClient = RdsDataClient.builder()\n                .region(Region.of(System.getenv(\"AWS_REGION\")))\n                .credentialsProvider(DefaultCredentialsProvider.create())\n                .build();\n\n        // Define authentication request\n        ExecuteStatementRequest request = ExecuteStatementRequest.builder()\n                .resourceArn(System.getenv(\"ProxyHostName\"))\n                .secretArn(System.getenv(\"DBUserName\"))\n                .database(System.getenv(\"DBName\"))\n                .sql(\"SELECT 'RDS IAM Authentication'\")\n                .build();\n\n        // Execute request and obtain authentication token\n        ExecuteStatementResponse response = rdsDataClient.executeStatement(request);\n        Field tokenField = response.records().get(0).get(0);\n\n        return tokenField.stringValue();\n    }\n}\n\n",
                            "  4.SDK for Java 2.x : import com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\nimport software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.rdsdata.RdsDataClient;\nimport software.amazon.awssdk.services.rdsdata.model.ExecuteStatementRequest;\nimport software.amazon.awssdk.services.rdsdata.model.ExecuteStatementResponse;\nimport software.amazon.awssdk.services.rdsdata.model.Field;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\npublic class RdsLambdaHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n\n    @Override\n    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context) {\n        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();\n\n        try {\n            // Obtain auth token\n            String token = createAuthToken();\n\n            // Define connection configuration\n            String connectionString = String.format(\"jdbc:mysql://%s:%s/%s?useSSL=true&requireSSL=true\",\n                    System.getenv(\"ProxyHostName\"),\n                    System.getenv(\"Port\"),\n                    System.getenv(\"DBName\"));\n\n            // Establish a connection to the database\n            try (Connection connection = DriverManager.getConnection(connectionString, System.getenv(\"DBUserName\"), token);\n                 PreparedStatement statement = connection.prepareStatement(\"SELECT ? + ? AS sum\")) {\n\n                statement.setInt(1, 3);\n                statement.setInt(2, 2);\n\n                try (ResultSet resultSet = statement.executeQuery()) {\n                    if (resultSet.next()) {\n                        int sum = resultSet.getInt(\"sum\");\n                        response.setStatusCode(200);\n                        response.setBody(\"The selected sum is: \" + sum);\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            response.setStatusCode(500);\n            response.setBody(\"Error: \" + e.getMessage());\n        }\n\n        return response;\n    }\n\n    private String createAuthToken() {\n        // Create RDS Data Service client\n        RdsDataClient rdsDataClient = RdsDataClient.builder()\n                .region(Region.of(System.getenv(\"AWS_REGION\")))\n                .credentialsProvider(DefaultCredentialsProvider.create())\n                .build();\n\n        // Define authentication request\n        ExecuteStatementRequest request = ExecuteStatementRequest.builder()\n                .resourceArn(System.getenv(\"ProxyHostName\"))\n                .secretArn(System.getenv(\"DBUserName\"))\n                .database(System.getenv(\"DBName\"))\n                .sql(\"SELECT 'RDS IAM Authentication'\")\n                .build();\n\n        // Execute request and obtain authentication token\n        ExecuteStatementResponse response = rdsDataClient.executeStatement(request);\n        Field tokenField = response.records().get(0).get(0);\n\n        return tokenField.stringValue();\n    }\n}\n\n",
                            "  5.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/* \nNode.js code here.\n*/\n// ES6+ example\nimport { Signer } from \"@aws-sdk/rds-signer\";\nimport mysql from 'mysql2/promise';\n\nasync function createAuthToken() {\n  // Define connection authentication parameters\n  const dbinfo = {\n\n    hostname: process.env.ProxyHostName,\n    port: process.env.Port,\n    username: process.env.DBUserName,\n    region: process.env.AWS_REGION,\n\n  }\n\n  // Create RDS Signer object\n  const signer = new Signer(dbinfo);\n\n  // Request authorization token from RDS, specifying the username\n  const token = await signer.getAuthToken();\n  return token;\n}\n\nasync function dbOps() {\n\n  // Obtain auth token\n  const token = await createAuthToken();\n  // Define connection configuration\n  let connectionConfig = {\n    host: process.env.ProxyHostName,\n    user: process.env.DBUserName,\n    password: token,\n    database: process.env.DBName,\n    ssl: 'Amazon RDS'\n  }\n  // Create the connection to the DB\n  const conn = await mysql.createConnection(connectionConfig);\n  // Obtain the result of the query\n  const [res,] = await conn.execute('select ?+? as sum', [3, 2]);\n  return res;\n\n}\n\nexport const handler = async (event) => {\n  // Execute database flow\n  const result = await dbOps();\n  // Return result\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\"The selected sum is: \" + result[0].sum)\n  }\n};\n\n",
                            "  6.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/* \nNode.js code here.\n*/\n// ES6+ example\nimport { Signer } from \"@aws-sdk/rds-signer\";\nimport mysql from 'mysql2/promise';\n\nasync function createAuthToken() {\n  // Define connection authentication parameters\n  const dbinfo = {\n\n    hostname: process.env.ProxyHostName,\n    port: process.env.Port,\n    username: process.env.DBUserName,\n    region: process.env.AWS_REGION,\n\n  }\n\n  // Create RDS Signer object\n  const signer = new Signer(dbinfo);\n\n  // Request authorization token from RDS, specifying the username\n  const token = await signer.getAuthToken();\n  return token;\n}\n\nasync function dbOps() {\n\n  // Obtain auth token\n  const token = await createAuthToken();\n  // Define connection configuration\n  let connectionConfig = {\n    host: process.env.ProxyHostName,\n    user: process.env.DBUserName,\n    password: token,\n    database: process.env.DBName,\n    ssl: 'Amazon RDS'\n  }\n  // Create the connection to the DB\n  const conn = await mysql.createConnection(connectionConfig);\n  // Obtain the result of the query\n  const [res,] = await conn.execute('select ?+? as sum', [3, 2]);\n  return res;\n\n}\n\nexport const handler = async (event) => {\n  // Execute database flow\n  const result = await dbOps();\n  // Return result\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\"The selected sum is: \" + result[0].sum)\n  }\n};\n\n",
                            "  7.PHP : <?php\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\nuse Aws\\Rds\\AuthTokenGenerator;\nuse Aws\\Credentials\\CredentialProvider;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n\n    private function getAuthToken(): string {\n        // Define connection authentication parameters\n        $dbConnection = [\n            'hostname' => getenv('DB_HOSTNAME'),\n            'port' => getenv('DB_PORT'),\n            'username' => getenv('DB_USERNAME'),\n            'region' => getenv('AWS_REGION'),\n        ];\n\n        // Create RDS AuthTokenGenerator object\n        $generator = new AuthTokenGenerator(CredentialProvider::defaultProvider());\n\n        // Request authorization token from RDS, specifying the username\n        return $generator->createToken(\n            $dbConnection['hostname'] . ':' . $dbConnection['port'],\n            $dbConnection['region'],\n            $dbConnection['username']\n        );\n    }\n\n    private function getQueryResults() {\n        // Obtain auth token\n        $token = $this->getAuthToken();\n\n        // Define connection configuration\n        $connectionConfig = [\n            'host' => getenv('DB_HOSTNAME'),\n            'user' => getenv('DB_USERNAME'),\n            'password' => $token,\n            'database' => getenv('DB_NAME'),\n        ];\n\n        // Create the connection to the DB\n        $conn = new PDO(\n            \"mysql:host={$connectionConfig['host']};dbname={$connectionConfig['database']}\",\n            $connectionConfig['user'],\n            $connectionConfig['password'],\n            [\n                PDO::MYSQL_ATTR_SSL_CA => '/path/to/rds-ca-2019-root.pem',\n                PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT => true,\n            ]\n        );\n\n        // Obtain the result of the query\n        $stmt = $conn->prepare('SELECT ?+? AS sum');\n        $stmt->execute([3, 2]);\n\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * @param mixed $event\n     * @param Context $context\n     * @return array\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $this->logger->info(\"Processing query\");\n\n        // Execute database flow\n        $result = $this->getQueryResults();\n\n        return [\n            'sum' => $result['sum']\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n",
                            "  8.SDK for PHP : <?php\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\nuse Aws\\Rds\\AuthTokenGenerator;\nuse Aws\\Credentials\\CredentialProvider;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n\n    private function getAuthToken(): string {\n        // Define connection authentication parameters\n        $dbConnection = [\n            'hostname' => getenv('DB_HOSTNAME'),\n            'port' => getenv('DB_PORT'),\n            'username' => getenv('DB_USERNAME'),\n            'region' => getenv('AWS_REGION'),\n        ];\n\n        // Create RDS AuthTokenGenerator object\n        $generator = new AuthTokenGenerator(CredentialProvider::defaultProvider());\n\n        // Request authorization token from RDS, specifying the username\n        return $generator->createToken(\n            $dbConnection['hostname'] . ':' . $dbConnection['port'],\n            $dbConnection['region'],\n            $dbConnection['username']\n        );\n    }\n\n    private function getQueryResults() {\n        // Obtain auth token\n        $token = $this->getAuthToken();\n\n        // Define connection configuration\n        $connectionConfig = [\n            'host' => getenv('DB_HOSTNAME'),\n            'user' => getenv('DB_USERNAME'),\n            'password' => $token,\n            'database' => getenv('DB_NAME'),\n        ];\n\n        // Create the connection to the DB\n        $conn = new PDO(\n            \"mysql:host={$connectionConfig['host']};dbname={$connectionConfig['database']}\",\n            $connectionConfig['user'],\n            $connectionConfig['password'],\n            [\n                PDO::MYSQL_ATTR_SSL_CA => '/path/to/rds-ca-2019-root.pem',\n                PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT => true,\n            ]\n        );\n\n        // Obtain the result of the query\n        $stmt = $conn->prepare('SELECT ?+? AS sum');\n        $stmt->execute([3, 2]);\n\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * @param mixed $event\n     * @param Context $context\n     * @return array\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $this->logger->info(\"Processing query\");\n\n        // Execute database flow\n        $result = $this->getQueryResults();\n\n        return [\n            'sum' => $result['sum']\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n",
                            "  9.Python : import json\nimport os\nimport boto3\nimport pymysql\n\n# RDS settings\nproxy_host_name = os.environ['PROXY_HOST_NAME']\nport = int(os.environ['PORT'])\ndb_name = os.environ['DB_NAME']\ndb_user_name = os.environ['DB_USER_NAME']\naws_region = os.environ['AWS_REGION']\n\n\n# Fetch RDS Auth Token\ndef get_auth_token():\n    client = boto3.client('rds')\n    token = client.generate_db_auth_token(\n        DBHostname=proxy_host_name,\n        Port=port\n        DBUsername=db_user_name\n        Region=aws_region\n    )\n    return token\n\ndef lambda_handler(event, context):\n    token = get_auth_token()\n    try:\n        connection = pymysql.connect(\n            host=proxy_host_name,\n            user=db_user_name,\n            password=token,\n            db=db_name,\n            port=port,\n            ssl={'ca': 'Amazon RDS'}  # Ensure you have the CA bundle for SSL connection\n        )\n        \n        with connection.cursor() as cursor:\n            cursor.execute('SELECT %s + %s AS sum', (3, 2))\n            result = cursor.fetchone()\n\n        return result\n        \n    except Exception as e:\n        return (f\"Error: {str(e)}\")  # Return an error message if an exception occurs \n    \n",
                            "  10.SDK for Python (Boto3) : import json\nimport os\nimport boto3\nimport pymysql\n\n# RDS settings\nproxy_host_name = os.environ['PROXY_HOST_NAME']\nport = int(os.environ['PORT'])\ndb_name = os.environ['DB_NAME']\ndb_user_name = os.environ['DB_USER_NAME']\naws_region = os.environ['AWS_REGION']\n\n\n# Fetch RDS Auth Token\ndef get_auth_token():\n    client = boto3.client('rds')\n    token = client.generate_db_auth_token(\n        DBHostname=proxy_host_name,\n        Port=port\n        DBUsername=db_user_name\n        Region=aws_region\n    )\n    return token\n\ndef lambda_handler(event, context):\n    token = get_auth_token()\n    try:\n        connection = pymysql.connect(\n            host=proxy_host_name,\n            user=db_user_name,\n            password=token,\n            db=db_name,\n            port=port,\n            ssl={'ca': 'Amazon RDS'}  # Ensure you have the CA bundle for SSL connection\n        )\n        \n        with connection.cursor() as cursor:\n            cursor.execute('SELECT %s + %s AS sum', (3, 2))\n            result = cursor.fetchone()\n\n        return result\n        \n    except Exception as e:\n        return (f\"Error: {str(e)}\")  # Return an error message if an exception occurs \n    \n",
                            "  11.Ruby : # Ruby code here.\n\nrequire 'aws-sdk-rds'\nrequire 'json'\nrequire 'mysql2'\n\ndef lambda_handler(event:, context:)\n  endpoint = ENV['DBEndpoint'] # Add the endpoint without https\"\n  port = ENV['Port']           # 3306\n  user = ENV['DBUser']\n  region = ENV['DBRegion']     # 'us-east-1'\n  db_name = ENV['DBName']\n\n  credentials = Aws::Credentials.new(\n    ENV['AWS_ACCESS_KEY_ID'],\n    ENV['AWS_SECRET_ACCESS_KEY'],\n    ENV['AWS_SESSION_TOKEN']\n  )\n  rds_client = Aws::RDS::AuthTokenGenerator.new(\n    region: region, \n    credentials: credentials\n  )\n\n  token = rds_client.auth_token(\n    endpoint: endpoint+ ':' + port,\n    user_name: user,\n    region: region\n  )\n\n  begin\n    conn = Mysql2::Client.new(\n      host: endpoint,\n      username: user,\n      password: token,\n      port: port,\n      database: db_name,\n      sslca: '/var/task/global-bundle.pem', \n      sslverify: true,\n      enable_cleartext_plugin: true\n    )\n    a = 3\n    b = 2\n    result = conn.query(\"SELECT #{a} + #{b} AS sum\").first['sum']\n    puts result\n    conn.close\n    {\n      statusCode: 200,\n      body: result.to_json\n    }\n  rescue => e\n    puts \"Database connection failed due to #{e}\"\n  end\nend\n",
                            "  12.SDK for Ruby : # Ruby code here.\n\nrequire 'aws-sdk-rds'\nrequire 'json'\nrequire 'mysql2'\n\ndef lambda_handler(event:, context:)\n  endpoint = ENV['DBEndpoint'] # Add the endpoint without https\"\n  port = ENV['Port']           # 3306\n  user = ENV['DBUser']\n  region = ENV['DBRegion']     # 'us-east-1'\n  db_name = ENV['DBName']\n\n  credentials = Aws::Credentials.new(\n    ENV['AWS_ACCESS_KEY_ID'],\n    ENV['AWS_SECRET_ACCESS_KEY'],\n    ENV['AWS_SESSION_TOKEN']\n  )\n  rds_client = Aws::RDS::AuthTokenGenerator.new(\n    region: region, \n    credentials: credentials\n  )\n\n  token = rds_client.auth_token(\n    endpoint: endpoint+ ':' + port,\n    user_name: user,\n    region: region\n  )\n\n  begin\n    conn = Mysql2::Client.new(\n      host: endpoint,\n      username: user,\n      password: token,\n      port: port,\n      database: db_name,\n      sslca: '/var/task/global-bundle.pem', \n      sslverify: true,\n      enable_cleartext_plugin: true\n    )\n    a = 3\n    b = 2\n    result = conn.query(\"SELECT #{a} + #{b} AS sum\").first['sum']\n    puts result\n    conn.close\n    {\n      statusCode: 200,\n      body: result.to_json\n    }\n  rescue => e\n    puts \"Database connection failed due to #{e}\"\n  end\nend\n",
                            "  13.Rust : use aws_config::BehaviorVersion;\nuse aws_credential_types::provider::ProvideCredentials;\nuse aws_sigv4::{\n    http_request::{sign, SignableBody, SignableRequest, SigningSettings},\n    sign::v4,\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse serde_json::{json, Value};\nuse sqlx::postgres::PgConnectOptions;\nuse std::env;\nuse std::time::{Duration, SystemTime};\n\nconst RDS_CERTS: &[u8] = include_bytes!(\"global-bundle.pem\");\n\nasync fn generate_rds_iam_token(\n    db_hostname: &str,\n    port: u16,\n    db_username: &str,\n) -> Result<String, Error> {\n    let config = aws_config::load_defaults(BehaviorVersion::v2024_03_28()).await;\n\n    let credentials = config\n        .credentials_provider()\n        .expect(\"no credentials provider found\")\n        .provide_credentials()\n        .await\n        .expect(\"unable to load credentials\");\n    let identity = credentials.into();\n    let region = config.region().unwrap().to_string();\n\n    let mut signing_settings = SigningSettings::default();\n    signing_settings.expires_in = Some(Duration::from_secs(900));\n    signing_settings.signature_location = aws_sigv4::http_request::SignatureLocation::QueryParams;\n\n    let signing_params = v4::SigningParams::builder()\n        .identity(&identity)\n        .region(&region)\n        .name(\"rds-db\")\n        .time(SystemTime::now())\n        .settings(signing_settings)\n        .build()?;\n\n    let url = format!(\n        \"https://{db_hostname}:{port}/?Action=connect&DBUser={db_user}\",\n        db_hostname = db_hostname,\n        port = port,\n        db_user = db_username\n    );\n\n    let signable_request =\n        SignableRequest::new(\"GET\", &url, std::iter::empty(), SignableBody::Bytes(&[]))\n            .expect(\"signable request\");\n\n    let (signing_instructions, _signature) =\n        sign(signable_request, &signing_params.into())?.into_parts();\n\n    let mut url = url::Url::parse(&url).unwrap();\n    for (name, value) in signing_instructions.params() {\n        url.query_pairs_mut().append_pair(name, &value);\n    }\n\n    let response = url.to_string().split_off(\"https://\".len());\n\n    Ok(response)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    run(service_fn(handler)).await\n}\n\nasync fn handler(_event: LambdaEvent<Value>) -> Result<Value, Error> {\n    let db_host = env::var(\"DB_HOSTNAME\").expect(\"DB_HOSTNAME must be set\");\n    let db_port = env::var(\"DB_PORT\")\n        .expect(\"DB_PORT must be set\")\n        .parse::<u16>()\n        .expect(\"PORT must be a valid number\");\n    let db_name = env::var(\"DB_NAME\").expect(\"DB_NAME must be set\");\n    let db_user_name = env::var(\"DB_USERNAME\").expect(\"DB_USERNAME must be set\");\n\n    let token = generate_rds_iam_token(&db_host, db_port, &db_user_name).await?;\n\n    let opts = PgConnectOptions::new()\n        .host(&db_host)\n        .port(db_port)\n        .username(&db_user_name)\n        .password(&token)\n        .database(&db_name)\n        .ssl_root_cert_from_pem(RDS_CERTS.to_vec())\n        .ssl_mode(sqlx::postgres::PgSslMode::Require);\n\n    let pool = sqlx::postgres::PgPoolOptions::new()\n        .connect_with(opts)\n        .await?;\n\n    let result: i32 = sqlx::query_scalar(\"SELECT $1 + $2\")\n        .bind(3)\n        .bind(2)\n        .fetch_one(&pool)\n        .await?;\n\n    println!(\"Result: {:?}\", result);\n\n    Ok(json!({\n        \"statusCode\": 200,\n        \"content-type\": \"text/plain\",\n        \"body\": format!(\"The selected sum is: {result}\")\n    }))\n}\n\n",
                            "  14.SDK for Rust : use aws_config::BehaviorVersion;\nuse aws_credential_types::provider::ProvideCredentials;\nuse aws_sigv4::{\n    http_request::{sign, SignableBody, SignableRequest, SigningSettings},\n    sign::v4,\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse serde_json::{json, Value};\nuse sqlx::postgres::PgConnectOptions;\nuse std::env;\nuse std::time::{Duration, SystemTime};\n\nconst RDS_CERTS: &[u8] = include_bytes!(\"global-bundle.pem\");\n\nasync fn generate_rds_iam_token(\n    db_hostname: &str,\n    port: u16,\n    db_username: &str,\n) -> Result<String, Error> {\n    let config = aws_config::load_defaults(BehaviorVersion::v2024_03_28()).await;\n\n    let credentials = config\n        .credentials_provider()\n        .expect(\"no credentials provider found\")\n        .provide_credentials()\n        .await\n        .expect(\"unable to load credentials\");\n    let identity = credentials.into();\n    let region = config.region().unwrap().to_string();\n\n    let mut signing_settings = SigningSettings::default();\n    signing_settings.expires_in = Some(Duration::from_secs(900));\n    signing_settings.signature_location = aws_sigv4::http_request::SignatureLocation::QueryParams;\n\n    let signing_params = v4::SigningParams::builder()\n        .identity(&identity)\n        .region(&region)\n        .name(\"rds-db\")\n        .time(SystemTime::now())\n        .settings(signing_settings)\n        .build()?;\n\n    let url = format!(\n        \"https://{db_hostname}:{port}/?Action=connect&DBUser={db_user}\",\n        db_hostname = db_hostname,\n        port = port,\n        db_user = db_username\n    );\n\n    let signable_request =\n        SignableRequest::new(\"GET\", &url, std::iter::empty(), SignableBody::Bytes(&[]))\n            .expect(\"signable request\");\n\n    let (signing_instructions, _signature) =\n        sign(signable_request, &signing_params.into())?.into_parts();\n\n    let mut url = url::Url::parse(&url).unwrap();\n    for (name, value) in signing_instructions.params() {\n        url.query_pairs_mut().append_pair(name, &value);\n    }\n\n    let response = url.to_string().split_off(\"https://\".len());\n\n    Ok(response)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    run(service_fn(handler)).await\n}\n\nasync fn handler(_event: LambdaEvent<Value>) -> Result<Value, Error> {\n    let db_host = env::var(\"DB_HOSTNAME\").expect(\"DB_HOSTNAME must be set\");\n    let db_port = env::var(\"DB_PORT\")\n        .expect(\"DB_PORT must be set\")\n        .parse::<u16>()\n        .expect(\"PORT must be a valid number\");\n    let db_name = env::var(\"DB_NAME\").expect(\"DB_NAME must be set\");\n    let db_user_name = env::var(\"DB_USERNAME\").expect(\"DB_USERNAME must be set\");\n\n    let token = generate_rds_iam_token(&db_host, db_port, &db_user_name).await?;\n\n    let opts = PgConnectOptions::new()\n        .host(&db_host)\n        .port(db_port)\n        .username(&db_user_name)\n        .password(&token)\n        .database(&db_name)\n        .ssl_root_cert_from_pem(RDS_CERTS.to_vec())\n        .ssl_mode(sqlx::postgres::PgSslMode::Require);\n\n    let pool = sqlx::postgres::PgPoolOptions::new()\n        .connect_with(opts)\n        .await?;\n\n    let result: i32 = sqlx::query_scalar(\"SELECT $1 + $2\")\n        .bind(3)\n        .bind(2)\n        .fetch_one(&pool)\n        .await?;\n\n    println!(\"Result: {:?}\", result);\n\n    Ok(json!({\n        \"statusCode\": 200,\n        \"content-type\": \"text/plain\",\n        \"body\": format!(\"The selected sum is: {result}\")\n    }))\n}\n\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.SDK for Go V2 : /*\nGolang v2 code here.\n*/\n\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/rds/auth\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype MyEvent struct {\n\tName string `json:\"name\"`\n}\n\nfunc HandleRequest(event *MyEvent) (map[string]interface{}, error) {\n\n\tvar dbName string = os.Getenv(\"DatabaseName\")\n\tvar dbUser string = os.Getenv(\"DatabaseUser\")\n\tvar dbHost string = os.Getenv(\"DBHost\") // Add hostname without https\n\tvar dbPort int = os.Getenv(\"Port\")      // Add port number\n\tvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\n\tvar region string = os.Getenv(\"AWS_REGION\")\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tpanic(\"configuration error: \" + err.Error())\n\t}\n\n\tauthenticationToken, err := auth.BuildAuthToken(\n\t\tcontext.TODO(), dbEndpoint, region, dbUser, cfg.Credentials)\n\tif err != nil {\n\t\tpanic(\"failed to create authentication token: \" + err.Error())\n\t}\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?tls=true&allowCleartextPasswords=true\",\n\t\tdbUser, authenticationToken, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer db.Close()\n\n\tvar sum int\n\terr = db.QueryRow(\"SELECT ?+? AS sum\", 3, 2).Scan(&sum)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts := fmt.Sprint(sum)\n\tmessage := fmt.Sprintf(\"The selected sum is: %s\", s)\n\n\tmessageBytes, err := json.Marshal(message)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmessageString := string(messageBytes)\n\treturn map[string]interface{}{\n\t\t\"statusCode\": 200,\n\t\t\"headers\":    map[string]string{\"Content-Type\": \"application/json\"},\n\t\t\"body\":       messageString,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n"
                        ]
                    },
                    {
                        "sub_header": "Processing event notifications from Amazon RDS",
                        "content": [
                            "You can use Lambda to process event notifications from an Amazon RDS database. Amazon RDS sends      notifications to an Amazon Simple Notification Service (Amazon SNS) topic, which you can configure to invoke a Lambda function.      Amazon SNS wraps the message from Amazon RDS in its own event document and sends it to your function.",
                            "For more information about configuring an Amazon RDS database to send notifications, see      Using Amazon RDS      event notifications.    ",
                            "Example Amazon RDS message in an Amazon SNS event",
                            {
                                "code_example": "{\n        \"Records\": [\n          {\n            \"EventVersion\": \"1.0\",\n            \"EventSubscriptionArn\": \"arn:aws:sns:us-east-2:123456789012:rds-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\",\n            \"EventSource\": \"aws:sns\",\n            \"Sns\": {\n              \"SignatureVersion\": \"1\",\n              \"Timestamp\": \"2023-01-02T12:45:07.000Z\",\n              \"Signature\": \"tcc6faL2yUC6dgZdmrwh1Y4cGa/ebXEkAi6RibDsvpi+tE/1+82j...65r==\",\n              \"SigningCertUrl\": \"https://sns.us-east-2.amazonaws.com/SimpleNotificationService-ac565b8b1a6c5d002d285f9598aa1d9b.pem\",\n              \"MessageId\": \"95df01b4-ee98-5cb9-9903-4c221d41eb5e\",\n              \"Message\": \"{\\\"Event Source\\\":\\\"db-instance\\\",\\\"Event Time\\\":\\\"2023-01-02 12:45:06.000\\\",\\\"Identifier Link\\\":\\\"https://console.aws.amazon.com/rds/home?region=eu-west-1#dbinstance:id=dbinstanceid\\\",\\\"Source ID\\\":\\\"dbinstanceid\\\",\\\"Event ID\\\":\\\"http://docs.amazonwebservices.com/AmazonRDS/latest/UserGuide/USER_Events.html#RDS-EVENT-0002\\\",\\\"Event Message\\\":\\\"Finished DB Instance backup\\\"}\",\n              \"MessageAttributes\": {},\n              \"Type\": \"Notification\",\n              \"UnsubscribeUrl\": \"https://sns.us-east-2.amazonaws.com/?Action=Unsubscribe&amp;SubscriptionArn=arn:aws:sns:us-east-2:123456789012:test-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\",\n              \"TopicArn\":\"arn:aws:sns:us-east-2:123456789012:sns-lambda\",\n              \"Subject\": \"RDS Notification Message\"\n            }\n          }\n        ]\n      }"
                            }
                        ]
                    },
                    {
                        "sub_header": "Complete Lambda and Amazon RDS tutorial",
                        "content": [
                            "  1.          Using a Lambda function to access an Amazon RDS database –          From the Amazon RDS User Guide, learn how to use a Lambda function to write data to an Amazon RDS          database through an Amazon RDS Proxy. Your Lambda function will read records from an Amazon SQS          queue and write new items to a table in your database whenever a message is added."
                        ]
                    }
                ]
            },
            {
                "title": "S3",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-s3.html",
                "contents": [
                    {
                        "title": "Tutorial: Use an S3 trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "In this tutorial, you use the console to create a Lambda function and configure a trigger for an Amazon Simple Storage Service (Amazon S3) bucket. Every time that you     add an object to your Amazon S3 bucket, your function runs and outputs the object type to Amazon CloudWatch Logs.",
                            "This tutorial demonstrates how to:",
                            "  1 : Create an Amazon S3 bucket.",
                            "  2 : Create a Lambda function that returns the object type of objects in an Amazon S3 bucket.",
                            "  3 : Configure a Lambda trigger that invokes your function when objects are uploaded to your bucket.",
                            "  4 : Test your function, first with a dummy event, and then using the trigger.",
                            "By completing these steps, you’ll learn how to configure a Lambda function to run whenever objects are added to or deleted from an     Amazon S3 bucket. You can complete this tutorial using only the AWS Management Console.",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "Sign up for an AWS account",
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "Create a user with administrative access",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide."
                                ]
                            },
                            {
                                "sub_header": "Create an Amazon S3 bucket",
                                "content": [
                                    "To create an Amazon S3 bucket",
                                    "  1 : Open the Amazon S3 console and select the Buckets page.",
                                    "  2 : Choose Create bucket.",
                                    "  3 : Under General configuration, do the following:For Bucket name, enter a globally unique name that meets the Amazon S3 Bucket naming rules.               Bucket names can contain only lower case letters, numbers, dots (.), and hyphens (-).For AWS Region, choose a Region. Later in the tutorial, you must create your Lambda function in the same Region.",
                                    "  4 : Leave all other options set to their default values and choose Create bucket."
                                ]
                            },
                            {
                                "sub_header": "Upload a test object to your bucket",
                                "content": [
                                    "To upload a test object",
                                    "  1 : Open the Buckets page of the Amazon S3 console and choose the bucket you created during the           previous step.",
                                    "  2 : Choose Upload.",
                                    "  3 : Choose Add files and select the object that you want to upload. You can select any file (for example, HappyFace.jpg).",
                                    "  4 : Choose Open, then choose Upload.",
                                    "Later in the tutorial, you’ll test your Lambda function using this object."
                                ]
                            },
                            {
                                "sub_header": "Create a permissions policy",
                                "content": [
                                    "Create a permissions policy that allows Lambda to get objects from an Amazon S3 bucket and to write to Amazon CloudWatch Logs. ",
                                    "To create the policy",
                                    "  1 : Open the Policies page of the IAM console.",
                                    "  2 : Choose Create Policy.",
                                    " 3 : Choose the JSON tab, and then paste the following custom policy into the JSON          editor. ",
                                    {
                                        "code_example": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:PutLogEvents\",\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\"\n            ],\n            \"Resource\": \"arn:aws:logs:*:*:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::*/*\"\n        }\n    ]\n}"
                                    },
                                    "  4 : Choose Next: Tags.",
                                    "  5 : Choose Next: Review.",
                                    "  6 : Under Review policy, for the policy Name, enter          s3-trigger-tutorial.",
                                    "  7 : Choose Create policy."
                                ]
                            },
                            {
                                "sub_header": "Create an execution role",
                                "content": [
                                    "An execution role is an AWS Identity and Access Management (IAM) role that grants a Lambda function permission to access AWS services and resources. In this step, create an execution role using the permissions policy that you created in the previous step.",
                                    "To create an execution role and attach your custom permissions policy",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Choose Create role.",
                                    "  3 : For the type of trusted entity, choose AWS service, then for the use case, choose Lambda.",
                                    "  4 : Choose Next.",
                                    "  5 : In the policy search box, enter s3-trigger-tutorial.",
                                    "  6 : In the search results, select the policy that you created (s3-trigger-tutorial), and          then choose Next.",
                                    "  7 : Under Role details, for the Role name, enter          lambda-s3-trigger-role, then choose Create role."
                                ]
                            },
                            {
                                "sub_header": "Create the Lambda function",
                                "content": [
                                    "Create a Lambda function in the console using the Python 3.12 runtime.",
                                    "To create the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Make sure you're working in the same AWS Region you created your Amazon S3 bucket in. You can change your Region using the drop-down list         at the top of the screen.",
                                    "  3 : Choose Create function.",
                                    "  4 : Choose Author from scratch",
                                    "  5 : Under Basic information, do the following:For Function name, enter s3-trigger-tutorialFor Runtime, choose Python 3.12.For Architecture, choose x86_64.",
                                    "  6 : In the Change default execution role tab, do the following:Expand the tab, then choose Use an existing role.Select the lambda-s3-trigger-role you created earlier.",
                                    "  7 : Choose Create function."
                                ]
                            },
                            {
                                "sub_header": "Deploy the function code",
                                "content": [
                                    "This tutorial uses the Python 3.12 runtime, but we’ve also provided example code files for other runtimes. You can select the       tab in the following box to see the code for the runtime you’re interested in.",
                                    "The Lambda function retrieves the key name of the uploaded object and the name of the bucket from the event parameter it receives       from Amazon S3. The function then uses the get_object  method from the AWS SDK for Python (Boto3) to retrieve the object's metadata, including the content type (MIME type) of the uploaded object.",
                                    "To deploy the function code",
                                    " 1 : Choose the Python tab in the following box and copy the code..NETAWS SDK for .NETNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using .NET. GoSDK for Go V2Note        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using Go.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0package mainimport (\t\"context\"\t\"log\"\t\"github.com/aws/aws-lambda-go/events\"\t\"github.com/aws/aws-lambda-go/lambda\"\t\"github.com/aws/aws-sdk-go-v2/config\"\t\"github.com/aws/aws-sdk-go-v2/service/s3\")func handler(ctx context.Context, s3Event events.S3Event) error {\tsdkConfig, err := config.LoadDefaultConfig(ctx)\tif err != nil {\t\tlog.Printf(\"failed to load default config: %s\", err)\t\treturn err\t}\ts3Client := s3.NewFromConfig(sdkConfig)\tfor _, record := range s3Event.Records {\t\tbucket := record.S3.Bucket.Name\t\tkey := record.S3.Object.URLDecodedKey\t\theadOutput, err := s3Client.HeadObject(ctx, &s3.HeadObjectInput{\t\t\tBucket: &bucket,\t\t\tKey:    &key,\t\t})\t\tif err != nil {\t\t\tlog.Printf(\"error getting head of object %s/%s: %s\", bucket, key, err)\t\t\treturn err\t\t}\t\tlog.Printf(\"successfully retrieved %s/%s of type %s\", bucket, key, *headOutput.ContentType)\t}\treturn nil}func main() {\tlambda.Start(handler)}JavaSDK for Java 2.xNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using Java.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0package example;import software.amazon.awssdk.services.s3.model.HeadObjectRequest;import software.amazon.awssdk.services.s3.model.HeadObjectResponse;import software.amazon.awssdk.services.s3.S3Client;import com.amazonaws.services.lambda.runtime.Context;import com.amazonaws.services.lambda.runtime.RequestHandler;import com.amazonaws.services.lambda.runtime.events.S3Event;import com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification.S3EventNotificationRecord;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class Handler implements RequestHandler<S3Event, String> {    private static final Logger logger = LoggerFactory.getLogger(Handler.class);    @Override    public String handleRequest(S3Event s3event, Context context) {        try {          S3EventNotificationRecord record = s3event.getRecords().get(0);          String srcBucket = record.getS3().getBucket().getName();          String srcKey = record.getS3().getObject().getUrlDecodedKey();          S3Client s3Client = S3Client.builder().build();          HeadObjectResponse headObject = getHeadObject(s3Client, srcBucket, srcKey);          logger.info(\"Successfully retrieved \" + srcBucket + \"/\" + srcKey + \" of type \" + headObject.contentType());          return \"Ok\";        } catch (Exception e) {          throw new RuntimeException(e);        }    }    private HeadObjectResponse getHeadObject(S3Client s3Client, String bucket, String key) {        HeadObjectRequest headObjectRequest = HeadObjectRequest.builder()                .bucket(bucket)                .key(key)                .build();        return s3Client.headObject(headObjectRequest);    }}JavaScriptSDK for JavaScript (v3)Note        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using JavaScript.import { S3Client, HeadObjectCommand } from \"@aws-sdk/client-s3\";const client = new S3Client();export const handler = async (event, context) => {    // Get the object from the event and show its content type    const bucket = event.Records[0].s3.bucket.name;    const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, ' '));    try {        const { ContentType } = await client.send(new HeadObjectCommand({            Bucket: bucket,            Key: key,        }));        console.log('CONTENT TYPE:', ContentType);        return ContentType;    } catch (err) {        console.log(err);        const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;        console.log(message);        throw new Error(message);    }};Consuming an S3 event with Lambda using TypeScript.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0import { S3Event } from 'aws-lambda';import { S3Client, HeadObjectCommand } from '@aws-sdk/client-s3';const s3 = new S3Client({ region: process.env.AWS_REGION });export const handler = async (event: S3Event): Promise<string | undefined> => {  // Get the object from the event and show its content type  const bucket = event.Records[0].s3.bucket.name;  const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, ' '));  const params = {    Bucket: bucket,    Key: key,  };  try {    const { ContentType } = await s3.send(new HeadObjectCommand(params));    console.log('CONTENT TYPE:', ContentType);    return ContentType;  } catch (err) {    console.log(err);    const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;    console.log(message);    throw new Error(message);  }};PHPSDK for PHPNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using PHP.<?phpuse Bref\\Context\\Context;use Bref\\Event\\S3\\S3Event;use Bref\\Event\\S3\\S3Handler;use Bref\\Logger\\StderrLogger;require __DIR__ . '/vendor/autoload.php';class Handler extends S3Handler {    private StderrLogger $logger;    public function __construct(StderrLogger $logger)    {        $this->logger = $logger;    }        public function handleS3(S3Event $event, Context $context) : void    {        $this->logger->info(\"Processing S3 records\");        // Get the object from the event and show its content type        $records = $event->getRecords();                foreach ($records as $record)         {            $bucket = $record->getBucket()->getName();            $key = urldecode($record->getObject()->getKey());            try {                $fileSize = urldecode($record->getObject()->getSize());                echo \"File Size: \" . $fileSize . \"\\n\";                // TODO: Implement your custom processing logic here            } catch (Exception $e) {                echo $e->getMessage() . \"\\n\";                echo 'Error getting object ' . $key . ' from bucket ' . $bucket . '. Make sure they exist and your bucket is in the same region as this function.' . \"\\n\";                throw $e;            }        }    }}$logger = new StderrLogger();return new Handler($logger);PythonSDK for Python (Boto3)Note        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using Python.# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.# SPDX-License-Identifier: Apache-2.0import jsonimport urllib.parseimport boto3print('Loading function')s3 = boto3.client('s3')def lambda_handler(event, context):    #print(\"Received event: \" + json.dumps(event, indent=2))    # Get the object from the event and show its content type    bucket = event['Records'][0]['s3']['bucket']['name']    key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')    try:        response = s3.get_object(Bucket=bucket, Key=key)        print(\"CONTENT TYPE: \" + response['ContentType'])        return response['ContentType']    except Exception as e:        print(e)        print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))        raise e              RubySDK for RubyNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using Ruby.require 'json'require 'uri'require 'aws-sdk'puts 'Loading function'def lambda_handler(event:, context:)  s3 = Aws::S3::Client.new(region: 'region') # Your AWS region  # puts \"Received event: #{JSON.dump(event)}\"  # Get the object from the event and show its content type  bucket = event['Records'][0]['s3']['bucket']['name']  key = URI.decode_www_form_component(event['Records'][0]['s3']['object']['key'], Encoding::UTF_8)  begin    response = s3.get_object(bucket: bucket, key: key)    puts \"CONTENT TYPE: #{response.content_type}\"    return response.content_type  rescue StandardError => e    puts e.message    puts \"Error getting object #{key} from bucket #{bucket}. Make sure they exist and your bucket is in the same region as this function.\"    raise e  endendRustSDK for RustNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using Rust.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0use aws_lambda_events::event::s3::S3Event;use aws_sdk_s3::{Client};use lambda_runtime::{run, service_fn, Error, LambdaEvent};/// Main function#[tokio::main]async fn main() -> Result<(), Error> {    tracing_subscriber::fmt()        .with_max_level(tracing::Level::INFO)        .with_target(false)        .without_time()        .init();    // Initialize the AWS SDK for Rust    let config = aws_config::load_from_env().await;    let s3_client = Client::new(&config);    let res = run(service_fn(|request: LambdaEvent<S3Event>| {        function_handler(&s3_client, request)    })).await;    res}async fn function_handler(    s3_client: &Client,    evt: LambdaEvent<S3Event>) -> Result<(), Error> {    tracing::info!(records = ?evt.payload.records.len(), \"Received request from SQS\");    if evt.payload.records.len() == 0 {        tracing::info!(\"Empty S3 event received\");    }    let bucket = evt.payload.records[0].s3.bucket.name.as_ref().expect(\"Bucket name to exist\");    let key = evt.payload.records[0].s3.object.key.as_ref().expect(\"Object key to exist\");    tracing::info!(\"Request is for {} and object {}\", bucket, key);    let s3_get_object_result = s3_client        .get_object()        .bucket(bucket)        .key(key)        .send()        .await;    match s3_get_object_result {        Ok(_) => tracing::info!(\"S3 Get Object success, the s3GetObjectResult contains a 'body' property of type ByteStream\"),        Err(_) => tracing::info!(\"Failure with S3 Get Object request\")    }    Ok(())}anchoranchoranchoranchoranchoranchoranchoranchor.NETGoJavaJavaScriptPHPPythonRubyRustAWS SDK for .NETNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Consuming an S3 event with Lambda using .NET. ",
                                    {
                                        "code_example": "// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Threading.Tasks;\nusing Amazon.Lambda.Core;\nusing Amazon.S3;\nusing System;\nusing Amazon.Lambda.S3Events;\nusing System.Web;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace S3Integration\n{\n    public class Function\n    {\n        private static AmazonS3Client _s3Client;\n        public Function() : this(null)\n        {\n        }\n\n        internal Function(AmazonS3Client s3Client)\n        {\n            _s3Client = s3Client ?? new AmazonS3Client();\n        }\n\n        public async Task<string> Handler(S3Event evt, ILambdaContext context)\n        {\n            try\n            {\n                if (evt.Records.Count <= 0)\n                {\n                    context.Logger.LogLine(\"Empty S3 Event received\");\n                    return string.Empty;\n                }\n\n                var bucket = evt.Records[0].S3.Bucket.Name;\n                var key = HttpUtility.UrlDecode(evt.Records[0].S3.Object.Key);\n\n                context.Logger.LogLine($\"Request is for {bucket} and {key}\");\n\n                var objectResult = await _s3Client.GetObjectAsync(bucket, key);\n\n                context.Logger.LogLine($\"Returning {objectResult.Key}\");\n\n                return objectResult.Key;\n            }\n            catch (Exception e)\n            {\n                context.Logger.LogLine($\"Error processing request - {e.Message}\");\n\n                return string.Empty;\n            }\n        }\n    }\n}\n"
                                    },
                                    "  2 : In the Code source pane on the Lambda console, paste the code into the code editor, replacing the code that           Lambda created.",
                                    "  3 : In the DEPLOY section, choose Deploy to update your function's code:"
                                ]
                            },
                            {
                                "sub_header": "Create the Amazon S3 trigger",
                                "content": [
                                    "To create the Amazon S3 trigger",
                                    "  1 : In the Function overview pane, choose Add trigger.",
                                    "  2 : Select S3.",
                                    "  3 : Under Bucket, select the bucket you created earlier in the tutorial.",
                                    "  4 : Under Event types, be sure that All object create events is selected.",
                                    "  5 : Under Recursive invocation, select the check box to acknowledge that using the same Amazon S3 bucket for input and           output is not recommended.",
                                    "  6 : Choose Add.",
                                    "Note",
                                    "When you create an Amazon S3 trigger for a Lambda function using the Lambda console, Amazon S3 configures an event notification         on the bucket you specify. Before configuring this event notification, Amazon S3 performs a series of checks to confirm that the event destination exists         and has the required IAM policies. Amazon S3 also performs these tests on any other event notifications configured for that bucket.",
                                    "Because of this check, if the bucket has previously configured event destinations for resources that no longer exist, or for resources that don't have         the required permissions policies, Amazon S3 won't be able to create the new event notification. You'll see the following error message indicating that your trigger         couldn't be created:",
                                    {
                                        "code_example": "An error occurred when creating the trigger: Unable to validate the following destination configurations."
                                    },
                                    "You can see this error if you previously configured a trigger for another Lambda function using the same bucket, and you have since           deleted the function or modified its permissions policies."
                                ]
                            },
                            {
                                "sub_header": "Test your Lambda function with a dummy event",
                                "content": [
                                    "To test the Lambda function with a dummy event",
                                    "  1 : In the Lambda console page for your function, choose the Test tab.",
                                    "  2 : For Event name, enter MyTestEvent.",
                                    " 3 : In the Event JSON, paste the following test event. Be sure to replace these values:Replace us-east-1 with the region you created your Amazon S3 bucket in.Replace both instances of amzn-s3-demo-bucket with the name of your own Amazon S3 bucket.Replace test%2FKey with the name of the test object you uploaded to your bucket earlier (for example,               HappyFace.jpg). ",
                                    {
                                        "code_example": "{\n  \"Records\": [\n    {\n      \"eventVersion\": \"2.0\",\n      \"eventSource\": \"aws:s3\",\n      \"awsRegion\": \"us-east-1\",\n      \"eventTime\": \"1970-01-01T00:00:00.000Z\",\n      \"eventName\": \"ObjectCreated:Put\",\n      \"userIdentity\": {\n        \"principalId\": \"EXAMPLE\"\n      },\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"127.0.0.1\"\n      },\n      \"responseElements\": {\n        \"x-amz-request-id\": \"EXAMPLE123456789\",\n        \"x-amz-id-2\": \"EXAMPLE123/5678abcdefghijklambdaisawesome/mnopqrstuvwxyzABCDEFGH\"\n      },\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"testConfigRule\",\n        \"bucket\": {\n          \"name\": \"amzn-s3-demo-bucket\",\n          \"ownerIdentity\": {\n            \"principalId\": \"EXAMPLE\"\n          },\n          \"arn\": \"arn:aws:s3:::amzn-s3-demo-bucket\"\n        },\n        \"object\": {\n          \"key\": \"test%2Fkey\",\n          \"size\": 1024,\n          \"eTag\": \"0123456789abcdef0123456789abcdef\",\n          \"sequencer\": \"0A1B2C3D4E5F678901\"\n        }\n      }\n    }\n  ]\n}"
                                    },
                                    "  4 : Choose Save.",
                                    "  5 : Choose Test.",
                                    " 6 : If your function runs successfully, you’ll see output similar to the following in the Execution results tab. ",
                                    {
                                        "code_example": "Response\n\"image/jpeg\"\n\nFunction Logs\nSTART RequestId: 12b3cae7-5f4e-415e-93e6-416b8f8b66e6 Version: $LATEST\n2021-02-18T21:40:59.280Z    12b3cae7-5f4e-415e-93e6-416b8f8b66e6    INFO    INPUT BUCKET AND KEY:  { Bucket: 'amzn-s3-demo-bucket', Key: 'HappyFace.jpg' }\n2021-02-18T21:41:00.215Z    12b3cae7-5f4e-415e-93e6-416b8f8b66e6    INFO    CONTENT TYPE: image/jpeg\nEND RequestId: 12b3cae7-5f4e-415e-93e6-416b8f8b66e6\nREPORT RequestId: 12b3cae7-5f4e-415e-93e6-416b8f8b66e6    Duration: 976.25 ms    Billed Duration: 977 ms    Memory Size: 128 MB    Max Memory Used: 90 MB    Init Duration: 430.47 ms        \n\nRequest ID\n12b3cae7-5f4e-415e-93e6-416b8f8b66e6"
                                    },
                                    {
                                        "sub_header": "Test the Lambda function with the Amazon S3 trigger",
                                        "content": [
                                            "To test your function with the configured trigger, upload an object to your Amazon S3 bucket using the console. To verify that your Lambda         function ran as expected, use CloudWatch Logs to view your function’s output.",
                                            "To upload an object to your Amazon S3 bucket",
                                            "  1 : Open the Buckets page of the Amazon S3 console and choose the bucket that you created earlier.",
                                            "  2 : Choose Upload.",
                                            "  3 : Choose Add files and use the file selector to choose an object you want to upload. This object can be any file             you choose.",
                                            "  4 : Choose Open, then choose Upload.",
                                            "To verify the function invocation using CloudWatch Logs",
                                            "  1 : Open the CloudWatch console.",
                                            "  2 : Make sure you're working in the same AWS Region you created your Lambda function in. You can change your Region using the drop-down             list at the top of the screen.",
                                            "  3 : Choose Logs, then choose Log groups.",
                                            "  4 : Choose the log group for your function (/aws/lambda/s3-trigger-tutorial).",
                                            "  5 : Under Log streams, choose the most recent log stream.",
                                            " 6 : If your function was invoked correctly in response to your Amazon S3 trigger, you’ll see output similar to the following. The           CONTENT TYPE you see depends on the type of file you uploaded to your bucket. ",
                                            {
                                                "code_example": "2022-05-09T23:17:28.702Z\t0cae7f5a-b0af-4c73-8563-a3430333cc10\tINFO\tCONTENT TYPE: image/jpeg\n"
                                            }
                                        ]
                                    }
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources",
                                "content": [
                                    "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the S3 bucket",
                                    "  1 : Open the Amazon S3 console.",
                                    "  2 : Select the bucket you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the bucket in the text input field.",
                                    "  5 : Choose Delete bucket."
                                ]
                            },
                            {
                                "sub_header": "Next steps",
                                "content": [
                                    "In Tutorial: Using an Amazon S3 trigger to create thumbnail images, the Amazon S3 trigger invokes a function that creates a thumbnail image for each image file that is uploaded to a      bucket. This tutorial requires a moderate level of AWS and Lambda domain knowledge. It demonstrates how to create resources using the AWS Command Line Interface (AWS CLI) and how to create a .zip file archive deployment package for the function and its dependencies."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Tutorial: Use an Amazon S3 trigger to create thumbnails",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-s3-tutorial.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "In this tutorial, you create and configure a Lambda function that resizes images added to an Amazon Simple Storage Service (Amazon S3) bucket. When you add an image     file to your bucket, Amazon S3 invokes your Lambda function. The function then creates a thumbnail version of the image and outputs it to a different     Amazon S3 bucket.",
                            "To complete this tutorial, you carry out the following steps:",
                            "  1 : Create source and destination Amazon S3 buckets and upload a sample image.",
                            "  2 : Create a Lambda function that resizes an image and outputs a thumbnail to an Amazon S3 bucket.",
                            "  3 : Configure a Lambda trigger that invokes your function when objects are uploaded to your source bucket.",
                            "  4 : Test your function, first with a dummy event, and then by uploading an image to your source bucket.",
                            "By completing these steps, you’ll learn how to use Lambda to carry out a file processing task on objects added to an Amazon S3 bucket. You can     complete this tutorial using the AWS Command Line Interface (AWS CLI) or the AWS Management Console.",
                            "If you're looking for a simpler example to learn how to configure an Amazon S3 trigger for Lambda, you can try Tutorial: Using an Amazon S3 trigger to invoke a Lambda function.",
                            "Topics",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "Sign up for an AWS account",
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "Create a user with administrative access",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "If you want to use the AWS CLI to complete the tutorial, install the latest version of the AWS Command Line Interface.",
                                    "For your Lambda function code, you can use Python or Node.js. Install the language support tools and a package manager for the       language that you want to use. "
                                ]
                            },
                            {
                                "sub_header": "Create two Amazon S3 buckets",
                                "content": [
                                    "First create two Amazon S3 buckets. The first bucket is the source bucket you will upload your images to. The second bucket is used by     Lambda to save the resized thumbnail when you invoke your function.",
                                    "  1.AWS Management Console : amzn-s3-demo-source-bucket-resized",
                                    "  2.AWS CLI : region",
                                    "anchor",
                                    "anchor",
                                    "To create the Amazon S3 buckets (console)",
                                    "  1 : Open the Buckets page of the Amazon S3 console.",
                                    "  2 : Choose Create bucket.",
                                    "  3 : Under General configuration, do the following:For Bucket name, enter a globally unique name that meets the Amazon S3 Bucket naming rules.                     Bucket names can contain only lower case letters, numbers, dots (.), and hyphens (-). For AWS Region, choose the AWS Region                     closest to your geographical location. Later in the tutorial, you must create your Lambda function in the same AWS Region, so                     make a note of the region you chose.",
                                    "  4 : Leave all other options set to their default values and choose Create bucket.",
                                    "  5 : Repeat steps 1 to 4 to create your destination bucket. For Bucket name, enter amzn-s3-demo-source-bucket-resized,                 where amzn-s3-demo-source-bucket is the name of the source bucket you just created."
                                ]
                            },
                            {
                                "sub_header": "Upload a test image to your source bucket",
                                "content": [
                                    "Later in the tutorial, you’ll test your Lambda function by invoking it using the AWS CLI or the Lambda console. To confirm that your function       is operating correctly, your source bucket needs to contain a test image. This image can be any JPG or PNG file you choose.",
                                    "  1.AWS Management Console : \nTo upload a test image to your source bucket (console)\nOpen the Buckets page of the Amazon S3 console.\n\nSelect the source bucket you created in the previous step.\n\nChoose Upload.\n\nChoose Add files and use the file selector to choose the object you want to upload.\n\nChoose Open, then choose Upload.\n\n",
                                    "  2.AWS CLI : --bucket",
                                    "anchor",
                                    "anchor",
                                    "To upload a test image to your source bucket (console)",
                                    "  1 : Open the Buckets page of the Amazon S3 console.",
                                    "  2 : Select the source bucket you created in the previous step.",
                                    "  3 : Choose Upload.",
                                    "  4 : Choose Add files and use the file selector to choose the object you want to upload.",
                                    "  5 : Choose Open, then choose Upload."
                                ]
                            },
                            {
                                "sub_header": "Create a permissions policy",
                                "content": [
                                    "The first step in creating your Lambda function is to create a permissions policy. This policy gives your function the permissions it needs       to access other AWS resources. For this tutorial, the policy gives Lambda read and write permissions for Amazon S3 buckets and allows it to write       to Amazon CloudWatch Logs.",
                                    "  1.AWS Management Console : {\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:PutLogEvents\",\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\"\n            ],\n            \"Resource\": \"arn:aws:logs:*:*:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::*/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::*/*\"\n        }\n    ]\n}",
                                    "  2.AWS CLI : policy.json",
                                    "anchor",
                                    "anchor",
                                    "To create the policy (console)",
                                    "  1 : Open the Policies page of the AWS Identity and Access Management (IAM) console.",
                                    "  2 : Choose Create policy.",
                                    " 3 : Choose the JSON tab, and then paste the following custom policy into the JSON editor. ",
                                    {
                                        "code_example": "{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"logs:PutLogEvents\",\n                \"logs:CreateLogGroup\",\n                \"logs:CreateLogStream\"\n            ],\n            \"Resource\": \"arn:aws:logs:*:*:*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::*/*\"\n        },\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"s3:PutObject\"\n            ],\n            \"Resource\": \"arn:aws:s3:::*/*\"\n        }\n    ]\n}"
                                    },
                                    "  4 : Choose Next.",
                                    "  5 : Under Policy details, for Policy name, enter LambdaS3Policy.",
                                    "  6 : Choose Create policy."
                                ]
                            },
                            {
                                "sub_header": "Create an execution role",
                                "content": [
                                    "An execution role is an IAM role that grants a Lambda function permission to access AWS services and resources. To give your function       read and write access to an Amazon S3 bucket, you attach the permissions policy you created in the previous step.",
                                    "  1.AWS Management Console : LambdaS3Policy",
                                    "  2.AWS CLI : trust-policy.json",
                                    "anchor",
                                    "anchor",
                                    "To create an execution role and attach your permissions policy (console)",
                                    "  1 : Open the Roles page of the (IAM) console.",
                                    "  2 : Choose Create role.",
                                    "  3 : For Trusted entity type, select AWS service, and for Use case,              select Lambda.",
                                    "  4 : Choose Next.",
                                    "  5 : Add the permissions policy you created in the previous step by doing the following:In the policy search box, enter LambdaS3Policy.In the search results, select the check box for LambdaS3Policy.Choose Next.",
                                    "  6 : Under Role details, for the Role name enter LambdaS3Role.",
                                    "  7 : Choose Create role."
                                ]
                            },
                            {
                                "sub_header": "Create the function deployment package",
                                "content": [
                                    "To create your function, you create a deployment package containing your function code and its dependencies. For this       CreateThumbnail function, your function code uses a separate library for the image resizing. Follow the instructions for your       chosen language to create a deployment package containing the required library.",
                                    "  1.Node.js : lambda-s3",
                                    "  2.Python : lambda_function.py",
                                    "anchor",
                                    "anchor",
                                    "To create the deployment package (Node.js)",
                                    " 1 : Create a directory named lambda-s3 for your function code and dependencies and navigate into it. ",
                                    {
                                        "code_example": "mkdir lambda-s3\ncd lambda-s3"
                                    },
                                    " 2 : Create a new Node.js project with npm. To accept the default options provided in the interactive experience, press Enter. ",
                                    {
                                        "code_example": "npm init"
                                    },
                                    " 3 : Save the following function code in a file named index.mjs. Make sure to replace us-east-1 with the               AWS Region in which you created your own source and destination buckets. ",
                                    {
                                        "code_example": "// dependencies\nimport { S3Client, GetObjectCommand, PutObjectCommand } from '@aws-sdk/client-s3';\n\nimport { Readable } from 'stream';\n\nimport sharp from 'sharp';\nimport util from 'util';\n\n\n// create S3 client\nconst s3 = new S3Client({region: 'us-east-1'});\n\n// define the handler function\nexport const handler = async (event, context) => {\n\n// Read options from the event parameter and get the source bucket\nconsole.log(\"Reading options from event:\\n\", util.inspect(event, {depth: 5}));\n  const srcBucket = event.Records[0].s3.bucket.name;\n  \n// Object key may have spaces or unicode non-ASCII characters\nconst srcKey    = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, \" \"));\nconst dstBucket = srcBucket + \"-resized\";\nconst dstKey    = \"resized-\" + srcKey;\n\n// Infer the image type from the file suffix\nconst typeMatch = srcKey.match(/\\.([^.]*)$/);\nif (!typeMatch) {\n  console.log(\"Could not determine the image type.\");\n  return;\n}\n\n// Check that the image type is supported\nconst imageType = typeMatch[1].toLowerCase();\nif (imageType != \"jpg\" && imageType != \"png\") {\n  console.log(`Unsupported image type: ${imageType}`);\n  return;\n}\n\n// Get the image from the source bucket. GetObjectCommand returns a stream.\ntry {\n  const params = {\n    Bucket: srcBucket,\n    Key: srcKey\n  };\n  var response = await s3.send(new GetObjectCommand(params));\n  var stream = response.Body;\n  \n// Convert stream to buffer to pass to sharp resize function.\n  if (stream instanceof Readable) {\n    var content_buffer = Buffer.concat(await stream.toArray());\n    \n  } else {\n    throw new Error('Unknown object stream type');\n  }\n\n\n} catch (error) {\n  console.log(error);\n  return;\n}\n\n  \n// set thumbnail width. Resize will set the height automatically to maintain aspect ratio.\nconst width  = 200;\n\n// Use the sharp module to resize the image and save in a buffer.\ntry {    \n  var output_buffer = await sharp(content_buffer).resize(width).toBuffer();\n\n} catch (error) {\n  console.log(error);\n  return;\n}\n\n// Upload the thumbnail image to the destination bucket\ntry {\n  const destparams = {\n    Bucket: dstBucket,\n    Key: dstKey,\n    Body: output_buffer,\n    ContentType: \"image\"\n  };\n\n  const putResult = await s3.send(new PutObjectCommand(destparams));\n\n  } catch (error) {\n    console.log(error);\n    return;\n  }\n\n  console.log('Successfully resized ' + srcBucket + '/' + srcKey +\n    ' and uploaded to ' + dstBucket + '/' + dstKey);\n  };"
                                    },
                                    " 4 : In your lambda-s3 directory, install the sharp library using npm. Note that the latest version of sharp (0.33) isn't               compatible with Lambda. Install version 0.32.6 to complete this tutorial. The npm install command creates a node_modules directory for your modules. After this step, your                 directory structure should look like the following.lambda-s3|- index.mjs|- node_modules|  |- base64js|  |- bl|  |- buffer...|- package-lock.json|- package.json",
                                    {
                                        "code_example": "npm install sharp@0.32.6"
                                    },
                                    " 5 : Create a .zip deployment package containing your function code and its dependencies. In MacOS and Linux, run the following                 command. In Windows, use your preferred zip utility to create a .zip file. Ensure that your index.mjs,                 package.json, and package-lock.json files and your node_modules directory are all at the root                 of your .zip file.",
                                    {
                                        "code_example": "zip -r function.zip ."
                                    }
                                ]
                            },
                            {
                                "sub_header": "Create the Lambda function",
                                "content": [
                                    "You can create your Lambda function using either the AWS CLI or the Lambda console. Follow the instructions for your chosen language to create       the function.",
                                    "  1.AWS Management Console : CreateThumbnail",
                                    "  2.AWS CLI : role",
                                    "anchor",
                                    "anchor",
                                    "To create the function (console)",
                                    "To create your Lambda function using the console, you first create a basic function containing some ‘Hello world’ code. You then           replace this code with your own function code by uploading the.zip or JAR file you created in the previous step.",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Make sure you're working in the same AWS Region you created your Amazon S3 bucket in. You can change your region using the drop-down             list at the top of the screen.",
                                    "  3 : Choose Create function.",
                                    "  4 : Choose Author from scratch.",
                                    "  5 : Under Basic information, do the following:For Function name, enter CreateThumbnail.For Runtime, choose either Node.js 22.x or Python 3.12 according to the language you chose for your function.For Architecture, choose x86_64.",
                                    "  6 : In the Change default execution role tab, do the following:Expand the tab, then choose Use an existing role.Select the LambdaS3Role you created earlier.",
                                    "  7 : Choose Create function.",
                                    "To upload the function code (console)",
                                    "  1 : In the Code source pane, choose Upload from.",
                                    "  2 : Choose .zip file. ",
                                    "  3 : Choose Upload.",
                                    "  4 : In the file selector, select your .zip file and choose Open.",
                                    "  5 : Choose Save."
                                ]
                            },
                            {
                                "sub_header": "Configure Amazon S3 to invoke the function",
                                "content": [
                                    "For your Lambda function to run when you upload an image to your source bucket, you need to configure a trigger for your function. You can     configure the Amazon S3 trigger using either the console or the AWS CLI.",
                                    "Important",
                                    "This procedure configures the Amazon S3 bucket to invoke your function every time that an object is created in the bucket. Be sure to       configure this only on the source bucket. If your Lambda function creates objects in the same bucket that invokes it, your function can be         invoked continuously in a loop. This can result         in un expected charges being billed to your AWS account.",
                                    "  1.AWS Management Console : CreateThumbnail",
                                    "  2.AWS CLI : source-account",
                                    "anchor",
                                    "anchor",
                                    "To configure the Amazon S3 trigger (console)",
                                    "  1 : Open the Functions page of the Lambda console and choose your function (CreateThumbnail).",
                                    "  2 : Choose Add trigger.",
                                    "  3 : Select S3.",
                                    "  4 : Under Bucket, select your source bucket.",
                                    "  5 : Under Event types, select All object create events.",
                                    "  6 : Under Recursive invocation, select the check box to acknowledge that using the same Amazon S3 bucket for input                 and output is not recommended. You can learn more about recursive invocation patterns in Lambda by reading                Recursive patterns that cause run-away Lambda functions                in Serverless Land.",
                                    "  7 : Choose Add.When you create a trigger using the Lambda console, Lambda automatically creates a resource based policy                 to give the service you select permission to invoke your function. "
                                ]
                            },
                            {
                                "sub_header": "Test your Lambda function with a dummy event",
                                "content": [
                                    "Before you test your whole setup by adding an image file to your Amazon S3 source bucket, you test that your Lambda function is working       correctly by invoking it with a dummy event. An event in Lambda is a JSON-formatted document that contains data for your function to process.       When your function is invoked by Amazon S3, the event sent to your function contains information such as the bucket name, bucket ARN, and object       key.",
                                    "  1.AWS Management Console : CreateThumbnail",
                                    "  2.AWS CLI : dummyS3Event.json",
                                    "anchor",
                                    "anchor",
                                    "To test your Lambda function with a dummy event (console)",
                                    "  1 : Open the Functions page of the Lambda console and choose your              function (CreateThumbnail).",
                                    "  2 : Choose the Test tab.",
                                    " 3 : To create your test event, in the Test event pane, do the following:Under Test event action, select Create new event.For Event name, enter myTestEvent.For Template, select S3 Put.Replace the values for the following parameters with your own values.For awsRegion, replace us-east-1 with the AWS Region you created your Amazon S3 buckets in.For name, replace amzn-s3-demo-bucket with the name of your own Amazon S3 source bucket.For key, replace test%2Fkey with the filename of the test object you uploaded to your source                        bucket in the step Upload a test image to your source bucket. Choose Save.",
                                    {
                                        "code_example": "{\n  \"Records\": [\n    {\n      \"eventVersion\": \"2.0\",\n      \"eventSource\": \"aws:s3\",\n      \"awsRegion\": \"us-east-1\",\n      \"eventTime\": \"1970-01-01T00:00:00.000Z\",\n      \"eventName\": \"ObjectCreated:Put\",\n      \"userIdentity\": {\n        \"principalId\": \"EXAMPLE\"\n      },\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"127.0.0.1\"\n      },\n      \"responseElements\": {\n        \"x-amz-request-id\": \"EXAMPLE123456789\",\n        \"x-amz-id-2\": \"EXAMPLE123/5678abcdefghijklambdaisawesome/mnopqrstuvwxyzABCDEFGH\"\n      },\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"testConfigRule\",\n        \"bucket\": {\n          \"name\": \"amzn-s3-demo-bucket\",\n          \"ownerIdentity\": {\n            \"principalId\": \"EXAMPLE\"\n          },\n          \"arn\": \"arn:aws:s3:::amzn-s3-demo-bucket\"\n        },\n        \"object\": {\n          \"key\": \"test%2Fkey\",\n          \"size\": 1024,\n          \"eTag\": \"0123456789abcdef0123456789abcdef\",\n          \"sequencer\": \"0A1B2C3D4E5F678901\"\n        }\n      }\n    }\n  ]\n}"
                                    },
                                    "  4 : In the Test event pane, choose Test.",
                                    "  5 : To check the your function has created a resized verison of your image and stored it in your target Amazon S3 bucket, do the following:Open the Buckets page of the Amazon S3 console.Choose your target bucket and confirm that your resized file is listed in the Objects pane."
                                ]
                            },
                            {
                                "sub_header": "Test your function using the Amazon S3 trigger",
                                "content": [
                                    "Now that you’ve confirmed your Lambda function is operating correctly, you’re ready to test your complete setup by adding an image file to       your Amazon S3 source bucket. When you add your image to the source bucket, your Lambda function should be automatically invoked. Your function       creates a resized version of the file and stores it in your target bucket.",
                                    "  1.AWS Management Console : \nTo test your Lambda function using the Amazon S3 trigger (console)\nTo upload an image to your Amazon S3 bucket, do the following:\n\nOpen the Buckets page of the Amazon S3 console and choose your source bucket.\n\nChoose Upload.\n\nChoose Add files and use the file selector to choose the image file you want to upload. Your image \n                  object can be any .jpg or .png file.\n\nChoose Open, then choose Upload.\n\n\nVerify that Lambda has saved a resized version of your image file in your target bucket by doing the following:\n\nNavigate back to the Buckets page of the Amazon S3 console and choose your destination bucket.\n\nIn the Objects pane, you should now see two resized image files, one from each test of your Lambda function.\n                  To download your resized image, select the file, then choose Download.\n\n\n",
                                    "  2.AWS CLI : --bucket",
                                    "anchor",
                                    "anchor",
                                    "To test your Lambda function using the Amazon S3 trigger (console)",
                                    "  1 : To upload an image to your Amazon S3 bucket, do the following:Open the Buckets page of the Amazon S3 console and choose your source bucket.Choose Upload.Choose Add files and use the file selector to choose the image file you want to upload. Your image                   object can be any .jpg or .png file.Choose Open, then choose Upload.",
                                    "  2 : Verify that Lambda has saved a resized version of your image file in your target bucket by doing the following:Navigate back to the Buckets page of the Amazon S3 console and choose your destination bucket.In the Objects pane, you should now see two resized image files, one from each test of your Lambda function.                  To download your resized image, select the file, then choose Download."
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources",
                                "content": [
                                    "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "To delete the policy that you created",
                                    "  1 : Open the Policies page of the IAM console.",
                                    "  2 : Select the policy that you created (AWSLambdaS3Policy).",
                                    "  3 : Choose Policy actions, Delete.",
                                    "  4 : Choose Delete.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the S3 bucket",
                                    "  1 : Open the Amazon S3 console.",
                                    "  2 : Select the bucket you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the bucket in the text input field.",
                                    "  5 : Choose Delete bucket."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "You can use Lambda to process event notifications from    Amazon Simple Storage Service. Amazon S3 can send an event to a Lambda function when an object is created or deleted. You configure    notification settings on a bucket, and grant Amazon S3 permission to invoke a function on the function's resource-based    permissions policy.",
                    "Warning",
                    "If your Lambda function uses the same bucket that triggers it, it could cause      the function to run in a loop. For example, if the bucket triggers a function each time an object is uploaded,      and the function uploads an object to the bucket, then the function indirectly triggers itself. To avoid this, use      two buckets, or configure the trigger to only apply to a prefix used for incoming objects.",
                    "Amazon S3 invokes your function asynchronously with an event that contains    details about the object. The following example shows an event that Amazon S3 sent when a deployment package was uploaded    to Amazon S3.",
                    "Example Amazon S3 notification event",
                    {
                        "code_example": "{\n  \"Records\": [\n    {\n      \"eventVersion\": \"2.1\",\n      \"eventSource\": \"aws:s3\",\n      \"awsRegion\": \"us-east-2\",\n      \"eventTime\": \"2019-09-03T19:37:27.192Z\",\n      \"eventName\": \"ObjectCreated:Put\",\n      \"userIdentity\": {\n        \"principalId\": \"AWS:AIDAINPONIXQXHT3IKHL2\"\n      },\n      \"requestParameters\": {\n        \"sourceIPAddress\": \"205.255.255.255\"\n      },\n      \"responseElements\": {\n        \"x-amz-request-id\": \"D82B88E5F771F645\",\n        \"x-amz-id-2\": \"vlR7PnpV2Ce81l0PRw6jlUpck7Jo5ZsQjryTjKlc5aLWGVHPZLj5NeC6qMa0emYBDXOo6QBU0Wo=\"\n      },\n      \"s3\": {\n        \"s3SchemaVersion\": \"1.0\",\n        \"configurationId\": \"828aa6fc-f7b5-4305-8584-487c791949c1\",\n        \"bucket\": {\n          \"name\": \"amzn-s3-demo-bucket\",\n          \"ownerIdentity\": {\n            \"principalId\": \"A3I5XTEXAMAI3E\"\n          },\n          \"arn\": \"arn:aws:s3:::lambda-artifacts-deafc19498e3f2df\"\n        },\n        \"object\": {\n          \"key\": \"b21b84d653bb07b05b1e6b33684dc11b\",\n          \"size\": 1305107,\n          \"eTag\": \"b21b84d653bb07b05b1e6b33684dc11b\",\n          \"sequencer\": \"0C0F6F405D6ED209E1\"\n        }\n      }\n    }\n  ]\n}"
                    },
                    "To invoke your function, Amazon S3 needs permission from the function's resource-based policy. When you configure an Amazon S3 trigger in the Lambda console, the console modifies the    resource-based policy to allow Amazon S3 to invoke the function if the bucket name and account ID match. If you configure    the notification in Amazon S3, you use the Lambda API to update the policy. You can also use the Lambda API to grant    permission to another account, or restrict permission to a designated alias.",
                    "If your function uses the AWS SDK to manage Amazon S3 resources, it also needs Amazon S3 permissions in its execution role. ",
                    "Topics"
                ]
            },
            {
                "title": "SQS",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs.html",
                "contents": [
                    {
                        "title": "Create mapping",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-configure.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "To process Amazon SQS messages with Lambda, configure your queue with the appropriate settings,        then create a Lambda event source mapping.",
                            {
                                "sub_header": "Configuring a queue to use with Lambda",
                                "content": [
                                    "If you don't already have an existing Amazon SQS queue, create one            to serve as an event source for your Lambda function. The Lambda function and the Amazon SQS queue must be in the same AWS Region, although they can be in different AWS accounts.",
                                    "To allow your function time to process each batch of records, set the source queue's                        visibility timeout to at least six times the configuration            timeout on your function. The extra time allows Lambda to retry if your function is throttled            while processing a previous batch.",
                                    "By default, if Lambda encounters an error at any point while processing a batch, all            messages in that batch return to the queue. After the             visibility timeout, the messages become visible to Lambda again. You can            configure your event source mapping to use             partial batch responses to return only the failed messages back to the queue. In            addition, if your function fails to process a message multiple times, Amazon SQS can send it to a                        dead-letter queue. We recommend setting the maxReceiveCount on your            source queue's             redrive policy to at least 5. This gives Lambda a few chances to retry before            sending failed messages directly to the dead-letter queue."
                                ]
                            },
                            {
                                "sub_header": "Setting up Lambda execution role permissions",
                                "content": [
                                    "The             AWSLambdaSQSQueueExecutionRole AWS managed policy includes the permissions that Lambda needs to read            from your Amazon SQS queue. You can add this managed policy to your function's            execution role.",
                                    "Optionally, if you're using an encrypted queue, you also need to add the following permission to your            execution role:",
                                    "  1.kms:Decrypt"
                                ]
                            },
                            {
                                "sub_header": "Creating an SQS event source mapping",
                                "content": [
                                    "Create an event source mapping to tell Lambda to send items from your queue to a Lambda function.            You can create multiple event source mappings to process items from multiple queues with a single            function. When Lambda invokes the target function, the event can contain multiple items, up to a            configurable maximum batch size.",
                                    "To configure your function to read from Amazon SQS, attach the             AWSLambdaSQSQueueExecutionRole AWS managed policy to your execution role.            Then, create an SQS event source mapping from the console using            the following steps.",
                                    "To add permissions and create a trigger",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Choose the name of a function.",
                                    "  3 : Choose the Configuration tab, and then choose Permissions.",
                                    "  4 : Under Role name, choose the link to your execution role. This link opens the role in the IAM console.",
                                    "  5 : Choose Add permissions, and then choose Attach policies.",
                                    "  6 : In the search field, enter AWSLambdaSQSQueueExecutionRole.    Add this policy to your execution role. This is an AWS managed policy that contains the permissions    your function needs to read from an Amazon SQS queue. For more information about this policy, see        AWSLambdaSQSQueueExecutionRole in the AWS Managed Policy Reference.",
                                    "  7 : Go back to your function in the Lambda console. Under Function overview, choose Add trigger.",
                                    "  8 : Choose a trigger type.",
                                    "  9 : Configure the required options, and then choose Add.",
                                    "Lambda supports the following configuration options for Amazon SQS event sources:",
                                    "  1.SQS queue : \nThe Amazon SQS queue to read records from. The Lambda function and the Amazon SQS queue must be in the same AWS Region, although they can be in different AWS accounts.\n",
                                    "  2.Enable trigger : \nThe status of the event source mapping. Enable trigger is selected by default.\n",
                                    "  3.Batch size : MaximumBatchingWindowInSeconds",
                                    "  4.Batch window : MaximumBatchingWindowInSeconds",
                                    "  5.Maximum concurrency : \nThe maximum number of concurrent functions that the event source can invoke. For more information,\n                        see Configuring maximum concurrency for Amazon SQS event sources.\n",
                                    "  6.Filter criteria : \nAdd filter criteria to control which events Lambda sends to your function for processing.\n                        For more information, see Control which events Lambda sends to your function.\n"
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Scaling behavior",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-scaling.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "For standard queues, Lambda uses         long polling to poll a queue until it becomes active. When messages are available,        Lambda starts processing five batches at a time with five concurrent invocations of your function.        If messages are still available, Lambda increases the number of processes that are reading batches by up to 300 more instances per minute. The maximum number of batches that an event source mapping can process simultaneously is 1,000.",
                            "For FIFO queues, Lambda sends messages to your function in the order that it receives them. When you send a        message to a FIFO queue, you specify a message group            ID. Amazon SQS ensures that messages in the same group are delivered to Lambda in order. When Lambda reads         your messages into batches, each batch may contain messages from more than one message group, but the order         of the messages is maintained. If your function returns an error, the function attempts all retries on the         affected messages before Lambda receives additional messages from the same        group.",
                            {
                                "sub_header": "Configuring maximum concurrency for Amazon SQS event sources",
                                "content": [
                                    "You can use the maximum concurrency setting to control scaling behavior for your SQS event sources.            The maximum concurrency setting limits the number of concurrent instances of the function that an Amazon SQS            event source can invoke. Maximum concurrency is an event source-level setting. If you have multiple Amazon SQS            event sources mapped to one function, each event source can have a separate maximum concurrency setting.            You can use maximum concurrency to prevent one queue from using all of the function's            reserved concurrency or the rest of the            account's concurrency quota. There is no charge for            configuring maximum concurrency on an Amazon SQS event source.",
                                    "Importantly, maximum concurrency and reserved concurrency are two independent settings. Don't set            maximum concurrency higher than the function's reserved concurrency. If you configure maximum concurrency,            make sure that your function's reserved concurrency is greater than or equal to the total maximum            concurrency for all Amazon SQS event sources on the function. Otherwise, Lambda may throttle your messages.",
                                    "When your account's concurrency quota is set to the default value of 1,000, an Amazon SQS event source mapping can scale             to invoke function instances up to this value, unless you specify a maximum concurrency.",
                                    "If you receive an increase to your account's default concurrency quota, Lambda may not be able to invoke concurrent functions             instances up to your new quota. By default, Lambda can scale to invoke up to 1,250 concurrent function instances             for an Amazon SQS event source mapping. If this is insufficient for your use case, contact AWS support to             discuss an increase to your account's Amazon SQS event source mapping concurrency.",
                                    "Note",
                                    "For FIFO queues, concurrent invocations are capped either by the number of                message group IDs                (messageGroupId) or the maximum concurrency setting—whichever is lower. For example,                if you have six message group IDs and maximum concurrency is set to 10, your function can have a maximum                of six concurrent invocations.",
                                    "You can configure maximum concurrency on new and existing Amazon SQS event source mappings.",
                                    "Configure maximum concurrency using the Lambda console",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Choose the name of a function.",
                                    "  3 : Under Function overview, choose SQS. This opens the Configuration tab.",
                                    "  4 : Select the Amazon SQS trigger and choose Edit.",
                                    "  5 : For Maximum concurrency, enter a number between 2 and 1,000. To turn off maximum concurrency, leave the box empty.",
                                    "  6 : Choose Save.",
                                    {
                                        "sub_header": "Configure maximum concurrency using the AWS Command Line Interface (AWS CLI)",
                                        "content": [
                                            "Use the update-event-source-mapping command with the --scaling-config option. Example:",
                                            "aws lambda update-event-source-mapping \\    --uuid \"a1b2c3d4-5678-90ab-cdef-11111EXAMPLE\" \\    --scaling-config '{\"MaximumConcurrency\":5}'",
                                            "To turn off maximum concurrency, enter an empty value for --scaling-config:",
                                            "aws lambda update-event-source-mapping \\    --uuid \"a1b2c3d4-5678-90ab-cdef-11111EXAMPLE\" \\    --scaling-config \"{}\"",
                                            {
                                                "sub_header": "Configure maximum concurrency using the Lambda API",
                                                "content": [
                                                    "Use the CreateEventSourceMapping or UpdateEventSourceMapping action with a ScalingConfig object."
                                                ]
                                            }
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Error handling",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-errorhandling.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "To handle errors related to an SQS event source, Lambda automatically uses a retry strategy with a        backoff strategy. You can also customize error handling behavior by configuring your SQS event        source mapping to return partial batch responses.",
                            {
                                "sub_header": "Backoff strategy for failed invocations",
                                "content": [
                                    "When an invocation fails, Lambda attempts to retry the invocation while implementing a backoff strategy.            The backoff strategy differs slightly depending on whether Lambda encountered the failure due to an error in            your function code, or due to throttling.",
                                    "  1.function code :                     If your  caused the error, Lambda will stop processing and retrying the invocation.                    In the meantime, Lambda gradually backs off, reducing the amount of concurrency allocated to your Amazon SQS event source mapping.                    After your queue's visibility timeout runs out, the message will again reappear in the queue.                ",
                                    "  2.throttling : If the invocation fails due to , Lambda gradually backs off                    retries by reducing the amount of concurrency allocated to your Amazon SQS event source mapping. Lambda continues                    to retry the message until the message's timestamp exceeds your queue's visibility timeout, at which point                    Lambda drops the message."
                                ]
                            },
                            {
                                "sub_header": "Implementing partial batch responses",
                                "content": [
                                    "When your Lambda function encounters an error while processing a batch, all messages in that batch become            visible in the queue again by default, including messages that Lambda processed successfully. As a result, your            function can end up processing the same message several times.",
                                    "To avoid reprocessing successfully processed messages in a failed batch, you can configure your event            source mapping to make only the failed messages visible again. This is called a partial batch response.            To turn on partial batch responses, specify ReportBatchItemFailures for the            FunctionResponseTypes            action when configuring your event source mapping. This lets your function            return a partial success, which can help reduce the number of unnecessary retries on records.",
                                    "When ReportBatchItemFailures is activated, Lambda doesn't scale down message polling when function invocations fail. If you expect some messages to fail—and you don't want those failures to impact the message processing rate—use ReportBatchItemFailures.",
                                    "Note",
                                    "Keep the following in mind when using partial batch responses:",
                                    "  1.If your function throws an exception, the entire batch is considered a complete failure.",
                                    "  2.If you're using this feature with a FIFO queue, your function should stop processing messages after the                        first failure and return all failed and unprocessed messages in batchItemFailures. This helps                        preserve the ordering of messages in your queue.",
                                    "To activate partial batch reporting",
                                    "  1 : Review the Best practices for implementing partial batch responses.",
                                    " 2 : Run the following command to activate ReportBatchItemFailures for your function. To retrieve your event source mapping's UUID, run the list-event-source-mappings AWS CLI command. ",
                                    {
                                        "code_example": "aws lambda update-event-source-mapping \\\n--uuid \"a1b2c3d4-5678-90ab-cdef-11111EXAMPLE\" \\\n--function-response-types \"ReportBatchItemFailures\""
                                    },
                                    " 3 : Update your function code to catch all exceptions and return failed messages in a batchItemFailures JSON response. The batchItemFailures response must include a list of message IDs, as itemIdentifier JSON values.For example, suppose you have a batch of five messages, with message IDs id1, id2, id3, id4, and id5. Your function successfully processes id1, id3, and id5. To make messages id2 and id4 visible again in your queue, your function should return the following response:   Here are some examples of function code that return the list of failed message IDs in the batch:.NETAWS SDK for .NETNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using .NET.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0using Amazon.Lambda.Core;using Amazon.Lambda.SQSEvents;// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]namespace sqsSample;public class Function{    public async Task<SQSBatchResponse> FunctionHandler(SQSEvent evnt, ILambdaContext context)    {        List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new List<SQSBatchResponse.BatchItemFailure>();        foreach(var message in evnt.Records)        {            try            {                //process your message                await ProcessMessageAsync(message, context);            }            catch (System.Exception)            {                //Add failed message identifier to the batchItemFailures list                batchItemFailures.Add(new SQSBatchResponse.BatchItemFailure{ItemIdentifier=message.MessageId});             }        }        return new SQSBatchResponse(batchItemFailures);    }    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)    {        if (String.IsNullOrEmpty(message.Body))        {            throw new Exception(\"No Body in SQS Message.\");        }        context.Logger.LogInformation($\"Processed message {message.Body}\");        // TODO: Do interesting work based on the new message        await Task.CompletedTask;    }}GoSDK for Go V2Note        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using Go.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0package mainimport (\t\"context\"\t\"encoding/json\"\t\"fmt\"\t\"github.com/aws/aws-lambda-go/events\"\t\"github.com/aws/aws-lambda-go/lambda\")func handler(ctx context.Context, sqsEvent events.SQSEvent) (map[string]interface{}, error) {\tbatchItemFailures := []map[string]interface{}{}\tfor _, message := range sqsEvent.Records {\t\t\t\tif /* Your message processing condition here */ {\t\t\t\t\t\tbatchItemFailures = append(batchItemFailures, map[string]interface{}{\"itemIdentifier\": message.MessageId})\t\t}\t}\tsqsBatchResponse := map[string]interface{}{\t\t\"batchItemFailures\": batchItemFailures,\t}\treturn sqsBatchResponse, nil}func main() {\tlambda.Start(handler)}JavaSDK for Java 2.xNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using Java.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0import com.amazonaws.services.lambda.runtime.Context;import com.amazonaws.services.lambda.runtime.RequestHandler;import com.amazonaws.services.lambda.runtime.events.SQSEvent;import com.amazonaws.services.lambda.runtime.events.SQSBatchResponse; import java.util.ArrayList;import java.util.List; public class ProcessSQSMessageBatch implements RequestHandler<SQSEvent, SQSBatchResponse> {    @Override    public SQSBatchResponse handleRequest(SQSEvent sqsEvent, Context context) {          List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new ArrayList<SQSBatchResponse.BatchItemFailure>();         String messageId = \"\";         for (SQSEvent.SQSMessage message : sqsEvent.getRecords()) {             try {                 //process your message                 messageId = message.getMessageId();             } catch (Exception e) {                 //Add failed message identifier to the batchItemFailures list                 batchItemFailures.add(new SQSBatchResponse.BatchItemFailure(messageId));             }         }         return new SQSBatchResponse(batchItemFailures);     }}JavaScriptSDK for JavaScript (v3)Note        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using JavaScript.// Node.js 20.x Lambda runtime, AWS SDK for Javascript V3export const handler = async (event, context) => {    const batchItemFailures = [];    for (const record of event.Records) {        try {            await processMessageAsync(record, context);        } catch (error) {            batchItemFailures.push({ itemIdentifier: record.messageId });        }    }    return { batchItemFailures };};async function processMessageAsync(record, context) {    if (record.body && record.body.includes(\"error\")) {        throw new Error(\"There is an error in the SQS Message.\");    }    console.log(`Processed message: ${record.body}`);}Reporting SQS batch item failures with Lambda using TypeScript.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0import { SQSEvent, SQSBatchResponse, Context, SQSBatchItemFailure, SQSRecord } from 'aws-lambda';export const handler = async (event: SQSEvent, context: Context): Promise<SQSBatchResponse> => {    const batchItemFailures: SQSBatchItemFailure[] = [];    for (const record of event.Records) {        try {            await processMessageAsync(record);        } catch (error) {            batchItemFailures.push({ itemIdentifier: record.messageId });        }    }    return {batchItemFailures: batchItemFailures};};async function processMessageAsync(record: SQSRecord): Promise<void> {    if (record.body && record.body.includes(\"error\")) {        throw new Error('There is an error in the SQS Message.');    }    console.log(`Processed message ${record.body}`);}PHPSDK for PHPNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using PHP.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0<?phpuse Bref\\Context\\Context;use Bref\\Event\\Sqs\\SqsEvent;use Bref\\Event\\Sqs\\SqsHandler;use Bref\\Logger\\StderrLogger;require __DIR__ . '/vendor/autoload.php';class Handler extends SqsHandler{    private StderrLogger $logger;    public function __construct(StderrLogger $logger)    {        $this->logger = $logger;    }    /**     * @throws JsonException     * @throws \\Bref\\Event\\InvalidLambdaEvent     */    public function handleSqs(SqsEvent $event, Context $context): void    {        $this->logger->info(\"Processing SQS records\");        $records = $event->getRecords();        foreach ($records as $record) {            try {                // Assuming the SQS message is in JSON format                $message = json_decode($record->getBody(), true);                $this->logger->info(json_encode($message));                // TODO: Implement your custom processing logic here            } catch (Exception $e) {                $this->logger->error($e->getMessage());                // failed processing the record                $this->markAsFailed($record);            }        }        $totalRecords = count($records);        $this->logger->info(\"Successfully processed $totalRecords SQS records\");    }}$logger = new StderrLogger();return new Handler($logger);PythonSDK for Python (Boto3)Note        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using Python.# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.# SPDX-License-Identifier: Apache-2.0def lambda_handler(event, context):    if event:        batch_item_failures = []        sqs_batch_response = {}             for record in event[\"Records\"]:            try:                # process message            except Exception as e:                batch_item_failures.append({\"itemIdentifier\": record['messageId']})                sqs_batch_response[\"batchItemFailures\"] = batch_item_failures        return sqs_batch_responseRubySDK for RubyNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using Ruby.# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.# SPDX-License-Identifier: Apache-2.0require 'json'def lambda_handler(event:, context:)  if event    batch_item_failures = []    sqs_batch_response = {}    event[\"Records\"].each do |record|      begin        # process message      rescue StandardError => e        batch_item_failures << {\"itemIdentifier\" => record['messageId']}      end    end    sqs_batch_response[\"batchItemFailures\"] = batch_item_failures    return sqs_batch_response  endendRustSDK for RustNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using Rust.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0use aws_lambda_events::{    event::sqs::{SqsBatchResponse, SqsEvent},    sqs::{BatchItemFailure, SqsMessage},};use lambda_runtime::{run, service_fn, Error, LambdaEvent};async fn process_record(_: &SqsMessage) -> Result<(), Error> {    Err(Error::from(\"Error processing message\"))}async fn function_handler(event: LambdaEvent<SqsEvent>) -> Result<SqsBatchResponse, Error> {    let mut batch_item_failures = Vec::new();    for record in event.payload.records {        match process_record(&record).await {            Ok(_) => (),            Err(_) => batch_item_failures.push(BatchItemFailure {                item_identifier: record.message_id.unwrap(),            }),        }    }    Ok(SqsBatchResponse {        batch_item_failures,    })}#[tokio::main]async fn main() -> Result<(), Error> {    run(service_fn(function_handler)).await}anchoranchoranchoranchoranchoranchoranchoranchor.NETGoJavaJavaScriptPHPPythonRubyRustAWS SDK for .NETNote        There's more on GitHub. Find the complete example and learn how to set up and run in the        Serverless examples        repository.    Reporting SQS batch item failures with Lambda using .NET.// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.// SPDX-License-Identifier: Apache-2.0using Amazon.Lambda.Core;using Amazon.Lambda.SQSEvents;// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]namespace sqsSample;public class Function{    public async Task<SQSBatchResponse> FunctionHandler(SQSEvent evnt, ILambdaContext context)    {        List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new List<SQSBatchResponse.BatchItemFailure>();        foreach(var message in evnt.Records)        {            try            {                //process your message                await ProcessMessageAsync(message, context);            }            catch (System.Exception)            {                //Add failed message identifier to the batchItemFailures list                batchItemFailures.Add(new SQSBatchResponse.BatchItemFailure{ItemIdentifier=message.MessageId});             }        }        return new SQSBatchResponse(batchItemFailures);    }    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)    {        if (String.IsNullOrEmpty(message.Body))        {            throw new Exception(\"No Body in SQS Message.\");        }        context.Logger.LogInformation($\"Processed message {message.Body}\");        // TODO: Do interesting work based on the new message        await Task.CompletedTask;    }}",
                                    {
                                        "code_example": "{ \n  \"batchItemFailures\": [ \n        {\n            \"itemIdentifier\": \"id2\"\n        },\n        {\n            \"itemIdentifier\": \"id4\"\n        }\n    ]\n}"
                                    },
                                    "If the failed events do not return to the queue, see How do I troubleshoot Lambda function SQS ReportBatchItemFailures? in the AWS Knowledge Center.",
                                    {
                                        "sub_header": "Success and failure conditions",
                                        "content": [
                                            "Lambda treats a batch as a complete success if your function returns any of the following:",
                                            "  1.An empty batchItemFailures list",
                                            "  2.A null batchItemFailures list",
                                            "  3.An empty EventResponse",
                                            "  4.A null EventResponse",
                                            "Lambda treats a batch as a complete failure if your function returns any of the following:",
                                            "  1.An invalid JSON response",
                                            "  2.An empty string itemIdentifier",
                                            "  3.A null itemIdentifier",
                                            "  4.An itemIdentifier with a bad key name",
                                            "  5.An itemIdentifier value with a message ID that doesn't exist"
                                        ]
                                    },
                                    {
                                        "sub_header": "CloudWatch metrics",
                                        "content": [
                                            "To determine whether your function is correctly reporting batch item failures, you can monitor the                NumberOfMessagesDeleted and ApproximateAgeOfOldestMessage Amazon SQS metrics in                Amazon CloudWatch.",
                                            "  1.NumberOfMessagesDeleted tracks the number of messages removed from your queue. If this                        drops to 0, this is a sign that your function response is not correctly returning failed messages.",
                                            "  2.ApproximateAgeOfOldestMessage tracks how long the oldest message has stayed in your queue.                        A sharp increase in this metric can indicate that your function is not correctly returning failed                        messages."
                                        ]
                                    }
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Parameters",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-parameters.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "All Lambda event source types share the same CreateEventSourceMapping and UpdateEventSourceMapping        API operations. However, only some of the parameters apply to Amazon SQS.",
                            "ParameterRequiredDefaultNotesBatchSizeN10For standard queues, the maximum is 10,000. For FIFO queues, the maximum is 10.EnabledNtruenone EventSourceArnYN/AThe ARN of the data stream or a stream consumerFunctionNameYN/A none FilterCriteriaNN/A Control which events Lambda sends to your functionFunctionResponseTypesNN/A To let your function report specific failures in a batch, include the value                            ReportBatchItemFailures in FunctionResponseTypes. For more information, see                            Implementing partial batch responses.MaximumBatchingWindowInSecondsN0none ScalingConfigNN/A Configuring maximum concurrency for Amazon SQS event sources"
                        ]
                    },
                    {
                        "title": "Event filtering",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-filtering.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "You can use event filtering to control which records from a stream or queue Lambda sends to your function.    For general information about how event filtering works, see Control which events Lambda sends to your function.",
                            "This section focuses on event filtering for Amazon MSK event sources.",
                            "Topics",
                            {
                                "sub_header": "Amazon SQS event filtering basics",
                                "content": [
                                    "Suppose your Amazon SQS queue contains messages in the following JSON format.",
                                    "{    \"RecordNumber\": 1234,    \"TimeStamp\": \"yyyy-mm-ddThh:mm:ss\",    \"RequestCode\": \"AAAA\"}",
                                    "An example record for this queue would look as follows.",
                                    "{    \"messageId\": \"059f36b4-87a3-44ab-83d2-661975830a7d\",    \"receiptHandle\": \"AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\",    \"body\": \"{\\n \"RecordNumber\": 1234,\\n \"TimeStamp\": \"yyyy-mm-ddThh:mm:ss\",\\n \"RequestCode\": \"AAAA\"\\n}\",    \"attributes\": {        \"ApproximateReceiveCount\": \"1\",        \"SentTimestamp\": \"1545082649183\",        \"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",        \"ApproximateFirstReceiveTimestamp\": \"1545082649185\"        },    \"messageAttributes\": {},    \"md5OfBody\": \"e4e68fb7bd0e697a0ae8f1bb342846b3\",    \"eventSource\": \"aws:sqs\",    \"eventSourceARN\": \"arn:aws:sqs:us-west-2:123456789012:my-queue\",    \"awsRegion\": \"us-west-2\"}",
                                    "To filter based on the contents of your Amazon SQS messages, use the body key in the Amazon SQS message record. Suppose you want to process             only those records where the RequestCode in your Amazon SQS message is “BBBB.” The FilterCriteria object would be             as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"body\\\" : { \\\"RequestCode\\\" : [ \\\"BBBB\\\" ] } }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON. ",
                                    "{    \"body\": {        \"RequestCode\": [ \"BBBB\" ]        }}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"body\" : { \"RequestCode\" : [ \"BBBB\" ] } }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:sqs:us-east-2:123456789012:my-queue \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"body\\\" : { \\\"RequestCode\\\" : [ \\\"BBBB\\\" ] } }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"body\" : { \"RequestCode\" : [ \"BBBB\" ] } }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"body\" : { \"RequestCode\" : [ \"BBBB\" ] } }"
                                    },
                                    "Suppose you want your function to process only those records where RecordNumber is greater than 9999. The FilterCriteria             object would be as follows.",
                                    "{    \"Filters\": [        {            \"Pattern\": \"{ \\\"body\\\" : { \\\"RecordNumber\\\" : [ { \\\"numeric\\\": [ \\\">\\\", 9999 ] } ] } }\"        }    ]}",
                                    "For added clarity, here is the value of the filter's Pattern expanded in plain JSON. ",
                                    "{    \"body\": {        \"RecordNumber\": [            {                \"numeric\": [ \">\", 9999 ]            }        ]    }}",
                                    "You can add your filter using the console, AWS CLI or an AWS SAM template.",
                                    "  1.Console : { \"body\" : { \"RecordNumber\" : [ { \"numeric\": [ \">\", 9999 ] } ] } }",
                                    "  2.AWS CLI : aws lambda create-event-source-mapping \\\n    --function-name my-function \\\n    --event-source-arn arn:aws:sqs:us-east-2:123456789012:my-queue \\\n    --filter-criteria '{\"Filters\": [{\"Pattern\": \"{ \\\"body\\\" : { \\\"RecordNumber\\\" : [ { \\\"numeric\\\": [ \\\">\\\", 9999 ] } ] } }\"}]}'",
                                    "  3.AWS SAM : FilterCriteria:\n  Filters:\n    - Pattern: '{ \"body\" : { \"RecordNumber\" : [ { \"numeric\": [ \">\", 9999 ] } ] } }'",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "To add this filter using the console, follow the instructions in Attaching filter criteria to an event source mapping (console) and enter the following                         string for the Filter criteria.",
                                    {
                                        "code_example": "{ \"body\" : { \"RecordNumber\" : [ { \"numeric\": [ \">\", 9999 ] } ] } }"
                                    },
                                    "For Amazon SQS, the message body can be any string. However, this can be problematic if your FilterCriteria expect body             to be in a valid JSON format. The reverse scenario is also true—if the incoming message body is in JSON format but your filter criteria             expects body to be a plain string, this can lead to unintended behavior.",
                                    "To avoid this issue, ensure that the format of body in your FilterCriteria matches the expected format of body in messages             that you receive from your queue. Before filtering your messages, Lambda automatically evaluates the format of the incoming message body and             of your filter pattern for body. If there is a mismatch, Lambda drops the message. The following table summarizes this evaluation:",
                                    "Incoming message body formatFilter pattern body formatResulting actionPlain stringPlain stringLambda filters based on your filter criteria.Plain stringNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Plain stringValid JSONLambda drops the message.Valid JSONPlain stringLambda drops the message.Valid JSONNo filter pattern for data propertiesLambda filters (on the other metadata properties only) based on your filter criteria.Valid JSONValid JSONLambda filters based on your filter criteria."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "Tutorial",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-example.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "In this tutorial, you create a Lambda function that consumes messages from an Amazon Simple Queue Service (Amazon SQS) queue. The Lambda function runs whenever a new message is added to the queue. The function writes the messages to an Amazon CloudWatch Logs stream. The following diagram shows the AWS     resources you use to complete the tutorial.",
                            "To complete this tutorial, you carry out the following steps:",
                            "  1 : Create a Lambda function that writes messages to CloudWatch Logs.",
                            "  2 : Create an Amazon SQS queue.",
                            "  3 : Create a Lambda event source mapping. The event source mapping reads the Amazon SQS queue and invokes your Lambda function when a new message is added.",
                            "  4 : Test the setup by adding messages to your queue and monitoring the results in         CloudWatch Logs.",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "Sign up for an AWS account",
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "Create a user with administrative access",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "If you have not yet installed the AWS Command Line Interface, follow the steps at  Installing or updating the latest version of the AWS CLI           to install it.",
                                    "The tutorial requires a command line terminal or shell to run commands. In Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.             To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.          ",
                                    "Install the AWS Command Line Interface",
                                    "If you have not yet installed the AWS Command Line Interface, follow the steps at  Installing or updating the latest version of the AWS CLI           to install it.",
                                    "The tutorial requires a command line terminal or shell to run commands. In Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.             To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.          "
                                ]
                            },
                            {
                                "sub_header": "Create the execution role",
                                "content": [
                                    "An execution role is an AWS Identity and Access Management (IAM) role that grants a Lambda function permission to access AWS services and resources. To allow       your function to read items from Amazon SQS, attach the AWSLambdaSQSQueueExecutionRole permissions policy.",
                                    "To create an execution role and attach an Amazon SQS permissions policy",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Choose Create role.",
                                    "  3 : For Trusted entity type, choose AWS service.",
                                    "  4 : For Use case, choose Lambda.",
                                    "  5 : Choose Next.",
                                    "  6 : In the Permissions policies search box, enter AWSLambdaSQSQueueExecutionRole.",
                                    "  7 : Select the AWSLambdaSQSQueueExecutionRole policy, and          then choose Next.",
                                    "  8 : Under Role details, for Role name, enter          lambda-sqs-role, then choose Create role.",
                                    "After role creation, note down the Amazon Resource Name (ARN) of your execution role. You'll      need it in later steps."
                                ]
                            },
                            {
                                "sub_header": "Create the function",
                                "content": [
                                    "Create a Lambda function that processes your Amazon SQS messages. The function code logs the body of      the Amazon SQS message to CloudWatch Logs.",
                                    "This tutorial uses the Node.js 18.x runtime, but we've also provided      example code in other runtime languages. You can select the tab in the following box to see code      for the runtime you're interested in. The JavaScript code you'll use in this step is in the first      example shown in the JavaScript tab.",
                                    "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SqsIntegrationSampleCode\n{\n    public async Task FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        foreach (var message in evnt.Records)\n        {\n            await ProcessMessageAsync(message, context);\n        }\n\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed message {message.Body}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n\n    }\n}\n\n",
                                    "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SqsIntegrationSampleCode\n{\n    public async Task FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        foreach (var message in evnt.Records)\n        {\n            await ProcessMessageAsync(message, context);\n        }\n\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed message {message.Body}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n\n    }\n}\n\n",
                                    "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage integration_sqs_to_lambda\n\nimport (\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(event events.SQSEvent) error {\n\tfor _, record := range event.Records {\n\t\terr := processMessage(record)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tfmt.Println(\"done\")\n\treturn nil\n}\n\nfunc processMessage(record events.SQSMessage) error {\n\tfmt.Printf(\"Processed message %s\\n\", record.Body)\n\t// TODO: Do interesting work based on the new message\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                                    "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage integration_sqs_to_lambda\n\nimport (\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(event events.SQSEvent) error {\n\tfor _, record := range event.Records {\n\t\terr := processMessage(record)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tfmt.Println(\"done\")\n\treturn nil\n}\n\nfunc processMessage(record events.SQSMessage) error {\n\tfmt.Printf(\"Processed message %s\\n\", record.Body)\n\t// TODO: Do interesting work based on the new message\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                                    "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent.SQSMessage;\n\npublic class Function implements RequestHandler<SQSEvent, Void> {\n    @Override\n    public Void handleRequest(SQSEvent sqsEvent, Context context) {\n        for (SQSMessage msg : sqsEvent.getRecords()) {\n            processMessage(msg, context);\n        }\n        context.getLogger().log(\"done\");\n        return null;\n    }\n\n    private void processMessage(SQSMessage msg, Context context) {\n        try {\n            context.getLogger().log(\"Processed message \" + msg.getBody());\n\n            // TODO: Do interesting work based on the new message\n\n        } catch (Exception e) {\n            context.getLogger().log(\"An error occurred\");\n            throw e;\n        }\n\n    }\n}\n",
                                    "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent.SQSMessage;\n\npublic class Function implements RequestHandler<SQSEvent, Void> {\n    @Override\n    public Void handleRequest(SQSEvent sqsEvent, Context context) {\n        for (SQSMessage msg : sqsEvent.getRecords()) {\n            processMessage(msg, context);\n        }\n        context.getLogger().log(\"done\");\n        return null;\n    }\n\n    private void processMessage(SQSMessage msg, Context context) {\n        try {\n            context.getLogger().log(\"Processed message \" + msg.getBody());\n\n            // TODO: Do interesting work based on the new message\n\n        } catch (Exception e) {\n            context.getLogger().log(\"An error occurred\");\n            throw e;\n        }\n\n    }\n}\n",
                                    "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const message of event.Records) {\n    await processMessageAsync(message);\n  }\n  console.info(\"done\");\n};\n\nasync function processMessageAsync(message) {\n  try {\n    console.log(`Processed message ${message.body}`);\n    // TODO: Do interesting work based on the new message\n    await Promise.resolve(1); //Placeholder for actual async work\n  } catch (err) {\n    console.error(\"An error occurred\");\n    throw err;\n  }\n}\n\n",
                                    "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const message of event.Records) {\n    await processMessageAsync(message);\n  }\n  console.info(\"done\");\n};\n\nasync function processMessageAsync(message) {\n  try {\n    console.log(`Processed message ${message.body}`);\n    // TODO: Do interesting work based on the new message\n    await Promise.resolve(1); //Placeholder for actual async work\n  } catch (err) {\n    console.error(\"An error occurred\");\n    throw err;\n  }\n}\n\n",
                                    "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\InvalidLambdaEvent;\nuse Bref\\Event\\Sqs\\SqsEvent;\nuse Bref\\Event\\Sqs\\SqsHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends SqsHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws InvalidLambdaEvent\n     */\n    public function handleSqs(SqsEvent $event, Context $context): void\n    {\n        foreach ($event->getRecords() as $record) {\n            $body = $record->getBody();\n            // TODO: Do interesting work based on the new message\n        }\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\InvalidLambdaEvent;\nuse Bref\\Event\\Sqs\\SqsEvent;\nuse Bref\\Event\\Sqs\\SqsHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends SqsHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws InvalidLambdaEvent\n     */\n    public function handleSqs(SqsEvent $event, Context $context): void\n    {\n        foreach ($event->getRecords() as $record) {\n            $body = $record->getBody();\n            // TODO: Do interesting work based on the new message\n        }\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                                    "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event, context):\n    for message in event['Records']:\n        process_message(message)\n    print(\"done\")\n\ndef process_message(message):\n    try:\n        print(f\"Processed message {message['body']}\")\n        # TODO: Do interesting work based on the new message\n    except Exception as err:\n        print(\"An error occurred\")\n        raise err\n\n",
                                    "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event, context):\n    for message in event['Records']:\n        process_message(message)\n    print(\"done\")\n\ndef process_message(message):\n    try:\n        print(f\"Processed message {message['body']}\")\n        # TODO: Do interesting work based on the new message\n    except Exception as err:\n        print(\"An error occurred\")\n        raise err\n\n",
                                    "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event:, context:)\n  event['Records'].each do |message|\n    process_message(message)\n  end\n  puts \"done\"\nend\n\ndef process_message(message)\n  begin\n    puts \"Processed message #{message['body']}\"\n    # TODO: Do interesting work based on the new message\n  rescue StandardError => err\n    puts \"An error occurred\"\n    raise err\n  end\nend\n",
                                    "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event:, context:)\n  event['Records'].each do |message|\n    process_message(message)\n  end\n  puts \"done\"\nend\n\ndef process_message(message)\n  begin\n    puts \"Processed message #{message['body']}\"\n    # TODO: Do interesting work based on the new message\n  rescue StandardError => err\n    puts \"An error occurred\"\n    raise err\n  end\nend\n",
                                    "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::sqs::SqsEvent;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<SqsEvent>) -> Result<(), Error> {\n    event.payload.records.iter().for_each(|record| {\n        // process the record\n        tracing::info!(\"Message body: {}\", record.body.as_deref().unwrap_or_default())\n    });\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                                    "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::sqs::SqsEvent;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<SqsEvent>) -> Result<(), Error> {\n    event.payload.records.iter().for_each(|record| {\n        // process the record\n        tracing::info!(\"Message body: {}\", record.body.as_deref().unwrap_or_default())\n    });\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SqsIntegrationSampleCode\n{\n    public async Task FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        foreach (var message in evnt.Records)\n        {\n            await ProcessMessageAsync(message, context);\n        }\n\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed message {message.Body}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n\n    }\n}\n\n",
                                    "To create a Node.js Lambda function",
                                    " 1 : Create a directory for the project, and then switch to that directory. ",
                                    {
                                        "code_example": "mkdir sqs-tutorial\ncd sqs-tutorial"
                                    },
                                    "  2 : Copy the sample JavaScript code into a new file named index.js.",
                                    " 3 : Create a deployment package using the following zip command. ",
                                    {
                                        "code_example": "zip function.zip index.js"
                                    },
                                    " 4 : Create a Lambda function using the create-function          AWS CLI command. For the role parameter, enter the ARN of the execution role          that you created earlier.NoteThe Lambda function and the Amazon SQS queue must be in the same AWS Region. ",
                                    {
                                        "code_example": "aws lambda create-function --function-name ProcessSQSRecord \\\n--zip-file fileb://function.zip --handler index.handler --runtime nodejs18.x \\\n--role arn:aws:iam::111122223333:role/lambda-sqs-role"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Test the function",
                                "content": [
                                    "Invoke your Lambda function manually using the invoke AWS CLI command and a sample Amazon SQS      event.",
                                    "To invoke the Lambda function with a sample event",
                                    " 1 : Save the following JSON as a file named input.json. This JSON simulates an event that Amazon SQS might send to your Lambda function, where            \"body\" contains the actual message from the queue. In this example, the message is \"test\".Example  Amazon SQS eventThis is a test event—you don't need to change the message or the account number. ",
                                    {
                                        "code_example": "{\n    \"Records\": [\n        {\n            \"messageId\": \"059f36b4-87a3-44ab-83d2-661975830a7d\",\n            \"receiptHandle\": \"AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\",\n            \"body\": \"test\",\n            \"attributes\": {\n                \"ApproximateReceiveCount\": \"1\",\n                \"SentTimestamp\": \"1545082649183\",\n                \"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",\n                \"ApproximateFirstReceiveTimestamp\": \"1545082649185\"\n            },\n            \"messageAttributes\": {},\n            \"md5OfBody\": \"098f6bcd4621d373cade4e832627b4f6\",\n            \"eventSource\": \"aws:sqs\",\n            \"eventSourceARN\": \"arn:aws:sqs:us-east-1:111122223333:my-queue\",\n            \"awsRegion\": \"us-east-1\"\n        }\n    ]\n}"
                                    },
                                    " 2 : Run the following invoke AWS CLI command. This command returns CloudWatch logs in the response. For more information about retrieving logs, see Access logs with the AWS CLI. The cli-binary-format option is required if you're using AWS CLI version 2. To make this the default setting, run aws configure set cli-binary-format raw-in-base64-out. For more information, see AWS CLI supported global command line options in the AWS Command Line Interface User Guide for Version 2.",
                                    {
                                        "code_example": "aws lambda invoke --function-name ProcessSQSRecord --payload file://input.json out --log-type Tail \\\n--query 'LogResult' --output text --cli-binary-format raw-in-base64-out | base64 --decode"
                                    },
                                    " 3 : Find the INFO log in the response. This is where the Lambda function logs the message body.          You should see logs that look like this: ",
                                    {
                                        "code_example": "2023-09-11T22:45:04.271Z\t348529ce-2211-4222-9099-59d07d837b60\tINFO\tProcessed message test\n2023-09-11T22:45:04.288Z\t348529ce-2211-4222-9099-59d07d837b60\tINFO\tdone"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Create an Amazon SQS queue",
                                "content": [
                                    "Create an Amazon SQS queue that the Lambda function can use as an event source. The Lambda function and the Amazon SQS queue must be in the same AWS Region.",
                                    "To create a queue",
                                    "  1 : Open the Amazon SQS console.",
                                    "  2 : Choose Create queue.",
                                    "  3 : Enter a name for the queue. Leave all other options at the default settings.",
                                    "  4 : Choose Create queue.",
                                    "After creating the queue, note down its ARN. You need this in the next step when you      associate the queue with your Lambda function."
                                ]
                            },
                            {
                                "sub_header": "Configure the event source",
                                "content": [
                                    "Connect the Amazon SQS queue to your Lambda function by creating an event source mapping. The event source mapping reads the Amazon SQS queue and invokes your Lambda function when a new message is added.",
                                    "To create a mapping between your Amazon SQS queue and your Lambda function, use the create-event-source-mapping AWS CLI command. Example:",
                                    "aws lambda create-event-source-mapping --function-name ProcessSQSRecord  --batch-size 10 \\--event-source-arn arn:aws:sqs:us-east-1:111122223333:my-queue",
                                    "To get a list of your event source mappings, use the list-event-source-mappings command. Example:",
                                    "aws lambda list-event-source-mappings --function-name ProcessSQSRecord"
                                ]
                            },
                            {
                                "sub_header": "Send a test message",
                                "content": [
                                    "To send an Amazon SQS message to the Lambda function",
                                    "  1 : Open the Amazon SQS console.",
                                    "  2 : Choose the queue that you created earlier.",
                                    "  3 : Choose Send and receive messages.",
                                    "  4 : Under Message body, enter a test message, such as \"this is a test message.\"",
                                    "  5 : Choose Send message.",
                                    "Lambda polls the queue for updates. When there is a new message, Lambda invokes your function with this new      event data from the queue. If the function handler returns without exceptions, Lambda considers the message successfully processed and      begins reading new messages in the queue. After successfully processing a message, Lambda automatically deletes it      from the queue. If the handler throws an exception, Lambda considers the batch of messages not successfully      processed, and Lambda invokes the function with the same batch of messages."
                                ]
                            },
                            {
                                "sub_header": "Check the CloudWatch logs",
                                "content": [
                                    "To confirm that the function processed the message",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Choose the ProcessSQSRecord function.",
                                    "  3 : Choose Monitor.",
                                    "  4 : Choose View CloudWatch logs.",
                                    "  5 : In the CloudWatch console, choose the Log stream for the function.",
                                    " 6 : Find the INFO log. This is where the Lambda function logs the message body. You should see the message that you sent from the Amazon SQS queue. Example: ",
                                    {
                                        "code_example": "2023-09-11T22:49:12.730Z b0c41e9c-0556-5a8b-af83-43e59efeec71 INFO Processed message this is a test message."
                                    }
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources",
                                "content": [
                                    "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "To delete the Amazon SQS queue",
                                    "  1 : Sign in to the AWS Management Console and open the Amazon SQS console at         https://console.aws.amazon.com/sqs/.",
                                    "  2 : Select the queue you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter confirm in the text input field.",
                                    "  5 : Choose Delete."
                                ]
                            }
                        ]
                    },
                    {
                        "title": "SQS cross-account tutorial",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-cross-account-example.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "In this tutorial, you create a Lambda function that consumes messages from an Amazon Simple Queue Service (Amazon SQS) queue in a    different AWS account. This tutorial involves two AWS accounts: Account A refers to the    account that contains your Lambda function, and Account B refers to the account that contains    the Amazon SQS queue.",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "This tutorial assumes that you have some knowledge of basic Lambda operations and the Lambda console. If you      haven't already, follow the instructions in Create a Lambda function with the console to create your first Lambda function.",
                                    "To complete the following steps, you need the AWS CLI version 2. Commands and the expected output are listed in separate blocks:",
                                    "aws --version",
                                    "You should see the following output:",
                                    "aws-cli/2.13.27 Python/3.11.6 Linux/4.14.328-248.540.amzn2.x86_64 exe/x86_64.amzn.2",
                                    "For long commands, an escape character (\\) is used to split a command over multiple lines.",
                                    "On Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.     To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.     Example CLI commands in this guide use Linux formatting. Commands which include inline JSON documents must be reformatted if you are using the Windows CLI.    "
                                ]
                            },
                            {
                                "sub_header": "Create the execution role (Account A)",
                                "content": [
                                    "In Account A, create an execution role      that gives your function permission to access the required AWS resources.",
                                    "To create an execution role",
                                    "  1 : Open the Roles page in the AWS Identity and Access Management (IAM)          console.",
                                    "  2 : Choose Create role.",
                                    "  3 : Create a role with the following properties.Trusted entity –              AWS LambdaPermissions –              AWSLambdaSQSQueueExecutionRoleRole name –              cross-account-lambda-sqs-role",
                                    "The AWSLambdaSQSQueueExecutionRole policy has the permissions that the function needs to      read items from Amazon SQS and to write logs to Amazon CloudWatch Logs."
                                ]
                            },
                            {
                                "sub_header": "Create the function (Account A)",
                                "content": [
                                    "In Account A, create a Lambda function that processes your Amazon SQS messages. The Lambda function and the Amazon SQS queue must be in the same AWS Region.",
                                    "The following Node.js 18 code example writes each message to a log in CloudWatch Logs.",
                                    "Example index.mjs",
                                    {
                                        "code_example": "export const handler = async function(event, context) {\n  event.Records.forEach(record => {\n    const { body } = record;\n    console.log(body);\n  });\n  return {};\n}"
                                    },
                                    "To create the function",
                                    "Note",
                                    "Following these steps creates a function in Node.js 18. For other languages, the steps are similar, but          some details are different.",
                                    "  1 : Save the code example as a file named index.mjs.",
                                    " 2 : Create a deployment package. ",
                                    {
                                        "code_example": "zip function.zip index.mjs"
                                    },
                                    " 3 : Create the function using the create-function AWS Command Line Interface (AWS CLI) command. ",
                                    {
                                        "code_example": "aws lambda create-function --function-name CrossAccountSQSExample \\\n--zip-file fileb://function.zip --handler index.handler --runtime nodejs18.x \\\n--role arn:aws:iam::<AccountA_ID>:role/cross-account-lambda-sqs-role"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Test the function (Account A)",
                                "content": [
                                    "In Account A, test your Lambda function manually using the invoke AWS CLI      command and a sample Amazon SQS event.",
                                    "If the handler returns normally without exceptions, Lambda considers the message to be successfully processed      and begins reading new messages in the queue. After successfully processing a message, Lambda automatically deletes      it from the queue. If the handler throws an exception, Lambda considers the batch of messages not successfully      processed, and Lambda invokes the function with the same batch of messages.",
                                    " 1 : Save the following JSON as a file named input.txt. The preceding JSON simulates an event that Amazon SQS might send to your Lambda function, where            \"body\" contains the actual message from the queue.",
                                    {
                                        "code_example": "{\n    \"Records\": [\n        {\n            \"messageId\": \"059f36b4-87a3-44ab-83d2-661975830a7d\",\n            \"receiptHandle\": \"AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\",\n            \"body\": \"test\",\n            \"attributes\": {\n                \"ApproximateReceiveCount\": \"1\",\n                \"SentTimestamp\": \"1545082649183\",\n                \"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",\n                \"ApproximateFirstReceiveTimestamp\": \"1545082649185\"\n            },\n            \"messageAttributes\": {},\n            \"md5OfBody\": \"098f6bcd4621d373cade4e832627b4f6\",\n            \"eventSource\": \"aws:sqs\",\n            \"eventSourceARN\": \"arn:aws:sqs:us-east-1:111122223333:example-queue\",\n            \"awsRegion\": \"us-east-1\"\n        }\n    ]\n}"
                                    },
                                    " 2 : Run the following invoke AWS CLI command. The cli-binary-format option is required if you're using AWS CLI version 2. To make this the default setting, run aws configure set cli-binary-format raw-in-base64-out. For more information, see AWS CLI supported global command line options in the AWS Command Line Interface User Guide for Version 2.",
                                    {
                                        "code_example": "aws lambda invoke --function-name CrossAccountSQSExample \\\n--cli-binary-format raw-in-base64-out \\\n--payload file://input.txt outputfile.txt"
                                    },
                                    "  3 : Verify the output in the file outputfile.txt."
                                ]
                            },
                            {
                                "sub_header": "Create an Amazon SQS queue (Account B)",
                                "content": [
                                    "In Account B, create an Amazon SQS queue that the Lambda function in Account      A can use as an event source. The Lambda function and the Amazon SQS queue must be in the same AWS Region.",
                                    "To create a queue",
                                    "  1 : Open the Amazon SQS console.",
                                    "  2 : Choose Create queue.",
                                    " 3 : Create a queue with the following properties.Type – StandardName – LambdaCrossAccountQueueConfiguration – Keep the default settings.Access policy – Choose Advanced. Paste in the              following JSON policy: This policy grants the Lambda execution role in Account A permissions to consume              messages from this Amazon SQS queue.",
                                    {
                                        "code_example": "{\n   \"Version\": \"2012-10-17\",\n   \"Id\": \"Queue1_Policy_UUID\",\n   \"Statement\": [{\n      \"Sid\":\"Queue1_AllActions\",\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n         \"AWS\": [\n            \"arn:aws:iam::<AccountA_ID>:role/cross-account-lambda-sqs-role\"\n         ]\n      },\n      \"Action\": \"sqs:*\",\n      \"Resource\": \"arn:aws:sqs:us-east-1:<AccountB_ID>:LambdaCrossAccountQueue\"\n    }\n  ]\n}"
                                    },
                                    "  4 : After creating the queue, record its Amazon Resource Name (ARN). You need this in the next step when you          associate the queue with your Lambda function."
                                ]
                            },
                            {
                                "sub_header": "Configure the event source (Account A)",
                                "content": [
                                    "In Account A, create an event source mapping between the Amazon SQS queue in Account        B and your Lambda function by running the following create-event-source-mapping AWS CLI      command.",
                                    "aws lambda create-event-source-mapping --function-name CrossAccountSQSExample --batch-size 10 \\--event-source-arn arn:aws:sqs:us-east-1:<AccountB_ID>:LambdaCrossAccountQueue",
                                    "To get a list of your event source mappings, run the following command.",
                                    "aws lambda list-event-source-mappings --function-name CrossAccountSQSExample \\--event-source-arn arn:aws:sqs:us-east-1:<AccountB_ID>:LambdaCrossAccountQueue"
                                ]
                            },
                            {
                                "sub_header": "Test the setup",
                                "content": [
                                    "You can now test the setup as follows:",
                                    "  1 : In Account B, open the Amazon SQS console.",
                                    "  2 : Choose LambdaCrossAccountQueue, which you created earlier.",
                                    "  3 : Choose Send and receive messages.",
                                    "  4 : Under Message body, enter a test message.",
                                    "  5 : Choose Send message.",
                                    "Your Lambda function in Account A should receive the message. Lambda will continue to poll      the queue for updates. When there is a new message, Lambda invokes your function with this new event data from the      queue. Your function runs and creates logs in Amazon CloudWatch. You can view the logs in the CloudWatch console."
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources",
                                "content": [
                                    "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                                    "In Account A, clean up your execution role and Lambda function.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "In Account B, clean up the Amazon SQS queue.",
                                    "To delete the Amazon SQS queue",
                                    "  1 : Sign in to the AWS Management Console and open the Amazon SQS console at         https://console.aws.amazon.com/sqs/.",
                                    "  2 : Select the queue you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter confirm in the text input field.",
                                    "  5 : Choose Delete."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "Note",
                    "If you want to send data to a target other than a Lambda function or enrich the data before sending it, see     Amazon EventBridge Pipes.",
                    "You can use a Lambda function to process messages in an Amazon Simple Queue Service (Amazon SQS) queue. Lambda    supports both     standard queues and       first-in, first-out (FIFO) queues for event source mappings. The Lambda function and the Amazon SQS queue must be in the same AWS Region, although they can be in different AWS accounts.",
                    "Topics",
                    {
                        "sub_header": "Understanding polling and batching behavior for Amazon SQS event source mappings",
                        "content": [
                            "With Amazon SQS event source mappings, Lambda polls the queue and invokes your function       synchronously with an event. Each event can contain a batch of multiple messages from the queue. Lambda receives      these events one batch at a time, and invokes your function once for each batch. When your function successfully      processes a batch, Lambda deletes its messages from the queue.",
                            "When Lambda receives a batch, the messages stay in the queue but are hidden for the length of the queue's            visibility timeout. If your function successfully processes all messages in the batch, Lambda deletes      the messages from the queue. By default, if your function encounters an error while processing a batch, all      messages in that batch become visible in the queue again after the visibility timeout expires. For this reason,      your function code must be able to process the same message multiple times without unintended side effects.",
                            "Warning",
                            "Lambda event source mappings process each event at least once, and duplicate processing of records can occur. To avoid potential issues related to duplicate events, we strongly recommend that you make your function code idempotent. To learn more, see How do I make my Lambda function idempotent in the AWS Knowledge Center.",
                            "To prevent Lambda from processing a message multiple times, you can either configure your event source      mapping to include batch item failures in your      function response, or you can use the DeleteMessage API to      remove messages from the queue as  your Lambda function successfully processes them.",
                            "For more information about configuration parameters that Lambda supports for SQS event source      mappings, see Creating an SQS event source mapping."
                        ]
                    },
                    {
                        "sub_header": "Example standard queue message event",
                        "content": [
                            "Example Amazon SQS message event (standard queue)",
                            {
                                "code_example": "{\n    \"Records\": [\n        {\n            \"messageId\": \"059f36b4-87a3-44ab-83d2-661975830a7d\",\n            \"receiptHandle\": \"AQEBwJnKyrHigUMZj6rYigCgxlaS3SLy0a...\",\n            \"body\": \"Test message.\",\n            \"attributes\": {\n                \"ApproximateReceiveCount\": \"1\",\n                \"SentTimestamp\": \"1545082649183\",\n                \"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",\n                \"ApproximateFirstReceiveTimestamp\": \"1545082649185\"\n            },\n            \"messageAttributes\": {\n                \"myAttribute\": {\n                    \"stringValue\": \"myValue\", \n                    \"stringListValues\": [], \n                    \"binaryListValues\": [], \n                    \"dataType\": 'String'\n                }\n            },\n            \"md5OfBody\": \"e4e68fb7bd0e697a0ae8f1bb342846b3\",\n            \"eventSource\": \"aws:sqs\",\n            \"eventSourceARN\": \"arn:aws:sqs:us-east-2:123456789012:my-queue\",\n            \"awsRegion\": \"us-east-2\"\n        },\n        {\n            \"messageId\": \"2e1424d4-f796-459a-8184-9c92662be6da\",\n            \"receiptHandle\": \"AQEBzWwaftRI0KuVm4tP+/7q1rGgNqicHq...\",\n            \"body\": \"Test message.\",\n            \"attributes\": {\n                \"ApproximateReceiveCount\": \"1\",\n                \"SentTimestamp\": \"1545082650636\",\n                \"SenderId\": \"AIDAIENQZJOLO23YVJ4VO\",\n                \"ApproximateFirstReceiveTimestamp\": \"1545082650649\"\n            },\n            \"messageAttributes\": {},\n            \"md5OfBody\": \"e4e68fb7bd0e697a0ae8f1bb342846b3\",\n            \"eventSource\": \"aws:sqs\",\n            \"eventSourceARN\": \"arn:aws:sqs:us-east-2:123456789012:my-queue\",\n            \"awsRegion\": \"us-east-2\"\n        }\n    ]\n}"
                            },
                            "By default, Lambda polls up to 10 messages in your queue at once and sends that batch to your function. To avoid      invoking the function with a small number of records, you can configure the event source to buffer records for up      to 5 minutes by configuring a batch window. Before invoking the function, Lambda continues to poll messages from the      standard queue until the batch window expires, the invocation payload size      quota is reached, or the configured maximum batch size is reached.",
                            "If you're using a batch window and your SQS queue contains very low traffic, Lambda might wait for up to 20      seconds before invoking your function. This is true even if you set a batch window lower than 20 seconds.    ",
                            "Note",
                            "In Java, you might experience null pointer errors when deserializing JSON. This could be due to how case of  \"Records\" and \"eventSourceARN\" is converted by the JSON object mapper."
                        ]
                    },
                    {
                        "sub_header": " Example FIFO queue message event",
                        "content": [
                            "For FIFO queues, records contain additional attributes that are related to deduplication and sequencing.",
                            "Example Amazon SQS message event (FIFO queue)",
                            {
                                "code_example": "{\n    \"Records\": [\n        {\n            \"messageId\": \"11d6ee51-4cc7-4302-9e22-7cd8afdaadf5\",\n            \"receiptHandle\": \"AQEBBX8nesZEXmkhsmZeyIE8iQAMig7qw...\",\n            \"body\": \"Test message.\",\n            \"attributes\": {\n                \"ApproximateReceiveCount\": \"1\",\n                \"SentTimestamp\": \"1573251510774\",\n                \"SequenceNumber\": \"18849496460467696128\",\n                \"MessageGroupId\": \"1\",\n                \"SenderId\": \"AIDAIO23YVJENQZJOL4VO\",\n                \"MessageDeduplicationId\": \"1\",\n                \"ApproximateFirstReceiveTimestamp\": \"1573251510774\"\n            },\n            \"messageAttributes\": {},\n            \"md5OfBody\": \"e4e68fb7bd0e697a0ae8f1bb342846b3\",\n            \"eventSource\": \"aws:sqs\",\n            \"eventSourceARN\": \"arn:aws:sqs:us-east-2:123456789012:fifo.fifo\",\n            \"awsRegion\": \"us-east-2\"\n        }\n    ]\n}"
                            }
                        ]
                    }
                ]
            },
            {
                "title": "S3 Batch",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/services-s3-batch.html",
                "source": "aws_lamda",
                "parent_content": [
                    "You can use Amazon S3 batch operations to invoke a Lambda function on a large set of Amazon S3 objects. Amazon S3    tracks the progress of batch operations, sends notifications, and stores a completion report that shows the status    of each action. ",
                    "To run a batch operation, you create an Amazon S3 batch operations job. When you create    the job, you provide a manifest (the list of objects) and configure the action to perform on those objects. ",
                    "When the batch job starts, Amazon S3 invokes the Lambda function synchronously for each object in the manifest.    The event parameter includes the names of the bucket and the object. ",
                    "The following example shows the event that Amazon S3 sends to the Lambda function for an object that is named      customerImage1.jpg in the amzn-s3-demo-bucket    bucket.",
                    "Example Amazon S3 batch request event",
                    {
                        "code_example": "\n{\n\"invocationSchemaVersion\": \"1.0\",\n    \"invocationId\": \"YXNkbGZqYWRmaiBhc2RmdW9hZHNmZGpmaGFzbGtkaGZza2RmaAo\",\n    \"job\": {\n        \"id\": \"f3cc4f60-61f6-4a2b-8a21-d07600c373ce\"\n    },\n    \"tasks\": [\n        {\n            \"taskId\": \"dGFza2lkZ29lc2hlcmUK\",\n            \"s3Key\": \"customerImage1.jpg\",\n            \"s3VersionId\": \"1\",\n            \"s3BucketArn\": \"arn:aws:s3:::amzn-s3-demo-bucket\"\n        }\n    ]  \n}"
                    },
                    "Your Lambda function must return a JSON object with the fields as shown in the following example. You can copy the    invocationId and taskId from the event parameter. You can return a string in the resultString.    Amazon S3 saves the resultString values in the completion report. ",
                    "Example Amazon S3 batch request response",
                    {
                        "code_example": "\n{\n  \"invocationSchemaVersion\": \"1.0\",\n  \"treatMissingKeysAs\" : \"PermanentFailure\",\n  \"invocationId\" : \"YXNkbGZqYWRmaiBhc2RmdW9hZHNmZGpmaGFzbGtkaGZza2RmaAo\",\n  \"results\": [\n    {\n      \"taskId\": \"dGFza2lkZ29lc2hlcmUK\",\n      \"resultCode\": \"Succeeded\",\n      \"resultString\": \"[\\\"Alice\\\", \\\"Bob\\\"]\"\n    }\n  ]\n}\n  "
                    },
                    {
                        "sub_header": "Invoking Lambda functions from Amazon S3 batch operations ",
                        "content": [
                            "You can invoke the Lambda function with an unqualified or qualified function ARN. If you want to use the same      function version for the entire batch job, configure a specific function version in the FunctionARN      parameter when you create your job. If you configure an alias or the $LATEST qualifier, the batch job immediately      starts calling the new version of the function if the alias or $LATEST is updated during the job execution. ",
                            "Note that you can't reuse an existing Amazon S3 event-based function for batch operations. This is because the Amazon S3      batch operation passes a different event parameter to the Lambda function and expects a return message with a      specific JSON structure.",
                            "In the resource-based policy that you create for the Amazon S3      batch job, ensure that you set permission for the job to invoke your Lambda function.",
                            "In the execution role for the function, set a trust policy for Amazon S3 to assume the role when it runs your      function.",
                            "If your function uses the AWS SDK to manage Amazon S3 resources, you need to add Amazon S3 permissions in the  execution role. ",
                            "When the job runs, Amazon S3 starts multiple function instances to process the Amazon S3 objects in parallel, up to      the concurrency limit of the function. Amazon S3 limits the initial ramp-up of instances      to avoid excess cost for smaller jobs. ",
                            "If the Lambda function returns a TemporaryFailure response code, Amazon S3 retries the operation. ",
                            "For more information about Amazon S3 batch operations, see Performing batch operations in the        Amazon S3 Developer Guide. ",
                            "For an example of how to use a Lambda function in Amazon S3 batch operations, see Invoking a Lambda function from Amazon S3        batch operations in the Amazon S3 Developer Guide. "
                        ]
                    }
                ]
            },
            {
                "title": "SNS",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sns.html",
                "contents": [
                    {
                        "title": "Tutorial",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/with-sns-example.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "In this tutorial, you use a Lambda function in one AWS account to subscribe to an Amazon Simple Notification Service (Amazon SNS) topic in a separate AWS account. When     you publish messages to your Amazon SNS topic, your Lambda function reads the contents of the message and outputs it to Amazon CloudWatch Logs. To complete this     tutorial, you use the AWS Command Line Interface (AWS CLI).",
                            "To complete this tutorial, you perform the following steps:",
                            "  1.account A : In , create an Amazon SNS topic.",
                            "  2.account B : In , create a Lambda function that will read messages from the topic.",
                            "  3.account B : In , create a subscription to the topic.",
                            "  4.account A : Publish messages to the Amazon SNS topic in  and confirm that the Lambda function in         account B outputs them to CloudWatch Logs.",
                            "By completing these steps, you will learn how to configure an Amazon SNS topic to invoke a Lambda function. You will also learn how to create an    AWS Identity and Access Management (IAM) policy that gives permission for a resource in another AWS account to invoke Lambda.",
                            "In the tutorial, you use two separate AWS accounts. The AWS CLI commands illustrate this by using two named profiles called accountA     and accountB, each configured for use with a different AWS account. To learn how to configure the AWS CLI to use different profiles,     see Configuration and credential file settings in the     AWS Command Line Interface User Guide for Version 2. Be sure to configure the same default AWS Region for both profiles.",
                            "If the AWS CLI profiles you create for the two AWS accounts use different names, or if you use the default profile and one named profile,     modify the AWS CLI commands in the following steps as needed.",
                            {
                                "sub_header": "Prerequisites",
                                "content": [
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "Sign up for an AWS account",
                                    "If you do not have an AWS account, complete the following steps to create one.",
                                    "To sign up for an AWS account",
                                    "  1 : Open https://portal.aws.amazon.com/billing/signup.",
                                    "  2 : Follow the online instructions.Part of the sign-up procedure involves receiving a phone call and entering   a verification code on the phone keypad.When you sign up for an AWS account, an AWS account root user is created. The root user has access to all AWS services  and resources in the account. As a security best practice, assign administrative access to a user, and use only the root user to perform tasks that require root user access.",
                                    "AWS sends you a confirmation email after the sign-up process iscomplete. At any time, you can view your current account activity and manage your account bygoing to https://aws.amazon.com/ and choosing My  Account.",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "Create a user with administrative access",
                                    "After you sign up for an AWS account, secure your AWS account root user, enable AWS IAM Identity Center, and create an administrative user so that you don't use the root user for everyday tasks.",
                                    "Secure your AWS account root user",
                                    "  1 :  Sign in to the AWS Management Console as the account owner by choosing Root user and entering your AWS account email address. On the next page, enter your password.For help signing in by using root user, see Signing in as the root user in the AWS Sign-In User Guide.",
                                    "  2 : Turn on multi-factor authentication (MFA) for your root user.For instructions, see Enable a virtual MFA device for your AWS account root user (console) in the IAM User Guide.",
                                    "Create a user with administrative access",
                                    "  1 : Enable IAM Identity Center.For instructions, see Enabling AWS IAM Identity Center in the AWS IAM Identity Center User Guide.",
                                    "  2 : In IAM Identity Center, grant administrative access to a user.For a tutorial about using the IAM Identity Center directory as your identity source, see  Configure user access with the default IAM Identity Center directory in the AWS IAM Identity Center User Guide.",
                                    "Sign in as the user with administrative access",
                                    "  1.To sign in with your IAM Identity Center user, use the sign-in URL that was sent to your email address when you created the IAM Identity Center user.For help signing in using an IAM Identity Center user, see Signing in to the AWS access portal in the AWS Sign-In User Guide.",
                                    "Assign access to additional users",
                                    "  1 : In IAM Identity Center, create a permission set that follows the best practice of applying least-privilege permissions.For instructions, see  Create a permission set in the AWS IAM Identity Center User Guide.",
                                    "  2 : Assign users to a group, and then assign single sign-on access to the group.For instructions, see  Add groups in the AWS IAM Identity Center User Guide.",
                                    "If you have not yet installed the AWS Command Line Interface, follow the steps at  Installing or updating the latest version of the AWS CLI           to install it.",
                                    "The tutorial requires a command line terminal or shell to run commands. In Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.             To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.          ",
                                    "Install the AWS Command Line Interface",
                                    "If you have not yet installed the AWS Command Line Interface, follow the steps at  Installing or updating the latest version of the AWS CLI           to install it.",
                                    "The tutorial requires a command line terminal or shell to run commands. In Linux and macOS, use your preferred shell and package manager.",
                                    "Note",
                                    "In Windows, some Bash CLI commands that you commonly use with Lambda (such as zip) are not supported by the operating system's built-in terminals.             To get a Windows-integrated version of Ubuntu and Bash, install the Windows Subsystem for Linux.          "
                                ]
                            },
                            {
                                "sub_header": "Create an Amazon SNS topic (account A)",
                                "content": [
                                    "To create the topic",
                                    "  1.account A : In , create an Amazon SNS standard topic using the following AWS CLI command.aws sns create-topic --name sns-topic-for-lambda --profile accountAYou should see output similar to the following.{    \"TopicArn\": \"arn:aws:sns:us-west-2:123456789012:sns-topic-for-lambda\"}Make a note of the Amazon Resource Name (ARN) of your topic. You’ll need it later in the tutorial when you add permissions to your           Lambda function to subscribe to the topic.",
                                    {
                                        "code_example": "aws sns create-topic --name sns-topic-for-lambda --profile accountA"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Create a function execution role (account B)",
                                "content": [
                                    "An execution role is an IAM role that grants a Lambda function permission to access AWS services and resources. Before you create your       function in account B, you create a role that gives the function basic permissions to write logs to       CloudWatch Logs. We’ll add the permissions to read from your Amazon SNS topic in a later step.",
                                    "To create an execution role",
                                    "  1 : In account B open the roles page in the           IAM console.",
                                    "  2 : Choose Create role.",
                                    "  3 : For Trusted entity type, choose AWS service.",
                                    "  4 : For Use case, choose Lambda.",
                                    "  5 : Choose Next.",
                                    "  6 : Add a basic permissions policy to the role by doing the following:In the Permissions policies search box, enter AWSLambdaBasicExecutionRole.Choose Next.",
                                    "  7 : Finalize the role creation by doing the following:Under Role details, enter lambda-sns-role for Role name.Choose Create role."
                                ]
                            },
                            {
                                "sub_header": "Create a Lambda function (account B)",
                                "content": [
                                    "Create a Lambda function that processes your Amazon SNS messages. The function code logs the message      contents of each record to Amazon CloudWatch Logs.",
                                    "This tutorial uses the Node.js 18.x runtime, but we've also provided example code in other      runtime languages. You can select the tab in the following box to see code for the runtime      you're interested in. The JavaScript code you'll use in this step is in the first example      shown in the JavaScript tab.",
                                    "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SNSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SnsIntegration;\n\npublic class Function\n{\n    public async Task FunctionHandler(SNSEvent evnt, ILambdaContext context)\n    {\n        foreach (var record in evnt.Records)\n        {\n            await ProcessRecordAsync(record, context);\n        }\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessRecordAsync(SNSEvent.SNSRecord record, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed record {record.Sns.Message}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n    }\n}\n",
                                    "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SNSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SnsIntegration;\n\npublic class Function\n{\n    public async Task FunctionHandler(SNSEvent evnt, ILambdaContext context)\n    {\n        foreach (var record in evnt.Records)\n        {\n            await ProcessRecordAsync(record, context);\n        }\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessRecordAsync(SNSEvent.SNSRecord record, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed record {record.Sns.Message}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n    }\n}\n",
                                    "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, snsEvent events.SNSEvent) {\n\tfor _, record := range snsEvent.Records {\n\t\tprocessMessage(record)\n\t}\n\tfmt.Println(\"done\")\n}\n\nfunc processMessage(record events.SNSEventRecord) {\n\tmessage := record.SNS.Message\n\tfmt.Printf(\"Processed message: %s\\n\", message)\n\t// TODO: Process your record here\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                                    "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, snsEvent events.SNSEvent) {\n\tfor _, record := range snsEvent.Records {\n\t\tprocessMessage(record)\n\t}\n\tfmt.Println(\"done\")\n}\n\nfunc processMessage(record events.SNSEventRecord) {\n\tmessage := record.SNS.Message\n\tfmt.Printf(\"Processed message: %s\\n\", message)\n\t// TODO: Process your record here\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                                    "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent.SNSRecord;\n\n\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class SNSEventHandler implements RequestHandler<SNSEvent, Boolean> {\n    LambdaLogger logger;\n\n    @Override\n    public Boolean handleRequest(SNSEvent event, Context context) {\n        logger = context.getLogger();\n        List<SNSRecord> records = event.getRecords();\n        if (!records.isEmpty()) {\n            Iterator<SNSRecord> recordsIter = records.iterator();\n            while (recordsIter.hasNext()) {\n                processRecord(recordsIter.next());\n            }\n        }\n        return Boolean.TRUE;\n    }\n\n    public void processRecord(SNSRecord record) {\n        try {\n            String message = record.getSNS().getMessage();\n            logger.log(\"message: \" + message);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n\n\n\n\n",
                                    "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent.SNSRecord;\n\n\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class SNSEventHandler implements RequestHandler<SNSEvent, Boolean> {\n    LambdaLogger logger;\n\n    @Override\n    public Boolean handleRequest(SNSEvent event, Context context) {\n        logger = context.getLogger();\n        List<SNSRecord> records = event.getRecords();\n        if (!records.isEmpty()) {\n            Iterator<SNSRecord> recordsIter = records.iterator();\n            while (recordsIter.hasNext()) {\n                processRecord(recordsIter.next());\n            }\n        }\n        return Boolean.TRUE;\n    }\n\n    public void processRecord(SNSRecord record) {\n        try {\n            String message = record.getSNS().getMessage();\n            logger.log(\"message: \" + message);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n\n\n\n\n",
                                    "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    await processMessageAsync(record);\n  }\n  console.info(\"done\");\n};\n\nasync function processMessageAsync(record) {\n  try {\n    const message = JSON.stringify(record.Sns.Message);\n    console.log(`Processed message ${message}`);\n    await Promise.resolve(1); //Placeholder for actual async work\n  } catch (err) {\n    console.error(\"An error occurred\");\n    throw err;\n  }\n}\n\n",
                                    "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    await processMessageAsync(record);\n  }\n  console.info(\"done\");\n};\n\nasync function processMessageAsync(record) {\n  try {\n    const message = JSON.stringify(record.Sns.Message);\n    console.log(`Processed message ${message}`);\n    await Promise.resolve(1); //Placeholder for actual async work\n  } catch (err) {\n    console.error(\"An error occurred\");\n    throw err;\n  }\n}\n\n",
                                    "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n/* \nSince native PHP support for AWS Lambda is not available, we are utilizing Bref's PHP functions runtime for AWS Lambda.\nFor more information on Bref's PHP runtime for Lambda, refer to: https://bref.sh/docs/runtimes/function\n\nAnother approach would be to create a custom runtime. \nA practical example can be found here: https://aws.amazon.com/blogs/apn/aws-lambda-custom-runtime-for-php-a-practical-example/\n*/\n\n// Additional composer packages may be required when using Bref or any other PHP functions runtime.\n// require __DIR__ . '/vendor/autoload.php';\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Sns\\SnsEvent;\nuse Bref\\Event\\Sns\\SnsHandler;\n\nclass Handler extends SnsHandler\n{\n    public function handleSns(SnsEvent $event, Context $context): void\n    {\n        foreach ($event->getRecords() as $record) {\n            $message = $record->getMessage();\n\n            // TODO: Implement your custom processing logic here\n            // Any exception thrown will be logged and the invocation will be marked as failed\n\n            echo \"Processed Message: $message\" . PHP_EOL;\n        }\n    }\n}\n\nreturn new Handler();\n\n",
                                    "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n/* \nSince native PHP support for AWS Lambda is not available, we are utilizing Bref's PHP functions runtime for AWS Lambda.\nFor more information on Bref's PHP runtime for Lambda, refer to: https://bref.sh/docs/runtimes/function\n\nAnother approach would be to create a custom runtime. \nA practical example can be found here: https://aws.amazon.com/blogs/apn/aws-lambda-custom-runtime-for-php-a-practical-example/\n*/\n\n// Additional composer packages may be required when using Bref or any other PHP functions runtime.\n// require __DIR__ . '/vendor/autoload.php';\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Sns\\SnsEvent;\nuse Bref\\Event\\Sns\\SnsHandler;\n\nclass Handler extends SnsHandler\n{\n    public function handleSns(SnsEvent $event, Context $context): void\n    {\n        foreach ($event->getRecords() as $record) {\n            $message = $record->getMessage();\n\n            // TODO: Implement your custom processing logic here\n            // Any exception thrown will be logged and the invocation will be marked as failed\n\n            echo \"Processed Message: $message\" . PHP_EOL;\n        }\n    }\n}\n\nreturn new Handler();\n\n",
                                    "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event, context):\n    for record in event['Records']:\n        process_message(record)\n    print(\"done\")\n\ndef process_message(record):\n    try:\n        message = record['Sns']['Message']\n        print(f\"Processed message {message}\")\n        # TODO; Process your record here\n        \n    except Exception as e:\n        print(\"An error occurred\")\n        raise e\n\n",
                                    "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event, context):\n    for record in event['Records']:\n        process_message(record)\n    print(\"done\")\n\ndef process_message(record):\n    try:\n        message = record['Sns']['Message']\n        print(f\"Processed message {message}\")\n        # TODO; Process your record here\n        \n    except Exception as e:\n        print(\"An error occurred\")\n        raise e\n\n",
                                    "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event:, context:)\n  event['Records'].map { |record| process_message(record) }\nend\n\ndef process_message(record)\n  message = record['Sns']['Message']\n  puts(\"Processing message: #{message}\")\nrescue StandardError => e\n  puts(\"Error processing message: #{e}\")\n  raise\nend\n\n",
                                    "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event:, context:)\n  event['Records'].map { |record| process_message(record) }\nend\n\ndef process_message(record)\n  message = record['Sns']['Message']\n  puts(\"Processing message: #{message}\")\nrescue StandardError => e\n  puts(\"Error processing message: #{e}\")\n  raise\nend\n\n",
                                    "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::sns::SnsEvent;\nuse aws_lambda_events::sns::SnsRecord;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse tracing::info;\n\n// Built with the following dependencies:\n//  aws_lambda_events = { version = \"0.10.0\", default-features = false, features = [\"sns\"] }\n//  lambda_runtime = \"0.8.1\"\n//  tokio = { version = \"1\", features = [\"macros\"] }\n//  tracing = { version = \"0.1\", features = [\"log\"] }\n//  tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n\nasync fn function_handler(event: LambdaEvent<SnsEvent>) -> Result<(), Error> {\n    for event in event.payload.records {\n        process_record(&event)?;\n    }\n    \n    Ok(())\n}\n\nfn process_record(record: &SnsRecord) -> Result<(), Error> {\n    info!(\"Processing SNS Message: {}\", record.sns.message);\n\n    // Implement your record handling code here.\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        .with_target(false)\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                                    "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::sns::SnsEvent;\nuse aws_lambda_events::sns::SnsRecord;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse tracing::info;\n\n// Built with the following dependencies:\n//  aws_lambda_events = { version = \"0.10.0\", default-features = false, features = [\"sns\"] }\n//  lambda_runtime = \"0.8.1\"\n//  tokio = { version = \"1\", features = [\"macros\"] }\n//  tracing = { version = \"0.1\", features = [\"log\"] }\n//  tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n\nasync fn function_handler(event: LambdaEvent<SnsEvent>) -> Result<(), Error> {\n    for event in event.payload.records {\n        process_record(&event)?;\n    }\n    \n    Ok(())\n}\n\nfn process_record(record: &SnsRecord) -> Result<(), Error> {\n    info!(\"Processing SNS Message: {}\", record.sns.message);\n\n    // Implement your record handling code here.\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        .with_target(false)\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SNSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SnsIntegration;\n\npublic class Function\n{\n    public async Task FunctionHandler(SNSEvent evnt, ILambdaContext context)\n    {\n        foreach (var record in evnt.Records)\n        {\n            await ProcessRecordAsync(record, context);\n        }\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessRecordAsync(SNSEvent.SNSRecord record, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed record {record.Sns.Message}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n    }\n}\n",
                                    "To create the function",
                                    " 1 : Create a directory for the project, and then switch to that directory. ",
                                    {
                                        "code_example": "mkdir sns-tutorial\ncd sns-tutorial"
                                    },
                                    "  2 : Copy the sample JavaScript code into a new file named index.js.",
                                    " 3 : Create a deployment package using the following zip command. ",
                                    {
                                        "code_example": "zip function.zip index.js"
                                    },
                                    " 4 : Run the following AWS CLI command to create your Lambda function in account B. You should see output similar to the following.{    \"FunctionName\": \"Function-With-SNS\",    \"FunctionArn\": \"arn:aws:lambda:us-west-2:123456789012:function:Function-With-SNS\",    \"Runtime\": \"nodejs18.x\",    \"Role\": \"arn:aws:iam::123456789012:role/lambda_basic_role\",    \"Handler\": \"index.handler\",    ...    \"RuntimeVersionConfig\": {        \"RuntimeVersionArn\": \"arn:aws:lambda:us-west-2::runtime:7d5f06b69c951da8a48b926ce280a9daf2e8bb1a74fc4a2672580c787d608206\"    }}",
                                    {
                                        "code_example": "aws lambda create-function --function-name Function-With-SNS \\\n    --zip-file fileb://function.zip --handler index.handler --runtime nodejs18.x \\\n    --role arn:aws:iam::<AccountB_ID>:role/lambda-sns-role  \\\n    --timeout 60 --profile accountB"
                                    },
                                    "  5 : Record the Amazon Resource Name (ARN) of your function. You’ll need it later in the tutorial          when you add permissions to allow Amazon SNS to invoke your function."
                                ]
                            },
                            {
                                "sub_header": "Add permissions to function (account B)",
                                "content": [
                                    "For Amazon SNS to invoke your function, you need to grant it permission in a statement on a resource-based policy.       You add this statement using the AWS CLI add-permission command.",
                                    "To grant Amazon SNS permission to invoke your function",
                                    "  1.account B : In , run the following AWS CLI command using the ARN for your Amazon SNS topic you recorded earlier.aws lambda add-permission --function-name Function-With-SNS \\    --source-arn arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda \\    --statement-id function-with-sns --action \"lambda:InvokeFunction\" \\    --principal sns.amazonaws.com --profile accountBYou should see output similar to the following.{    \"Statement\": \"{\\\"Condition\\\":{\\\"ArnLike\\\":{\\\"AWS:SourceArn\\\":      \\\"arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda\\\"}},      \\\"Action\\\":[\\\"lambda:InvokeFunction\\\"],      \\\"Resource\\\":\\\"arn:aws:lambda:us-east-1:<AccountB_ID>:function:Function-With-SNS\\\",      \\\"Effect\\\":\\\"Allow\\\",\\\"Principal\\\":{\\\"Service\\\":\\\"sns.amazonaws.com\\\"},      \\\"Sid\\\":\\\"function-with-sns\\\"}\"}",
                                    {
                                        "code_example": "aws lambda add-permission --function-name Function-With-SNS \\\n    --source-arn arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda \\\n    --statement-id function-with-sns --action \"lambda:InvokeFunction\" \\\n    --principal sns.amazonaws.com --profile accountB"
                                    },
                                    "Note",
                                    "If the account with the Amazon SNS topic is hosted in an opt-in AWS Region,         you need to specify the region in the principal. For example, if you're working with an Amazon SNS topic in the Asia Pacific (Hong Kong) region,         you need to specify sns.ap-east-1.amazonaws.com instead of sns.amazonaws.com for the principal. "
                                ]
                            },
                            {
                                "sub_header": "Grant cross-account permission for Amazon SNS subscription (account A)",
                                "content": [
                                    "For your Lambda function in account B to subscribe to the Amazon SNS topic you created in account A,       you need to grant permission for account B to subscribe to your topic. You grant this permission using the       AWS CLI add-permission command. ",
                                    "To grant permission for account B to subscribe to the topic",
                                    "  1.account A : In , run the following AWS CLI command. Use the ARN for the Amazon SNS topic you recorded earlier.aws sns add-permission --label lambda-access --aws-account-id <AccountB_ID> \\    --topic-arn arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda \\      --action-name Subscribe ListSubscriptionsByTopic --profile accountA",
                                    {
                                        "code_example": "aws sns add-permission --label lambda-access --aws-account-id <AccountB_ID> \\\n    --topic-arn arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda \\  \n    --action-name Subscribe ListSubscriptionsByTopic --profile accountA"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Create a subscription (account B)",
                                "content": [
                                    "In account B, you now subscribe your Lambda function to the Amazon SNS topic you created at the beginning of the     tutorial in account A. When a message is sent to this topic (sns-topic-for-lambda), Amazon SNS invokes     your Lambda function Function-With-SNS in account B. ",
                                    "To create a subscription",
                                    "  1.account B : In , run the following AWS CLI command. Use your default region you created your topic in and the      ARNs for your topic and Lambda function.aws sns subscribe --protocol lambda \\    --region us-east-1 \\    --topic-arn arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda \\    --notification-endpoint arn:aws:lambda:us-east-1:<AccountB_ID>:function:Function-With-SNS \\    --profile accountBYou should see output similar to the following.{    \"SubscriptionArn\": \"arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda:5d906xxxx-7c8x-45dx-a9dx-0484e31c98xx\"}",
                                    {
                                        "code_example": "aws sns subscribe --protocol lambda \\\n    --region us-east-1 \\\n    --topic-arn arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda \\\n    --notification-endpoint arn:aws:lambda:us-east-1:<AccountB_ID>:function:Function-With-SNS \\\n    --profile accountB"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Publish messages to topic (account A and account B)",
                                "content": [
                                    "Now that your Lambda function in account B is subscribed to your Amazon SNS topic in account A,       it’s time to test your setup by publishing messages to your topic. To confirm that Amazon SNS has invoked your Lambda function, you use CloudWatch Logs to view       your function’s output.",
                                    "To publish a message to your topic and view your function's output",
                                    "  1 : Enter Hello World into a text file and save it as message.txt.",
                                    " 2 : From the same directory you saved your text file in, run the following AWS CLI command in account A.         Use the ARN for your own topic. This will return a message ID with a unique identifier, indicating that Amazon SNS has accepted the message. Amazon SNS then attempts to deliver           the message to the topic’s subscribers. To confirm that Amazon SNS has invoked your Lambda function, use CloudWatch Logs to view your function’s output:",
                                    {
                                        "code_example": "aws sns publish --message file://message.txt --subject Test \\\n    --topic-arn arn:aws:sns:us-east-1:<AccountA_ID>:sns-topic-for-lambda \\\n    --profile accountA"
                                    },
                                    "  3 : In account B, open the Log groups page of the Amazon CloudWatch console.",
                                    "  4 : Choose the log group for your function (/aws/lambda/Function-With-SNS).",
                                    "  5 : Choose the most recent log stream.",
                                    " 6 : If your function was correctly invoked, you’ll see output similar to the following showing the contents of the message you published to           your topic. ",
                                    {
                                        "code_example": "2023-07-31T21:42:51.250Z c1cba6b8-ade9-4380-aa32-d1a225da0e48 INFO Processed message Hello World\n2023-07-31T21:42:51.250Z c1cba6b8-ade9-4380-aa32-d1a225da0e48 INFO done"
                                    }
                                ]
                            },
                            {
                                "sub_header": "Clean up your resources",
                                "content": [
                                    "You can now delete the resources that you created for this tutorial, unless you want to retain them. By deleting AWS resources that you're no longer using, you prevent unnecessary charges to your AWS account.",
                                    "In Account A, clean up your Amazon SNS topic.",
                                    "To delete the Amazon SNS topic",
                                    "  1 : Open the Topics page of the Amazon SNS console.",
                                    "  2 : Select the topic you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter delete me in the text input field.",
                                    "  5 : Choose Delete.",
                                    "In Account B, clean up your execution role, Lambda function, and Amazon SNS subscription.",
                                    "To delete the execution role",
                                    "  1 : Open the Roles page of the IAM console.",
                                    "  2 : Select the execution role that you created.",
                                    "  3 : Choose Delete.",
                                    "  4 : Enter the name of the role in the text input field and choose Delete.",
                                    "To delete the Lambda function",
                                    "  1 : Open the Functions page of the Lambda console.",
                                    "  2 : Select the function that you created.",
                                    "  3 : Choose Actions, Delete.",
                                    "  4 : Type delete in the text input field and choose Delete.",
                                    "To delete the Amazon SNS subscription",
                                    "  1 : Open the Subscriptions page of the Amazon SNS console.",
                                    "  2 : Select the subscription you created.",
                                    "  3 : Choose Delete, Delete."
                                ]
                            }
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "You can use a Lambda function to process Amazon Simple Notification Service (Amazon SNS) notifications. Amazon SNS supports Lambda functions as a    target for messages sent to a topic. You can subscribe your function to topics in the same account or in other AWS    accounts. For a detailed walkthrough, see Tutorial: Using AWS Lambda with Amazon Simple Notification Service.",
                    "Lambda supports SNS triggers for standard SNS topics only. FIFO topics aren't supported.",
                    "For asynchronous invocation, Lambda queues the message and handles retries. If Amazon SNS can't reach Lambda or the    message is rejected, Amazon SNS retries at increasing intervals over several hours. For details, see Reliability in the Amazon SNS FAQs.",
                    "Warning",
                    "Lambda event source mappings process each event at least once, and duplicate processing of records can occur. To avoid potential issues related to duplicate events, we strongly recommend that you make your function code idempotent. To learn more, see How do I make my Lambda function idempotent in the AWS Knowledge Center.",
                    "Topics",
                    {
                        "sub_header": "Adding an Amazon SNS topic trigger for a Lambda function using the console",
                        "content": [
                            "To add an SNS topic as a trigger for a Lambda function, the easiest way is to use      the Lambda console. When you add the trigger via the console, Lambda automatically      sets up the necessary permissions and subscriptions to start receiving events from      the SNS topic.",
                            "To add an SNS topic as a trigger for a Lambda function (console)",
                            "  1 : Open the Functions page of the Lambda console.",
                            "  2 : Choose the name of a function you want to add the trigger for.",
                            "  3 : Choose Configuration, and then choose Triggers.",
                            "  4 : Choose Add trigger.",
                            "  5 : Under Trigger configuration, in the dropdown menu, choose          SNS.",
                            "  6 : For SNS topic, choose the SNS topic to subscribe to."
                        ]
                    },
                    {
                        "sub_header": "Manually adding an Amazon SNS topic trigger for a Lambda function",
                        "content": [
                            "To set up an SNS trigger for a Lambda function manually, you need to complete the following      steps:",
                            "  1.Define a resource-based policy for your function to allow SNS to invoke it.",
                            "  2.Subscribe your Lambda function to the Amazon SNS topic.NoteIf your SNS topic and your Lambda function are in different AWS accounts, you also            need to grant extra permissions to allow cross-account subscriptions to the SNS topic.            For more information, see Grant            cross-account permission for Amazon SNS subscription.",
                            "You can use the AWS Command Line Interface (AWS CLI) to complete both of these steps. First, to define      a resource-based policy for a Lambda function that allows SNS invocations, use the following      AWS CLI command. Be sure to replace the value of --function-name with your      Lambda function name, and the value of --source-arn with your SNS topic ARN.",
                            "aws lambda add-permission --function-name example-function \\    --source-arn arn:aws:sns:us-east-1:123456789012:sns-topic-for-lambda \\    --statement-id function-with-sns --action \"lambda:InvokeFunction\" \\    --principal sns.amazonaws.com",
                            "To subscribe your function to the SNS topic, use the following AWS CLI command. Replace      the value of --topic-arn with your SNS topic ARN, and the value of      --notification-endpoint with your Lambda function ARN.",
                            "aws sns subscribe --protocol lambda \\    --region us-east-1 \\    --topic-arn arn:aws:sns:us-east-1:123456789012:sns-topic-for-lambda \\    --notification-endpoint arn:aws:lambda:us-east-1:123456789012:function:example-function"
                        ]
                    },
                    {
                        "sub_header": "Sample SNS event shape",
                        "content": [
                            "Amazon SNS invokes your function asynchronously with an event that contains a      message and metadata.",
                            "Example Amazon SNS message event",
                            {
                                "code_example": "{\n  \"Records\": [\n    {\n      \"EventVersion\": \"1.0\",\n      \"EventSubscriptionArn\": \"arn:aws:sns:us-east-1:123456789012:sns-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\",\n      \"EventSource\": \"aws:sns\",\n      \"Sns\": {\n        \"SignatureVersion\": \"1\",\n        \"Timestamp\": \"2019-01-02T12:45:07.000Z\",\n        \"Signature\": \"tcc6faL2yUC6dgZdmrwh1Y4cGa/ebXEkAi6RibDsvpi+tE/1+82j...65r==\",\n        \"SigningCertURL\": \"https://sns.us-east-1.amazonaws.com/SimpleNotificationService-ac565b8b1a6c5d002d285f9598aa1d9b.pem\",\n        \"MessageId\": \"95df01b4-ee98-5cb9-9903-4c221d41eb5e\",\n        \"Message\": \"Hello from SNS!\",\n        \"MessageAttributes\": {\n          \"Test\": {\n            \"Type\": \"String\",\n            \"Value\": \"TestString\"\n          },\n          \"TestBinary\": {\n            \"Type\": \"Binary\",\n            \"Value\": \"TestBinary\"\n          }\n        },\n        \"Type\": \"Notification\",\n        \"UnsubscribeUrl\": \"https://sns.us-east-1.amazonaws.com/?Action=Unsubscribe&amp;SubscriptionArn=arn:aws:sns:us-east-1:123456789012:test-lambda:21be56ed-a058-49f5-8c98-aedd2564c486\",\n        \"TopicArn\":\"arn:aws:sns:us-east-1:123456789012:sns-lambda\",\n        \"Subject\": \"TestInvoke\"\n      }\n    }\n  ]\n}"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "title": "Code examples",
        "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples.html",
        "source": "aws_lamda",
        "sections": [
            "The following code examples show how to use Lambda with an AWS software development kit (SDK).        ",
            "Basics are code examples that show you how to perform the essential operations within a service.",
            "Actions are code excerpts from larger programs and must be run in context. While actions    show you how to call individual service functions, you can see actions in context in their related scenarios.",
            "Scenarios are code examples that show you how to accomplish specific tasks by    calling multiple functions within a service or combined with other AWS services.",
            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions.",
            "Get started",
            "The following code examples show how to get started using Lambda.",
            "  1..NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\n\npublic class HelloLambda\n{\n    static async Task Main(string[] args)\n    {\n        var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get started with AWS Lambda by listing your existing Lambda functions:\");\n\n        var response = await lambdaClient.ListFunctionsAsync();\n        response.Functions.ForEach(function =>\n        {\n            Console.WriteLine($\"{function.FunctionName}\\t{function.Description}\");\n        });\n    }\n}\n\n\n",
            "  2.AWS SDK for .NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\n\npublic class HelloLambda\n{\n    static async Task Main(string[] args)\n    {\n        var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get started with AWS Lambda by listing your existing Lambda functions:\");\n\n        var response = await lambdaClient.ListFunctionsAsync();\n        response.Functions.ForEach(function =>\n        {\n            Console.WriteLine($\"{function.FunctionName}\\t{function.Description}\");\n        });\n    }\n}\n\n\n",
            "  3.C++ : # Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS lambda)\n\n# Set this project's name.\nproject(\"hello_lambda\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_lambda.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n\n",
            "  4.SDK for C++ : # Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS lambda)\n\n# Set this project's name.\nproject(\"hello_lambda\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_lambda.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n\n",
            "  5.Go : \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n)\n\n// main uses the AWS SDK for Go (v2) to create an AWS Lambda client and list up to 10\n// functions in your account.\n// This example uses the default settings specified in your shared credentials\n// and config files.\nfunc main() {\n\tctx := context.Background()\n\tsdkConfig, err := config.LoadDefaultConfig(ctx)\n\tif err != nil {\n\t\tfmt.Println(\"Couldn't load default configuration. Have you set up your AWS account?\")\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tlambdaClient := lambda.NewFromConfig(sdkConfig)\n\n\tmaxItems := 10\n\tfmt.Printf(\"Let's list up to %v functions for your account.\\n\", maxItems)\n\tresult, err := lambdaClient.ListFunctions(ctx, &lambda.ListFunctionsInput{\n\t\tMaxItems: aws.Int32(int32(maxItems)),\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Couldn't list functions for your account. Here's why: %v\\n\", err)\n\t\treturn\n\t}\n\tif len(result.Functions) == 0 {\n\t\tfmt.Println(\"You don't have any functions!\")\n\t} else {\n\t\tfor _, function := range result.Functions {\n\t\t\tfmt.Printf(\"\\t%v\\n\", *function.FunctionName)\n\t\t}\n\t}\n}\n\n\n",
            "  6.SDK for Go V2 : \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n)\n\n// main uses the AWS SDK for Go (v2) to create an AWS Lambda client and list up to 10\n// functions in your account.\n// This example uses the default settings specified in your shared credentials\n// and config files.\nfunc main() {\n\tctx := context.Background()\n\tsdkConfig, err := config.LoadDefaultConfig(ctx)\n\tif err != nil {\n\t\tfmt.Println(\"Couldn't load default configuration. Have you set up your AWS account?\")\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tlambdaClient := lambda.NewFromConfig(sdkConfig)\n\n\tmaxItems := 10\n\tfmt.Printf(\"Let's list up to %v functions for your account.\\n\", maxItems)\n\tresult, err := lambdaClient.ListFunctions(ctx, &lambda.ListFunctionsInput{\n\t\tMaxItems: aws.Int32(int32(maxItems)),\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Couldn't list functions for your account. Here's why: %v\\n\", err)\n\t\treturn\n\t}\n\tif len(result.Functions) == 0 {\n\t\tfmt.Println(\"You don't have any functions!\")\n\t} else {\n\t\tfor _, function := range result.Functions {\n\t\t\tfmt.Printf(\"\\t%v\\n\", *function.FunctionName)\n\t\t}\n\t}\n}\n\n\n",
            "  7.Java :     /**\n     * Lists the AWS Lambda functions associated with the current AWS account.\n     *\n     * @param awsLambda an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     *\n     * @throws LambdaException if an error occurs while interacting with the AWS Lambda service\n     */\n    public static void listFunctions(LambdaClient awsLambda) {\n        try {\n            ListFunctionsResponse functionResult = awsLambda.listFunctions();\n            List<FunctionConfiguration> list = functionResult.functions();\n            for (FunctionConfiguration config : list) {\n                System.out.println(\"The function name is \" + config.functionName());\n            }\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
            "  8.SDK for Java 2.x :     /**\n     * Lists the AWS Lambda functions associated with the current AWS account.\n     *\n     * @param awsLambda an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     *\n     * @throws LambdaException if an error occurs while interacting with the AWS Lambda service\n     */\n    public static void listFunctions(LambdaClient awsLambda) {\n        try {\n            ListFunctionsResponse functionResult = awsLambda.listFunctions();\n            List<FunctionConfiguration> list = functionResult.functions();\n            for (FunctionConfiguration config : list) {\n                System.out.println(\"The function name is \" + config.functionName());\n            }\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
            "  9.JavaScript : import { LambdaClient, paginateListFunctions } from \"@aws-sdk/client-lambda\";\n\nconst client = new LambdaClient({});\n\nexport const helloLambda = async () => {\n  const paginator = paginateListFunctions({ client }, {});\n  const functions = [];\n\n  for await (const page of paginator) {\n    const funcNames = page.Functions.map((f) => f.FunctionName);\n    functions.push(...funcNames);\n  }\n\n  console.log(\"Functions:\");\n  console.log(functions.join(\"\\n\"));\n  return functions;\n};\n\n",
            "  10.SDK for JavaScript (v3) : import { LambdaClient, paginateListFunctions } from \"@aws-sdk/client-lambda\";\n\nconst client = new LambdaClient({});\n\nexport const helloLambda = async () => {\n  const paginator = paginateListFunctions({ client }, {});\n  const functions = [];\n\n  for await (const page of paginator) {\n    const funcNames = page.Functions.map((f) => f.FunctionName);\n    functions.push(...funcNames);\n  }\n\n  console.log(\"Functions:\");\n  console.log(functions.join(\"\\n\"));\n  return functions;\n};\n\n",
            "  11.Python : \nimport boto3\n\n\ndef main():\n    \"\"\"\n    List the Lambda functions in your AWS account.\n    \"\"\"\n    # Create the Lambda client\n    lambda_client = boto3.client(\"lambda\")\n\n    # Use the paginator to list the functions\n    paginator = lambda_client.get_paginator(\"list_functions\")\n    response_iterator = paginator.paginate()\n\n    print(\"Here are the Lambda functions in your account:\")\n    for page in response_iterator:\n        for function in page[\"Functions\"]:\n            print(f\"  {function['FunctionName']}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n",
            "  12.SDK for Python (Boto3) : \nimport boto3\n\n\ndef main():\n    \"\"\"\n    List the Lambda functions in your AWS account.\n    \"\"\"\n    # Create the Lambda client\n    lambda_client = boto3.client(\"lambda\")\n\n    # Use the paginator to list the functions\n    paginator = lambda_client.get_paginator(\"list_functions\")\n    response_iterator = paginator.paginate()\n\n    print(\"Here are the Lambda functions in your account:\")\n    for page in response_iterator:\n        for function in page[\"Functions\"]:\n            print(f\"  {function['FunctionName']}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n",
            "  13.Ruby : \nrequire 'aws-sdk-lambda'\n\n# Creates an AWS Lambda client using the default credentials and configuration\ndef lambda_client\n  Aws::Lambda::Client.new\nend\n\n# Lists the Lambda functions in your AWS account, paginating the results if necessary\ndef list_lambda_functions\n  lambda = lambda_client\n\n  # Use a pagination iterator to list all functions\n  functions = []\n  lambda.list_functions.each_page do |page|\n    functions.concat(page.functions)\n  end\n\n  # Print the name and ARN of each function\n  functions.each do |function|\n    puts \"Function name: #{function.function_name}\"\n    puts \"Function ARN: #{function.function_arn}\"\n    puts\n  end\n\n  puts \"Total functions: #{functions.count}\"\nend\n\nlist_lambda_functions if __FILE__ == $PROGRAM_NAME\n\n\n",
            "  14.SDK for Ruby : \nrequire 'aws-sdk-lambda'\n\n# Creates an AWS Lambda client using the default credentials and configuration\ndef lambda_client\n  Aws::Lambda::Client.new\nend\n\n# Lists the Lambda functions in your AWS account, paginating the results if necessary\ndef list_lambda_functions\n  lambda = lambda_client\n\n  # Use a pagination iterator to list all functions\n  functions = []\n  lambda.list_functions.each_page do |page|\n    functions.concat(page.functions)\n  end\n\n  # Print the name and ARN of each function\n  functions.each do |function|\n    puts \"Function name: #{function.function_name}\"\n    puts \"Function ARN: #{function.function_arn}\"\n    puts\n  end\n\n  puts \"Total functions: #{functions.count}\"\nend\n\nlist_lambda_functions if __FILE__ == $PROGRAM_NAME\n\n\n",
            "Hello Lambda",
            "The following code examples show how to get started using Lambda.",
            "  1..NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\n\npublic class HelloLambda\n{\n    static async Task Main(string[] args)\n    {\n        var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get started with AWS Lambda by listing your existing Lambda functions:\");\n\n        var response = await lambdaClient.ListFunctionsAsync();\n        response.Functions.ForEach(function =>\n        {\n            Console.WriteLine($\"{function.FunctionName}\\t{function.Description}\");\n        });\n    }\n}\n\n\n",
            "  2.AWS SDK for .NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\n\npublic class HelloLambda\n{\n    static async Task Main(string[] args)\n    {\n        var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get started with AWS Lambda by listing your existing Lambda functions:\");\n\n        var response = await lambdaClient.ListFunctionsAsync();\n        response.Functions.ForEach(function =>\n        {\n            Console.WriteLine($\"{function.FunctionName}\\t{function.Description}\");\n        });\n    }\n}\n\n\n",
            "  3.C++ : # Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS lambda)\n\n# Set this project's name.\nproject(\"hello_lambda\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_lambda.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n\n",
            "  4.SDK for C++ : # Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS lambda)\n\n# Set this project's name.\nproject(\"hello_lambda\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_lambda.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n\n",
            "  5.Go : \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n)\n\n// main uses the AWS SDK for Go (v2) to create an AWS Lambda client and list up to 10\n// functions in your account.\n// This example uses the default settings specified in your shared credentials\n// and config files.\nfunc main() {\n\tctx := context.Background()\n\tsdkConfig, err := config.LoadDefaultConfig(ctx)\n\tif err != nil {\n\t\tfmt.Println(\"Couldn't load default configuration. Have you set up your AWS account?\")\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tlambdaClient := lambda.NewFromConfig(sdkConfig)\n\n\tmaxItems := 10\n\tfmt.Printf(\"Let's list up to %v functions for your account.\\n\", maxItems)\n\tresult, err := lambdaClient.ListFunctions(ctx, &lambda.ListFunctionsInput{\n\t\tMaxItems: aws.Int32(int32(maxItems)),\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Couldn't list functions for your account. Here's why: %v\\n\", err)\n\t\treturn\n\t}\n\tif len(result.Functions) == 0 {\n\t\tfmt.Println(\"You don't have any functions!\")\n\t} else {\n\t\tfor _, function := range result.Functions {\n\t\t\tfmt.Printf(\"\\t%v\\n\", *function.FunctionName)\n\t\t}\n\t}\n}\n\n\n",
            "  6.SDK for Go V2 : \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n)\n\n// main uses the AWS SDK for Go (v2) to create an AWS Lambda client and list up to 10\n// functions in your account.\n// This example uses the default settings specified in your shared credentials\n// and config files.\nfunc main() {\n\tctx := context.Background()\n\tsdkConfig, err := config.LoadDefaultConfig(ctx)\n\tif err != nil {\n\t\tfmt.Println(\"Couldn't load default configuration. Have you set up your AWS account?\")\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tlambdaClient := lambda.NewFromConfig(sdkConfig)\n\n\tmaxItems := 10\n\tfmt.Printf(\"Let's list up to %v functions for your account.\\n\", maxItems)\n\tresult, err := lambdaClient.ListFunctions(ctx, &lambda.ListFunctionsInput{\n\t\tMaxItems: aws.Int32(int32(maxItems)),\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Couldn't list functions for your account. Here's why: %v\\n\", err)\n\t\treturn\n\t}\n\tif len(result.Functions) == 0 {\n\t\tfmt.Println(\"You don't have any functions!\")\n\t} else {\n\t\tfor _, function := range result.Functions {\n\t\t\tfmt.Printf(\"\\t%v\\n\", *function.FunctionName)\n\t\t}\n\t}\n}\n\n\n",
            "  7.Java :     /**\n     * Lists the AWS Lambda functions associated with the current AWS account.\n     *\n     * @param awsLambda an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     *\n     * @throws LambdaException if an error occurs while interacting with the AWS Lambda service\n     */\n    public static void listFunctions(LambdaClient awsLambda) {\n        try {\n            ListFunctionsResponse functionResult = awsLambda.listFunctions();\n            List<FunctionConfiguration> list = functionResult.functions();\n            for (FunctionConfiguration config : list) {\n                System.out.println(\"The function name is \" + config.functionName());\n            }\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
            "  8.SDK for Java 2.x :     /**\n     * Lists the AWS Lambda functions associated with the current AWS account.\n     *\n     * @param awsLambda an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     *\n     * @throws LambdaException if an error occurs while interacting with the AWS Lambda service\n     */\n    public static void listFunctions(LambdaClient awsLambda) {\n        try {\n            ListFunctionsResponse functionResult = awsLambda.listFunctions();\n            List<FunctionConfiguration> list = functionResult.functions();\n            for (FunctionConfiguration config : list) {\n                System.out.println(\"The function name is \" + config.functionName());\n            }\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
            "  9.JavaScript : import { LambdaClient, paginateListFunctions } from \"@aws-sdk/client-lambda\";\n\nconst client = new LambdaClient({});\n\nexport const helloLambda = async () => {\n  const paginator = paginateListFunctions({ client }, {});\n  const functions = [];\n\n  for await (const page of paginator) {\n    const funcNames = page.Functions.map((f) => f.FunctionName);\n    functions.push(...funcNames);\n  }\n\n  console.log(\"Functions:\");\n  console.log(functions.join(\"\\n\"));\n  return functions;\n};\n\n",
            "  10.SDK for JavaScript (v3) : import { LambdaClient, paginateListFunctions } from \"@aws-sdk/client-lambda\";\n\nconst client = new LambdaClient({});\n\nexport const helloLambda = async () => {\n  const paginator = paginateListFunctions({ client }, {});\n  const functions = [];\n\n  for await (const page of paginator) {\n    const funcNames = page.Functions.map((f) => f.FunctionName);\n    functions.push(...funcNames);\n  }\n\n  console.log(\"Functions:\");\n  console.log(functions.join(\"\\n\"));\n  return functions;\n};\n\n",
            "  11.Python : \nimport boto3\n\n\ndef main():\n    \"\"\"\n    List the Lambda functions in your AWS account.\n    \"\"\"\n    # Create the Lambda client\n    lambda_client = boto3.client(\"lambda\")\n\n    # Use the paginator to list the functions\n    paginator = lambda_client.get_paginator(\"list_functions\")\n    response_iterator = paginator.paginate()\n\n    print(\"Here are the Lambda functions in your account:\")\n    for page in response_iterator:\n        for function in page[\"Functions\"]:\n            print(f\"  {function['FunctionName']}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n",
            "  12.SDK for Python (Boto3) : \nimport boto3\n\n\ndef main():\n    \"\"\"\n    List the Lambda functions in your AWS account.\n    \"\"\"\n    # Create the Lambda client\n    lambda_client = boto3.client(\"lambda\")\n\n    # Use the paginator to list the functions\n    paginator = lambda_client.get_paginator(\"list_functions\")\n    response_iterator = paginator.paginate()\n\n    print(\"Here are the Lambda functions in your account:\")\n    for page in response_iterator:\n        for function in page[\"Functions\"]:\n            print(f\"  {function['FunctionName']}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n",
            "  13.Ruby : \nrequire 'aws-sdk-lambda'\n\n# Creates an AWS Lambda client using the default credentials and configuration\ndef lambda_client\n  Aws::Lambda::Client.new\nend\n\n# Lists the Lambda functions in your AWS account, paginating the results if necessary\ndef list_lambda_functions\n  lambda = lambda_client\n\n  # Use a pagination iterator to list all functions\n  functions = []\n  lambda.list_functions.each_page do |page|\n    functions.concat(page.functions)\n  end\n\n  # Print the name and ARN of each function\n  functions.each do |function|\n    puts \"Function name: #{function.function_name}\"\n    puts \"Function ARN: #{function.function_arn}\"\n    puts\n  end\n\n  puts \"Total functions: #{functions.count}\"\nend\n\nlist_lambda_functions if __FILE__ == $PROGRAM_NAME\n\n\n",
            "  14.SDK for Ruby : \nrequire 'aws-sdk-lambda'\n\n# Creates an AWS Lambda client using the default credentials and configuration\ndef lambda_client\n  Aws::Lambda::Client.new\nend\n\n# Lists the Lambda functions in your AWS account, paginating the results if necessary\ndef list_lambda_functions\n  lambda = lambda_client\n\n  # Use a pagination iterator to list all functions\n  functions = []\n  lambda.list_functions.each_page do |page|\n    functions.concat(page.functions)\n  end\n\n  # Print the name and ARN of each function\n  functions.each do |function|\n    puts \"Function name: #{function.function_name}\"\n    puts \"Function ARN: #{function.function_arn}\"\n    puts\n  end\n\n  puts \"Total functions: #{functions.count}\"\nend\n\nlist_lambda_functions if __FILE__ == $PROGRAM_NAME\n\n\n",
            "anchor",
            "anchor",
            "anchor",
            "anchor",
            "anchor",
            "anchor",
            "anchor",
            "  1.AWS SDK for .NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\n\npublic class HelloLambda\n{\n    static async Task Main(string[] args)\n    {\n        var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get started with AWS Lambda by listing your existing Lambda functions:\");\n\n        var response = await lambdaClient.ListFunctionsAsync();\n        response.Functions.ForEach(function =>\n        {\n            Console.WriteLine($\"{function.FunctionName}\\t{function.Description}\");\n        });\n    }\n}\n\n\n",
            "Code examples",
            {
                "title": "Basics",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples_basics.html",
                "contents": [
                    {
                        "title": "Hello Lambda",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_Hello_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to get started using Lambda.",
                            "  1..NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\n\npublic class HelloLambda\n{\n    static async Task Main(string[] args)\n    {\n        var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get started with AWS Lambda by listing your existing Lambda functions:\");\n\n        var response = await lambdaClient.ListFunctionsAsync();\n        response.Functions.ForEach(function =>\n        {\n            Console.WriteLine($\"{function.FunctionName}\\t{function.Description}\");\n        });\n    }\n}\n\n\n",
                            "  2.AWS SDK for .NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\n\npublic class HelloLambda\n{\n    static async Task Main(string[] args)\n    {\n        var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get started with AWS Lambda by listing your existing Lambda functions:\");\n\n        var response = await lambdaClient.ListFunctionsAsync();\n        response.Functions.ForEach(function =>\n        {\n            Console.WriteLine($\"{function.FunctionName}\\t{function.Description}\");\n        });\n    }\n}\n\n\n",
                            "  3.C++ : # Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS lambda)\n\n# Set this project's name.\nproject(\"hello_lambda\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_lambda.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n\n",
                            "  4.SDK for C++ : # Set the minimum required version of CMake for this project.\ncmake_minimum_required(VERSION 3.13)\n\n# Set the AWS service components used by this project.\nset(SERVICE_COMPONENTS lambda)\n\n# Set this project's name.\nproject(\"hello_lambda\")\n\n# Set the C++ standard to use to build this target.\n# At least C++ 11 is required for the AWS SDK for C++.\nset(CMAKE_CXX_STANDARD 11)\n\n# Use the MSVC variable to determine if this is a Windows build.\nset(WINDOWS_BUILD ${MSVC})\n\nif (WINDOWS_BUILD) # Set the location where CMake can find the installed libraries for the AWS SDK.\n    string(REPLACE \";\" \"/aws-cpp-sdk-all;\" SYSTEM_MODULE_PATH \"${CMAKE_SYSTEM_PREFIX_PATH}/aws-cpp-sdk-all\")\n    list(APPEND CMAKE_PREFIX_PATH ${SYSTEM_MODULE_PATH})\nendif ()\n\n# Find the AWS SDK for C++ package.\nfind_package(AWSSDK REQUIRED COMPONENTS ${SERVICE_COMPONENTS})\n\nif (WINDOWS_BUILD AND AWSSDK_INSTALL_AS_SHARED_LIBS)\n     # Copy relevant AWS SDK for C++ libraries into the current binary directory for running and debugging.\n\n     # set(BIN_SUB_DIR \"/Debug\") # if you are building from the command line you may need to uncomment this \n                                    # and set the proper subdirectory to the executables' location.\n\n     AWSSDK_CPY_DYN_LIBS(SERVICE_COMPONENTS \"\" ${CMAKE_CURRENT_BINARY_DIR}${BIN_SUB_DIR})\nendif ()\n\nadd_executable(${PROJECT_NAME}\n        hello_lambda.cpp)\n\ntarget_link_libraries(${PROJECT_NAME}\n        ${AWSSDK_LINK_LIBRARIES})\n\n",
                            "  5.Go : \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n)\n\n// main uses the AWS SDK for Go (v2) to create an AWS Lambda client and list up to 10\n// functions in your account.\n// This example uses the default settings specified in your shared credentials\n// and config files.\nfunc main() {\n\tctx := context.Background()\n\tsdkConfig, err := config.LoadDefaultConfig(ctx)\n\tif err != nil {\n\t\tfmt.Println(\"Couldn't load default configuration. Have you set up your AWS account?\")\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tlambdaClient := lambda.NewFromConfig(sdkConfig)\n\n\tmaxItems := 10\n\tfmt.Printf(\"Let's list up to %v functions for your account.\\n\", maxItems)\n\tresult, err := lambdaClient.ListFunctions(ctx, &lambda.ListFunctionsInput{\n\t\tMaxItems: aws.Int32(int32(maxItems)),\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Couldn't list functions for your account. Here's why: %v\\n\", err)\n\t\treturn\n\t}\n\tif len(result.Functions) == 0 {\n\t\tfmt.Println(\"You don't have any functions!\")\n\t} else {\n\t\tfor _, function := range result.Functions {\n\t\t\tfmt.Printf(\"\\t%v\\n\", *function.FunctionName)\n\t\t}\n\t}\n}\n\n\n",
                            "  6.SDK for Go V2 : \npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n)\n\n// main uses the AWS SDK for Go (v2) to create an AWS Lambda client and list up to 10\n// functions in your account.\n// This example uses the default settings specified in your shared credentials\n// and config files.\nfunc main() {\n\tctx := context.Background()\n\tsdkConfig, err := config.LoadDefaultConfig(ctx)\n\tif err != nil {\n\t\tfmt.Println(\"Couldn't load default configuration. Have you set up your AWS account?\")\n\t\tfmt.Println(err)\n\t\treturn\n\t}\n\tlambdaClient := lambda.NewFromConfig(sdkConfig)\n\n\tmaxItems := 10\n\tfmt.Printf(\"Let's list up to %v functions for your account.\\n\", maxItems)\n\tresult, err := lambdaClient.ListFunctions(ctx, &lambda.ListFunctionsInput{\n\t\tMaxItems: aws.Int32(int32(maxItems)),\n\t})\n\tif err != nil {\n\t\tfmt.Printf(\"Couldn't list functions for your account. Here's why: %v\\n\", err)\n\t\treturn\n\t}\n\tif len(result.Functions) == 0 {\n\t\tfmt.Println(\"You don't have any functions!\")\n\t} else {\n\t\tfor _, function := range result.Functions {\n\t\t\tfmt.Printf(\"\\t%v\\n\", *function.FunctionName)\n\t\t}\n\t}\n}\n\n\n",
                            "  7.Java :     /**\n     * Lists the AWS Lambda functions associated with the current AWS account.\n     *\n     * @param awsLambda an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     *\n     * @throws LambdaException if an error occurs while interacting with the AWS Lambda service\n     */\n    public static void listFunctions(LambdaClient awsLambda) {\n        try {\n            ListFunctionsResponse functionResult = awsLambda.listFunctions();\n            List<FunctionConfiguration> list = functionResult.functions();\n            for (FunctionConfiguration config : list) {\n                System.out.println(\"The function name is \" + config.functionName());\n            }\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                            "  8.SDK for Java 2.x :     /**\n     * Lists the AWS Lambda functions associated with the current AWS account.\n     *\n     * @param awsLambda an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     *\n     * @throws LambdaException if an error occurs while interacting with the AWS Lambda service\n     */\n    public static void listFunctions(LambdaClient awsLambda) {\n        try {\n            ListFunctionsResponse functionResult = awsLambda.listFunctions();\n            List<FunctionConfiguration> list = functionResult.functions();\n            for (FunctionConfiguration config : list) {\n                System.out.println(\"The function name is \" + config.functionName());\n            }\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                            "  9.JavaScript : import { LambdaClient, paginateListFunctions } from \"@aws-sdk/client-lambda\";\n\nconst client = new LambdaClient({});\n\nexport const helloLambda = async () => {\n  const paginator = paginateListFunctions({ client }, {});\n  const functions = [];\n\n  for await (const page of paginator) {\n    const funcNames = page.Functions.map((f) => f.FunctionName);\n    functions.push(...funcNames);\n  }\n\n  console.log(\"Functions:\");\n  console.log(functions.join(\"\\n\"));\n  return functions;\n};\n\n",
                            "  10.SDK for JavaScript (v3) : import { LambdaClient, paginateListFunctions } from \"@aws-sdk/client-lambda\";\n\nconst client = new LambdaClient({});\n\nexport const helloLambda = async () => {\n  const paginator = paginateListFunctions({ client }, {});\n  const functions = [];\n\n  for await (const page of paginator) {\n    const funcNames = page.Functions.map((f) => f.FunctionName);\n    functions.push(...funcNames);\n  }\n\n  console.log(\"Functions:\");\n  console.log(functions.join(\"\\n\"));\n  return functions;\n};\n\n",
                            "  11.Python : \nimport boto3\n\n\ndef main():\n    \"\"\"\n    List the Lambda functions in your AWS account.\n    \"\"\"\n    # Create the Lambda client\n    lambda_client = boto3.client(\"lambda\")\n\n    # Use the paginator to list the functions\n    paginator = lambda_client.get_paginator(\"list_functions\")\n    response_iterator = paginator.paginate()\n\n    print(\"Here are the Lambda functions in your account:\")\n    for page in response_iterator:\n        for function in page[\"Functions\"]:\n            print(f\"  {function['FunctionName']}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n",
                            "  12.SDK for Python (Boto3) : \nimport boto3\n\n\ndef main():\n    \"\"\"\n    List the Lambda functions in your AWS account.\n    \"\"\"\n    # Create the Lambda client\n    lambda_client = boto3.client(\"lambda\")\n\n    # Use the paginator to list the functions\n    paginator = lambda_client.get_paginator(\"list_functions\")\n    response_iterator = paginator.paginate()\n\n    print(\"Here are the Lambda functions in your account:\")\n    for page in response_iterator:\n        for function in page[\"Functions\"]:\n            print(f\"  {function['FunctionName']}\")\n\n\nif __name__ == \"__main__\":\n    main()\n\n\n",
                            "  13.Ruby : \nrequire 'aws-sdk-lambda'\n\n# Creates an AWS Lambda client using the default credentials and configuration\ndef lambda_client\n  Aws::Lambda::Client.new\nend\n\n# Lists the Lambda functions in your AWS account, paginating the results if necessary\ndef list_lambda_functions\n  lambda = lambda_client\n\n  # Use a pagination iterator to list all functions\n  functions = []\n  lambda.list_functions.each_page do |page|\n    functions.concat(page.functions)\n  end\n\n  # Print the name and ARN of each function\n  functions.each do |function|\n    puts \"Function name: #{function.function_name}\"\n    puts \"Function ARN: #{function.function_arn}\"\n    puts\n  end\n\n  puts \"Total functions: #{functions.count}\"\nend\n\nlist_lambda_functions if __FILE__ == $PROGRAM_NAME\n\n\n",
                            "  14.SDK for Ruby : \nrequire 'aws-sdk-lambda'\n\n# Creates an AWS Lambda client using the default credentials and configuration\ndef lambda_client\n  Aws::Lambda::Client.new\nend\n\n# Lists the Lambda functions in your AWS account, paginating the results if necessary\ndef list_lambda_functions\n  lambda = lambda_client\n\n  # Use a pagination iterator to list all functions\n  functions = []\n  lambda.list_functions.each_page do |page|\n    functions.concat(page.functions)\n  end\n\n  # Print the name and ARN of each function\n  functions.each do |function|\n    puts \"Function name: #{function.function_name}\"\n    puts \"Function ARN: #{function.function_arn}\"\n    puts\n  end\n\n  puts \"Total functions: #{functions.count}\"\nend\n\nlist_lambda_functions if __FILE__ == $PROGRAM_NAME\n\n\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\n\npublic class HelloLambda\n{\n    static async Task Main(string[] args)\n    {\n        var lambdaClient = new AmazonLambdaClient();\n\n        Console.WriteLine(\"Hello AWS Lambda\");\n        Console.WriteLine(\"Let's get started with AWS Lambda by listing your existing Lambda functions:\");\n\n        var response = await lambdaClient.ListFunctionsAsync();\n        response.Functions.ForEach(function =>\n        {\n            Console.WriteLine($\"{function.FunctionName}\\t{function.Description}\");\n        });\n    }\n}\n\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Learn the basics",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_Scenario_GettingStartedFunctions_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to:",
                            "  1.Create an IAM role and Lambda function, then upload handler code.",
                            "  2.Invoke the function with a single parameter and get results.",
                            "  3.Update the function code and configure with an environment variable.",
                            "  4.Invoke the function with new parameters and get results. Display the returned execution log.",
                            "  5.List the functions for your account, then clean up resources.",
                            "For more information, see Create a Lambda function with the console.",
                            "  1..NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\nusing Amazon.Lambda.Model;\n\n/// <summary>\n/// A class that implements AWS Lambda methods.\n/// </summary>\npublic class LambdaWrapper\n{\n    private readonly IAmazonLambda _lambdaService;\n\n    /// <summary>\n    /// Constructor for the LambdaWrapper class.\n    /// </summary>\n    /// <param name=\"lambdaService\">An initialized Lambda service client.</param>\n    public LambdaWrapper(IAmazonLambda lambdaService)\n    {\n        _lambdaService = lambdaService;\n    }\n\n    /// <summary>\n    /// Creates a new Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function.</param>\n    /// <param name=\"s3Bucket\">The Amazon Simple Storage Service (Amazon S3)\n    /// bucket where the zip file containing the code is located.</param>\n    /// <param name=\"s3Key\">The Amazon S3 key of the zip file.</param>\n    /// <param name=\"role\">The Amazon Resource Name (ARN) of a role with the\n    /// appropriate Lambda permissions.</param>\n    /// <param name=\"handler\">The name of the handler function.</param>\n    /// <returns>The Amazon Resource Name (ARN) of the newly created\n    /// Lambda function.</returns>\n    public async Task<string> CreateLambdaFunctionAsync(\n        string functionName,\n        string s3Bucket,\n        string s3Key,\n        string role,\n        string handler)\n    {\n        // Defines the location for the function code.\n        // S3Bucket - The S3 bucket where the file containing\n        //            the source code is stored.\n        // S3Key    - The name of the file containing the code.\n        var functionCode = new FunctionCode\n        {\n            S3Bucket = s3Bucket,\n            S3Key = s3Key,\n        };\n\n        var createFunctionRequest = new CreateFunctionRequest\n        {\n            FunctionName = functionName,\n            Description = \"Created by the Lambda .NET API\",\n            Code = functionCode,\n            Handler = handler,\n            Runtime = Runtime.Dotnet6,\n            Role = role,\n        };\n\n        var reponse = await _lambdaService.CreateFunctionAsync(createFunctionRequest);\n        return reponse.FunctionArn;\n    }\n\n\n    /// <summary>\n    /// Delete an AWS Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// delete.</param>\n    /// <returns>A Boolean value that indicates the success of the action.</returns>\n    public async Task<bool> DeleteFunctionAsync(string functionName)\n    {\n        var request = new DeleteFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.DeleteFunctionAsync(request);\n\n        // A return value of NoContent means that the request was processed.\n        // In this case, the function was deleted, and the return value\n        // is intentionally blank.\n        return response.HttpStatusCode == System.Net.HttpStatusCode.NoContent;\n    }\n\n\n    /// <summary>\n    /// Gets information about a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function for\n    /// which to retrieve information.</param>\n    /// <returns>Async Task.</returns>\n    public async Task<FunctionConfiguration> GetFunctionAsync(string functionName)\n    {\n        var functionRequest = new GetFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.GetFunctionAsync(functionRequest);\n        return response.Configuration;\n    }\n\n\n    /// <summary>\n    /// Invoke a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// invoke.</param\n    /// <param name=\"parameters\">The parameter values that will be passed to the function.</param>\n    /// <returns>A System Threading Task.</returns>\n    public async Task<string> InvokeFunctionAsync(\n        string functionName,\n        string parameters)\n    {\n        var payload = parameters;\n        var request = new InvokeRequest\n        {\n            FunctionName = functionName,\n            Payload = payload,\n        };\n\n        var response = await _lambdaService.InvokeAsync(request);\n        MemoryStream stream = response.Payload;\n        string returnValue = System.Text.Encoding.UTF8.GetString(stream.ToArray());\n        return returnValue;\n    }\n\n\n    /// <summary>\n    /// Get a list of Lambda functions.\n    /// </summary>\n    /// <returns>A list of FunctionConfiguration objects.</returns>\n    public async Task<List<FunctionConfiguration>> ListFunctionsAsync()\n    {\n        var functionList = new List<FunctionConfiguration>();\n\n        var functionPaginator =\n            _lambdaService.Paginators.ListFunctions(new ListFunctionsRequest());\n        await foreach (var function in functionPaginator.Functions)\n        {\n            functionList.Add(function);\n        }\n\n        return functionList;\n    }\n\n\n    /// <summary>\n    /// Update an existing Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to update.</param>\n    /// <param name=\"bucketName\">The bucket where the zip file containing\n    /// the Lambda function code is stored.</param>\n    /// <param name=\"key\">The key name of the source code file.</param>\n    /// <returns>Async Task.</returns>\n    public async Task UpdateFunctionCodeAsync(\n        string functionName,\n        string bucketName,\n        string key)\n    {\n        var functionCodeRequest = new UpdateFunctionCodeRequest\n        {\n            FunctionName = functionName,\n            Publish = true,\n            S3Bucket = bucketName,\n            S3Key = key,\n        };\n\n        var response = await _lambdaService.UpdateFunctionCodeAsync(functionCodeRequest);\n        Console.WriteLine($\"The Function was last modified at {response.LastModified}.\");\n    }\n\n\n    /// <summary>\n    /// Update the code of a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function to update.</param>\n    /// <param name=\"functionHandler\">The code that performs the function's actions.</param>\n    /// <param name=\"environmentVariables\">A dictionary of environment variables.</param>\n    /// <returns>A Boolean value indicating the success of the action.</returns>\n    public async Task<bool> UpdateFunctionConfigurationAsync(\n        string functionName,\n        string functionHandler,\n        Dictionary<string, string> environmentVariables)\n    {\n        var request = new UpdateFunctionConfigurationRequest\n        {\n            Handler = functionHandler,\n            FunctionName = functionName,\n            Environment = new Amazon.Lambda.Model.Environment { Variables = environmentVariables },\n        };\n\n        var response = await _lambdaService.UpdateFunctionConfigurationAsync(request);\n\n        Console.WriteLine(response.LastModified);\n\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n\n\n}\n\n\n",
                            "  2.AWS SDK for .NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\nusing Amazon.Lambda.Model;\n\n/// <summary>\n/// A class that implements AWS Lambda methods.\n/// </summary>\npublic class LambdaWrapper\n{\n    private readonly IAmazonLambda _lambdaService;\n\n    /// <summary>\n    /// Constructor for the LambdaWrapper class.\n    /// </summary>\n    /// <param name=\"lambdaService\">An initialized Lambda service client.</param>\n    public LambdaWrapper(IAmazonLambda lambdaService)\n    {\n        _lambdaService = lambdaService;\n    }\n\n    /// <summary>\n    /// Creates a new Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function.</param>\n    /// <param name=\"s3Bucket\">The Amazon Simple Storage Service (Amazon S3)\n    /// bucket where the zip file containing the code is located.</param>\n    /// <param name=\"s3Key\">The Amazon S3 key of the zip file.</param>\n    /// <param name=\"role\">The Amazon Resource Name (ARN) of a role with the\n    /// appropriate Lambda permissions.</param>\n    /// <param name=\"handler\">The name of the handler function.</param>\n    /// <returns>The Amazon Resource Name (ARN) of the newly created\n    /// Lambda function.</returns>\n    public async Task<string> CreateLambdaFunctionAsync(\n        string functionName,\n        string s3Bucket,\n        string s3Key,\n        string role,\n        string handler)\n    {\n        // Defines the location for the function code.\n        // S3Bucket - The S3 bucket where the file containing\n        //            the source code is stored.\n        // S3Key    - The name of the file containing the code.\n        var functionCode = new FunctionCode\n        {\n            S3Bucket = s3Bucket,\n            S3Key = s3Key,\n        };\n\n        var createFunctionRequest = new CreateFunctionRequest\n        {\n            FunctionName = functionName,\n            Description = \"Created by the Lambda .NET API\",\n            Code = functionCode,\n            Handler = handler,\n            Runtime = Runtime.Dotnet6,\n            Role = role,\n        };\n\n        var reponse = await _lambdaService.CreateFunctionAsync(createFunctionRequest);\n        return reponse.FunctionArn;\n    }\n\n\n    /// <summary>\n    /// Delete an AWS Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// delete.</param>\n    /// <returns>A Boolean value that indicates the success of the action.</returns>\n    public async Task<bool> DeleteFunctionAsync(string functionName)\n    {\n        var request = new DeleteFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.DeleteFunctionAsync(request);\n\n        // A return value of NoContent means that the request was processed.\n        // In this case, the function was deleted, and the return value\n        // is intentionally blank.\n        return response.HttpStatusCode == System.Net.HttpStatusCode.NoContent;\n    }\n\n\n    /// <summary>\n    /// Gets information about a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function for\n    /// which to retrieve information.</param>\n    /// <returns>Async Task.</returns>\n    public async Task<FunctionConfiguration> GetFunctionAsync(string functionName)\n    {\n        var functionRequest = new GetFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.GetFunctionAsync(functionRequest);\n        return response.Configuration;\n    }\n\n\n    /// <summary>\n    /// Invoke a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// invoke.</param\n    /// <param name=\"parameters\">The parameter values that will be passed to the function.</param>\n    /// <returns>A System Threading Task.</returns>\n    public async Task<string> InvokeFunctionAsync(\n        string functionName,\n        string parameters)\n    {\n        var payload = parameters;\n        var request = new InvokeRequest\n        {\n            FunctionName = functionName,\n            Payload = payload,\n        };\n\n        var response = await _lambdaService.InvokeAsync(request);\n        MemoryStream stream = response.Payload;\n        string returnValue = System.Text.Encoding.UTF8.GetString(stream.ToArray());\n        return returnValue;\n    }\n\n\n    /// <summary>\n    /// Get a list of Lambda functions.\n    /// </summary>\n    /// <returns>A list of FunctionConfiguration objects.</returns>\n    public async Task<List<FunctionConfiguration>> ListFunctionsAsync()\n    {\n        var functionList = new List<FunctionConfiguration>();\n\n        var functionPaginator =\n            _lambdaService.Paginators.ListFunctions(new ListFunctionsRequest());\n        await foreach (var function in functionPaginator.Functions)\n        {\n            functionList.Add(function);\n        }\n\n        return functionList;\n    }\n\n\n    /// <summary>\n    /// Update an existing Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to update.</param>\n    /// <param name=\"bucketName\">The bucket where the zip file containing\n    /// the Lambda function code is stored.</param>\n    /// <param name=\"key\">The key name of the source code file.</param>\n    /// <returns>Async Task.</returns>\n    public async Task UpdateFunctionCodeAsync(\n        string functionName,\n        string bucketName,\n        string key)\n    {\n        var functionCodeRequest = new UpdateFunctionCodeRequest\n        {\n            FunctionName = functionName,\n            Publish = true,\n            S3Bucket = bucketName,\n            S3Key = key,\n        };\n\n        var response = await _lambdaService.UpdateFunctionCodeAsync(functionCodeRequest);\n        Console.WriteLine($\"The Function was last modified at {response.LastModified}.\");\n    }\n\n\n    /// <summary>\n    /// Update the code of a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function to update.</param>\n    /// <param name=\"functionHandler\">The code that performs the function's actions.</param>\n    /// <param name=\"environmentVariables\">A dictionary of environment variables.</param>\n    /// <returns>A Boolean value indicating the success of the action.</returns>\n    public async Task<bool> UpdateFunctionConfigurationAsync(\n        string functionName,\n        string functionHandler,\n        Dictionary<string, string> environmentVariables)\n    {\n        var request = new UpdateFunctionConfigurationRequest\n        {\n            Handler = functionHandler,\n            FunctionName = functionName,\n            Environment = new Amazon.Lambda.Model.Environment { Variables = environmentVariables },\n        };\n\n        var response = await _lambdaService.UpdateFunctionConfigurationAsync(request);\n\n        Console.WriteLine(response.LastModified);\n\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n\n\n}\n\n\n",
                            "  3.C++ : //! Get started with functions scenario.\n/*!\n \\param clientConfig: AWS client configuration.\n \\return bool: Successful completion.\n */\nbool AwsDoc::Lambda::getStartedWithFunctionsScenario(\n        const Aws::Client::ClientConfiguration &clientConfig) {\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n    // 1. Create an AWS Identity and Access Management (IAM) role for Lambda function.\n    Aws::String roleArn;\n    if (!getIamRoleArn(roleArn, clientConfig)) {\n        return false;\n    }\n\n    // 2. Create a Lambda function.\n    int seconds = 0;\n    do {\n        Aws::Lambda::Model::CreateFunctionRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        request.SetDescription(LAMBDA_DESCRIPTION); // Optional.\n#if USE_CPP_LAMBDA_FUNCTION\n        request.SetRuntime(Aws::Lambda::Model::Runtime::provided_al2);\n        request.SetTimeout(15);\n        request.SetMemorySize(128);\n\n        // Assume the AWS Lambda function was built in Docker with same architecture\n        // as this code.\n#if  defined(__x86_64__)\n        request.SetArchitectures({Aws::Lambda::Model::Architecture::x86_64});\n#elif defined(__aarch64__)\n        request.SetArchitectures({Aws::Lambda::Model::Architecture::arm64});\n#else\n#error \"Unimplemented architecture\"\n#endif // defined(architecture)\n#else\n        request.SetRuntime(Aws::Lambda::Model::Runtime::python3_9);\n#endif\n        request.SetRole(roleArn);\n        request.SetHandler(LAMBDA_HANDLER_NAME);\n        request.SetPublish(true);\n        Aws::Lambda::Model::FunctionCode code;\n        std::ifstream ifstream(INCREMENT_LAMBDA_CODE.c_str(),\n                               std::ios_base::in | std::ios_base::binary);\n        if (!ifstream.is_open()) {\n            std::cerr << \"Error opening file \" << INCREMENT_LAMBDA_CODE << \".\" << std::endl;\n\n#if USE_CPP_LAMBDA_FUNCTION\n            std::cerr\n                    << \"The cpp Lambda function must be built following the instructions in the cpp_lambda/README.md file. \"\n                    << std::endl;\n#endif\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n        Aws::StringStream buffer;\n        buffer << ifstream.rdbuf();\n\n        code.SetZipFile(Aws::Utils::ByteBuffer((unsigned char *) buffer.str().c_str(),\n                                               buffer.str().length()));\n        request.SetCode(code);\n\n        Aws::Lambda::Model::CreateFunctionOutcome outcome = client.CreateFunction(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda function was successfully created. \" << seconds\n                      << \" seconds elapsed.\" << std::endl;\n            break;\n        }\n        else if (outcome.GetError().GetErrorType() ==\n                 Aws::Lambda::LambdaErrors::INVALID_PARAMETER_VALUE &&\n                 outcome.GetError().GetMessage().find(\"role\") >= 0) {\n            if ((seconds % 5) == 0) { // Log status every 10 seconds.\n                std::cout\n                        << \"Waiting for the IAM role to become available as a CreateFunction parameter. \"\n                        << seconds\n                        << \" seconds elapsed.\" << std::endl;\n\n                std::cout << outcome.GetError().GetMessage() << std::endl;\n            }\n        }\n        else {\n            std::cerr << \"Error with CreateFunction. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n            deleteIamRole(clientConfig);\n            return false;\n        }\n        ++seconds;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    } while (60 > seconds);\n\n    std::cout << \"The current Lambda function increments 1 by an input.\" << std::endl;\n\n    // 3.  Invoke the Lambda function.\n    {\n        int increment = askQuestionForInt(\"Enter an increment integer: \");\n\n        Aws::Lambda::Model::InvokeResult invokeResult;\n        Aws::Utils::Json::JsonValue jsonPayload;\n        jsonPayload.WithString(\"action\", \"increment\");\n        jsonPayload.WithInteger(\"number\", increment);\n        if (invokeLambdaFunction(jsonPayload, Aws::Lambda::Model::LogType::Tail,\n                                 invokeResult, client)) {\n            Aws::Utils::Json::JsonValue jsonValue(invokeResult.GetPayload());\n            Aws::Map<Aws::String, Aws::Utils::Json::JsonView> values =\n                    jsonValue.View().GetAllObjects();\n            auto iter = values.find(\"result\");\n            if (iter != values.end() && iter->second.IsIntegerType()) {\n                {\n                    std::cout << INCREMENT_RESUlT_PREFIX\n                              << iter->second.AsInteger() << std::endl;\n                }\n            }\n            else {\n                std::cout << \"There was an error in execution. Here is the log.\"\n                          << std::endl;\n                Aws::Utils::ByteBuffer buffer = Aws::Utils::HashingUtils::Base64Decode(\n                        invokeResult.GetLogResult());\n                std::cout << \"With log \" << buffer.GetUnderlyingData() << std::endl;\n            }\n        }\n    }\n\n    std::cout\n            << \"The Lambda function will now be updated with new code. Press return to continue, \";\n    Aws::String answer;\n    std::getline(std::cin, answer);\n\n    // 4.  Update the Lambda function code.\n    {\n        Aws::Lambda::Model::UpdateFunctionCodeRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        std::ifstream ifstream(CALCULATOR_LAMBDA_CODE.c_str(),\n                               std::ios_base::in | std::ios_base::binary);\n        if (!ifstream.is_open()) {\n            std::cerr << \"Error opening file \" << INCREMENT_LAMBDA_CODE << \".\" << std::endl;\n\n#if USE_CPP_LAMBDA_FUNCTION\n            std::cerr\n                    << \"The cpp Lambda function must be built following the instructions in the cpp_lambda/README.md file. \"\n                    << std::endl;\n#endif\n            deleteLambdaFunction(client);\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n        Aws::StringStream buffer;\n        buffer << ifstream.rdbuf();\n        request.SetZipFile(\n                Aws::Utils::ByteBuffer((unsigned char *) buffer.str().c_str(),\n                                       buffer.str().length()));\n        request.SetPublish(true);\n\n        Aws::Lambda::Model::UpdateFunctionCodeOutcome outcome = client.UpdateFunctionCode(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda code was successfully updated.\" << std::endl;\n        }\n        else {\n            std::cerr << \"Error with Lambda::UpdateFunctionCode. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n    }\n\n    std::cout\n            << \"This function uses an environment variable to control the logging level.\"\n            << std::endl;\n    std::cout\n            << \"UpdateFunctionConfiguration will be used to set the LOG_LEVEL to DEBUG.\"\n            << std::endl;\n    seconds = 0;\n\n    // 5.  Update the Lambda function configuration.\n    do {\n        ++seconds;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n        Aws::Lambda::Model::UpdateFunctionConfigurationRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        Aws::Lambda::Model::Environment environment;\n        environment.AddVariables(\"LOG_LEVEL\", \"DEBUG\");\n        request.SetEnvironment(environment);\n\n        Aws::Lambda::Model::UpdateFunctionConfigurationOutcome outcome = client.UpdateFunctionConfiguration(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda configuration was successfully updated.\"\n                      << std::endl;\n            break;\n        }\n\n            // RESOURCE_IN_USE: function code update not completed.\n        else if (outcome.GetError().GetErrorType() !=\n                 Aws::Lambda::LambdaErrors::RESOURCE_IN_USE) {\n            if ((seconds % 10) == 0) { // Log status every 10 seconds.\n                std::cout << \"Lambda function update in progress . After \" << seconds\n                          << \" seconds elapsed.\" << std::endl;\n            }\n        }\n        else {\n            std::cerr << \"Error with Lambda::UpdateFunctionConfiguration. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n\n    } while (0 < seconds);\n\n    if (0 > seconds) {\n        std::cerr << \"Function failed to become active.\" << std::endl;\n    }\n    else {\n        std::cout << \"Updated function active after \" << seconds << \" seconds.\"\n                  << std::endl;\n    }\n\n    std::cout\n            << \"\\nThe new code applies an arithmetic operator to two variables, x an y.\"\n            << std::endl;\n    std::vector<Aws::String> operators = {\"plus\", \"minus\", \"times\", \"divided-by\"};\n    for (size_t i = 0; i < operators.size(); ++i) {\n        std::cout << \"   \" << i + 1 << \" \" << operators[i] << std::endl;\n    }\n\n    // 6.  Invoke the updated Lambda function.\n    do {\n        int operatorIndex = askQuestionForIntRange(\"Select an operator index 1 - 4 \", 1,\n                                                   4);\n        int x = askQuestionForInt(\"Enter an integer for the x value \");\n        int y = askQuestionForInt(\"Enter an integer for the y value \");\n\n        Aws::Utils::Json::JsonValue calculateJsonPayload;\n        calculateJsonPayload.WithString(\"action\", operators[operatorIndex - 1]);\n        calculateJsonPayload.WithInteger(\"x\", x);\n        calculateJsonPayload.WithInteger(\"y\", y);\n        Aws::Lambda::Model::InvokeResult calculatedResult;\n        if (invokeLambdaFunction(calculateJsonPayload,\n                                 Aws::Lambda::Model::LogType::Tail,\n                                 calculatedResult, client)) {\n            Aws::Utils::Json::JsonValue jsonValue(calculatedResult.GetPayload());\n            Aws::Map<Aws::String, Aws::Utils::Json::JsonView> values =\n                    jsonValue.View().GetAllObjects();\n            auto iter = values.find(\"result\");\n            if (iter != values.end() && iter->second.IsIntegerType()) {\n                std::cout << ARITHMETIC_RESUlT_PREFIX << x << \" \"\n                          << operators[operatorIndex - 1] << \" \"\n                          << y << \" is \" << iter->second.AsInteger() << std::endl;\n            }\n            else if (iter != values.end() && iter->second.IsFloatingPointType()) {\n                std::cout << ARITHMETIC_RESUlT_PREFIX << x << \" \"\n                          << operators[operatorIndex - 1] << \" \"\n                          << y << \" is \" << iter->second.AsDouble() << std::endl;\n            }\n            else {\n                std::cout << \"There was an error in execution. Here is the log.\"\n                          << std::endl;\n                Aws::Utils::ByteBuffer buffer = Aws::Utils::HashingUtils::Base64Decode(\n                        calculatedResult.GetLogResult());\n                std::cout << \"With log \" << buffer.GetUnderlyingData() << std::endl;\n            }\n        }\n\n        answer = askQuestion(\"Would you like to try another operation? (y/n) \");\n    } while (answer == \"y\");\n\n    std::cout\n            << \"A list of the lambda functions will be retrieved. Press return to continue, \";\n    std::getline(std::cin, answer);\n\n    // 7.  List the Lambda functions.\n\n    std::vector<Aws::String> functions;\n    Aws::String marker;\n\n    do {\n        Aws::Lambda::Model::ListFunctionsRequest request;\n        if (!marker.empty()) {\n            request.SetMarker(marker);\n        }\n\n        Aws::Lambda::Model::ListFunctionsOutcome outcome = client.ListFunctions(\n                request);\n\n        if (outcome.IsSuccess()) {\n            const Aws::Lambda::Model::ListFunctionsResult &result = outcome.GetResult();\n            std::cout << result.GetFunctions().size()\n                      << \" lambda functions were retrieved.\" << std::endl;\n\n            for (const Aws::Lambda::Model::FunctionConfiguration &functionConfiguration: result.GetFunctions()) {\n                functions.push_back(functionConfiguration.GetFunctionName());\n                std::cout << functions.size() << \"  \"\n                          << functionConfiguration.GetDescription() << std::endl;\n                std::cout << \"   \"\n                          << Aws::Lambda::Model::RuntimeMapper::GetNameForRuntime(\n                                  functionConfiguration.GetRuntime()) << \": \"\n                          << functionConfiguration.GetHandler()\n                          << std::endl;\n            }\n            marker = result.GetNextMarker();\n        }\n        else {\n            std::cerr << \"Error with Lambda::ListFunctions. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n    } while (!marker.empty());\n\n    // 8.  Get a Lambda function.\n    if (!functions.empty()) {\n        std::stringstream question;\n        question << \"Choose a function to retrieve between 1 and \" << functions.size()\n                 << \" \";\n        int functionIndex = askQuestionForIntRange(question.str(), 1,\n                                                   static_cast<int>(functions.size()));\n\n        Aws::String functionName = functions[functionIndex - 1];\n\n        Aws::Lambda::Model::GetFunctionRequest request;\n        request.SetFunctionName(functionName);\n\n        Aws::Lambda::Model::GetFunctionOutcome outcome = client.GetFunction(request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"Function retrieve.\\n\" <<\n                      outcome.GetResult().GetConfiguration().Jsonize().View().WriteReadable()\n                      << std::endl;\n        }\n        else {\n            std::cerr << \"Error with Lambda::GetFunction. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n    }\n\n    std::cout << \"The resources will be deleted. Press return to continue, \";\n    std::getline(std::cin, answer);\n\n    // 9.  Delete the Lambda function.\n    bool result = deleteLambdaFunction(client);\n\n    // 10. Delete the IAM role.\n    return result && deleteIamRole(clientConfig);\n}\n\n//! Routine which invokes a Lambda function and returns the result.\n/*!\n \\param jsonPayload: Payload for invoke function.\n \\param logType: Log type setting for invoke function.\n \\param invokeResult: InvokeResult object to receive the result.\n \\param client: Lambda client.\n \\return bool: Successful completion.\n */\nbool\nAwsDoc::Lambda::invokeLambdaFunction(const Aws::Utils::Json::JsonValue &jsonPayload,\n                                     Aws::Lambda::Model::LogType logType,\n                                     Aws::Lambda::Model::InvokeResult &invokeResult,\n                                     const Aws::Lambda::LambdaClient &client) {\n    int seconds = 0;\n    bool result = false;\n    /*\n     * In this example, the Invoke function can be called before recently created resources are\n     * available.  The Invoke function is called repeatedly until the resources are\n     * available.\n     */\n    do {\n        Aws::Lambda::Model::InvokeRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        request.SetLogType(logType);\n        std::shared_ptr<Aws::IOStream> payload = Aws::MakeShared<Aws::StringStream>(\n                \"FunctionTest\");\n        *payload << jsonPayload.View().WriteReadable();\n        request.SetBody(payload);\n        request.SetContentType(\"application/json\");\n        Aws::Lambda::Model::InvokeOutcome outcome = client.Invoke(request);\n\n        if (outcome.IsSuccess()) {\n            invokeResult = std::move(outcome.GetResult());\n            result = true;\n            break;\n        }\n\n            // ACCESS_DENIED: because the role is not available yet.\n            // RESOURCE_CONFLICT: because the Lambda function is being created or updated.\n        else if ((outcome.GetError().GetErrorType() ==\n                  Aws::Lambda::LambdaErrors::ACCESS_DENIED) ||\n                 (outcome.GetError().GetErrorType() ==\n                  Aws::Lambda::LambdaErrors::RESOURCE_CONFLICT)) {\n            if ((seconds % 5) == 0) { // Log status every 10 seconds.\n                std::cout << \"Waiting for the invoke api to be available, status \" <<\n                          ((outcome.GetError().GetErrorType() ==\n                            Aws::Lambda::LambdaErrors::ACCESS_DENIED ?\n                            \"ACCESS_DENIED\" : \"RESOURCE_CONFLICT\")) << \". \" << seconds\n                          << \" seconds elapsed.\" << std::endl;\n            }\n        }\n        else {\n            std::cerr << \"Error with Lambda::InvokeRequest. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n            break;\n        }\n        ++seconds;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    } while (seconds < 60);\n\n    return result;\n}\n\n",
                            "  4.SDK for C++ : //! Get started with functions scenario.\n/*!\n \\param clientConfig: AWS client configuration.\n \\return bool: Successful completion.\n */\nbool AwsDoc::Lambda::getStartedWithFunctionsScenario(\n        const Aws::Client::ClientConfiguration &clientConfig) {\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n    // 1. Create an AWS Identity and Access Management (IAM) role for Lambda function.\n    Aws::String roleArn;\n    if (!getIamRoleArn(roleArn, clientConfig)) {\n        return false;\n    }\n\n    // 2. Create a Lambda function.\n    int seconds = 0;\n    do {\n        Aws::Lambda::Model::CreateFunctionRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        request.SetDescription(LAMBDA_DESCRIPTION); // Optional.\n#if USE_CPP_LAMBDA_FUNCTION\n        request.SetRuntime(Aws::Lambda::Model::Runtime::provided_al2);\n        request.SetTimeout(15);\n        request.SetMemorySize(128);\n\n        // Assume the AWS Lambda function was built in Docker with same architecture\n        // as this code.\n#if  defined(__x86_64__)\n        request.SetArchitectures({Aws::Lambda::Model::Architecture::x86_64});\n#elif defined(__aarch64__)\n        request.SetArchitectures({Aws::Lambda::Model::Architecture::arm64});\n#else\n#error \"Unimplemented architecture\"\n#endif // defined(architecture)\n#else\n        request.SetRuntime(Aws::Lambda::Model::Runtime::python3_9);\n#endif\n        request.SetRole(roleArn);\n        request.SetHandler(LAMBDA_HANDLER_NAME);\n        request.SetPublish(true);\n        Aws::Lambda::Model::FunctionCode code;\n        std::ifstream ifstream(INCREMENT_LAMBDA_CODE.c_str(),\n                               std::ios_base::in | std::ios_base::binary);\n        if (!ifstream.is_open()) {\n            std::cerr << \"Error opening file \" << INCREMENT_LAMBDA_CODE << \".\" << std::endl;\n\n#if USE_CPP_LAMBDA_FUNCTION\n            std::cerr\n                    << \"The cpp Lambda function must be built following the instructions in the cpp_lambda/README.md file. \"\n                    << std::endl;\n#endif\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n        Aws::StringStream buffer;\n        buffer << ifstream.rdbuf();\n\n        code.SetZipFile(Aws::Utils::ByteBuffer((unsigned char *) buffer.str().c_str(),\n                                               buffer.str().length()));\n        request.SetCode(code);\n\n        Aws::Lambda::Model::CreateFunctionOutcome outcome = client.CreateFunction(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda function was successfully created. \" << seconds\n                      << \" seconds elapsed.\" << std::endl;\n            break;\n        }\n        else if (outcome.GetError().GetErrorType() ==\n                 Aws::Lambda::LambdaErrors::INVALID_PARAMETER_VALUE &&\n                 outcome.GetError().GetMessage().find(\"role\") >= 0) {\n            if ((seconds % 5) == 0) { // Log status every 10 seconds.\n                std::cout\n                        << \"Waiting for the IAM role to become available as a CreateFunction parameter. \"\n                        << seconds\n                        << \" seconds elapsed.\" << std::endl;\n\n                std::cout << outcome.GetError().GetMessage() << std::endl;\n            }\n        }\n        else {\n            std::cerr << \"Error with CreateFunction. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n            deleteIamRole(clientConfig);\n            return false;\n        }\n        ++seconds;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    } while (60 > seconds);\n\n    std::cout << \"The current Lambda function increments 1 by an input.\" << std::endl;\n\n    // 3.  Invoke the Lambda function.\n    {\n        int increment = askQuestionForInt(\"Enter an increment integer: \");\n\n        Aws::Lambda::Model::InvokeResult invokeResult;\n        Aws::Utils::Json::JsonValue jsonPayload;\n        jsonPayload.WithString(\"action\", \"increment\");\n        jsonPayload.WithInteger(\"number\", increment);\n        if (invokeLambdaFunction(jsonPayload, Aws::Lambda::Model::LogType::Tail,\n                                 invokeResult, client)) {\n            Aws::Utils::Json::JsonValue jsonValue(invokeResult.GetPayload());\n            Aws::Map<Aws::String, Aws::Utils::Json::JsonView> values =\n                    jsonValue.View().GetAllObjects();\n            auto iter = values.find(\"result\");\n            if (iter != values.end() && iter->second.IsIntegerType()) {\n                {\n                    std::cout << INCREMENT_RESUlT_PREFIX\n                              << iter->second.AsInteger() << std::endl;\n                }\n            }\n            else {\n                std::cout << \"There was an error in execution. Here is the log.\"\n                          << std::endl;\n                Aws::Utils::ByteBuffer buffer = Aws::Utils::HashingUtils::Base64Decode(\n                        invokeResult.GetLogResult());\n                std::cout << \"With log \" << buffer.GetUnderlyingData() << std::endl;\n            }\n        }\n    }\n\n    std::cout\n            << \"The Lambda function will now be updated with new code. Press return to continue, \";\n    Aws::String answer;\n    std::getline(std::cin, answer);\n\n    // 4.  Update the Lambda function code.\n    {\n        Aws::Lambda::Model::UpdateFunctionCodeRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        std::ifstream ifstream(CALCULATOR_LAMBDA_CODE.c_str(),\n                               std::ios_base::in | std::ios_base::binary);\n        if (!ifstream.is_open()) {\n            std::cerr << \"Error opening file \" << INCREMENT_LAMBDA_CODE << \".\" << std::endl;\n\n#if USE_CPP_LAMBDA_FUNCTION\n            std::cerr\n                    << \"The cpp Lambda function must be built following the instructions in the cpp_lambda/README.md file. \"\n                    << std::endl;\n#endif\n            deleteLambdaFunction(client);\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n        Aws::StringStream buffer;\n        buffer << ifstream.rdbuf();\n        request.SetZipFile(\n                Aws::Utils::ByteBuffer((unsigned char *) buffer.str().c_str(),\n                                       buffer.str().length()));\n        request.SetPublish(true);\n\n        Aws::Lambda::Model::UpdateFunctionCodeOutcome outcome = client.UpdateFunctionCode(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda code was successfully updated.\" << std::endl;\n        }\n        else {\n            std::cerr << \"Error with Lambda::UpdateFunctionCode. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n    }\n\n    std::cout\n            << \"This function uses an environment variable to control the logging level.\"\n            << std::endl;\n    std::cout\n            << \"UpdateFunctionConfiguration will be used to set the LOG_LEVEL to DEBUG.\"\n            << std::endl;\n    seconds = 0;\n\n    // 5.  Update the Lambda function configuration.\n    do {\n        ++seconds;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n        Aws::Lambda::Model::UpdateFunctionConfigurationRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        Aws::Lambda::Model::Environment environment;\n        environment.AddVariables(\"LOG_LEVEL\", \"DEBUG\");\n        request.SetEnvironment(environment);\n\n        Aws::Lambda::Model::UpdateFunctionConfigurationOutcome outcome = client.UpdateFunctionConfiguration(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda configuration was successfully updated.\"\n                      << std::endl;\n            break;\n        }\n\n            // RESOURCE_IN_USE: function code update not completed.\n        else if (outcome.GetError().GetErrorType() !=\n                 Aws::Lambda::LambdaErrors::RESOURCE_IN_USE) {\n            if ((seconds % 10) == 0) { // Log status every 10 seconds.\n                std::cout << \"Lambda function update in progress . After \" << seconds\n                          << \" seconds elapsed.\" << std::endl;\n            }\n        }\n        else {\n            std::cerr << \"Error with Lambda::UpdateFunctionConfiguration. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n\n    } while (0 < seconds);\n\n    if (0 > seconds) {\n        std::cerr << \"Function failed to become active.\" << std::endl;\n    }\n    else {\n        std::cout << \"Updated function active after \" << seconds << \" seconds.\"\n                  << std::endl;\n    }\n\n    std::cout\n            << \"\\nThe new code applies an arithmetic operator to two variables, x an y.\"\n            << std::endl;\n    std::vector<Aws::String> operators = {\"plus\", \"minus\", \"times\", \"divided-by\"};\n    for (size_t i = 0; i < operators.size(); ++i) {\n        std::cout << \"   \" << i + 1 << \" \" << operators[i] << std::endl;\n    }\n\n    // 6.  Invoke the updated Lambda function.\n    do {\n        int operatorIndex = askQuestionForIntRange(\"Select an operator index 1 - 4 \", 1,\n                                                   4);\n        int x = askQuestionForInt(\"Enter an integer for the x value \");\n        int y = askQuestionForInt(\"Enter an integer for the y value \");\n\n        Aws::Utils::Json::JsonValue calculateJsonPayload;\n        calculateJsonPayload.WithString(\"action\", operators[operatorIndex - 1]);\n        calculateJsonPayload.WithInteger(\"x\", x);\n        calculateJsonPayload.WithInteger(\"y\", y);\n        Aws::Lambda::Model::InvokeResult calculatedResult;\n        if (invokeLambdaFunction(calculateJsonPayload,\n                                 Aws::Lambda::Model::LogType::Tail,\n                                 calculatedResult, client)) {\n            Aws::Utils::Json::JsonValue jsonValue(calculatedResult.GetPayload());\n            Aws::Map<Aws::String, Aws::Utils::Json::JsonView> values =\n                    jsonValue.View().GetAllObjects();\n            auto iter = values.find(\"result\");\n            if (iter != values.end() && iter->second.IsIntegerType()) {\n                std::cout << ARITHMETIC_RESUlT_PREFIX << x << \" \"\n                          << operators[operatorIndex - 1] << \" \"\n                          << y << \" is \" << iter->second.AsInteger() << std::endl;\n            }\n            else if (iter != values.end() && iter->second.IsFloatingPointType()) {\n                std::cout << ARITHMETIC_RESUlT_PREFIX << x << \" \"\n                          << operators[operatorIndex - 1] << \" \"\n                          << y << \" is \" << iter->second.AsDouble() << std::endl;\n            }\n            else {\n                std::cout << \"There was an error in execution. Here is the log.\"\n                          << std::endl;\n                Aws::Utils::ByteBuffer buffer = Aws::Utils::HashingUtils::Base64Decode(\n                        calculatedResult.GetLogResult());\n                std::cout << \"With log \" << buffer.GetUnderlyingData() << std::endl;\n            }\n        }\n\n        answer = askQuestion(\"Would you like to try another operation? (y/n) \");\n    } while (answer == \"y\");\n\n    std::cout\n            << \"A list of the lambda functions will be retrieved. Press return to continue, \";\n    std::getline(std::cin, answer);\n\n    // 7.  List the Lambda functions.\n\n    std::vector<Aws::String> functions;\n    Aws::String marker;\n\n    do {\n        Aws::Lambda::Model::ListFunctionsRequest request;\n        if (!marker.empty()) {\n            request.SetMarker(marker);\n        }\n\n        Aws::Lambda::Model::ListFunctionsOutcome outcome = client.ListFunctions(\n                request);\n\n        if (outcome.IsSuccess()) {\n            const Aws::Lambda::Model::ListFunctionsResult &result = outcome.GetResult();\n            std::cout << result.GetFunctions().size()\n                      << \" lambda functions were retrieved.\" << std::endl;\n\n            for (const Aws::Lambda::Model::FunctionConfiguration &functionConfiguration: result.GetFunctions()) {\n                functions.push_back(functionConfiguration.GetFunctionName());\n                std::cout << functions.size() << \"  \"\n                          << functionConfiguration.GetDescription() << std::endl;\n                std::cout << \"   \"\n                          << Aws::Lambda::Model::RuntimeMapper::GetNameForRuntime(\n                                  functionConfiguration.GetRuntime()) << \": \"\n                          << functionConfiguration.GetHandler()\n                          << std::endl;\n            }\n            marker = result.GetNextMarker();\n        }\n        else {\n            std::cerr << \"Error with Lambda::ListFunctions. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n    } while (!marker.empty());\n\n    // 8.  Get a Lambda function.\n    if (!functions.empty()) {\n        std::stringstream question;\n        question << \"Choose a function to retrieve between 1 and \" << functions.size()\n                 << \" \";\n        int functionIndex = askQuestionForIntRange(question.str(), 1,\n                                                   static_cast<int>(functions.size()));\n\n        Aws::String functionName = functions[functionIndex - 1];\n\n        Aws::Lambda::Model::GetFunctionRequest request;\n        request.SetFunctionName(functionName);\n\n        Aws::Lambda::Model::GetFunctionOutcome outcome = client.GetFunction(request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"Function retrieve.\\n\" <<\n                      outcome.GetResult().GetConfiguration().Jsonize().View().WriteReadable()\n                      << std::endl;\n        }\n        else {\n            std::cerr << \"Error with Lambda::GetFunction. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n    }\n\n    std::cout << \"The resources will be deleted. Press return to continue, \";\n    std::getline(std::cin, answer);\n\n    // 9.  Delete the Lambda function.\n    bool result = deleteLambdaFunction(client);\n\n    // 10. Delete the IAM role.\n    return result && deleteIamRole(clientConfig);\n}\n\n//! Routine which invokes a Lambda function and returns the result.\n/*!\n \\param jsonPayload: Payload for invoke function.\n \\param logType: Log type setting for invoke function.\n \\param invokeResult: InvokeResult object to receive the result.\n \\param client: Lambda client.\n \\return bool: Successful completion.\n */\nbool\nAwsDoc::Lambda::invokeLambdaFunction(const Aws::Utils::Json::JsonValue &jsonPayload,\n                                     Aws::Lambda::Model::LogType logType,\n                                     Aws::Lambda::Model::InvokeResult &invokeResult,\n                                     const Aws::Lambda::LambdaClient &client) {\n    int seconds = 0;\n    bool result = false;\n    /*\n     * In this example, the Invoke function can be called before recently created resources are\n     * available.  The Invoke function is called repeatedly until the resources are\n     * available.\n     */\n    do {\n        Aws::Lambda::Model::InvokeRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        request.SetLogType(logType);\n        std::shared_ptr<Aws::IOStream> payload = Aws::MakeShared<Aws::StringStream>(\n                \"FunctionTest\");\n        *payload << jsonPayload.View().WriteReadable();\n        request.SetBody(payload);\n        request.SetContentType(\"application/json\");\n        Aws::Lambda::Model::InvokeOutcome outcome = client.Invoke(request);\n\n        if (outcome.IsSuccess()) {\n            invokeResult = std::move(outcome.GetResult());\n            result = true;\n            break;\n        }\n\n            // ACCESS_DENIED: because the role is not available yet.\n            // RESOURCE_CONFLICT: because the Lambda function is being created or updated.\n        else if ((outcome.GetError().GetErrorType() ==\n                  Aws::Lambda::LambdaErrors::ACCESS_DENIED) ||\n                 (outcome.GetError().GetErrorType() ==\n                  Aws::Lambda::LambdaErrors::RESOURCE_CONFLICT)) {\n            if ((seconds % 5) == 0) { // Log status every 10 seconds.\n                std::cout << \"Waiting for the invoke api to be available, status \" <<\n                          ((outcome.GetError().GetErrorType() ==\n                            Aws::Lambda::LambdaErrors::ACCESS_DENIED ?\n                            \"ACCESS_DENIED\" : \"RESOURCE_CONFLICT\")) << \". \" << seconds\n                          << \" seconds elapsed.\" << std::endl;\n            }\n        }\n        else {\n            std::cerr << \"Error with Lambda::InvokeRequest. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n            break;\n        }\n        ++seconds;\n        std::this_thread::sleep_for(std::chrono::seconds(1));\n    } while (seconds < 60);\n\n    return result;\n}\n\n",
                            "  5.Go : \nimport (\n\t\"archive/zip\"\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/iam\"\n\tiamtypes \"github.com/aws/aws-sdk-go-v2/service/iam/types\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/lambda/actions\"\n)\n\n// GetStartedFunctionsScenario shows you how to use AWS Lambda to perform the following\n// actions:\n//\n//  1. Create an AWS Identity and Access Management (IAM) role and Lambda function, then upload handler code.\n//  2. Invoke the function with a single parameter and get results.\n//  3. Update the function code and configure with an environment variable.\n//  4. Invoke the function with new parameters and get results. Display the returned execution log.\n//  5. List the functions for your account, then clean up resources.\ntype GetStartedFunctionsScenario struct {\n\tsdkConfig       aws.Config\n\tfunctionWrapper actions.FunctionWrapper\n\tquestioner      demotools.IQuestioner\n\thelper          IScenarioHelper\n\tisTestRun       bool\n}\n\n// NewGetStartedFunctionsScenario constructs a GetStartedFunctionsScenario instance from a configuration.\n// It uses the specified config to get a Lambda client and create wrappers for the actions\n// used in the scenario.\nfunc NewGetStartedFunctionsScenario(sdkConfig aws.Config, questioner demotools.IQuestioner,\n\thelper IScenarioHelper) GetStartedFunctionsScenario {\n\tlambdaClient := lambda.NewFromConfig(sdkConfig)\n\treturn GetStartedFunctionsScenario{\n\t\tsdkConfig:       sdkConfig,\n\t\tfunctionWrapper: actions.FunctionWrapper{LambdaClient: lambdaClient},\n\t\tquestioner:      questioner,\n\t\thelper:          helper,\n\t}\n}\n\n// Run runs the interactive scenario.\nfunc (scenario GetStartedFunctionsScenario) Run(ctx context.Context) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Printf(\"Something went wrong with the demo.\\n\")\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Welcome to the AWS Lambda get started with functions demo.\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\trole := scenario.GetOrCreateRole(ctx)\n\tfuncName := scenario.CreateFunction(ctx, role)\n\tscenario.InvokeIncrement(ctx, funcName)\n\tscenario.UpdateFunction(ctx, funcName)\n\tscenario.InvokeCalculator(ctx, funcName)\n\tscenario.ListFunctions(ctx)\n\tscenario.Cleanup(ctx, role, funcName)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// GetOrCreateRole checks whether the specified role exists and returns it if it does.\n// Otherwise, a role is created that specifies Lambda as a trusted principal.\n// The AWSLambdaBasicExecutionRole managed policy is attached to the role and the role\n// is returned.\nfunc (scenario GetStartedFunctionsScenario) GetOrCreateRole(ctx context.Context) *iamtypes.Role {\n\tvar role *iamtypes.Role\n\tiamClient := iam.NewFromConfig(scenario.sdkConfig)\n\tlog.Println(\"First, we need an IAM role that Lambda can assume.\")\n\troleName := scenario.questioner.Ask(\"Enter a name for the role:\", demotools.NotEmpty{})\n\tgetOutput, err := iamClient.GetRole(ctx, &iam.GetRoleInput{\n\t\tRoleName: aws.String(roleName)})\n\tif err != nil {\n\t\tvar noSuch *iamtypes.NoSuchEntityException\n\t\tif errors.As(err, &noSuch) {\n\t\t\tlog.Printf(\"Role %v doesn't exist. Creating it....\\n\", roleName)\n\t\t} else {\n\t\t\tlog.Panicf(\"Couldn't check whether role %v exists. Here's why: %v\\n\",\n\t\t\t\troleName, err)\n\t\t}\n\t} else {\n\t\trole = getOutput.Role\n\t\tlog.Printf(\"Found role %v.\\n\", *role.RoleName)\n\t}\n\tif role == nil {\n\t\ttrustPolicy := PolicyDocument{\n\t\t\tVersion: \"2012-10-17\",\n\t\t\tStatement: []PolicyStatement{{\n\t\t\t\tEffect:    \"Allow\",\n\t\t\t\tPrincipal: map[string]string{\"Service\": \"lambda.amazonaws.com\"},\n\t\t\t\tAction:    []string{\"sts:AssumeRole\"},\n\t\t\t}},\n\t\t}\n\t\tpolicyArn := \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n\t\tcreateOutput, err := iamClient.CreateRole(ctx, &iam.CreateRoleInput{\n\t\t\tAssumeRolePolicyDocument: aws.String(trustPolicy.String()),\n\t\t\tRoleName:                 aws.String(roleName),\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't create role %v. Here's why: %v\\n\", roleName, err)\n\t\t}\n\t\trole = createOutput.Role\n\t\t_, err = iamClient.AttachRolePolicy(ctx, &iam.AttachRolePolicyInput{\n\t\t\tPolicyArn: aws.String(policyArn),\n\t\t\tRoleName:  aws.String(roleName),\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't attach a policy to role %v. Here's why: %v\\n\", roleName, err)\n\t\t}\n\t\tlog.Printf(\"Created role %v.\\n\", *role.RoleName)\n\t\tlog.Println(\"Let's give AWS a few seconds to propagate resources...\")\n\t\tscenario.helper.Pause(10)\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn role\n}\n\n// CreateFunction creates a Lambda function and uploads a handler written in Python.\n// The code for the Python handler is packaged as a []byte in .zip format.\nfunc (scenario GetStartedFunctionsScenario) CreateFunction(ctx context.Context, role *iamtypes.Role) string {\n\tlog.Println(\"Let's create a function that increments a number.\\n\" +\n\t\t\"The function uses the 'lambda_handler_basic.py' script found in the \\n\" +\n\t\t\"'handlers' directory of this project.\")\n\tfuncName := scenario.questioner.Ask(\"Enter a name for the Lambda function:\", demotools.NotEmpty{})\n\tzipPackage := scenario.helper.CreateDeploymentPackage(\"lambda_handler_basic.py\", fmt.Sprintf(\"%v.py\", funcName))\n\tlog.Printf(\"Creating function %v and waiting for it to be ready.\", funcName)\n\tfuncState := scenario.functionWrapper.CreateFunction(ctx, funcName, fmt.Sprintf(\"%v.lambda_handler\", funcName),\n\t\trole.Arn, zipPackage)\n\tlog.Printf(\"Your function is %v.\", funcState)\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn funcName\n}\n\n// InvokeIncrement invokes a Lambda function that increments a number. The function\n// parameters are contained in a Go struct that is used to serialize the parameters to\n// a JSON payload that is passed to the function.\n// The result payload is deserialized into a Go struct that contains an int value.\nfunc (scenario GetStartedFunctionsScenario) InvokeIncrement(ctx context.Context, funcName string) {\n\tparameters := actions.IncrementParameters{Action: \"increment\"}\n\tlog.Println(\"Let's invoke our function. This function increments a number.\")\n\tparameters.Number = scenario.questioner.AskInt(\"Enter a number to increment:\", demotools.NotEmpty{})\n\tlog.Printf(\"Invoking %v with %v...\\n\", funcName, parameters.Number)\n\tinvokeOutput := scenario.functionWrapper.Invoke(ctx, funcName, parameters, false)\n\tvar payload actions.LambdaResultInt\n\terr := json.Unmarshal(invokeOutput.Payload, &payload)\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't unmarshal payload from invoking %v. Here's why: %v\\n\",\n\t\t\tfuncName, err)\n\t}\n\tlog.Printf(\"Invoking %v with %v returned %v.\\n\", funcName, parameters.Number, payload)\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// UpdateFunction updates the code for a Lambda function by uploading a simple arithmetic\n// calculator written in Python. The code for the Python handler is packaged as a\n// []byte in .zip format.\n// After the code is updated, the configuration is also updated with a new log\n// level that instructs the handler to log additional information.\nfunc (scenario GetStartedFunctionsScenario) UpdateFunction(ctx context.Context, funcName string) {\n\tlog.Println(\"Let's update the function to an arithmetic calculator.\\n\" +\n\t\t\"The function uses the 'lambda_handler_calculator.py' script found in the \\n\" +\n\t\t\"'handlers' directory of this project.\")\n\tscenario.questioner.Ask(\"Press Enter when you're ready.\")\n\tlog.Println(\"Creating deployment package...\")\n\tzipPackage := scenario.helper.CreateDeploymentPackage(\"lambda_handler_calculator.py\",\n\t\tfmt.Sprintf(\"%v.py\", funcName))\n\tlog.Println(\"...and updating the Lambda function and waiting for it to be ready.\")\n\tfuncState := scenario.functionWrapper.UpdateFunctionCode(ctx, funcName, zipPackage)\n\tlog.Printf(\"Updated function %v. Its current state is %v.\", funcName, funcState)\n\tlog.Println(\"This function uses an environment variable to control logging level.\")\n\tlog.Println(\"Let's set it to DEBUG to get the most logging.\")\n\tscenario.functionWrapper.UpdateFunctionConfiguration(ctx, funcName,\n\t\tmap[string]string{\"LOG_LEVEL\": \"DEBUG\"})\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// InvokeCalculator invokes the Lambda calculator function. The parameters are stored in a\n// Go struct that is used to serialize the parameters to a JSON payload. That payload is then passed\n// to the function.\n// The result payload is deserialized to a Go struct that stores the result as either an\n// int or float32, depending on the kind of operation that was specified.\nfunc (scenario GetStartedFunctionsScenario) InvokeCalculator(ctx context.Context, funcName string) {\n\twantInvoke := true\n\tchoices := []string{\"plus\", \"minus\", \"times\", \"divided-by\"}\n\tfor wantInvoke {\n\t\tchoice := scenario.questioner.AskChoice(\"Select an arithmetic operation:\\n\", choices)\n\t\tx := scenario.questioner.AskInt(\"Enter a value for x:\", demotools.NotEmpty{})\n\t\ty := scenario.questioner.AskInt(\"Enter a value for y:\", demotools.NotEmpty{})\n\t\tlog.Printf(\"Invoking %v %v %v...\", x, choices[choice], y)\n\t\tcalcParameters := actions.CalculatorParameters{\n\t\t\tAction: choices[choice],\n\t\t\tX:      x,\n\t\t\tY:      y,\n\t\t}\n\t\tinvokeOutput := scenario.functionWrapper.Invoke(ctx, funcName, calcParameters, true)\n\t\tvar payload any\n\t\tif choice == 3 { // divide-by results in a float.\n\t\t\tpayload = actions.LambdaResultFloat{}\n\t\t} else {\n\t\t\tpayload = actions.LambdaResultInt{}\n\t\t}\n\t\terr := json.Unmarshal(invokeOutput.Payload, &payload)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't unmarshal payload from invoking %v. Here's why: %v\\n\",\n\t\t\t\tfuncName, err)\n\t\t}\n\t\tlog.Printf(\"Invoking %v with %v %v %v returned %v.\\n\", funcName,\n\t\t\tcalcParameters.X, calcParameters.Action, calcParameters.Y, payload)\n\t\tscenario.questioner.Ask(\"Press Enter to see the logs from the call.\")\n\t\tlogRes, err := base64.StdEncoding.DecodeString(*invokeOutput.LogResult)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't decode log result. Here's why: %v\\n\", err)\n\t\t}\n\t\tlog.Println(string(logRes))\n\t\twantInvoke = scenario.questioner.AskBool(\"Do you want to calculate again? (y/n)\", \"y\")\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// ListFunctions lists up to the specified number of functions for your account.\nfunc (scenario GetStartedFunctionsScenario) ListFunctions(ctx context.Context) {\n\tcount := scenario.questioner.AskInt(\n\t\t\"Let's list functions for your account. How many do you want to see?\", demotools.NotEmpty{})\n\tfunctions := scenario.functionWrapper.ListFunctions(ctx, count)\n\tlog.Printf(\"Found %v functions:\", len(functions))\n\tfor _, function := range functions {\n\t\tlog.Printf(\"\\t%v\", *function.FunctionName)\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// Cleanup removes the IAM and Lambda resources created by the example.\nfunc (scenario GetStartedFunctionsScenario) Cleanup(ctx context.Context, role *iamtypes.Role, funcName string) {\n\tif scenario.questioner.AskBool(\"Do you want to clean up resources created for this example? (y/n)\",\n\t\t\"y\") {\n\t\tiamClient := iam.NewFromConfig(scenario.sdkConfig)\n\t\tpoliciesOutput, err := iamClient.ListAttachedRolePolicies(ctx,\n\t\t\t&iam.ListAttachedRolePoliciesInput{RoleName: role.RoleName})\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't get policies attached to role %v. Here's why: %v\\n\",\n\t\t\t\t*role.RoleName, err)\n\t\t}\n\t\tfor _, policy := range policiesOutput.AttachedPolicies {\n\t\t\t_, err = iamClient.DetachRolePolicy(ctx, &iam.DetachRolePolicyInput{\n\t\t\t\tPolicyArn: policy.PolicyArn, RoleName: role.RoleName,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tlog.Panicf(\"Couldn't detach policy %v from role %v. Here's why: %v\\n\",\n\t\t\t\t\t*policy.PolicyArn, *role.RoleName, err)\n\t\t\t}\n\t\t}\n\t\t_, err = iamClient.DeleteRole(ctx, &iam.DeleteRoleInput{RoleName: role.RoleName})\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't delete role %v. Here's why: %v\\n\", *role.RoleName, err)\n\t\t}\n\t\tlog.Printf(\"Deleted role %v.\\n\", *role.RoleName)\n\n\t\tscenario.functionWrapper.DeleteFunction(ctx, funcName)\n\t\tlog.Printf(\"Deleted function %v.\\n\", funcName)\n\t} else {\n\t\tlog.Println(\"Okay. Don't forget to delete the resources when you're done with them.\")\n\t}\n}\n\n// IScenarioHelper abstracts I/O and wait functions from a scenario so that they\n// can be mocked for unit testing.\ntype IScenarioHelper interface {\n\tPause(secs int)\n\tCreateDeploymentPackage(sourceFile string, destinationFile string) *bytes.Buffer\n}\n\n// ScenarioHelper lets the caller specify the path to Lambda handler functions.\ntype ScenarioHelper struct {\n\tHandlerPath string\n}\n\n// Pause waits for the specified number of seconds.\nfunc (helper *ScenarioHelper) Pause(secs int) {\n\ttime.Sleep(time.Duration(secs) * time.Second)\n}\n\n// CreateDeploymentPackage creates an AWS Lambda deployment package from a source file. The\n// deployment package is stored in .zip format in a bytes.Buffer. The buffer can be\n// used to pass a []byte to Lambda when creating the function.\n// The specified destinationFile is the name to give the file when it's deployed to Lambda.\nfunc (helper *ScenarioHelper) CreateDeploymentPackage(sourceFile string, destinationFile string) *bytes.Buffer {\n\tvar err error\n\tbuffer := &bytes.Buffer{}\n\twriter := zip.NewWriter(buffer)\n\tzFile, err := writer.Create(destinationFile)\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't create destination archive %v. Here's why: %v\\n\", destinationFile, err)\n\t}\n\tsourceBody, err := os.ReadFile(fmt.Sprintf(\"%v/%v\", helper.HandlerPath, sourceFile))\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't read handler source file %v. Here's why: %v\\n\",\n\t\t\tsourceFile, err)\n\t} else {\n\t\t_, err = zFile.Write(sourceBody)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't write handler %v to zip archive. Here's why: %v\\n\",\n\t\t\t\tsourceFile, err)\n\t\t}\n\t}\n\terr = writer.Close()\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't close zip writer. Here's why: %v\\n\", err)\n\t}\n\treturn buffer\n}\n\n\n",
                            "  6.SDK for Go V2 : \nimport (\n\t\"archive/zip\"\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/base64\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/iam\"\n\tiamtypes \"github.com/aws/aws-sdk-go-v2/service/iam/types\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/lambda/actions\"\n)\n\n// GetStartedFunctionsScenario shows you how to use AWS Lambda to perform the following\n// actions:\n//\n//  1. Create an AWS Identity and Access Management (IAM) role and Lambda function, then upload handler code.\n//  2. Invoke the function with a single parameter and get results.\n//  3. Update the function code and configure with an environment variable.\n//  4. Invoke the function with new parameters and get results. Display the returned execution log.\n//  5. List the functions for your account, then clean up resources.\ntype GetStartedFunctionsScenario struct {\n\tsdkConfig       aws.Config\n\tfunctionWrapper actions.FunctionWrapper\n\tquestioner      demotools.IQuestioner\n\thelper          IScenarioHelper\n\tisTestRun       bool\n}\n\n// NewGetStartedFunctionsScenario constructs a GetStartedFunctionsScenario instance from a configuration.\n// It uses the specified config to get a Lambda client and create wrappers for the actions\n// used in the scenario.\nfunc NewGetStartedFunctionsScenario(sdkConfig aws.Config, questioner demotools.IQuestioner,\n\thelper IScenarioHelper) GetStartedFunctionsScenario {\n\tlambdaClient := lambda.NewFromConfig(sdkConfig)\n\treturn GetStartedFunctionsScenario{\n\t\tsdkConfig:       sdkConfig,\n\t\tfunctionWrapper: actions.FunctionWrapper{LambdaClient: lambdaClient},\n\t\tquestioner:      questioner,\n\t\thelper:          helper,\n\t}\n}\n\n// Run runs the interactive scenario.\nfunc (scenario GetStartedFunctionsScenario) Run(ctx context.Context) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Printf(\"Something went wrong with the demo.\\n\")\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Welcome to the AWS Lambda get started with functions demo.\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\trole := scenario.GetOrCreateRole(ctx)\n\tfuncName := scenario.CreateFunction(ctx, role)\n\tscenario.InvokeIncrement(ctx, funcName)\n\tscenario.UpdateFunction(ctx, funcName)\n\tscenario.InvokeCalculator(ctx, funcName)\n\tscenario.ListFunctions(ctx)\n\tscenario.Cleanup(ctx, role, funcName)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// GetOrCreateRole checks whether the specified role exists and returns it if it does.\n// Otherwise, a role is created that specifies Lambda as a trusted principal.\n// The AWSLambdaBasicExecutionRole managed policy is attached to the role and the role\n// is returned.\nfunc (scenario GetStartedFunctionsScenario) GetOrCreateRole(ctx context.Context) *iamtypes.Role {\n\tvar role *iamtypes.Role\n\tiamClient := iam.NewFromConfig(scenario.sdkConfig)\n\tlog.Println(\"First, we need an IAM role that Lambda can assume.\")\n\troleName := scenario.questioner.Ask(\"Enter a name for the role:\", demotools.NotEmpty{})\n\tgetOutput, err := iamClient.GetRole(ctx, &iam.GetRoleInput{\n\t\tRoleName: aws.String(roleName)})\n\tif err != nil {\n\t\tvar noSuch *iamtypes.NoSuchEntityException\n\t\tif errors.As(err, &noSuch) {\n\t\t\tlog.Printf(\"Role %v doesn't exist. Creating it....\\n\", roleName)\n\t\t} else {\n\t\t\tlog.Panicf(\"Couldn't check whether role %v exists. Here's why: %v\\n\",\n\t\t\t\troleName, err)\n\t\t}\n\t} else {\n\t\trole = getOutput.Role\n\t\tlog.Printf(\"Found role %v.\\n\", *role.RoleName)\n\t}\n\tif role == nil {\n\t\ttrustPolicy := PolicyDocument{\n\t\t\tVersion: \"2012-10-17\",\n\t\t\tStatement: []PolicyStatement{{\n\t\t\t\tEffect:    \"Allow\",\n\t\t\t\tPrincipal: map[string]string{\"Service\": \"lambda.amazonaws.com\"},\n\t\t\t\tAction:    []string{\"sts:AssumeRole\"},\n\t\t\t}},\n\t\t}\n\t\tpolicyArn := \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n\t\tcreateOutput, err := iamClient.CreateRole(ctx, &iam.CreateRoleInput{\n\t\t\tAssumeRolePolicyDocument: aws.String(trustPolicy.String()),\n\t\t\tRoleName:                 aws.String(roleName),\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't create role %v. Here's why: %v\\n\", roleName, err)\n\t\t}\n\t\trole = createOutput.Role\n\t\t_, err = iamClient.AttachRolePolicy(ctx, &iam.AttachRolePolicyInput{\n\t\t\tPolicyArn: aws.String(policyArn),\n\t\t\tRoleName:  aws.String(roleName),\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't attach a policy to role %v. Here's why: %v\\n\", roleName, err)\n\t\t}\n\t\tlog.Printf(\"Created role %v.\\n\", *role.RoleName)\n\t\tlog.Println(\"Let's give AWS a few seconds to propagate resources...\")\n\t\tscenario.helper.Pause(10)\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn role\n}\n\n// CreateFunction creates a Lambda function and uploads a handler written in Python.\n// The code for the Python handler is packaged as a []byte in .zip format.\nfunc (scenario GetStartedFunctionsScenario) CreateFunction(ctx context.Context, role *iamtypes.Role) string {\n\tlog.Println(\"Let's create a function that increments a number.\\n\" +\n\t\t\"The function uses the 'lambda_handler_basic.py' script found in the \\n\" +\n\t\t\"'handlers' directory of this project.\")\n\tfuncName := scenario.questioner.Ask(\"Enter a name for the Lambda function:\", demotools.NotEmpty{})\n\tzipPackage := scenario.helper.CreateDeploymentPackage(\"lambda_handler_basic.py\", fmt.Sprintf(\"%v.py\", funcName))\n\tlog.Printf(\"Creating function %v and waiting for it to be ready.\", funcName)\n\tfuncState := scenario.functionWrapper.CreateFunction(ctx, funcName, fmt.Sprintf(\"%v.lambda_handler\", funcName),\n\t\trole.Arn, zipPackage)\n\tlog.Printf(\"Your function is %v.\", funcState)\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn funcName\n}\n\n// InvokeIncrement invokes a Lambda function that increments a number. The function\n// parameters are contained in a Go struct that is used to serialize the parameters to\n// a JSON payload that is passed to the function.\n// The result payload is deserialized into a Go struct that contains an int value.\nfunc (scenario GetStartedFunctionsScenario) InvokeIncrement(ctx context.Context, funcName string) {\n\tparameters := actions.IncrementParameters{Action: \"increment\"}\n\tlog.Println(\"Let's invoke our function. This function increments a number.\")\n\tparameters.Number = scenario.questioner.AskInt(\"Enter a number to increment:\", demotools.NotEmpty{})\n\tlog.Printf(\"Invoking %v with %v...\\n\", funcName, parameters.Number)\n\tinvokeOutput := scenario.functionWrapper.Invoke(ctx, funcName, parameters, false)\n\tvar payload actions.LambdaResultInt\n\terr := json.Unmarshal(invokeOutput.Payload, &payload)\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't unmarshal payload from invoking %v. Here's why: %v\\n\",\n\t\t\tfuncName, err)\n\t}\n\tlog.Printf(\"Invoking %v with %v returned %v.\\n\", funcName, parameters.Number, payload)\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// UpdateFunction updates the code for a Lambda function by uploading a simple arithmetic\n// calculator written in Python. The code for the Python handler is packaged as a\n// []byte in .zip format.\n// After the code is updated, the configuration is also updated with a new log\n// level that instructs the handler to log additional information.\nfunc (scenario GetStartedFunctionsScenario) UpdateFunction(ctx context.Context, funcName string) {\n\tlog.Println(\"Let's update the function to an arithmetic calculator.\\n\" +\n\t\t\"The function uses the 'lambda_handler_calculator.py' script found in the \\n\" +\n\t\t\"'handlers' directory of this project.\")\n\tscenario.questioner.Ask(\"Press Enter when you're ready.\")\n\tlog.Println(\"Creating deployment package...\")\n\tzipPackage := scenario.helper.CreateDeploymentPackage(\"lambda_handler_calculator.py\",\n\t\tfmt.Sprintf(\"%v.py\", funcName))\n\tlog.Println(\"...and updating the Lambda function and waiting for it to be ready.\")\n\tfuncState := scenario.functionWrapper.UpdateFunctionCode(ctx, funcName, zipPackage)\n\tlog.Printf(\"Updated function %v. Its current state is %v.\", funcName, funcState)\n\tlog.Println(\"This function uses an environment variable to control logging level.\")\n\tlog.Println(\"Let's set it to DEBUG to get the most logging.\")\n\tscenario.functionWrapper.UpdateFunctionConfiguration(ctx, funcName,\n\t\tmap[string]string{\"LOG_LEVEL\": \"DEBUG\"})\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// InvokeCalculator invokes the Lambda calculator function. The parameters are stored in a\n// Go struct that is used to serialize the parameters to a JSON payload. That payload is then passed\n// to the function.\n// The result payload is deserialized to a Go struct that stores the result as either an\n// int or float32, depending on the kind of operation that was specified.\nfunc (scenario GetStartedFunctionsScenario) InvokeCalculator(ctx context.Context, funcName string) {\n\twantInvoke := true\n\tchoices := []string{\"plus\", \"minus\", \"times\", \"divided-by\"}\n\tfor wantInvoke {\n\t\tchoice := scenario.questioner.AskChoice(\"Select an arithmetic operation:\\n\", choices)\n\t\tx := scenario.questioner.AskInt(\"Enter a value for x:\", demotools.NotEmpty{})\n\t\ty := scenario.questioner.AskInt(\"Enter a value for y:\", demotools.NotEmpty{})\n\t\tlog.Printf(\"Invoking %v %v %v...\", x, choices[choice], y)\n\t\tcalcParameters := actions.CalculatorParameters{\n\t\t\tAction: choices[choice],\n\t\t\tX:      x,\n\t\t\tY:      y,\n\t\t}\n\t\tinvokeOutput := scenario.functionWrapper.Invoke(ctx, funcName, calcParameters, true)\n\t\tvar payload any\n\t\tif choice == 3 { // divide-by results in a float.\n\t\t\tpayload = actions.LambdaResultFloat{}\n\t\t} else {\n\t\t\tpayload = actions.LambdaResultInt{}\n\t\t}\n\t\terr := json.Unmarshal(invokeOutput.Payload, &payload)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't unmarshal payload from invoking %v. Here's why: %v\\n\",\n\t\t\t\tfuncName, err)\n\t\t}\n\t\tlog.Printf(\"Invoking %v with %v %v %v returned %v.\\n\", funcName,\n\t\t\tcalcParameters.X, calcParameters.Action, calcParameters.Y, payload)\n\t\tscenario.questioner.Ask(\"Press Enter to see the logs from the call.\")\n\t\tlogRes, err := base64.StdEncoding.DecodeString(*invokeOutput.LogResult)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't decode log result. Here's why: %v\\n\", err)\n\t\t}\n\t\tlog.Println(string(logRes))\n\t\twantInvoke = scenario.questioner.AskBool(\"Do you want to calculate again? (y/n)\", \"y\")\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// ListFunctions lists up to the specified number of functions for your account.\nfunc (scenario GetStartedFunctionsScenario) ListFunctions(ctx context.Context) {\n\tcount := scenario.questioner.AskInt(\n\t\t\"Let's list functions for your account. How many do you want to see?\", demotools.NotEmpty{})\n\tfunctions := scenario.functionWrapper.ListFunctions(ctx, count)\n\tlog.Printf(\"Found %v functions:\", len(functions))\n\tfor _, function := range functions {\n\t\tlog.Printf(\"\\t%v\", *function.FunctionName)\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// Cleanup removes the IAM and Lambda resources created by the example.\nfunc (scenario GetStartedFunctionsScenario) Cleanup(ctx context.Context, role *iamtypes.Role, funcName string) {\n\tif scenario.questioner.AskBool(\"Do you want to clean up resources created for this example? (y/n)\",\n\t\t\"y\") {\n\t\tiamClient := iam.NewFromConfig(scenario.sdkConfig)\n\t\tpoliciesOutput, err := iamClient.ListAttachedRolePolicies(ctx,\n\t\t\t&iam.ListAttachedRolePoliciesInput{RoleName: role.RoleName})\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't get policies attached to role %v. Here's why: %v\\n\",\n\t\t\t\t*role.RoleName, err)\n\t\t}\n\t\tfor _, policy := range policiesOutput.AttachedPolicies {\n\t\t\t_, err = iamClient.DetachRolePolicy(ctx, &iam.DetachRolePolicyInput{\n\t\t\t\tPolicyArn: policy.PolicyArn, RoleName: role.RoleName,\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tlog.Panicf(\"Couldn't detach policy %v from role %v. Here's why: %v\\n\",\n\t\t\t\t\t*policy.PolicyArn, *role.RoleName, err)\n\t\t\t}\n\t\t}\n\t\t_, err = iamClient.DeleteRole(ctx, &iam.DeleteRoleInput{RoleName: role.RoleName})\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't delete role %v. Here's why: %v\\n\", *role.RoleName, err)\n\t\t}\n\t\tlog.Printf(\"Deleted role %v.\\n\", *role.RoleName)\n\n\t\tscenario.functionWrapper.DeleteFunction(ctx, funcName)\n\t\tlog.Printf(\"Deleted function %v.\\n\", funcName)\n\t} else {\n\t\tlog.Println(\"Okay. Don't forget to delete the resources when you're done with them.\")\n\t}\n}\n\n// IScenarioHelper abstracts I/O and wait functions from a scenario so that they\n// can be mocked for unit testing.\ntype IScenarioHelper interface {\n\tPause(secs int)\n\tCreateDeploymentPackage(sourceFile string, destinationFile string) *bytes.Buffer\n}\n\n// ScenarioHelper lets the caller specify the path to Lambda handler functions.\ntype ScenarioHelper struct {\n\tHandlerPath string\n}\n\n// Pause waits for the specified number of seconds.\nfunc (helper *ScenarioHelper) Pause(secs int) {\n\ttime.Sleep(time.Duration(secs) * time.Second)\n}\n\n// CreateDeploymentPackage creates an AWS Lambda deployment package from a source file. The\n// deployment package is stored in .zip format in a bytes.Buffer. The buffer can be\n// used to pass a []byte to Lambda when creating the function.\n// The specified destinationFile is the name to give the file when it's deployed to Lambda.\nfunc (helper *ScenarioHelper) CreateDeploymentPackage(sourceFile string, destinationFile string) *bytes.Buffer {\n\tvar err error\n\tbuffer := &bytes.Buffer{}\n\twriter := zip.NewWriter(buffer)\n\tzFile, err := writer.Create(destinationFile)\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't create destination archive %v. Here's why: %v\\n\", destinationFile, err)\n\t}\n\tsourceBody, err := os.ReadFile(fmt.Sprintf(\"%v/%v\", helper.HandlerPath, sourceFile))\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't read handler source file %v. Here's why: %v\\n\",\n\t\t\tsourceFile, err)\n\t} else {\n\t\t_, err = zFile.Write(sourceBody)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't write handler %v to zip archive. Here's why: %v\\n\",\n\t\t\t\tsourceFile, err)\n\t\t}\n\t}\n\terr = writer.Close()\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't close zip writer. Here's why: %v\\n\", err)\n\t}\n\treturn buffer\n}\n\n\n",
                            "  7.Java : /*\n *  Lambda function names appear as:\n *\n *  arn:aws:lambda:us-west-2:335556666777:function:HelloFunction\n *\n *  To find this value, look at the function in the AWS Management Console.\n *\n *  Before running this Java code example, set up your development environment, including your credentials.\n *\n *  For more information, see this documentation topic:\n *\n *  https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html\n *\n *  This example performs the following tasks:\n *\n * 1. Creates an AWS Lambda function.\n * 2. Gets a specific AWS Lambda function.\n * 3. Lists all Lambda functions.\n * 4. Invokes a Lambda function.\n * 5. Updates the Lambda function code and invokes it again.\n * 6. Updates a Lambda function's configuration value.\n * 7. Deletes a Lambda function.\n */\n\npublic class LambdaScenario {\n    public static final String DASHES = new String(new char[80]).replace(\"\\0\", \"-\");\n\n    public static void main(String[] args) throws InterruptedException {\n        final String usage = \"\"\"\n\n            Usage:\n                <functionName> <role> <handler> <bucketName> <key>\\s\n\n            Where:\n                functionName - The name of the Lambda function.\\s\n                role - The AWS Identity and Access Management (IAM) service role that has Lambda permissions.\\s\n                handler - The fully qualified method name (for example, example.Handler::handleRequest).\\s\n                bucketName - The Amazon Simple Storage Service (Amazon S3) bucket name that contains the .zip or .jar used to update the Lambda function's code.\\s\n                key - The Amazon S3 key name that represents the .zip or .jar (for example, LambdaHello-1.0-SNAPSHOT.jar).\n                \"\"\";\n\n        if (args.length != 5) {\n              System.out.println(usage);\n              return;\n        }\n\n        String functionName = args[0];\n        String role = args[1];\n        String handler = args[2];\n        String bucketName = args[3];\n        String key = args[4];\n        LambdaClient awsLambda = LambdaClient.builder()\n            .build();\n\n        System.out.println(DASHES);\n        System.out.println(\"Welcome to the AWS Lambda Basics scenario.\");\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"1. Create an AWS Lambda function.\");\n        String funArn = createLambdaFunction(awsLambda, functionName, key, bucketName, role, handler);\n        System.out.println(\"The AWS Lambda ARN is \" + funArn);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"2. Get the \" + functionName + \" AWS Lambda function.\");\n        getFunction(awsLambda, functionName);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"3. List all AWS Lambda functions.\");\n        listFunctions(awsLambda);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"4. Invoke the Lambda function.\");\n        System.out.println(\"*** Sleep for 1 min to get Lambda function ready.\");\n        Thread.sleep(60000);\n        invokeFunction(awsLambda, functionName);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"5. Update the Lambda function code and invoke it again.\");\n        updateFunctionCode(awsLambda, functionName, bucketName, key);\n        System.out.println(\"*** Sleep for 1 min to get Lambda function ready.\");\n        Thread.sleep(60000);\n        invokeFunction(awsLambda, functionName);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"6. Update a Lambda function's configuration value.\");\n        updateFunctionConfiguration(awsLambda, functionName, handler);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"7. Delete the AWS Lambda function.\");\n        LambdaScenario.deleteLambdaFunction(awsLambda, functionName);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"The AWS Lambda scenario completed successfully\");\n        System.out.println(DASHES);\n        awsLambda.close();\n    }\n\n    /**\n     * Creates a new Lambda function in AWS using the AWS Lambda Java API.\n     *\n     * @param awsLambda    the AWS Lambda client used to interact with the AWS Lambda service\n     * @param functionName the name of the Lambda function to create\n     * @param key          the S3 key of the function code\n     * @param bucketName   the name of the S3 bucket containing the function code\n     * @param role         the IAM role to assign to the Lambda function\n     * @param handler      the fully qualified class name of the function handler\n     * @return the Amazon Resource Name (ARN) of the created Lambda function\n     */\n    public static String createLambdaFunction(LambdaClient awsLambda,\n                                              String functionName,\n                                              String key,\n                                              String bucketName,\n                                              String role,\n                                              String handler) {\n\n        try {\n            LambdaWaiter waiter = awsLambda.waiter();\n            FunctionCode code = FunctionCode.builder()\n                .s3Key(key)\n                .s3Bucket(bucketName)\n                .build();\n\n            CreateFunctionRequest functionRequest = CreateFunctionRequest.builder()\n                .functionName(functionName)\n                .description(\"Created by the Lambda Java API\")\n                .code(code)\n                .handler(handler)\n                .runtime(Runtime.JAVA17)\n                .role(role)\n                .build();\n\n            // Create a Lambda function using a waiter\n            CreateFunctionResponse functionResponse = awsLambda.createFunction(functionRequest);\n            GetFunctionRequest getFunctionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n            WaiterResponse<GetFunctionResponse> waiterResponse = waiter.waitUntilFunctionExists(getFunctionRequest);\n            waiterResponse.matched().response().ifPresent(System.out::println);\n            return functionResponse.functionArn();\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return \"\";\n    }\n\n    /**\n     * Retrieves information about an AWS Lambda function.\n     *\n     * @param awsLambda    an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to retrieve information about\n     */\n    public static void getFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            GetFunctionRequest functionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            GetFunctionResponse response = awsLambda.getFunction(functionRequest);\n            System.out.println(\"The runtime of this Lambda function is \" + response.configuration().runtime());\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Lists the AWS Lambda functions associated with the current AWS account.\n     *\n     * @param awsLambda an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     *\n     * @throws LambdaException if an error occurs while interacting with the AWS Lambda service\n     */\n    public static void listFunctions(LambdaClient awsLambda) {\n        try {\n            ListFunctionsResponse functionResult = awsLambda.listFunctions();\n            List<FunctionConfiguration> list = functionResult.functions();\n            for (FunctionConfiguration config : list) {\n                System.out.println(\"The function name is \" + config.functionName());\n            }\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Invokes a specific AWS Lambda function.\n     *\n     * @param awsLambda    an instance of {@link LambdaClient} to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to be invoked\n     */\n    public static void invokeFunction(LambdaClient awsLambda, String functionName) {\n        InvokeResponse res;\n        try {\n            // Need a SdkBytes instance for the payload.\n            JSONObject jsonObj = new JSONObject();\n            jsonObj.put(\"inputValue\", \"2000\");\n            String json = jsonObj.toString();\n            SdkBytes payload = SdkBytes.fromUtf8String(json);\n\n            InvokeRequest request = InvokeRequest.builder()\n                .functionName(functionName)\n                .payload(payload)\n                .build();\n\n            res = awsLambda.invoke(request);\n            String value = res.payload().asUtf8String();\n            System.out.println(value);\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Updates the code for an AWS Lambda function.\n     *\n     * @param awsLambda  the AWS Lambda client\n     * @param functionName the name of the Lambda function to update\n     * @param bucketName the name of the S3 bucket where the function code is located\n     * @param key the key (file name) of the function code in the S3 bucket\n     * @throws LambdaException if there is an error updating the function code\n     */\n    public static void updateFunctionCode(LambdaClient awsLambda, String functionName, String bucketName, String key) {\n        try {\n            LambdaWaiter waiter = awsLambda.waiter();\n            UpdateFunctionCodeRequest functionCodeRequest = UpdateFunctionCodeRequest.builder()\n                .functionName(functionName)\n                .publish(true)\n                .s3Bucket(bucketName)\n                .s3Key(key)\n                .build();\n\n            UpdateFunctionCodeResponse response = awsLambda.updateFunctionCode(functionCodeRequest);\n            GetFunctionConfigurationRequest getFunctionConfigRequest = GetFunctionConfigurationRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            WaiterResponse<GetFunctionConfigurationResponse> waiterResponse = waiter\n                .waitUntilFunctionUpdated(getFunctionConfigRequest);\n            waiterResponse.matched().response().ifPresent(System.out::println);\n            System.out.println(\"The last modified value is \" + response.lastModified());\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Updates the configuration of an AWS Lambda function.\n     *\n     * @param awsLambda     the {@link LambdaClient} instance to use for the AWS Lambda operation\n     * @param functionName  the name of the AWS Lambda function to update\n     * @param handler       the new handler for the AWS Lambda function\n     *\n     * @throws LambdaException if there is an error while updating the function configuration\n     */\n    public static void updateFunctionConfiguration(LambdaClient awsLambda, String functionName, String handler) {\n        try {\n            UpdateFunctionConfigurationRequest configurationRequest = UpdateFunctionConfigurationRequest.builder()\n                .functionName(functionName)\n                .handler(handler)\n                .runtime(Runtime.JAVA17)\n                .build();\n\n            awsLambda.updateFunctionConfiguration(configurationRequest);\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Deletes an AWS Lambda function.\n     *\n     * @param awsLambda     an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName  the name of the Lambda function to be deleted\n     *\n     * @throws LambdaException if an error occurs while deleting the Lambda function\n     */\n    public static void deleteLambdaFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            DeleteFunctionRequest request = DeleteFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            awsLambda.deleteFunction(request);\n            System.out.println(\"The \" + functionName + \" function was deleted\");\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n}\n\n",
                            "  8.SDK for Java 2.x : /*\n *  Lambda function names appear as:\n *\n *  arn:aws:lambda:us-west-2:335556666777:function:HelloFunction\n *\n *  To find this value, look at the function in the AWS Management Console.\n *\n *  Before running this Java code example, set up your development environment, including your credentials.\n *\n *  For more information, see this documentation topic:\n *\n *  https://docs.aws.amazon.com/sdk-for-java/latest/developer-guide/get-started.html\n *\n *  This example performs the following tasks:\n *\n * 1. Creates an AWS Lambda function.\n * 2. Gets a specific AWS Lambda function.\n * 3. Lists all Lambda functions.\n * 4. Invokes a Lambda function.\n * 5. Updates the Lambda function code and invokes it again.\n * 6. Updates a Lambda function's configuration value.\n * 7. Deletes a Lambda function.\n */\n\npublic class LambdaScenario {\n    public static final String DASHES = new String(new char[80]).replace(\"\\0\", \"-\");\n\n    public static void main(String[] args) throws InterruptedException {\n        final String usage = \"\"\"\n\n            Usage:\n                <functionName> <role> <handler> <bucketName> <key>\\s\n\n            Where:\n                functionName - The name of the Lambda function.\\s\n                role - The AWS Identity and Access Management (IAM) service role that has Lambda permissions.\\s\n                handler - The fully qualified method name (for example, example.Handler::handleRequest).\\s\n                bucketName - The Amazon Simple Storage Service (Amazon S3) bucket name that contains the .zip or .jar used to update the Lambda function's code.\\s\n                key - The Amazon S3 key name that represents the .zip or .jar (for example, LambdaHello-1.0-SNAPSHOT.jar).\n                \"\"\";\n\n        if (args.length != 5) {\n              System.out.println(usage);\n              return;\n        }\n\n        String functionName = args[0];\n        String role = args[1];\n        String handler = args[2];\n        String bucketName = args[3];\n        String key = args[4];\n        LambdaClient awsLambda = LambdaClient.builder()\n            .build();\n\n        System.out.println(DASHES);\n        System.out.println(\"Welcome to the AWS Lambda Basics scenario.\");\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"1. Create an AWS Lambda function.\");\n        String funArn = createLambdaFunction(awsLambda, functionName, key, bucketName, role, handler);\n        System.out.println(\"The AWS Lambda ARN is \" + funArn);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"2. Get the \" + functionName + \" AWS Lambda function.\");\n        getFunction(awsLambda, functionName);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"3. List all AWS Lambda functions.\");\n        listFunctions(awsLambda);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"4. Invoke the Lambda function.\");\n        System.out.println(\"*** Sleep for 1 min to get Lambda function ready.\");\n        Thread.sleep(60000);\n        invokeFunction(awsLambda, functionName);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"5. Update the Lambda function code and invoke it again.\");\n        updateFunctionCode(awsLambda, functionName, bucketName, key);\n        System.out.println(\"*** Sleep for 1 min to get Lambda function ready.\");\n        Thread.sleep(60000);\n        invokeFunction(awsLambda, functionName);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"6. Update a Lambda function's configuration value.\");\n        updateFunctionConfiguration(awsLambda, functionName, handler);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"7. Delete the AWS Lambda function.\");\n        LambdaScenario.deleteLambdaFunction(awsLambda, functionName);\n        System.out.println(DASHES);\n\n        System.out.println(DASHES);\n        System.out.println(\"The AWS Lambda scenario completed successfully\");\n        System.out.println(DASHES);\n        awsLambda.close();\n    }\n\n    /**\n     * Creates a new Lambda function in AWS using the AWS Lambda Java API.\n     *\n     * @param awsLambda    the AWS Lambda client used to interact with the AWS Lambda service\n     * @param functionName the name of the Lambda function to create\n     * @param key          the S3 key of the function code\n     * @param bucketName   the name of the S3 bucket containing the function code\n     * @param role         the IAM role to assign to the Lambda function\n     * @param handler      the fully qualified class name of the function handler\n     * @return the Amazon Resource Name (ARN) of the created Lambda function\n     */\n    public static String createLambdaFunction(LambdaClient awsLambda,\n                                              String functionName,\n                                              String key,\n                                              String bucketName,\n                                              String role,\n                                              String handler) {\n\n        try {\n            LambdaWaiter waiter = awsLambda.waiter();\n            FunctionCode code = FunctionCode.builder()\n                .s3Key(key)\n                .s3Bucket(bucketName)\n                .build();\n\n            CreateFunctionRequest functionRequest = CreateFunctionRequest.builder()\n                .functionName(functionName)\n                .description(\"Created by the Lambda Java API\")\n                .code(code)\n                .handler(handler)\n                .runtime(Runtime.JAVA17)\n                .role(role)\n                .build();\n\n            // Create a Lambda function using a waiter\n            CreateFunctionResponse functionResponse = awsLambda.createFunction(functionRequest);\n            GetFunctionRequest getFunctionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n            WaiterResponse<GetFunctionResponse> waiterResponse = waiter.waitUntilFunctionExists(getFunctionRequest);\n            waiterResponse.matched().response().ifPresent(System.out::println);\n            return functionResponse.functionArn();\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return \"\";\n    }\n\n    /**\n     * Retrieves information about an AWS Lambda function.\n     *\n     * @param awsLambda    an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to retrieve information about\n     */\n    public static void getFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            GetFunctionRequest functionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            GetFunctionResponse response = awsLambda.getFunction(functionRequest);\n            System.out.println(\"The runtime of this Lambda function is \" + response.configuration().runtime());\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Lists the AWS Lambda functions associated with the current AWS account.\n     *\n     * @param awsLambda an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     *\n     * @throws LambdaException if an error occurs while interacting with the AWS Lambda service\n     */\n    public static void listFunctions(LambdaClient awsLambda) {\n        try {\n            ListFunctionsResponse functionResult = awsLambda.listFunctions();\n            List<FunctionConfiguration> list = functionResult.functions();\n            for (FunctionConfiguration config : list) {\n                System.out.println(\"The function name is \" + config.functionName());\n            }\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Invokes a specific AWS Lambda function.\n     *\n     * @param awsLambda    an instance of {@link LambdaClient} to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to be invoked\n     */\n    public static void invokeFunction(LambdaClient awsLambda, String functionName) {\n        InvokeResponse res;\n        try {\n            // Need a SdkBytes instance for the payload.\n            JSONObject jsonObj = new JSONObject();\n            jsonObj.put(\"inputValue\", \"2000\");\n            String json = jsonObj.toString();\n            SdkBytes payload = SdkBytes.fromUtf8String(json);\n\n            InvokeRequest request = InvokeRequest.builder()\n                .functionName(functionName)\n                .payload(payload)\n                .build();\n\n            res = awsLambda.invoke(request);\n            String value = res.payload().asUtf8String();\n            System.out.println(value);\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Updates the code for an AWS Lambda function.\n     *\n     * @param awsLambda  the AWS Lambda client\n     * @param functionName the name of the Lambda function to update\n     * @param bucketName the name of the S3 bucket where the function code is located\n     * @param key the key (file name) of the function code in the S3 bucket\n     * @throws LambdaException if there is an error updating the function code\n     */\n    public static void updateFunctionCode(LambdaClient awsLambda, String functionName, String bucketName, String key) {\n        try {\n            LambdaWaiter waiter = awsLambda.waiter();\n            UpdateFunctionCodeRequest functionCodeRequest = UpdateFunctionCodeRequest.builder()\n                .functionName(functionName)\n                .publish(true)\n                .s3Bucket(bucketName)\n                .s3Key(key)\n                .build();\n\n            UpdateFunctionCodeResponse response = awsLambda.updateFunctionCode(functionCodeRequest);\n            GetFunctionConfigurationRequest getFunctionConfigRequest = GetFunctionConfigurationRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            WaiterResponse<GetFunctionConfigurationResponse> waiterResponse = waiter\n                .waitUntilFunctionUpdated(getFunctionConfigRequest);\n            waiterResponse.matched().response().ifPresent(System.out::println);\n            System.out.println(\"The last modified value is \" + response.lastModified());\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Updates the configuration of an AWS Lambda function.\n     *\n     * @param awsLambda     the {@link LambdaClient} instance to use for the AWS Lambda operation\n     * @param functionName  the name of the AWS Lambda function to update\n     * @param handler       the new handler for the AWS Lambda function\n     *\n     * @throws LambdaException if there is an error while updating the function configuration\n     */\n    public static void updateFunctionConfiguration(LambdaClient awsLambda, String functionName, String handler) {\n        try {\n            UpdateFunctionConfigurationRequest configurationRequest = UpdateFunctionConfigurationRequest.builder()\n                .functionName(functionName)\n                .handler(handler)\n                .runtime(Runtime.JAVA17)\n                .build();\n\n            awsLambda.updateFunctionConfiguration(configurationRequest);\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n    /**\n     * Deletes an AWS Lambda function.\n     *\n     * @param awsLambda     an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName  the name of the Lambda function to be deleted\n     *\n     * @throws LambdaException if an error occurs while deleting the Lambda function\n     */\n    public static void deleteLambdaFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            DeleteFunctionRequest request = DeleteFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            awsLambda.deleteFunction(request);\n            System.out.println(\"The \" + functionName + \" function was deleted\");\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n}\n\n",
                            "  9.JavaScript :     logger.log(`Creating role (${NAME_ROLE_LAMBDA})...`);\n    const response = await createRole(NAME_ROLE_LAMBDA);\n\nimport { AttachRolePolicyCommand, IAMClient } from \"@aws-sdk/client-iam\";\n\nconst client = new IAMClient({});\n\n/**\n *\n * @param {string} policyArn\n * @param {string} roleName\n */\nexport const attachRolePolicy = (policyArn, roleName) => {\n  const command = new AttachRolePolicyCommand({\n    PolicyArn: policyArn,\n    RoleName: roleName,\n  });\n\n  return client.send(command);\n};\n\n",
                            "  10.SDK for JavaScript (v3) :     logger.log(`Creating role (${NAME_ROLE_LAMBDA})...`);\n    const response = await createRole(NAME_ROLE_LAMBDA);\n\nimport { AttachRolePolicyCommand, IAMClient } from \"@aws-sdk/client-iam\";\n\nconst client = new IAMClient({});\n\n/**\n *\n * @param {string} policyArn\n * @param {string} roleName\n */\nexport const attachRolePolicy = (policyArn, roleName) => {\n  const command = new AttachRolePolicyCommand({\n    PolicyArn: policyArn,\n    RoleName: roleName,\n  });\n\n  return client.send(command);\n};\n\n",
                            "  11.Kotlin : suspend fun main(args: Array<String>) {\n    val usage = \"\"\"\n        Usage:\n            <functionName> <role> <handler> <bucketName> <updatedBucketName> <key> \n\n        Where:\n            functionName - The name of the AWS Lambda function. \n            role - The AWS Identity and Access Management (IAM) service role that has AWS Lambda permissions. \n            handler - The fully qualified method name (for example, example.Handler::handleRequest). \n            bucketName - The Amazon Simple Storage Service (Amazon S3) bucket name that contains the ZIP or JAR used for the Lambda function's code.\n            updatedBucketName - The Amazon S3 bucket name that contains the .zip or .jar used to update the Lambda function's code. \n            key - The Amazon S3 key name that represents the .zip or .jar file (for example, LambdaHello-1.0-SNAPSHOT.jar).\n            \"\"\"\n\n    if (args.size != 6) {\n        println(usage)\n        exitProcess(1)\n    }\n\n    val functionName = args[0]\n    val role = args[1]\n    val handler = args[2]\n    val bucketName = args[3]\n    val updatedBucketName = args[4]\n    val key = args[5]\n\n    println(\"Creating a Lambda function named $functionName.\")\n    val funArn = createScFunction(functionName, bucketName, key, handler, role)\n    println(\"The AWS Lambda ARN is $funArn\")\n\n    // Get a specific Lambda function.\n    println(\"Getting the $functionName AWS Lambda function.\")\n    getFunction(functionName)\n\n    // List the Lambda functions.\n    println(\"Listing all AWS Lambda functions.\")\n    listFunctionsSc()\n\n    // Invoke the Lambda function.\n    println(\"*** Invoke the Lambda function.\")\n    invokeFunctionSc(functionName)\n\n    // Update the AWS Lambda function code.\n    println(\"*** Update the Lambda function code.\")\n    updateFunctionCode(functionName, updatedBucketName, key)\n\n    // println(\"*** Invoke the function again after updating the code.\")\n    invokeFunctionSc(functionName)\n\n    // Update the AWS Lambda function configuration.\n    println(\"Update the run time of the function.\")\n    updateFunctionConfiguration(functionName, handler)\n\n    // Delete the AWS Lambda function.\n    println(\"Delete the AWS Lambda function.\")\n    delFunction(functionName)\n}\n\nsuspend fun createScFunction(\n    myFunctionName: String,\n    s3BucketName: String,\n    myS3Key: String,\n    myHandler: String,\n    myRole: String,\n): String {\n    val functionCode =\n        FunctionCode {\n            s3Bucket = s3BucketName\n            s3Key = myS3Key\n        }\n\n    val request =\n        CreateFunctionRequest {\n            functionName = myFunctionName\n            code = functionCode\n            description = \"Created by the Lambda Kotlin API\"\n            handler = myHandler\n            role = myRole\n            runtime = Runtime.Java8\n        }\n\n    // Create a Lambda function using a waiter\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val functionResponse = awsLambda.createFunction(request)\n        awsLambda.waitUntilFunctionActive {\n            functionName = myFunctionName\n        }\n        return functionResponse.functionArn.toString()\n    }\n}\n\nsuspend fun getFunction(functionNameVal: String) {\n    val functionRequest =\n        GetFunctionRequest {\n            functionName = functionNameVal\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val response = awsLambda.getFunction(functionRequest)\n        println(\"The runtime of this Lambda function is ${response.configuration?.runtime}\")\n    }\n}\n\nsuspend fun listFunctionsSc() {\n    val request =\n        ListFunctionsRequest {\n            maxItems = 10\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val response = awsLambda.listFunctions(request)\n        response.functions?.forEach { function ->\n            println(\"The function name is ${function.functionName}\")\n        }\n    }\n}\n\nsuspend fun invokeFunctionSc(functionNameVal: String) {\n    val json = \"\"\"{\"inputValue\":\"1000\"}\"\"\"\n    val byteArray = json.trimIndent().encodeToByteArray()\n    val request =\n        InvokeRequest {\n            functionName = functionNameVal\n            payload = byteArray\n            logType = LogType.Tail\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val res = awsLambda.invoke(request)\n        println(\"The function payload is ${res.payload?.toString(Charsets.UTF_8)}\")\n    }\n}\n\nsuspend fun updateFunctionCode(\n    functionNameVal: String?,\n    bucketName: String?,\n    key: String?,\n) {\n    val functionCodeRequest =\n        UpdateFunctionCodeRequest {\n            functionName = functionNameVal\n            publish = true\n            s3Bucket = bucketName\n            s3Key = key\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val response = awsLambda.updateFunctionCode(functionCodeRequest)\n        awsLambda.waitUntilFunctionUpdated {\n            functionName = functionNameVal\n        }\n        println(\"The last modified value is \" + response.lastModified)\n    }\n}\n\nsuspend fun updateFunctionConfiguration(\n    functionNameVal: String?,\n    handlerVal: String?,\n) {\n    val configurationRequest =\n        UpdateFunctionConfigurationRequest {\n            functionName = functionNameVal\n            handler = handlerVal\n            runtime = Runtime.Java11\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        awsLambda.updateFunctionConfiguration(configurationRequest)\n    }\n}\n\nsuspend fun delFunction(myFunctionName: String) {\n    val request =\n        DeleteFunctionRequest {\n            functionName = myFunctionName\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        awsLambda.deleteFunction(request)\n        println(\"$myFunctionName was deleted\")\n    }\n}\n\n",
                            "  12.SDK for Kotlin : suspend fun main(args: Array<String>) {\n    val usage = \"\"\"\n        Usage:\n            <functionName> <role> <handler> <bucketName> <updatedBucketName> <key> \n\n        Where:\n            functionName - The name of the AWS Lambda function. \n            role - The AWS Identity and Access Management (IAM) service role that has AWS Lambda permissions. \n            handler - The fully qualified method name (for example, example.Handler::handleRequest). \n            bucketName - The Amazon Simple Storage Service (Amazon S3) bucket name that contains the ZIP or JAR used for the Lambda function's code.\n            updatedBucketName - The Amazon S3 bucket name that contains the .zip or .jar used to update the Lambda function's code. \n            key - The Amazon S3 key name that represents the .zip or .jar file (for example, LambdaHello-1.0-SNAPSHOT.jar).\n            \"\"\"\n\n    if (args.size != 6) {\n        println(usage)\n        exitProcess(1)\n    }\n\n    val functionName = args[0]\n    val role = args[1]\n    val handler = args[2]\n    val bucketName = args[3]\n    val updatedBucketName = args[4]\n    val key = args[5]\n\n    println(\"Creating a Lambda function named $functionName.\")\n    val funArn = createScFunction(functionName, bucketName, key, handler, role)\n    println(\"The AWS Lambda ARN is $funArn\")\n\n    // Get a specific Lambda function.\n    println(\"Getting the $functionName AWS Lambda function.\")\n    getFunction(functionName)\n\n    // List the Lambda functions.\n    println(\"Listing all AWS Lambda functions.\")\n    listFunctionsSc()\n\n    // Invoke the Lambda function.\n    println(\"*** Invoke the Lambda function.\")\n    invokeFunctionSc(functionName)\n\n    // Update the AWS Lambda function code.\n    println(\"*** Update the Lambda function code.\")\n    updateFunctionCode(functionName, updatedBucketName, key)\n\n    // println(\"*** Invoke the function again after updating the code.\")\n    invokeFunctionSc(functionName)\n\n    // Update the AWS Lambda function configuration.\n    println(\"Update the run time of the function.\")\n    updateFunctionConfiguration(functionName, handler)\n\n    // Delete the AWS Lambda function.\n    println(\"Delete the AWS Lambda function.\")\n    delFunction(functionName)\n}\n\nsuspend fun createScFunction(\n    myFunctionName: String,\n    s3BucketName: String,\n    myS3Key: String,\n    myHandler: String,\n    myRole: String,\n): String {\n    val functionCode =\n        FunctionCode {\n            s3Bucket = s3BucketName\n            s3Key = myS3Key\n        }\n\n    val request =\n        CreateFunctionRequest {\n            functionName = myFunctionName\n            code = functionCode\n            description = \"Created by the Lambda Kotlin API\"\n            handler = myHandler\n            role = myRole\n            runtime = Runtime.Java8\n        }\n\n    // Create a Lambda function using a waiter\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val functionResponse = awsLambda.createFunction(request)\n        awsLambda.waitUntilFunctionActive {\n            functionName = myFunctionName\n        }\n        return functionResponse.functionArn.toString()\n    }\n}\n\nsuspend fun getFunction(functionNameVal: String) {\n    val functionRequest =\n        GetFunctionRequest {\n            functionName = functionNameVal\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val response = awsLambda.getFunction(functionRequest)\n        println(\"The runtime of this Lambda function is ${response.configuration?.runtime}\")\n    }\n}\n\nsuspend fun listFunctionsSc() {\n    val request =\n        ListFunctionsRequest {\n            maxItems = 10\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val response = awsLambda.listFunctions(request)\n        response.functions?.forEach { function ->\n            println(\"The function name is ${function.functionName}\")\n        }\n    }\n}\n\nsuspend fun invokeFunctionSc(functionNameVal: String) {\n    val json = \"\"\"{\"inputValue\":\"1000\"}\"\"\"\n    val byteArray = json.trimIndent().encodeToByteArray()\n    val request =\n        InvokeRequest {\n            functionName = functionNameVal\n            payload = byteArray\n            logType = LogType.Tail\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val res = awsLambda.invoke(request)\n        println(\"The function payload is ${res.payload?.toString(Charsets.UTF_8)}\")\n    }\n}\n\nsuspend fun updateFunctionCode(\n    functionNameVal: String?,\n    bucketName: String?,\n    key: String?,\n) {\n    val functionCodeRequest =\n        UpdateFunctionCodeRequest {\n            functionName = functionNameVal\n            publish = true\n            s3Bucket = bucketName\n            s3Key = key\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val response = awsLambda.updateFunctionCode(functionCodeRequest)\n        awsLambda.waitUntilFunctionUpdated {\n            functionName = functionNameVal\n        }\n        println(\"The last modified value is \" + response.lastModified)\n    }\n}\n\nsuspend fun updateFunctionConfiguration(\n    functionNameVal: String?,\n    handlerVal: String?,\n) {\n    val configurationRequest =\n        UpdateFunctionConfigurationRequest {\n            functionName = functionNameVal\n            handler = handlerVal\n            runtime = Runtime.Java11\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        awsLambda.updateFunctionConfiguration(configurationRequest)\n    }\n}\n\nsuspend fun delFunction(myFunctionName: String) {\n    val request =\n        DeleteFunctionRequest {\n            functionName = myFunctionName\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        awsLambda.deleteFunction(request)\n        println(\"$myFunctionName was deleted\")\n    }\n}\n\n",
                            "  13.PHP : namespace Lambda;\n\nuse Aws\\S3\\S3Client;\nuse GuzzleHttp\\Psr7\\Stream;\nuse Iam\\IAMService;\n\nclass GettingStartedWithLambda\n{\n    public function run()\n    {\n        echo(\"\\n\");\n        echo(\"--------------------------------------\\n\");\n        print(\"Welcome to the AWS Lambda getting started demo using PHP!\\n\");\n        echo(\"--------------------------------------\\n\");\n\n        $clientArgs = [\n            'region' => 'us-west-2',\n            'version' => 'latest',\n            'profile' => 'default',\n        ];\n        $uniqid = uniqid();\n\n        $iamService = new IAMService();\n        $s3client = new S3Client($clientArgs);\n        $lambdaService = new LambdaService();\n\n        echo \"First, let's create a role to run our Lambda code.\\n\";\n        $roleName = \"test-lambda-role-$uniqid\";\n        $rolePolicyDocument = \"{\n            \\\"Version\\\": \\\"2012-10-17\\\",\n            \\\"Statement\\\": [\n                {\n                    \\\"Effect\\\": \\\"Allow\\\",\n                    \\\"Principal\\\": {\n                        \\\"Service\\\": \\\"lambda.amazonaws.com\\\"\n                    },\n                    \\\"Action\\\": \\\"sts:AssumeRole\\\"\n                }\n            ]\n        }\";\n        $role = $iamService->createRole($roleName, $rolePolicyDocument);\n        echo \"Created role {$role['RoleName']}.\\n\";\n\n        $iamService->attachRolePolicy(\n            $role['RoleName'],\n            \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n        );\n        echo \"Attached the AWSLambdaBasicExecutionRole to {$role['RoleName']}.\\n\";\n\n        echo \"\\nNow let's create an S3 bucket and upload our Lambda code there.\\n\";\n        $bucketName = \"test-example-bucket-$uniqid\";\n        $s3client->createBucket([\n            'Bucket' => $bucketName,\n        ]);\n        echo \"Created bucket $bucketName.\\n\";\n\n        $functionName = \"doc_example_lambda_$uniqid\";\n        $codeBasic = __DIR__ . \"/lambda_handler_basic.zip\";\n        $handler = \"lambda_handler_basic\";\n        $file = file_get_contents($codeBasic);\n        $s3client->putObject([\n            'Bucket' => $bucketName,\n            'Key' => $functionName,\n            'Body' => $file,\n        ]);\n        echo \"Uploaded the Lambda code.\\n\";\n\n        $createLambdaFunction = $lambdaService->createFunction($functionName, $role, $bucketName, $handler);\n        // Wait until the function has finished being created.\n        do {\n            $getLambdaFunction = $lambdaService->getFunction($createLambdaFunction['FunctionName']);\n        } while ($getLambdaFunction['Configuration']['State'] == \"Pending\");\n        echo \"Created Lambda function {$getLambdaFunction['Configuration']['FunctionName']}.\\n\";\n\n        sleep(1);\n\n        echo \"\\nOk, let's invoke that Lambda code.\\n\";\n        $basicParams = [\n            'action' => 'increment',\n            'number' => 3,\n        ];\n        /** @var Stream $invokeFunction */\n        $invokeFunction = $lambdaService->invoke($functionName, $basicParams)['Payload'];\n        $result = json_decode($invokeFunction->getContents())->result;\n        echo \"After invoking the Lambda code with the input of {$basicParams['number']} we received $result.\\n\";\n\n        echo \"\\nSince that's working, let's update the Lambda code.\\n\";\n        $codeCalculator = \"lambda_handler_calculator.zip\";\n        $handlerCalculator = \"lambda_handler_calculator\";\n        echo \"First, put the new code into the S3 bucket.\\n\";\n        $file = file_get_contents($codeCalculator);\n        $s3client->putObject([\n            'Bucket' => $bucketName,\n            'Key' => $functionName,\n            'Body' => $file,\n        ]);\n        echo \"New code uploaded.\\n\";\n\n        $lambdaService->updateFunctionCode($functionName, $bucketName, $functionName);\n        // Wait for the Lambda code to finish updating.\n        do {\n            $getLambdaFunction = $lambdaService->getFunction($createLambdaFunction['FunctionName']);\n        } while ($getLambdaFunction['Configuration']['LastUpdateStatus'] !== \"Successful\");\n        echo \"New Lambda code uploaded.\\n\";\n\n        $environment = [\n            'Variable' => ['Variables' => ['LOG_LEVEL' => 'DEBUG']],\n        ];\n        $lambdaService->updateFunctionConfiguration($functionName, $handlerCalculator, $environment);\n        do {\n            $getLambdaFunction = $lambdaService->getFunction($createLambdaFunction['FunctionName']);\n        } while ($getLambdaFunction['Configuration']['LastUpdateStatus'] !== \"Successful\");\n        echo \"Lambda code updated with new handler and a LOG_LEVEL of DEBUG for more information.\\n\";\n\n        echo \"Invoke the new code with some new data.\\n\";\n        $calculatorParams = [\n            'action' => 'plus',\n            'x' => 5,\n            'y' => 4,\n        ];\n        $invokeFunction = $lambdaService->invoke($functionName, $calculatorParams, \"Tail\");\n        $result = json_decode($invokeFunction['Payload']->getContents())->result;\n        echo \"Indeed, {$calculatorParams['x']} + {$calculatorParams['y']} does equal $result.\\n\";\n        echo \"Here's the extra debug info: \";\n        echo base64_decode($invokeFunction['LogResult']) . \"\\n\";\n\n        echo \"\\nBut what happens if you try to divide by zero?\\n\";\n        $divZeroParams = [\n            'action' => 'divide',\n            'x' => 5,\n            'y' => 0,\n        ];\n        $invokeFunction = $lambdaService->invoke($functionName, $divZeroParams, \"Tail\");\n        $result = json_decode($invokeFunction['Payload']->getContents())->result;\n        echo \"You get a |$result| result.\\n\";\n        echo \"And an error message: \";\n        echo base64_decode($invokeFunction['LogResult']) . \"\\n\";\n\n        echo \"\\nHere's all the Lambda functions you have in this Region:\\n\";\n        $listLambdaFunctions = $lambdaService->listFunctions(5);\n        $allLambdaFunctions = $listLambdaFunctions['Functions'];\n        $next = $listLambdaFunctions->get('NextMarker');\n        while ($next != false) {\n            $listLambdaFunctions = $lambdaService->listFunctions(5, $next);\n            $next = $listLambdaFunctions->get('NextMarker');\n            $allLambdaFunctions = array_merge($allLambdaFunctions, $listLambdaFunctions['Functions']);\n        }\n        foreach ($allLambdaFunctions as $function) {\n            echo \"{$function['FunctionName']}\\n\";\n        }\n\n        echo \"\\n\\nAnd don't forget to clean up your data!\\n\";\n\n        $lambdaService->deleteFunction($functionName);\n        echo \"Deleted Lambda function.\\n\";\n        $iamService->deleteRole($role['RoleName']);\n        echo \"Deleted Role.\\n\";\n        $deleteObjects = $s3client->listObjectsV2([\n            'Bucket' => $bucketName,\n        ]);\n        $deleteObjects = $s3client->deleteObjects([\n            'Bucket' => $bucketName,\n            'Delete' => [\n                'Objects' => $deleteObjects['Contents'],\n            ]\n        ]);\n        echo \"Deleted all objects from the S3 bucket.\\n\";\n        $s3client->deleteBucket(['Bucket' => $bucketName]);\n        echo \"Deleted the bucket.\\n\";\n    }\n}\n\n",
                            "  14.SDK for PHP : namespace Lambda;\n\nuse Aws\\S3\\S3Client;\nuse GuzzleHttp\\Psr7\\Stream;\nuse Iam\\IAMService;\n\nclass GettingStartedWithLambda\n{\n    public function run()\n    {\n        echo(\"\\n\");\n        echo(\"--------------------------------------\\n\");\n        print(\"Welcome to the AWS Lambda getting started demo using PHP!\\n\");\n        echo(\"--------------------------------------\\n\");\n\n        $clientArgs = [\n            'region' => 'us-west-2',\n            'version' => 'latest',\n            'profile' => 'default',\n        ];\n        $uniqid = uniqid();\n\n        $iamService = new IAMService();\n        $s3client = new S3Client($clientArgs);\n        $lambdaService = new LambdaService();\n\n        echo \"First, let's create a role to run our Lambda code.\\n\";\n        $roleName = \"test-lambda-role-$uniqid\";\n        $rolePolicyDocument = \"{\n            \\\"Version\\\": \\\"2012-10-17\\\",\n            \\\"Statement\\\": [\n                {\n                    \\\"Effect\\\": \\\"Allow\\\",\n                    \\\"Principal\\\": {\n                        \\\"Service\\\": \\\"lambda.amazonaws.com\\\"\n                    },\n                    \\\"Action\\\": \\\"sts:AssumeRole\\\"\n                }\n            ]\n        }\";\n        $role = $iamService->createRole($roleName, $rolePolicyDocument);\n        echo \"Created role {$role['RoleName']}.\\n\";\n\n        $iamService->attachRolePolicy(\n            $role['RoleName'],\n            \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\n        );\n        echo \"Attached the AWSLambdaBasicExecutionRole to {$role['RoleName']}.\\n\";\n\n        echo \"\\nNow let's create an S3 bucket and upload our Lambda code there.\\n\";\n        $bucketName = \"test-example-bucket-$uniqid\";\n        $s3client->createBucket([\n            'Bucket' => $bucketName,\n        ]);\n        echo \"Created bucket $bucketName.\\n\";\n\n        $functionName = \"doc_example_lambda_$uniqid\";\n        $codeBasic = __DIR__ . \"/lambda_handler_basic.zip\";\n        $handler = \"lambda_handler_basic\";\n        $file = file_get_contents($codeBasic);\n        $s3client->putObject([\n            'Bucket' => $bucketName,\n            'Key' => $functionName,\n            'Body' => $file,\n        ]);\n        echo \"Uploaded the Lambda code.\\n\";\n\n        $createLambdaFunction = $lambdaService->createFunction($functionName, $role, $bucketName, $handler);\n        // Wait until the function has finished being created.\n        do {\n            $getLambdaFunction = $lambdaService->getFunction($createLambdaFunction['FunctionName']);\n        } while ($getLambdaFunction['Configuration']['State'] == \"Pending\");\n        echo \"Created Lambda function {$getLambdaFunction['Configuration']['FunctionName']}.\\n\";\n\n        sleep(1);\n\n        echo \"\\nOk, let's invoke that Lambda code.\\n\";\n        $basicParams = [\n            'action' => 'increment',\n            'number' => 3,\n        ];\n        /** @var Stream $invokeFunction */\n        $invokeFunction = $lambdaService->invoke($functionName, $basicParams)['Payload'];\n        $result = json_decode($invokeFunction->getContents())->result;\n        echo \"After invoking the Lambda code with the input of {$basicParams['number']} we received $result.\\n\";\n\n        echo \"\\nSince that's working, let's update the Lambda code.\\n\";\n        $codeCalculator = \"lambda_handler_calculator.zip\";\n        $handlerCalculator = \"lambda_handler_calculator\";\n        echo \"First, put the new code into the S3 bucket.\\n\";\n        $file = file_get_contents($codeCalculator);\n        $s3client->putObject([\n            'Bucket' => $bucketName,\n            'Key' => $functionName,\n            'Body' => $file,\n        ]);\n        echo \"New code uploaded.\\n\";\n\n        $lambdaService->updateFunctionCode($functionName, $bucketName, $functionName);\n        // Wait for the Lambda code to finish updating.\n        do {\n            $getLambdaFunction = $lambdaService->getFunction($createLambdaFunction['FunctionName']);\n        } while ($getLambdaFunction['Configuration']['LastUpdateStatus'] !== \"Successful\");\n        echo \"New Lambda code uploaded.\\n\";\n\n        $environment = [\n            'Variable' => ['Variables' => ['LOG_LEVEL' => 'DEBUG']],\n        ];\n        $lambdaService->updateFunctionConfiguration($functionName, $handlerCalculator, $environment);\n        do {\n            $getLambdaFunction = $lambdaService->getFunction($createLambdaFunction['FunctionName']);\n        } while ($getLambdaFunction['Configuration']['LastUpdateStatus'] !== \"Successful\");\n        echo \"Lambda code updated with new handler and a LOG_LEVEL of DEBUG for more information.\\n\";\n\n        echo \"Invoke the new code with some new data.\\n\";\n        $calculatorParams = [\n            'action' => 'plus',\n            'x' => 5,\n            'y' => 4,\n        ];\n        $invokeFunction = $lambdaService->invoke($functionName, $calculatorParams, \"Tail\");\n        $result = json_decode($invokeFunction['Payload']->getContents())->result;\n        echo \"Indeed, {$calculatorParams['x']} + {$calculatorParams['y']} does equal $result.\\n\";\n        echo \"Here's the extra debug info: \";\n        echo base64_decode($invokeFunction['LogResult']) . \"\\n\";\n\n        echo \"\\nBut what happens if you try to divide by zero?\\n\";\n        $divZeroParams = [\n            'action' => 'divide',\n            'x' => 5,\n            'y' => 0,\n        ];\n        $invokeFunction = $lambdaService->invoke($functionName, $divZeroParams, \"Tail\");\n        $result = json_decode($invokeFunction['Payload']->getContents())->result;\n        echo \"You get a |$result| result.\\n\";\n        echo \"And an error message: \";\n        echo base64_decode($invokeFunction['LogResult']) . \"\\n\";\n\n        echo \"\\nHere's all the Lambda functions you have in this Region:\\n\";\n        $listLambdaFunctions = $lambdaService->listFunctions(5);\n        $allLambdaFunctions = $listLambdaFunctions['Functions'];\n        $next = $listLambdaFunctions->get('NextMarker');\n        while ($next != false) {\n            $listLambdaFunctions = $lambdaService->listFunctions(5, $next);\n            $next = $listLambdaFunctions->get('NextMarker');\n            $allLambdaFunctions = array_merge($allLambdaFunctions, $listLambdaFunctions['Functions']);\n        }\n        foreach ($allLambdaFunctions as $function) {\n            echo \"{$function['FunctionName']}\\n\";\n        }\n\n        echo \"\\n\\nAnd don't forget to clean up your data!\\n\";\n\n        $lambdaService->deleteFunction($functionName);\n        echo \"Deleted Lambda function.\\n\";\n        $iamService->deleteRole($role['RoleName']);\n        echo \"Deleted Role.\\n\";\n        $deleteObjects = $s3client->listObjectsV2([\n            'Bucket' => $bucketName,\n        ]);\n        $deleteObjects = $s3client->deleteObjects([\n            'Bucket' => $bucketName,\n            'Delete' => [\n                'Objects' => $deleteObjects['Contents'],\n            ]\n        ]);\n        echo \"Deleted all objects from the S3 bucket.\\n\";\n        $s3client->deleteBucket(['Bucket' => $bucketName]);\n        echo \"Deleted the bucket.\\n\";\n    }\n}\n\n",
                            "  15.Python : import logging\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Accepts an action and a single number, performs the specified action on the number,\n    and returns the result. The only allowable action is 'increment'.\n\n    :param event: The event dict that contains the parameters sent when the function\n                  is invoked.\n    :param context: The context in which the function is called.\n    :return: The result of the action.\n    \"\"\"\n    result = None\n    action = event.get(\"action\")\n    if action == \"increment\":\n        result = event.get(\"number\", 0) + 1\n        logger.info(\"Calculated result of %s\", result)\n    else:\n        logger.error(\"%s is not a valid action.\", action)\n\n    response = {\"result\": result}\n    return response\n\n\n\n",
                            "  16.SDK for Python (Boto3) : import logging\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\n\ndef lambda_handler(event, context):\n    \"\"\"\n    Accepts an action and a single number, performs the specified action on the number,\n    and returns the result. The only allowable action is 'increment'.\n\n    :param event: The event dict that contains the parameters sent when the function\n                  is invoked.\n    :param context: The context in which the function is called.\n    :return: The result of the action.\n    \"\"\"\n    result = None\n    action = event.get(\"action\")\n    if action == \"increment\":\n        result = event.get(\"number\", 0) + 1\n        logger.info(\"Calculated result of %s\", result)\n    else:\n        logger.error(\"%s is not a valid action.\", action)\n\n    response = {\"result\": result}\n    return response\n\n\n\n",
                            "  17.Ruby :   # Get an AWS Identity and Access Management (IAM) role.\n  #\n  # @param iam_role_name: The name of the role to retrieve.\n  # @param action: Whether to create or destroy the IAM apparatus.\n  # @return: The IAM role.\n  def manage_iam(iam_role_name, action)\n    case action\n    when 'create'\n      create_iam_role(iam_role_name)\n    when 'destroy'\n      destroy_iam_role(iam_role_name)\n    else\n      raise \"Incorrect action provided. Must provide 'create' or 'destroy'\"\n    end\n  end\n\n  private\n\n  def create_iam_role(iam_role_name)\n    role_policy = {\n      'Version': '2012-10-17',\n      'Statement': [\n        {\n          'Effect': 'Allow',\n          'Principal': { 'Service': 'lambda.amazonaws.com' },\n          'Action': 'sts:AssumeRole'\n        }\n      ]\n    }\n    role = @iam_client.create_role(\n      role_name: iam_role_name,\n      assume_role_policy_document: role_policy.to_json\n    )\n    @iam_client.attach_role_policy(\n      {\n        policy_arn: 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',\n        role_name: iam_role_name\n      }\n    )\n    wait_for_role_to_exist(iam_role_name)\n    @logger.debug(\"Successfully created IAM role: #{role['role']['arn']}\")\n    sleep(10)\n    [role, role_policy.to_json]\n  end\n\n  def destroy_iam_role(iam_role_name)\n    @iam_client.detach_role_policy(\n      {\n        policy_arn: 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',\n        role_name: iam_role_name\n      }\n    )\n    @iam_client.delete_role(role_name: iam_role_name)\n    @logger.debug(\"Detached policy & deleted IAM role: #{iam_role_name}\")\n  end\n\n  def wait_for_role_to_exist(iam_role_name)\n    @iam_client.wait_until(:role_exists, { role_name: iam_role_name }) do |w|\n      w.max_attempts = 5\n      w.delay = 5\n    end\n  end\n\n",
                            "  18.SDK for Ruby :   # Get an AWS Identity and Access Management (IAM) role.\n  #\n  # @param iam_role_name: The name of the role to retrieve.\n  # @param action: Whether to create or destroy the IAM apparatus.\n  # @return: The IAM role.\n  def manage_iam(iam_role_name, action)\n    case action\n    when 'create'\n      create_iam_role(iam_role_name)\n    when 'destroy'\n      destroy_iam_role(iam_role_name)\n    else\n      raise \"Incorrect action provided. Must provide 'create' or 'destroy'\"\n    end\n  end\n\n  private\n\n  def create_iam_role(iam_role_name)\n    role_policy = {\n      'Version': '2012-10-17',\n      'Statement': [\n        {\n          'Effect': 'Allow',\n          'Principal': { 'Service': 'lambda.amazonaws.com' },\n          'Action': 'sts:AssumeRole'\n        }\n      ]\n    }\n    role = @iam_client.create_role(\n      role_name: iam_role_name,\n      assume_role_policy_document: role_policy.to_json\n    )\n    @iam_client.attach_role_policy(\n      {\n        policy_arn: 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',\n        role_name: iam_role_name\n      }\n    )\n    wait_for_role_to_exist(iam_role_name)\n    @logger.debug(\"Successfully created IAM role: #{role['role']['arn']}\")\n    sleep(10)\n    [role, role_policy.to_json]\n  end\n\n  def destroy_iam_role(iam_role_name)\n    @iam_client.detach_role_policy(\n      {\n        policy_arn: 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole',\n        role_name: iam_role_name\n      }\n    )\n    @iam_client.delete_role(role_name: iam_role_name)\n    @logger.debug(\"Detached policy & deleted IAM role: #{iam_role_name}\")\n  end\n\n  def wait_for_role_to_exist(iam_role_name)\n    @iam_client.wait_until(:role_exists, { role_name: iam_role_name }) do |w|\n      w.max_attempts = 5\n      w.delay = 5\n    end\n  end\n\n",
                            "  19.Rust : [package]\nname = \"lambda-code-examples\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\naws-config = { version = \"1.0.1\", features = [\"behavior-version-latest\"] }\naws-sdk-ec2 = { version = \"1.3.0\" }\naws-sdk-iam = { version = \"1.3.0\" }\naws-sdk-lambda = { version = \"1.3.0\" }\naws-sdk-s3 = { version = \"1.4.0\" }\naws-smithy-types = { version = \"1.0.1\" }\naws-types = { version = \"1.0.1\" }\nclap = { version = \"4.4\", features = [\"derive\"] }\ntokio = { version = \"1.20.1\", features = [\"full\"] }\ntracing-subscriber = { version = \"0.3.15\", features = [\"env-filter\"] }\ntracing = \"0.1.37\"\nserde_json = \"1.0.94\"\nanyhow = \"1.0.71\"\nuuid = { version = \"1.3.3\", features = [\"v4\"] }\nlambda_runtime = \"0.8.0\"\nserde = \"1.0.164\"\n\n",
                            "  20.SDK for Rust : [package]\nname = \"lambda-code-examples\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html\n\n[dependencies]\naws-config = { version = \"1.0.1\", features = [\"behavior-version-latest\"] }\naws-sdk-ec2 = { version = \"1.3.0\" }\naws-sdk-iam = { version = \"1.3.0\" }\naws-sdk-lambda = { version = \"1.3.0\" }\naws-sdk-s3 = { version = \"1.4.0\" }\naws-smithy-types = { version = \"1.0.1\" }\naws-types = { version = \"1.0.1\" }\nclap = { version = \"4.4\", features = [\"derive\"] }\ntokio = { version = \"1.20.1\", features = [\"full\"] }\ntracing-subscriber = { version = \"0.3.15\", features = [\"env-filter\"] }\ntracing = \"0.1.37\"\nserde_json = \"1.0.94\"\nanyhow = \"1.0.71\"\nuuid = { version = \"1.3.3\", features = [\"v4\"] }\nlambda_runtime = \"0.8.0\"\nserde = \"1.0.164\"\n\n",
                            "  21.SAP ABAP : \n    TRY.\n        \"Create an AWS Identity and Access Management (IAM) role that grants AWS Lambda permission to write to logs.\"\n        DATA(lv_policy_document) = `{` &&\n            `\"Version\":\"2012-10-17\",` &&\n                  `\"Statement\": [` &&\n                    `{` &&\n                      `\"Effect\": \"Allow\",` &&\n                      `\"Action\": [` &&\n                        `\"sts:AssumeRole\"` &&\n                      `],` &&\n                      `\"Principal\": {` &&\n                        `\"Service\": [` &&\n                          `\"lambda.amazonaws.com\"` &&\n                        `]` &&\n                      `}` &&\n                    `}` &&\n                  `]` &&\n                `}`.\n        TRY.\n            DATA(lo_create_role_output) =  lo_iam->createrole(\n                    iv_rolename = iv_role_name\n                    iv_assumerolepolicydocument = lv_policy_document\n                    iv_description = 'Grant lambda permission to write to logs'\n                ).\n            MESSAGE 'IAM role created.' TYPE 'I'.\n            WAIT UP TO 10 SECONDS.            \" Make sure that the IAM role is ready for use. \"\n          CATCH /aws1/cx_iamentityalrdyexex.\n            MESSAGE 'IAM role already exists.' TYPE 'E'.\n          CATCH /aws1/cx_iaminvalidinputex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_iammalformedplydocex.\n            MESSAGE 'Policy document in the request is malformed.' TYPE 'E'.\n        ENDTRY.\n\n        TRY.\n            lo_iam->attachrolepolicy(\n                iv_rolename  = iv_role_name\n                iv_policyarn = 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n            ).\n            MESSAGE 'Attached policy to the IAM role.' TYPE 'I'.\n          CATCH /aws1/cx_iaminvalidinputex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_iamnosuchentityex.\n            MESSAGE 'The requested resource entity does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_iamplynotattachableex.\n            MESSAGE 'Service role policies can only be attached to the service-linked role for their service.' TYPE 'E'.\n          CATCH /aws1/cx_iamunmodableentityex.\n            MESSAGE 'Service that depends on the service-linked role is not modifiable.' TYPE 'E'.\n        ENDTRY.\n\n        \" Create a Lambda function and upload handler code. \"\n        \" Lambda function performs 'increment' action on a number. \"\n        TRY.\n            lo_lmd->createfunction(\n                 iv_functionname = iv_function_name\n                 iv_runtime = `python3.9`\n                 iv_role = lo_create_role_output->get_role( )->get_arn( )\n                 iv_handler = iv_handler\n                 io_code = io_initial_zip_file\n                 iv_description = 'AWS Lambda code example'\n             ).\n            MESSAGE 'Lambda function created.' TYPE 'I'.\n          CATCH /aws1/cx_lmdcodestorageexcdex.\n            MESSAGE 'Maximum total code size per account exceeded.' TYPE 'E'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n        ENDTRY.\n\n        \" Verify the function is in Active state \"\n        WHILE lo_lmd->getfunction( iv_functionname = iv_function_name )->get_configuration( )->ask_state( ) <> 'Active'.\n          IF sy-index = 10.\n            EXIT.               \" Maximum 10 seconds. \"\n          ENDIF.\n          WAIT UP TO 1 SECONDS.\n        ENDWHILE.\n\n        \"Invoke the function with a single parameter and get results.\"\n        TRY.\n            DATA(lv_json) = /aws1/cl_rt_util=>string_to_xstring(\n              `{`  &&\n                `\"action\": \"increment\",`  &&\n                `\"number\": 10` &&\n              `}`\n            ).\n            DATA(lo_initial_invoke_output) =  lo_lmd->invoke(\n                       iv_functionname = iv_function_name\n                       iv_payload = lv_json\n                   ).\n            ov_initial_invoke_payload = lo_initial_invoke_output->get_payload( ).           \" ov_initial_invoke_payload is returned for testing purposes. \"\n            DATA(lo_writer_json) = cl_sxml_string_writer=>create( type = if_sxml=>co_xt_json ).\n            CALL TRANSFORMATION id SOURCE XML ov_initial_invoke_payload RESULT XML lo_writer_json.\n            DATA(lv_result) = cl_abap_codepage=>convert_from( lo_writer_json->get_output( ) ).\n            MESSAGE 'Lambda function invoked.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdinvrequestcontex.\n            MESSAGE 'Unable to parse request body as JSON.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_lmdunsuppedmediatyp00.\n            MESSAGE 'Invoke request body does not have JSON as its content type.' TYPE 'E'.\n        ENDTRY.\n\n        \" Update the function code and configure its Lambda environment with an environment variable. \"\n        \" Lambda function is updated to perform 'decrement' action also. \"\n        TRY.\n            lo_lmd->updatefunctioncode(\n                  iv_functionname = iv_function_name\n                  iv_zipfile = io_updated_zip_file\n              ).\n            WAIT UP TO 10 SECONDS.            \" Make sure that the update is completed. \"\n            MESSAGE 'Lambda function code updated.' TYPE 'I'.\n          CATCH /aws1/cx_lmdcodestorageexcdex.\n            MESSAGE 'Maximum total code size per account exceeded.' TYPE 'E'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n        ENDTRY.\n\n        TRY.\n            DATA lt_variables TYPE /aws1/cl_lmdenvironmentvaria00=>tt_environmentvariables.\n            DATA ls_variable LIKE LINE OF lt_variables.\n            ls_variable-key = 'LOG_LEVEL'.\n            ls_variable-value = NEW /aws1/cl_lmdenvironmentvaria00( iv_value = 'info' ).\n            INSERT ls_variable INTO TABLE lt_variables.\n\n            lo_lmd->updatefunctionconfiguration(\n                  iv_functionname = iv_function_name\n                  io_environment = NEW /aws1/cl_lmdenvironment( it_variables = lt_variables )\n              ).\n            WAIT UP TO 10 SECONDS.            \" Make sure that the update is completed. \"\n            MESSAGE 'Lambda function configuration/settings updated.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourceconflictex.\n            MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n        ENDTRY.\n\n        \"Invoke the function with new parameters and get results. Display the execution log that's returned from the invocation.\"\n        TRY.\n            lv_json = /aws1/cl_rt_util=>string_to_xstring(\n              `{`  &&\n                `\"action\": \"decrement\",`  &&\n                `\"number\": 10` &&\n              `}`\n            ).\n            DATA(lo_updated_invoke_output) =  lo_lmd->invoke(\n                       iv_functionname = iv_function_name\n                       iv_payload = lv_json\n                   ).\n            ov_updated_invoke_payload = lo_updated_invoke_output->get_payload( ).           \" ov_updated_invoke_payload is returned for testing purposes. \"\n            lo_writer_json = cl_sxml_string_writer=>create( type = if_sxml=>co_xt_json ).\n            CALL TRANSFORMATION id SOURCE XML ov_updated_invoke_payload RESULT XML lo_writer_json.\n            lv_result = cl_abap_codepage=>convert_from( lo_writer_json->get_output( ) ).\n            MESSAGE 'Lambda function invoked.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdinvrequestcontex.\n            MESSAGE 'Unable to parse request body as JSON.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_lmdunsuppedmediatyp00.\n            MESSAGE 'Invoke request body does not have JSON as its content type.' TYPE 'E'.\n        ENDTRY.\n\n        \" List the functions for your account. \"\n        TRY.\n            DATA(lo_list_output) = lo_lmd->listfunctions( ).\n            DATA(lt_functions) = lo_list_output->get_functions( ).\n            MESSAGE 'Retrieved list of Lambda functions.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n        ENDTRY.\n\n        \" Delete the Lambda function. \"\n        TRY.\n            lo_lmd->deletefunction( iv_functionname = iv_function_name ).\n            MESSAGE 'Lambda function deleted.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n        ENDTRY.\n\n        \" Detach role policy. \"\n        TRY.\n            lo_iam->detachrolepolicy(\n                iv_rolename  = iv_role_name\n                iv_policyarn = 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n            ).\n            MESSAGE 'Detached policy from the IAM role.' TYPE 'I'.\n          CATCH /aws1/cx_iaminvalidinputex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_iamnosuchentityex.\n            MESSAGE 'The requested resource entity does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_iamplynotattachableex.\n            MESSAGE 'Service role policies can only be attached to the service-linked role for their service.' TYPE 'E'.\n          CATCH /aws1/cx_iamunmodableentityex.\n            MESSAGE 'Service that depends on the service-linked role is not modifiable.' TYPE 'E'.\n        ENDTRY.\n\n        \" Delete the IAM role. \"\n        TRY.\n            lo_iam->deleterole( iv_rolename = iv_role_name ).\n            MESSAGE 'IAM role deleted.' TYPE 'I'.\n          CATCH /aws1/cx_iamnosuchentityex.\n            MESSAGE 'The requested resource entity does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_iamunmodableentityex.\n            MESSAGE 'Service that depends on the service-linked role is not modifiable.' TYPE 'E'.\n        ENDTRY.\n\n      CATCH /aws1/cx_rt_service_generic INTO lo_exception.\n        DATA(lv_error) = lo_exception->get_longtext( ).\n        MESSAGE lv_error TYPE 'E'.\n    ENDTRY.\n\n",
                            "  22.SDK for SAP ABAP : \n    TRY.\n        \"Create an AWS Identity and Access Management (IAM) role that grants AWS Lambda permission to write to logs.\"\n        DATA(lv_policy_document) = `{` &&\n            `\"Version\":\"2012-10-17\",` &&\n                  `\"Statement\": [` &&\n                    `{` &&\n                      `\"Effect\": \"Allow\",` &&\n                      `\"Action\": [` &&\n                        `\"sts:AssumeRole\"` &&\n                      `],` &&\n                      `\"Principal\": {` &&\n                        `\"Service\": [` &&\n                          `\"lambda.amazonaws.com\"` &&\n                        `]` &&\n                      `}` &&\n                    `}` &&\n                  `]` &&\n                `}`.\n        TRY.\n            DATA(lo_create_role_output) =  lo_iam->createrole(\n                    iv_rolename = iv_role_name\n                    iv_assumerolepolicydocument = lv_policy_document\n                    iv_description = 'Grant lambda permission to write to logs'\n                ).\n            MESSAGE 'IAM role created.' TYPE 'I'.\n            WAIT UP TO 10 SECONDS.            \" Make sure that the IAM role is ready for use. \"\n          CATCH /aws1/cx_iamentityalrdyexex.\n            MESSAGE 'IAM role already exists.' TYPE 'E'.\n          CATCH /aws1/cx_iaminvalidinputex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_iammalformedplydocex.\n            MESSAGE 'Policy document in the request is malformed.' TYPE 'E'.\n        ENDTRY.\n\n        TRY.\n            lo_iam->attachrolepolicy(\n                iv_rolename  = iv_role_name\n                iv_policyarn = 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n            ).\n            MESSAGE 'Attached policy to the IAM role.' TYPE 'I'.\n          CATCH /aws1/cx_iaminvalidinputex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_iamnosuchentityex.\n            MESSAGE 'The requested resource entity does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_iamplynotattachableex.\n            MESSAGE 'Service role policies can only be attached to the service-linked role for their service.' TYPE 'E'.\n          CATCH /aws1/cx_iamunmodableentityex.\n            MESSAGE 'Service that depends on the service-linked role is not modifiable.' TYPE 'E'.\n        ENDTRY.\n\n        \" Create a Lambda function and upload handler code. \"\n        \" Lambda function performs 'increment' action on a number. \"\n        TRY.\n            lo_lmd->createfunction(\n                 iv_functionname = iv_function_name\n                 iv_runtime = `python3.9`\n                 iv_role = lo_create_role_output->get_role( )->get_arn( )\n                 iv_handler = iv_handler\n                 io_code = io_initial_zip_file\n                 iv_description = 'AWS Lambda code example'\n             ).\n            MESSAGE 'Lambda function created.' TYPE 'I'.\n          CATCH /aws1/cx_lmdcodestorageexcdex.\n            MESSAGE 'Maximum total code size per account exceeded.' TYPE 'E'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n        ENDTRY.\n\n        \" Verify the function is in Active state \"\n        WHILE lo_lmd->getfunction( iv_functionname = iv_function_name )->get_configuration( )->ask_state( ) <> 'Active'.\n          IF sy-index = 10.\n            EXIT.               \" Maximum 10 seconds. \"\n          ENDIF.\n          WAIT UP TO 1 SECONDS.\n        ENDWHILE.\n\n        \"Invoke the function with a single parameter and get results.\"\n        TRY.\n            DATA(lv_json) = /aws1/cl_rt_util=>string_to_xstring(\n              `{`  &&\n                `\"action\": \"increment\",`  &&\n                `\"number\": 10` &&\n              `}`\n            ).\n            DATA(lo_initial_invoke_output) =  lo_lmd->invoke(\n                       iv_functionname = iv_function_name\n                       iv_payload = lv_json\n                   ).\n            ov_initial_invoke_payload = lo_initial_invoke_output->get_payload( ).           \" ov_initial_invoke_payload is returned for testing purposes. \"\n            DATA(lo_writer_json) = cl_sxml_string_writer=>create( type = if_sxml=>co_xt_json ).\n            CALL TRANSFORMATION id SOURCE XML ov_initial_invoke_payload RESULT XML lo_writer_json.\n            DATA(lv_result) = cl_abap_codepage=>convert_from( lo_writer_json->get_output( ) ).\n            MESSAGE 'Lambda function invoked.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdinvrequestcontex.\n            MESSAGE 'Unable to parse request body as JSON.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_lmdunsuppedmediatyp00.\n            MESSAGE 'Invoke request body does not have JSON as its content type.' TYPE 'E'.\n        ENDTRY.\n\n        \" Update the function code and configure its Lambda environment with an environment variable. \"\n        \" Lambda function is updated to perform 'decrement' action also. \"\n        TRY.\n            lo_lmd->updatefunctioncode(\n                  iv_functionname = iv_function_name\n                  iv_zipfile = io_updated_zip_file\n              ).\n            WAIT UP TO 10 SECONDS.            \" Make sure that the update is completed. \"\n            MESSAGE 'Lambda function code updated.' TYPE 'I'.\n          CATCH /aws1/cx_lmdcodestorageexcdex.\n            MESSAGE 'Maximum total code size per account exceeded.' TYPE 'E'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n        ENDTRY.\n\n        TRY.\n            DATA lt_variables TYPE /aws1/cl_lmdenvironmentvaria00=>tt_environmentvariables.\n            DATA ls_variable LIKE LINE OF lt_variables.\n            ls_variable-key = 'LOG_LEVEL'.\n            ls_variable-value = NEW /aws1/cl_lmdenvironmentvaria00( iv_value = 'info' ).\n            INSERT ls_variable INTO TABLE lt_variables.\n\n            lo_lmd->updatefunctionconfiguration(\n                  iv_functionname = iv_function_name\n                  io_environment = NEW /aws1/cl_lmdenvironment( it_variables = lt_variables )\n              ).\n            WAIT UP TO 10 SECONDS.            \" Make sure that the update is completed. \"\n            MESSAGE 'Lambda function configuration/settings updated.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourceconflictex.\n            MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n        ENDTRY.\n\n        \"Invoke the function with new parameters and get results. Display the execution log that's returned from the invocation.\"\n        TRY.\n            lv_json = /aws1/cl_rt_util=>string_to_xstring(\n              `{`  &&\n                `\"action\": \"decrement\",`  &&\n                `\"number\": 10` &&\n              `}`\n            ).\n            DATA(lo_updated_invoke_output) =  lo_lmd->invoke(\n                       iv_functionname = iv_function_name\n                       iv_payload = lv_json\n                   ).\n            ov_updated_invoke_payload = lo_updated_invoke_output->get_payload( ).           \" ov_updated_invoke_payload is returned for testing purposes. \"\n            lo_writer_json = cl_sxml_string_writer=>create( type = if_sxml=>co_xt_json ).\n            CALL TRANSFORMATION id SOURCE XML ov_updated_invoke_payload RESULT XML lo_writer_json.\n            lv_result = cl_abap_codepage=>convert_from( lo_writer_json->get_output( ) ).\n            MESSAGE 'Lambda function invoked.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdinvrequestcontex.\n            MESSAGE 'Unable to parse request body as JSON.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_lmdunsuppedmediatyp00.\n            MESSAGE 'Invoke request body does not have JSON as its content type.' TYPE 'E'.\n        ENDTRY.\n\n        \" List the functions for your account. \"\n        TRY.\n            DATA(lo_list_output) = lo_lmd->listfunctions( ).\n            DATA(lt_functions) = lo_list_output->get_functions( ).\n            MESSAGE 'Retrieved list of Lambda functions.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n        ENDTRY.\n\n        \" Delete the Lambda function. \"\n        TRY.\n            lo_lmd->deletefunction( iv_functionname = iv_function_name ).\n            MESSAGE 'Lambda function deleted.' TYPE 'I'.\n          CATCH /aws1/cx_lmdinvparamvalueex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_lmdresourcenotfoundex.\n            MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n        ENDTRY.\n\n        \" Detach role policy. \"\n        TRY.\n            lo_iam->detachrolepolicy(\n                iv_rolename  = iv_role_name\n                iv_policyarn = 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'\n            ).\n            MESSAGE 'Detached policy from the IAM role.' TYPE 'I'.\n          CATCH /aws1/cx_iaminvalidinputex.\n            MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n          CATCH /aws1/cx_iamnosuchentityex.\n            MESSAGE 'The requested resource entity does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_iamplynotattachableex.\n            MESSAGE 'Service role policies can only be attached to the service-linked role for their service.' TYPE 'E'.\n          CATCH /aws1/cx_iamunmodableentityex.\n            MESSAGE 'Service that depends on the service-linked role is not modifiable.' TYPE 'E'.\n        ENDTRY.\n\n        \" Delete the IAM role. \"\n        TRY.\n            lo_iam->deleterole( iv_rolename = iv_role_name ).\n            MESSAGE 'IAM role deleted.' TYPE 'I'.\n          CATCH /aws1/cx_iamnosuchentityex.\n            MESSAGE 'The requested resource entity does not exist.' TYPE 'E'.\n          CATCH /aws1/cx_iamunmodableentityex.\n            MESSAGE 'Service that depends on the service-linked role is not modifiable.' TYPE 'E'.\n        ENDTRY.\n\n      CATCH /aws1/cx_rt_service_generic INTO lo_exception.\n        DATA(lv_error) = lo_exception->get_longtext( ).\n        MESSAGE lv_error TYPE 'E'.\n    ENDTRY.\n\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : namespace LambdaActions;\n\nusing Amazon.Lambda;\nusing Amazon.Lambda.Model;\n\n/// <summary>\n/// A class that implements AWS Lambda methods.\n/// </summary>\npublic class LambdaWrapper\n{\n    private readonly IAmazonLambda _lambdaService;\n\n    /// <summary>\n    /// Constructor for the LambdaWrapper class.\n    /// </summary>\n    /// <param name=\"lambdaService\">An initialized Lambda service client.</param>\n    public LambdaWrapper(IAmazonLambda lambdaService)\n    {\n        _lambdaService = lambdaService;\n    }\n\n    /// <summary>\n    /// Creates a new Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function.</param>\n    /// <param name=\"s3Bucket\">The Amazon Simple Storage Service (Amazon S3)\n    /// bucket where the zip file containing the code is located.</param>\n    /// <param name=\"s3Key\">The Amazon S3 key of the zip file.</param>\n    /// <param name=\"role\">The Amazon Resource Name (ARN) of a role with the\n    /// appropriate Lambda permissions.</param>\n    /// <param name=\"handler\">The name of the handler function.</param>\n    /// <returns>The Amazon Resource Name (ARN) of the newly created\n    /// Lambda function.</returns>\n    public async Task<string> CreateLambdaFunctionAsync(\n        string functionName,\n        string s3Bucket,\n        string s3Key,\n        string role,\n        string handler)\n    {\n        // Defines the location for the function code.\n        // S3Bucket - The S3 bucket where the file containing\n        //            the source code is stored.\n        // S3Key    - The name of the file containing the code.\n        var functionCode = new FunctionCode\n        {\n            S3Bucket = s3Bucket,\n            S3Key = s3Key,\n        };\n\n        var createFunctionRequest = new CreateFunctionRequest\n        {\n            FunctionName = functionName,\n            Description = \"Created by the Lambda .NET API\",\n            Code = functionCode,\n            Handler = handler,\n            Runtime = Runtime.Dotnet6,\n            Role = role,\n        };\n\n        var reponse = await _lambdaService.CreateFunctionAsync(createFunctionRequest);\n        return reponse.FunctionArn;\n    }\n\n\n    /// <summary>\n    /// Delete an AWS Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// delete.</param>\n    /// <returns>A Boolean value that indicates the success of the action.</returns>\n    public async Task<bool> DeleteFunctionAsync(string functionName)\n    {\n        var request = new DeleteFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.DeleteFunctionAsync(request);\n\n        // A return value of NoContent means that the request was processed.\n        // In this case, the function was deleted, and the return value\n        // is intentionally blank.\n        return response.HttpStatusCode == System.Net.HttpStatusCode.NoContent;\n    }\n\n\n    /// <summary>\n    /// Gets information about a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function for\n    /// which to retrieve information.</param>\n    /// <returns>Async Task.</returns>\n    public async Task<FunctionConfiguration> GetFunctionAsync(string functionName)\n    {\n        var functionRequest = new GetFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.GetFunctionAsync(functionRequest);\n        return response.Configuration;\n    }\n\n\n    /// <summary>\n    /// Invoke a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// invoke.</param\n    /// <param name=\"parameters\">The parameter values that will be passed to the function.</param>\n    /// <returns>A System Threading Task.</returns>\n    public async Task<string> InvokeFunctionAsync(\n        string functionName,\n        string parameters)\n    {\n        var payload = parameters;\n        var request = new InvokeRequest\n        {\n            FunctionName = functionName,\n            Payload = payload,\n        };\n\n        var response = await _lambdaService.InvokeAsync(request);\n        MemoryStream stream = response.Payload;\n        string returnValue = System.Text.Encoding.UTF8.GetString(stream.ToArray());\n        return returnValue;\n    }\n\n\n    /// <summary>\n    /// Get a list of Lambda functions.\n    /// </summary>\n    /// <returns>A list of FunctionConfiguration objects.</returns>\n    public async Task<List<FunctionConfiguration>> ListFunctionsAsync()\n    {\n        var functionList = new List<FunctionConfiguration>();\n\n        var functionPaginator =\n            _lambdaService.Paginators.ListFunctions(new ListFunctionsRequest());\n        await foreach (var function in functionPaginator.Functions)\n        {\n            functionList.Add(function);\n        }\n\n        return functionList;\n    }\n\n\n    /// <summary>\n    /// Update an existing Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to update.</param>\n    /// <param name=\"bucketName\">The bucket where the zip file containing\n    /// the Lambda function code is stored.</param>\n    /// <param name=\"key\">The key name of the source code file.</param>\n    /// <returns>Async Task.</returns>\n    public async Task UpdateFunctionCodeAsync(\n        string functionName,\n        string bucketName,\n        string key)\n    {\n        var functionCodeRequest = new UpdateFunctionCodeRequest\n        {\n            FunctionName = functionName,\n            Publish = true,\n            S3Bucket = bucketName,\n            S3Key = key,\n        };\n\n        var response = await _lambdaService.UpdateFunctionCodeAsync(functionCodeRequest);\n        Console.WriteLine($\"The Function was last modified at {response.LastModified}.\");\n    }\n\n\n    /// <summary>\n    /// Update the code of a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function to update.</param>\n    /// <param name=\"functionHandler\">The code that performs the function's actions.</param>\n    /// <param name=\"environmentVariables\">A dictionary of environment variables.</param>\n    /// <returns>A Boolean value indicating the success of the action.</returns>\n    public async Task<bool> UpdateFunctionConfigurationAsync(\n        string functionName,\n        string functionHandler,\n        Dictionary<string, string> environmentVariables)\n    {\n        var request = new UpdateFunctionConfigurationRequest\n        {\n            Handler = functionHandler,\n            FunctionName = functionName,\n            Environment = new Amazon.Lambda.Model.Environment { Variables = environmentVariables },\n        };\n\n        var response = await _lambdaService.UpdateFunctionConfigurationAsync(request);\n\n        Console.WriteLine(response.LastModified);\n\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n\n\n}\n\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Actions",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples_actions.html",
                        "contents": [
                            {
                                "title": "CreateAlias",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_CreateAlias_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use CreateAlias.",
                                    "  1.CLI : create-alias",
                                    "  2.AWS CLI : create-alias",
                                    "  3.PowerShell : New-LMAlias -FunctionName \"MylambdaFunction123\" -RoutingConfig_AdditionalVersionWeight @{Name=\"1\";Value=\"0.6} -Description \"Alias for version 4\" -FunctionVersion 4 -Name \"PowershellAlias\"\n",
                                    "  4.Tools for PowerShell : New-LMAlias -FunctionName \"MylambdaFunction123\" -RoutingConfig_AdditionalVersionWeight @{Name=\"1\";Value=\"0.6} -Description \"Alias for version 4\" -FunctionVersion 4 -Name \"PowershellAlias\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : create-alias",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "CreateFunction",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_CreateFunction_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use CreateFunction.",
                                    "Action examples are code excerpts from larger programs and must be run in context. You can see this action in            context in the following code example:            ",
                                    "  1.Learn the basics",
                                    "  1..NET :     /// <summary>\n    /// Creates a new Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function.</param>\n    /// <param name=\"s3Bucket\">The Amazon Simple Storage Service (Amazon S3)\n    /// bucket where the zip file containing the code is located.</param>\n    /// <param name=\"s3Key\">The Amazon S3 key of the zip file.</param>\n    /// <param name=\"role\">The Amazon Resource Name (ARN) of a role with the\n    /// appropriate Lambda permissions.</param>\n    /// <param name=\"handler\">The name of the handler function.</param>\n    /// <returns>The Amazon Resource Name (ARN) of the newly created\n    /// Lambda function.</returns>\n    public async Task<string> CreateLambdaFunctionAsync(\n        string functionName,\n        string s3Bucket,\n        string s3Key,\n        string role,\n        string handler)\n    {\n        // Defines the location for the function code.\n        // S3Bucket - The S3 bucket where the file containing\n        //            the source code is stored.\n        // S3Key    - The name of the file containing the code.\n        var functionCode = new FunctionCode\n        {\n            S3Bucket = s3Bucket,\n            S3Key = s3Key,\n        };\n\n        var createFunctionRequest = new CreateFunctionRequest\n        {\n            FunctionName = functionName,\n            Description = \"Created by the Lambda .NET API\",\n            Code = functionCode,\n            Handler = handler,\n            Runtime = Runtime.Dotnet6,\n            Role = role,\n        };\n\n        var reponse = await _lambdaService.CreateFunctionAsync(createFunctionRequest);\n        return reponse.FunctionArn;\n    }\n\n\n",
                                    "  2.AWS SDK for .NET :     /// <summary>\n    /// Creates a new Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function.</param>\n    /// <param name=\"s3Bucket\">The Amazon Simple Storage Service (Amazon S3)\n    /// bucket where the zip file containing the code is located.</param>\n    /// <param name=\"s3Key\">The Amazon S3 key of the zip file.</param>\n    /// <param name=\"role\">The Amazon Resource Name (ARN) of a role with the\n    /// appropriate Lambda permissions.</param>\n    /// <param name=\"handler\">The name of the handler function.</param>\n    /// <returns>The Amazon Resource Name (ARN) of the newly created\n    /// Lambda function.</returns>\n    public async Task<string> CreateLambdaFunctionAsync(\n        string functionName,\n        string s3Bucket,\n        string s3Key,\n        string role,\n        string handler)\n    {\n        // Defines the location for the function code.\n        // S3Bucket - The S3 bucket where the file containing\n        //            the source code is stored.\n        // S3Key    - The name of the file containing the code.\n        var functionCode = new FunctionCode\n        {\n            S3Bucket = s3Bucket,\n            S3Key = s3Key,\n        };\n\n        var createFunctionRequest = new CreateFunctionRequest\n        {\n            FunctionName = functionName,\n            Description = \"Created by the Lambda .NET API\",\n            Code = functionCode,\n            Handler = handler,\n            Runtime = Runtime.Dotnet6,\n            Role = role,\n        };\n\n        var reponse = await _lambdaService.CreateFunctionAsync(createFunctionRequest);\n        return reponse.FunctionArn;\n    }\n\n\n",
                                    "  3.C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::CreateFunctionRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        request.SetDescription(LAMBDA_DESCRIPTION); // Optional.\n#if USE_CPP_LAMBDA_FUNCTION\n        request.SetRuntime(Aws::Lambda::Model::Runtime::provided_al2);\n        request.SetTimeout(15);\n        request.SetMemorySize(128);\n\n        // Assume the AWS Lambda function was built in Docker with same architecture\n        // as this code.\n#if  defined(__x86_64__)\n        request.SetArchitectures({Aws::Lambda::Model::Architecture::x86_64});\n#elif defined(__aarch64__)\n        request.SetArchitectures({Aws::Lambda::Model::Architecture::arm64});\n#else\n#error \"Unimplemented architecture\"\n#endif // defined(architecture)\n#else\n        request.SetRuntime(Aws::Lambda::Model::Runtime::python3_9);\n#endif\n        request.SetRole(roleArn);\n        request.SetHandler(LAMBDA_HANDLER_NAME);\n        request.SetPublish(true);\n        Aws::Lambda::Model::FunctionCode code;\n        std::ifstream ifstream(INCREMENT_LAMBDA_CODE.c_str(),\n                               std::ios_base::in | std::ios_base::binary);\n        if (!ifstream.is_open()) {\n            std::cerr << \"Error opening file \" << INCREMENT_LAMBDA_CODE << \".\" << std::endl;\n\n#if USE_CPP_LAMBDA_FUNCTION\n            std::cerr\n                    << \"The cpp Lambda function must be built following the instructions in the cpp_lambda/README.md file. \"\n                    << std::endl;\n#endif\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n        Aws::StringStream buffer;\n        buffer << ifstream.rdbuf();\n\n        code.SetZipFile(Aws::Utils::ByteBuffer((unsigned char *) buffer.str().c_str(),\n                                               buffer.str().length()));\n        request.SetCode(code);\n\n        Aws::Lambda::Model::CreateFunctionOutcome outcome = client.CreateFunction(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda function was successfully created. \" << seconds\n                      << \" seconds elapsed.\" << std::endl;\n            break;\n        }\n\n        else {\n            std::cerr << \"Error with CreateFunction. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n",
                                    "  4.SDK for C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::CreateFunctionRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        request.SetDescription(LAMBDA_DESCRIPTION); // Optional.\n#if USE_CPP_LAMBDA_FUNCTION\n        request.SetRuntime(Aws::Lambda::Model::Runtime::provided_al2);\n        request.SetTimeout(15);\n        request.SetMemorySize(128);\n\n        // Assume the AWS Lambda function was built in Docker with same architecture\n        // as this code.\n#if  defined(__x86_64__)\n        request.SetArchitectures({Aws::Lambda::Model::Architecture::x86_64});\n#elif defined(__aarch64__)\n        request.SetArchitectures({Aws::Lambda::Model::Architecture::arm64});\n#else\n#error \"Unimplemented architecture\"\n#endif // defined(architecture)\n#else\n        request.SetRuntime(Aws::Lambda::Model::Runtime::python3_9);\n#endif\n        request.SetRole(roleArn);\n        request.SetHandler(LAMBDA_HANDLER_NAME);\n        request.SetPublish(true);\n        Aws::Lambda::Model::FunctionCode code;\n        std::ifstream ifstream(INCREMENT_LAMBDA_CODE.c_str(),\n                               std::ios_base::in | std::ios_base::binary);\n        if (!ifstream.is_open()) {\n            std::cerr << \"Error opening file \" << INCREMENT_LAMBDA_CODE << \".\" << std::endl;\n\n#if USE_CPP_LAMBDA_FUNCTION\n            std::cerr\n                    << \"The cpp Lambda function must be built following the instructions in the cpp_lambda/README.md file. \"\n                    << std::endl;\n#endif\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n        Aws::StringStream buffer;\n        buffer << ifstream.rdbuf();\n\n        code.SetZipFile(Aws::Utils::ByteBuffer((unsigned char *) buffer.str().c_str(),\n                                               buffer.str().length()));\n        request.SetCode(code);\n\n        Aws::Lambda::Model::CreateFunctionOutcome outcome = client.CreateFunction(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda function was successfully created. \" << seconds\n                      << \" seconds elapsed.\" << std::endl;\n            break;\n        }\n\n        else {\n            std::cerr << \"Error with CreateFunction. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n",
                                    "  5.CLI : create-function",
                                    "  6.AWS CLI : create-function",
                                    "  7.Go : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// CreateFunction creates a new Lambda function from code contained in the zipPackage\n// buffer. The specified handlerName must match the name of the file and function\n// contained in the uploaded code. The role specified by iamRoleArn is assumed by\n// Lambda and grants specific permissions.\n// When the function already exists, types.StateActive is returned.\n// When the function is created, a lambda.FunctionActiveV2Waiter is used to wait until the\n// function is active.\nfunc (wrapper FunctionWrapper) CreateFunction(ctx context.Context, functionName string, handlerName string,\n\tiamRoleArn *string, zipPackage *bytes.Buffer) types.State {\n\tvar state types.State\n\t_, err := wrapper.LambdaClient.CreateFunction(ctx, &lambda.CreateFunctionInput{\n\t\tCode:         &types.FunctionCode{ZipFile: zipPackage.Bytes()},\n\t\tFunctionName: aws.String(functionName),\n\t\tRole:         iamRoleArn,\n\t\tHandler:      aws.String(handlerName),\n\t\tPublish:      true,\n\t\tRuntime:      types.RuntimePython39,\n\t})\n\tif err != nil {\n\t\tvar resConflict *types.ResourceConflictException\n\t\tif errors.As(err, &resConflict) {\n\t\t\tlog.Printf(\"Function %v already exists.\\n\", functionName)\n\t\t\tstate = types.StateActive\n\t\t} else {\n\t\t\tlog.Panicf(\"Couldn't create function %v. Here's why: %v\\n\", functionName, err)\n\t\t}\n\t} else {\n\t\twaiter := lambda.NewFunctionActiveV2Waiter(wrapper.LambdaClient)\n\t\tfuncOutput, err := waiter.WaitForOutput(ctx, &lambda.GetFunctionInput{\n\t\t\tFunctionName: aws.String(functionName)}, 1*time.Minute)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't wait for function %v to be active. Here's why: %v\\n\", functionName, err)\n\t\t} else {\n\t\t\tstate = funcOutput.Configuration.State\n\t\t}\n\t}\n\treturn state\n}\n\n\n",
                                    "  8.SDK for Go V2 : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// CreateFunction creates a new Lambda function from code contained in the zipPackage\n// buffer. The specified handlerName must match the name of the file and function\n// contained in the uploaded code. The role specified by iamRoleArn is assumed by\n// Lambda and grants specific permissions.\n// When the function already exists, types.StateActive is returned.\n// When the function is created, a lambda.FunctionActiveV2Waiter is used to wait until the\n// function is active.\nfunc (wrapper FunctionWrapper) CreateFunction(ctx context.Context, functionName string, handlerName string,\n\tiamRoleArn *string, zipPackage *bytes.Buffer) types.State {\n\tvar state types.State\n\t_, err := wrapper.LambdaClient.CreateFunction(ctx, &lambda.CreateFunctionInput{\n\t\tCode:         &types.FunctionCode{ZipFile: zipPackage.Bytes()},\n\t\tFunctionName: aws.String(functionName),\n\t\tRole:         iamRoleArn,\n\t\tHandler:      aws.String(handlerName),\n\t\tPublish:      true,\n\t\tRuntime:      types.RuntimePython39,\n\t})\n\tif err != nil {\n\t\tvar resConflict *types.ResourceConflictException\n\t\tif errors.As(err, &resConflict) {\n\t\t\tlog.Printf(\"Function %v already exists.\\n\", functionName)\n\t\t\tstate = types.StateActive\n\t\t} else {\n\t\t\tlog.Panicf(\"Couldn't create function %v. Here's why: %v\\n\", functionName, err)\n\t\t}\n\t} else {\n\t\twaiter := lambda.NewFunctionActiveV2Waiter(wrapper.LambdaClient)\n\t\tfuncOutput, err := waiter.WaitForOutput(ctx, &lambda.GetFunctionInput{\n\t\t\tFunctionName: aws.String(functionName)}, 1*time.Minute)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't wait for function %v to be active. Here's why: %v\\n\", functionName, err)\n\t\t} else {\n\t\t\tstate = funcOutput.Configuration.State\n\t\t}\n\t}\n\treturn state\n}\n\n\n",
                                    "  9.Java :     /**\n     * Creates a new Lambda function in AWS using the AWS Lambda Java API.\n     *\n     * @param awsLambda    the AWS Lambda client used to interact with the AWS Lambda service\n     * @param functionName the name of the Lambda function to create\n     * @param key          the S3 key of the function code\n     * @param bucketName   the name of the S3 bucket containing the function code\n     * @param role         the IAM role to assign to the Lambda function\n     * @param handler      the fully qualified class name of the function handler\n     * @return the Amazon Resource Name (ARN) of the created Lambda function\n     */\n    public static String createLambdaFunction(LambdaClient awsLambda,\n                                              String functionName,\n                                              String key,\n                                              String bucketName,\n                                              String role,\n                                              String handler) {\n\n        try {\n            LambdaWaiter waiter = awsLambda.waiter();\n            FunctionCode code = FunctionCode.builder()\n                .s3Key(key)\n                .s3Bucket(bucketName)\n                .build();\n\n            CreateFunctionRequest functionRequest = CreateFunctionRequest.builder()\n                .functionName(functionName)\n                .description(\"Created by the Lambda Java API\")\n                .code(code)\n                .handler(handler)\n                .runtime(Runtime.JAVA17)\n                .role(role)\n                .build();\n\n            // Create a Lambda function using a waiter\n            CreateFunctionResponse functionResponse = awsLambda.createFunction(functionRequest);\n            GetFunctionRequest getFunctionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n            WaiterResponse<GetFunctionResponse> waiterResponse = waiter.waitUntilFunctionExists(getFunctionRequest);\n            waiterResponse.matched().response().ifPresent(System.out::println);\n            return functionResponse.functionArn();\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return \"\";\n    }\n\n",
                                    "  10.SDK for Java 2.x :     /**\n     * Creates a new Lambda function in AWS using the AWS Lambda Java API.\n     *\n     * @param awsLambda    the AWS Lambda client used to interact with the AWS Lambda service\n     * @param functionName the name of the Lambda function to create\n     * @param key          the S3 key of the function code\n     * @param bucketName   the name of the S3 bucket containing the function code\n     * @param role         the IAM role to assign to the Lambda function\n     * @param handler      the fully qualified class name of the function handler\n     * @return the Amazon Resource Name (ARN) of the created Lambda function\n     */\n    public static String createLambdaFunction(LambdaClient awsLambda,\n                                              String functionName,\n                                              String key,\n                                              String bucketName,\n                                              String role,\n                                              String handler) {\n\n        try {\n            LambdaWaiter waiter = awsLambda.waiter();\n            FunctionCode code = FunctionCode.builder()\n                .s3Key(key)\n                .s3Bucket(bucketName)\n                .build();\n\n            CreateFunctionRequest functionRequest = CreateFunctionRequest.builder()\n                .functionName(functionName)\n                .description(\"Created by the Lambda Java API\")\n                .code(code)\n                .handler(handler)\n                .runtime(Runtime.JAVA17)\n                .role(role)\n                .build();\n\n            // Create a Lambda function using a waiter\n            CreateFunctionResponse functionResponse = awsLambda.createFunction(functionRequest);\n            GetFunctionRequest getFunctionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n            WaiterResponse<GetFunctionResponse> waiterResponse = waiter.waitUntilFunctionExists(getFunctionRequest);\n            waiterResponse.matched().response().ifPresent(System.out::println);\n            return functionResponse.functionArn();\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n        return \"\";\n    }\n\n",
                                    "  11.JavaScript : const createFunction = async (funcName, roleArn) => {\n  const client = new LambdaClient({});\n  const code = await readFile(`${dirname}../functions/${funcName}.zip`);\n\n  const command = new CreateFunctionCommand({\n    Code: { ZipFile: code },\n    FunctionName: funcName,\n    Role: roleArn,\n    Architectures: [Architecture.arm64],\n    Handler: \"index.handler\", // Required when sending a .zip file\n    PackageType: PackageType.Zip, // Required when sending a .zip file\n    Runtime: Runtime.nodejs16x, // Required when sending a .zip file\n  });\n\n  return client.send(command);\n};\n\n",
                                    "  12.SDK for JavaScript (v3) : const createFunction = async (funcName, roleArn) => {\n  const client = new LambdaClient({});\n  const code = await readFile(`${dirname}../functions/${funcName}.zip`);\n\n  const command = new CreateFunctionCommand({\n    Code: { ZipFile: code },\n    FunctionName: funcName,\n    Role: roleArn,\n    Architectures: [Architecture.arm64],\n    Handler: \"index.handler\", // Required when sending a .zip file\n    PackageType: PackageType.Zip, // Required when sending a .zip file\n    Runtime: Runtime.nodejs16x, // Required when sending a .zip file\n  });\n\n  return client.send(command);\n};\n\n",
                                    "  13.Kotlin : suspend fun createNewFunction(\n    myFunctionName: String,\n    s3BucketName: String,\n    myS3Key: String,\n    myHandler: String,\n    myRole: String,\n): String? {\n    val functionCode =\n        FunctionCode {\n            s3Bucket = s3BucketName\n            s3Key = myS3Key\n        }\n\n    val request =\n        CreateFunctionRequest {\n            functionName = myFunctionName\n            code = functionCode\n            description = \"Created by the Lambda Kotlin API\"\n            handler = myHandler\n            role = myRole\n            runtime = Runtime.Java8\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val functionResponse = awsLambda.createFunction(request)\n        awsLambda.waitUntilFunctionActive {\n            functionName = myFunctionName\n        }\n        return functionResponse.functionArn\n    }\n}\n\n",
                                    "  14.SDK for Kotlin : suspend fun createNewFunction(\n    myFunctionName: String,\n    s3BucketName: String,\n    myS3Key: String,\n    myHandler: String,\n    myRole: String,\n): String? {\n    val functionCode =\n        FunctionCode {\n            s3Bucket = s3BucketName\n            s3Key = myS3Key\n        }\n\n    val request =\n        CreateFunctionRequest {\n            functionName = myFunctionName\n            code = functionCode\n            description = \"Created by the Lambda Kotlin API\"\n            handler = myHandler\n            role = myRole\n            runtime = Runtime.Java8\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val functionResponse = awsLambda.createFunction(request)\n        awsLambda.waitUntilFunctionActive {\n            functionName = myFunctionName\n        }\n        return functionResponse.functionArn\n    }\n}\n\n",
                                    "  15.PHP :     public function createFunction($functionName, $role, $bucketName, $handler)\n    {\n        //This assumes the Lambda function is in an S3 bucket.\n        return $this->customWaiter(function () use ($functionName, $role, $bucketName, $handler) {\n            return $this->lambdaClient->createFunction([\n                'Code' => [\n                    'S3Bucket' => $bucketName,\n                    'S3Key' => $functionName,\n                ],\n                'FunctionName' => $functionName,\n                'Role' => $role['Arn'],\n                'Runtime' => 'python3.9',\n                'Handler' => \"$handler.lambda_handler\",\n            ]);\n        });\n    }\n\n",
                                    "  16.SDK for PHP :     public function createFunction($functionName, $role, $bucketName, $handler)\n    {\n        //This assumes the Lambda function is in an S3 bucket.\n        return $this->customWaiter(function () use ($functionName, $role, $bucketName, $handler) {\n            return $this->lambdaClient->createFunction([\n                'Code' => [\n                    'S3Bucket' => $bucketName,\n                    'S3Key' => $functionName,\n                ],\n                'FunctionName' => $functionName,\n                'Role' => $role['Arn'],\n                'Runtime' => 'python3.9',\n                'Handler' => \"$handler.lambda_handler\",\n            ]);\n        });\n    }\n\n",
                                    "  17.PowerShell : Publish-LMFunction -Description \"My C# Lambda Function\" `\n        -FunctionName MyFunction `\n        -ZipFilename .\\MyFunctionBinaries.zip `\n        -Handler \"AssemblyName::Namespace.ClassName::MethodName\" `\n        -Role \"arn:aws:iam::123456789012:role/LambdaFullExecRole\" `\n        -Runtime dotnetcore1.0 `\n        -Environment_Variable @{ \"envvar1\"=\"value\";\"envvar2\"=\"value\" }\n",
                                    "  18.Tools for PowerShell : Publish-LMFunction -Description \"My C# Lambda Function\" `\n        -FunctionName MyFunction `\n        -ZipFilename .\\MyFunctionBinaries.zip `\n        -Handler \"AssemblyName::Namespace.ClassName::MethodName\" `\n        -Role \"arn:aws:iam::123456789012:role/LambdaFullExecRole\" `\n        -Runtime dotnetcore1.0 `\n        -Environment_Variable @{ \"envvar1\"=\"value\";\"envvar2\"=\"value\" }\n",
                                    "  19.Python : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def create_function(\n        self, function_name, handler_name, iam_role, deployment_package\n    ):\n        \"\"\"\n        Deploys a Lambda function.\n\n        :param function_name: The name of the Lambda function.\n        :param handler_name: The fully qualified name of the handler function. This\n                             must include the file name and the function name.\n        :param iam_role: The IAM role to use for the function.\n        :param deployment_package: The deployment package that contains the function\n                                   code in .zip format.\n        :return: The Amazon Resource Name (ARN) of the newly created function.\n        \"\"\"\n        try:\n            response = self.lambda_client.create_function(\n                FunctionName=function_name,\n                Description=\"AWS Lambda doc example\",\n                Runtime=\"python3.9\",\n                Role=iam_role.arn,\n                Handler=handler_name,\n                Code={\"ZipFile\": deployment_package},\n                Publish=True,\n            )\n            function_arn = response[\"FunctionArn\"]\n            waiter = self.lambda_client.get_waiter(\"function_active_v2\")\n            waiter.wait(FunctionName=function_name)\n            logger.info(\n                \"Created function '%s' with ARN: '%s'.\",\n                function_name,\n                response[\"FunctionArn\"],\n            )\n        except ClientError:\n            logger.error(\"Couldn't create function %s.\", function_name)\n            raise\n        else:\n            return function_arn\n\n\n",
                                    "  20.SDK for Python (Boto3) : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def create_function(\n        self, function_name, handler_name, iam_role, deployment_package\n    ):\n        \"\"\"\n        Deploys a Lambda function.\n\n        :param function_name: The name of the Lambda function.\n        :param handler_name: The fully qualified name of the handler function. This\n                             must include the file name and the function name.\n        :param iam_role: The IAM role to use for the function.\n        :param deployment_package: The deployment package that contains the function\n                                   code in .zip format.\n        :return: The Amazon Resource Name (ARN) of the newly created function.\n        \"\"\"\n        try:\n            response = self.lambda_client.create_function(\n                FunctionName=function_name,\n                Description=\"AWS Lambda doc example\",\n                Runtime=\"python3.9\",\n                Role=iam_role.arn,\n                Handler=handler_name,\n                Code={\"ZipFile\": deployment_package},\n                Publish=True,\n            )\n            function_arn = response[\"FunctionArn\"]\n            waiter = self.lambda_client.get_waiter(\"function_active_v2\")\n            waiter.wait(FunctionName=function_name)\n            logger.info(\n                \"Created function '%s' with ARN: '%s'.\",\n                function_name,\n                response[\"FunctionArn\"],\n            )\n        except ClientError:\n            logger.error(\"Couldn't create function %s.\", function_name)\n            raise\n        else:\n            return function_arn\n\n\n",
                                    "  21.Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Deploys a Lambda function.\n  #\n  # @param function_name: The name of the Lambda function.\n  # @param handler_name: The fully qualified name of the handler function.\n  # @param role_arn: The IAM role to use for the function.\n  # @param deployment_package: The deployment package that contains the function code in .zip format.\n  # @return: The Amazon Resource Name (ARN) of the newly created function.\n  def create_function(function_name, handler_name, role_arn, deployment_package)\n    response = @lambda_client.create_function({\n                                                role: role_arn.to_s,\n                                                function_name: function_name,\n                                                handler: handler_name,\n                                                runtime: 'ruby2.7',\n                                                code: {\n                                                  zip_file: deployment_package\n                                                },\n                                                environment: {\n                                                  variables: {\n                                                    'LOG_LEVEL' => 'info'\n                                                  }\n                                                }\n                                              })\n    @lambda_client.wait_until(:function_active_v2, { function_name: function_name }) do |w|\n      w.max_attempts = 5\n      w.delay = 5\n    end\n    response\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error creating #{function_name}:\\n #{e.message}\")\n  rescue Aws::Waiters::Errors::WaiterFailed => e\n    @logger.error(\"Failed waiting for #{function_name} to activate:\\n #{e.message}\")\n  end\n\n",
                                    "  22.SDK for Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Deploys a Lambda function.\n  #\n  # @param function_name: The name of the Lambda function.\n  # @param handler_name: The fully qualified name of the handler function.\n  # @param role_arn: The IAM role to use for the function.\n  # @param deployment_package: The deployment package that contains the function code in .zip format.\n  # @return: The Amazon Resource Name (ARN) of the newly created function.\n  def create_function(function_name, handler_name, role_arn, deployment_package)\n    response = @lambda_client.create_function({\n                                                role: role_arn.to_s,\n                                                function_name: function_name,\n                                                handler: handler_name,\n                                                runtime: 'ruby2.7',\n                                                code: {\n                                                  zip_file: deployment_package\n                                                },\n                                                environment: {\n                                                  variables: {\n                                                    'LOG_LEVEL' => 'info'\n                                                  }\n                                                }\n                                              })\n    @lambda_client.wait_until(:function_active_v2, { function_name: function_name }) do |w|\n      w.max_attempts = 5\n      w.delay = 5\n    end\n    response\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error creating #{function_name}:\\n #{e.message}\")\n  rescue Aws::Waiters::Errors::WaiterFailed => e\n    @logger.error(\"Failed waiting for #{function_name} to activate:\\n #{e.message}\")\n  end\n\n",
                                    "  23.Rust :     /**\n     * Create a function, uploading from a zip file.\n     */\n    pub async fn create_function(&self, zip_file: PathBuf) -> Result<String, anyhow::Error> {\n        let code = self.prepare_function(zip_file, None).await?;\n\n        let key = code.s3_key().unwrap().to_string();\n\n        let role = self.create_role().await.map_err(|e| anyhow!(e))?;\n\n        info!(\"Created iam role, waiting 15s for it to become active\");\n        tokio::time::sleep(Duration::from_secs(15)).await;\n\n        info!(\"Creating lambda function {}\", self.lambda_name);\n        let _ = self\n            .lambda_client\n            .create_function()\n            .function_name(self.lambda_name.clone())\n            .code(code)\n            .role(role.arn())\n            .runtime(aws_sdk_lambda::types::Runtime::Providedal2)\n            .handler(\"_unused\")\n            .send()\n            .await\n            .map_err(anyhow::Error::from)?;\n\n        self.wait_for_function_ready().await?;\n\n        self.lambda_client\n            .publish_version()\n            .function_name(self.lambda_name.clone())\n            .send()\n            .await?;\n\n        Ok(key)\n    }\n\n    /**\n     * Upload function code from a path to a zip file.\n     * The zip file must have an AL2 Linux-compatible binary called `bootstrap`.\n     * The easiest way to create such a zip is to use `cargo lambda build --output-format Zip`.\n     */\n    async fn prepare_function(\n        &self,\n        zip_file: PathBuf,\n        key: Option<String>,\n    ) -> Result<FunctionCode, anyhow::Error> {\n        let body = ByteStream::from_path(zip_file).await?;\n\n        let key = key.unwrap_or_else(|| format!(\"{}_code\", self.lambda_name));\n\n        info!(\"Uploading function code to s3://{}/{}\", self.bucket, key);\n        let _ = self\n            .s3_client\n            .put_object()\n            .bucket(self.bucket.clone())\n            .key(key.clone())\n            .body(body)\n            .send()\n            .await?;\n\n        Ok(FunctionCode::builder()\n            .s3_bucket(self.bucket.clone())\n            .s3_key(key)\n            .build())\n    }\n\n",
                                    "  24.SDK for Rust :     /**\n     * Create a function, uploading from a zip file.\n     */\n    pub async fn create_function(&self, zip_file: PathBuf) -> Result<String, anyhow::Error> {\n        let code = self.prepare_function(zip_file, None).await?;\n\n        let key = code.s3_key().unwrap().to_string();\n\n        let role = self.create_role().await.map_err(|e| anyhow!(e))?;\n\n        info!(\"Created iam role, waiting 15s for it to become active\");\n        tokio::time::sleep(Duration::from_secs(15)).await;\n\n        info!(\"Creating lambda function {}\", self.lambda_name);\n        let _ = self\n            .lambda_client\n            .create_function()\n            .function_name(self.lambda_name.clone())\n            .code(code)\n            .role(role.arn())\n            .runtime(aws_sdk_lambda::types::Runtime::Providedal2)\n            .handler(\"_unused\")\n            .send()\n            .await\n            .map_err(anyhow::Error::from)?;\n\n        self.wait_for_function_ready().await?;\n\n        self.lambda_client\n            .publish_version()\n            .function_name(self.lambda_name.clone())\n            .send()\n            .await?;\n\n        Ok(key)\n    }\n\n    /**\n     * Upload function code from a path to a zip file.\n     * The zip file must have an AL2 Linux-compatible binary called `bootstrap`.\n     * The easiest way to create such a zip is to use `cargo lambda build --output-format Zip`.\n     */\n    async fn prepare_function(\n        &self,\n        zip_file: PathBuf,\n        key: Option<String>,\n    ) -> Result<FunctionCode, anyhow::Error> {\n        let body = ByteStream::from_path(zip_file).await?;\n\n        let key = key.unwrap_or_else(|| format!(\"{}_code\", self.lambda_name));\n\n        info!(\"Uploading function code to s3://{}/{}\", self.bucket, key);\n        let _ = self\n            .s3_client\n            .put_object()\n            .bucket(self.bucket.clone())\n            .key(key.clone())\n            .body(body)\n            .send()\n            .await?;\n\n        Ok(FunctionCode::builder()\n            .s3_bucket(self.bucket.clone())\n            .s3_key(key)\n            .build())\n    }\n\n",
                                    "  25.SAP ABAP :     TRY.\n        lo_lmd->createfunction(\n            iv_functionname = iv_function_name\n            iv_runtime = `python3.9`\n            iv_role = iv_role_arn\n            iv_handler = iv_handler\n            io_code = io_zip_file\n            iv_description = 'AWS Lambda code example'\n        ).\n        MESSAGE 'Lambda function created.' TYPE 'I'.\n      CATCH /aws1/cx_lmdcodesigningcfgno00.\n        MESSAGE 'Code signing configuration does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodestorageexcdex.\n        MESSAGE 'Maximum total code size per account exceeded.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodeverification00.\n        MESSAGE 'Code signature failed one or more validation checks for signature mismatch or expiration.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvalidcodesigex.\n        MESSAGE 'Code signature failed the integrity check.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "  26.SDK for SAP ABAP :     TRY.\n        lo_lmd->createfunction(\n            iv_functionname = iv_function_name\n            iv_runtime = `python3.9`\n            iv_role = iv_role_arn\n            iv_handler = iv_handler\n            io_code = io_zip_file\n            iv_description = 'AWS Lambda code example'\n        ).\n        MESSAGE 'Lambda function created.' TYPE 'I'.\n      CATCH /aws1/cx_lmdcodesigningcfgno00.\n        MESSAGE 'Code signing configuration does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodestorageexcdex.\n        MESSAGE 'Maximum total code size per account exceeded.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodeverification00.\n        MESSAGE 'Code signature failed one or more validation checks for signature mismatch or expiration.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvalidcodesigex.\n        MESSAGE 'Code signature failed the integrity check.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET :     /// <summary>\n    /// Creates a new Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function.</param>\n    /// <param name=\"s3Bucket\">The Amazon Simple Storage Service (Amazon S3)\n    /// bucket where the zip file containing the code is located.</param>\n    /// <param name=\"s3Key\">The Amazon S3 key of the zip file.</param>\n    /// <param name=\"role\">The Amazon Resource Name (ARN) of a role with the\n    /// appropriate Lambda permissions.</param>\n    /// <param name=\"handler\">The name of the handler function.</param>\n    /// <returns>The Amazon Resource Name (ARN) of the newly created\n    /// Lambda function.</returns>\n    public async Task<string> CreateLambdaFunctionAsync(\n        string functionName,\n        string s3Bucket,\n        string s3Key,\n        string role,\n        string handler)\n    {\n        // Defines the location for the function code.\n        // S3Bucket - The S3 bucket where the file containing\n        //            the source code is stored.\n        // S3Key    - The name of the file containing the code.\n        var functionCode = new FunctionCode\n        {\n            S3Bucket = s3Bucket,\n            S3Key = s3Key,\n        };\n\n        var createFunctionRequest = new CreateFunctionRequest\n        {\n            FunctionName = functionName,\n            Description = \"Created by the Lambda .NET API\",\n            Code = functionCode,\n            Handler = handler,\n            Runtime = Runtime.Dotnet6,\n            Role = role,\n        };\n\n        var reponse = await _lambdaService.CreateFunctionAsync(createFunctionRequest);\n        return reponse.FunctionArn;\n    }\n\n\n",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "DeleteAlias",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_DeleteAlias_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use DeleteAlias.",
                                    "  1.CLI : delete-alias",
                                    "  2.AWS CLI : delete-alias",
                                    "  3.PowerShell : Remove-LMAlias -FunctionName \"MylambdaFunction123\" -Name \"NewAlias\"\n",
                                    "  4.Tools for PowerShell : Remove-LMAlias -FunctionName \"MylambdaFunction123\" -Name \"NewAlias\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : delete-alias",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "DeleteFunction",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_DeleteFunction_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use DeleteFunction.",
                                    "Action examples are code excerpts from larger programs and must be run in context. You can see this action in            context in the following code example:            ",
                                    "  1.Learn the basics",
                                    "  1..NET :     /// <summary>\n    /// Delete an AWS Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// delete.</param>\n    /// <returns>A Boolean value that indicates the success of the action.</returns>\n    public async Task<bool> DeleteFunctionAsync(string functionName)\n    {\n        var request = new DeleteFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.DeleteFunctionAsync(request);\n\n        // A return value of NoContent means that the request was processed.\n        // In this case, the function was deleted, and the return value\n        // is intentionally blank.\n        return response.HttpStatusCode == System.Net.HttpStatusCode.NoContent;\n    }\n\n\n",
                                    "  2.AWS SDK for .NET :     /// <summary>\n    /// Delete an AWS Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// delete.</param>\n    /// <returns>A Boolean value that indicates the success of the action.</returns>\n    public async Task<bool> DeleteFunctionAsync(string functionName)\n    {\n        var request = new DeleteFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.DeleteFunctionAsync(request);\n\n        // A return value of NoContent means that the request was processed.\n        // In this case, the function was deleted, and the return value\n        // is intentionally blank.\n        return response.HttpStatusCode == System.Net.HttpStatusCode.NoContent;\n    }\n\n\n",
                                    "  3.C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n    Aws::Lambda::Model::DeleteFunctionRequest request;\n    request.SetFunctionName(LAMBDA_NAME);\n\n    Aws::Lambda::Model::DeleteFunctionOutcome outcome = client.DeleteFunction(\n            request);\n\n    if (outcome.IsSuccess()) {\n        std::cout << \"The lambda function was successfully deleted.\" << std::endl;\n    }\n    else {\n        std::cerr << \"Error with Lambda::DeleteFunction. \"\n                  << outcome.GetError().GetMessage()\n                  << std::endl;\n    }\n\n",
                                    "  4.SDK for C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n    Aws::Lambda::Model::DeleteFunctionRequest request;\n    request.SetFunctionName(LAMBDA_NAME);\n\n    Aws::Lambda::Model::DeleteFunctionOutcome outcome = client.DeleteFunction(\n            request);\n\n    if (outcome.IsSuccess()) {\n        std::cout << \"The lambda function was successfully deleted.\" << std::endl;\n    }\n    else {\n        std::cerr << \"Error with Lambda::DeleteFunction. \"\n                  << outcome.GetError().GetMessage()\n                  << std::endl;\n    }\n\n",
                                    "  5.CLI : delete-function",
                                    "  6.AWS CLI : delete-function",
                                    "  7.Go : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// DeleteFunction deletes the Lambda function specified by functionName.\nfunc (wrapper FunctionWrapper) DeleteFunction(ctx context.Context, functionName string) {\n\t_, err := wrapper.LambdaClient.DeleteFunction(ctx, &lambda.DeleteFunctionInput{\n\t\tFunctionName: aws.String(functionName),\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't delete function %v. Here's why: %v\\n\", functionName, err)\n\t}\n}\n\n\n",
                                    "  8.SDK for Go V2 : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// DeleteFunction deletes the Lambda function specified by functionName.\nfunc (wrapper FunctionWrapper) DeleteFunction(ctx context.Context, functionName string) {\n\t_, err := wrapper.LambdaClient.DeleteFunction(ctx, &lambda.DeleteFunctionInput{\n\t\tFunctionName: aws.String(functionName),\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't delete function %v. Here's why: %v\\n\", functionName, err)\n\t}\n}\n\n\n",
                                    "  9.Java :     /**\n     * Deletes an AWS Lambda function.\n     *\n     * @param awsLambda     an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName  the name of the Lambda function to be deleted\n     *\n     * @throws LambdaException if an error occurs while deleting the Lambda function\n     */\n    public static void deleteLambdaFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            DeleteFunctionRequest request = DeleteFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            awsLambda.deleteFunction(request);\n            System.out.println(\"The \" + functionName + \" function was deleted\");\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  10.SDK for Java 2.x :     /**\n     * Deletes an AWS Lambda function.\n     *\n     * @param awsLambda     an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName  the name of the Lambda function to be deleted\n     *\n     * @throws LambdaException if an error occurs while deleting the Lambda function\n     */\n    public static void deleteLambdaFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            DeleteFunctionRequest request = DeleteFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            awsLambda.deleteFunction(request);\n            System.out.println(\"The \" + functionName + \" function was deleted\");\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  11.JavaScript : /**\n * @param {string} funcName\n */\nconst deleteFunction = (funcName) => {\n  const client = new LambdaClient({});\n  const command = new DeleteFunctionCommand({ FunctionName: funcName });\n  return client.send(command);\n};\n\n",
                                    "  12.SDK for JavaScript (v3) : /**\n * @param {string} funcName\n */\nconst deleteFunction = (funcName) => {\n  const client = new LambdaClient({});\n  const command = new DeleteFunctionCommand({ FunctionName: funcName });\n  return client.send(command);\n};\n\n",
                                    "  13.Kotlin : suspend fun delLambdaFunction(myFunctionName: String) {\n    val request =\n        DeleteFunctionRequest {\n            functionName = myFunctionName\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        awsLambda.deleteFunction(request)\n        println(\"$myFunctionName was deleted\")\n    }\n}\n\n",
                                    "  14.SDK for Kotlin : suspend fun delLambdaFunction(myFunctionName: String) {\n    val request =\n        DeleteFunctionRequest {\n            functionName = myFunctionName\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        awsLambda.deleteFunction(request)\n        println(\"$myFunctionName was deleted\")\n    }\n}\n\n",
                                    "  15.PHP :     public function deleteFunction($functionName)\n    {\n        return $this->lambdaClient->deleteFunction([\n            'FunctionName' => $functionName,\n        ]);\n    }\n\n",
                                    "  16.SDK for PHP :     public function deleteFunction($functionName)\n    {\n        return $this->lambdaClient->deleteFunction([\n            'FunctionName' => $functionName,\n        ]);\n    }\n\n",
                                    "  17.PowerShell : Remove-LMFunction -FunctionName \"MylambdaFunction123\" -Qualifier '3'\n",
                                    "  18.Tools for PowerShell : Remove-LMFunction -FunctionName \"MylambdaFunction123\" -Qualifier '3'\n",
                                    "  19.Python : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def delete_function(self, function_name):\n        \"\"\"\n        Deletes a Lambda function.\n\n        :param function_name: The name of the function to delete.\n        \"\"\"\n        try:\n            self.lambda_client.delete_function(FunctionName=function_name)\n        except ClientError:\n            logger.exception(\"Couldn't delete function %s.\", function_name)\n            raise\n\n\n",
                                    "  20.SDK for Python (Boto3) : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def delete_function(self, function_name):\n        \"\"\"\n        Deletes a Lambda function.\n\n        :param function_name: The name of the function to delete.\n        \"\"\"\n        try:\n            self.lambda_client.delete_function(FunctionName=function_name)\n        except ClientError:\n            logger.exception(\"Couldn't delete function %s.\", function_name)\n            raise\n\n\n",
                                    "  21.Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Deletes a Lambda function.\n  # @param function_name: The name of the function to delete.\n  def delete_function(function_name)\n    print \"Deleting function: #{function_name}...\"\n    @lambda_client.delete_function(\n      function_name: function_name\n    )\n    print 'Done!'.green\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error deleting #{function_name}:\\n #{e.message}\")\n  end\n\n",
                                    "  22.SDK for Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Deletes a Lambda function.\n  # @param function_name: The name of the function to delete.\n  def delete_function(function_name)\n    print \"Deleting function: #{function_name}...\"\n    @lambda_client.delete_function(\n      function_name: function_name\n    )\n    print 'Done!'.green\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error deleting #{function_name}:\\n #{e.message}\")\n  end\n\n",
                                    "  23.Rust :     /** Delete a function and its role, and if possible or necessary, its associated code object and bucket. */\n    pub async fn delete_function(\n        &self,\n        location: Option<String>,\n    ) -> (\n        Result<DeleteFunctionOutput, anyhow::Error>,\n        Result<DeleteRoleOutput, anyhow::Error>,\n        Option<Result<DeleteObjectOutput, anyhow::Error>>,\n    ) {\n        info!(\"Deleting lambda function {}\", self.lambda_name);\n        let delete_function = self\n            .lambda_client\n            .delete_function()\n            .function_name(self.lambda_name.clone())\n            .send()\n            .await\n            .map_err(anyhow::Error::from);\n\n        info!(\"Deleting iam role {}\", self.role_name);\n        let delete_role = self\n            .iam_client\n            .delete_role()\n            .role_name(self.role_name.clone())\n            .send()\n            .await\n            .map_err(anyhow::Error::from);\n\n        let delete_object: Option<Result<DeleteObjectOutput, anyhow::Error>> =\n            if let Some(location) = location {\n                info!(\"Deleting object {location}\");\n                Some(\n                    self.s3_client\n                        .delete_object()\n                        .bucket(self.bucket.clone())\n                        .key(location)\n                        .send()\n                        .await\n                        .map_err(anyhow::Error::from),\n                )\n            } else {\n                info!(?location, \"Skipping delete object\");\n                None\n            };\n\n        (delete_function, delete_role, delete_object)\n    }\n\n",
                                    "  24.SDK for Rust :     /** Delete a function and its role, and if possible or necessary, its associated code object and bucket. */\n    pub async fn delete_function(\n        &self,\n        location: Option<String>,\n    ) -> (\n        Result<DeleteFunctionOutput, anyhow::Error>,\n        Result<DeleteRoleOutput, anyhow::Error>,\n        Option<Result<DeleteObjectOutput, anyhow::Error>>,\n    ) {\n        info!(\"Deleting lambda function {}\", self.lambda_name);\n        let delete_function = self\n            .lambda_client\n            .delete_function()\n            .function_name(self.lambda_name.clone())\n            .send()\n            .await\n            .map_err(anyhow::Error::from);\n\n        info!(\"Deleting iam role {}\", self.role_name);\n        let delete_role = self\n            .iam_client\n            .delete_role()\n            .role_name(self.role_name.clone())\n            .send()\n            .await\n            .map_err(anyhow::Error::from);\n\n        let delete_object: Option<Result<DeleteObjectOutput, anyhow::Error>> =\n            if let Some(location) = location {\n                info!(\"Deleting object {location}\");\n                Some(\n                    self.s3_client\n                        .delete_object()\n                        .bucket(self.bucket.clone())\n                        .key(location)\n                        .send()\n                        .await\n                        .map_err(anyhow::Error::from),\n                )\n            } else {\n                info!(?location, \"Skipping delete object\");\n                None\n            };\n\n        (delete_function, delete_role, delete_object)\n    }\n\n",
                                    "  25.SAP ABAP :     TRY.\n        lo_lmd->deletefunction( iv_functionname = iv_function_name ).\n        MESSAGE 'Lambda function deleted.' TYPE 'I'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "  26.SDK for SAP ABAP :     TRY.\n        lo_lmd->deletefunction( iv_functionname = iv_function_name ).\n        MESSAGE 'Lambda function deleted.' TYPE 'I'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET :     /// <summary>\n    /// Delete an AWS Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// delete.</param>\n    /// <returns>A Boolean value that indicates the success of the action.</returns>\n    public async Task<bool> DeleteFunctionAsync(string functionName)\n    {\n        var request = new DeleteFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.DeleteFunctionAsync(request);\n\n        // A return value of NoContent means that the request was processed.\n        // In this case, the function was deleted, and the return value\n        // is intentionally blank.\n        return response.HttpStatusCode == System.Net.HttpStatusCode.NoContent;\n    }\n\n\n",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "DeleteFunctionConcurrency",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_DeleteFunctionConcurrency_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use DeleteFunctionConcurrency.",
                                    "  1.CLI : delete-function-concurrency",
                                    "  2.AWS CLI : delete-function-concurrency",
                                    "  3.PowerShell : Remove-LMFunctionConcurrency -FunctionName \"MylambdaFunction123\"\n",
                                    "  4.Tools for PowerShell : Remove-LMFunctionConcurrency -FunctionName \"MylambdaFunction123\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : delete-function-concurrency",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "DeleteProvisionedConcurrencyConfig",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_DeleteProvisionedConcurrencyConfig_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use DeleteProvisionedConcurrencyConfig.",
                                    "  1.CLI : delete-provisioned-concurrency-config",
                                    "  2.AWS CLI : delete-provisioned-concurrency-config",
                                    "  3.PowerShell : Remove-LMProvisionedConcurrencyConfig -FunctionName \"MylambdaFunction123\" -Qualifier \"NewAlias1\"\n",
                                    "  4.Tools for PowerShell : Remove-LMProvisionedConcurrencyConfig -FunctionName \"MylambdaFunction123\" -Qualifier \"NewAlias1\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : delete-provisioned-concurrency-config",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "GetAccountSettings",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetAccountSettings_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use GetAccountSettings.",
                                    "  1.CLI : get-account-settings",
                                    "  2.AWS CLI : get-account-settings",
                                    "  3.PowerShell : Get-LMAccountSetting | Select-Object @{Name=\"TotalCodeSizeLimit\";Expression={$_.AccountLimit.TotalCodeSize}}, @{Name=\"TotalCodeSizeUsed\";Expression={$_.AccountUsage.TotalCodeSize}}\n",
                                    "  4.Tools for PowerShell : Get-LMAccountSetting | Select-Object @{Name=\"TotalCodeSizeLimit\";Expression={$_.AccountLimit.TotalCodeSize}}, @{Name=\"TotalCodeSizeUsed\";Expression={$_.AccountUsage.TotalCodeSize}}\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : get-account-settings",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "GetAlias",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetAlias_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use GetAlias.",
                                    "  1.CLI : get-alias",
                                    "  2.AWS CLI : get-alias",
                                    "  3.PowerShell : Get-LMAlias -FunctionName \"MylambdaFunction123\" -Name \"newlabel1\" -Select RoutingConfig\n",
                                    "  4.Tools for PowerShell : Get-LMAlias -FunctionName \"MylambdaFunction123\" -Name \"newlabel1\" -Select RoutingConfig\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : get-alias",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "GetFunction",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetFunction_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use GetFunction.",
                                    "Action examples are code excerpts from larger programs and must be run in context. You can see this action in            context in the following code example:            ",
                                    "  1.Learn the basics",
                                    "  1..NET :     /// <summary>\n    /// Gets information about a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function for\n    /// which to retrieve information.</param>\n    /// <returns>Async Task.</returns>\n    public async Task<FunctionConfiguration> GetFunctionAsync(string functionName)\n    {\n        var functionRequest = new GetFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.GetFunctionAsync(functionRequest);\n        return response.Configuration;\n    }\n\n\n",
                                    "  2.AWS SDK for .NET :     /// <summary>\n    /// Gets information about a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function for\n    /// which to retrieve information.</param>\n    /// <returns>Async Task.</returns>\n    public async Task<FunctionConfiguration> GetFunctionAsync(string functionName)\n    {\n        var functionRequest = new GetFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.GetFunctionAsync(functionRequest);\n        return response.Configuration;\n    }\n\n\n",
                                    "  3.C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::GetFunctionRequest request;\n        request.SetFunctionName(functionName);\n\n        Aws::Lambda::Model::GetFunctionOutcome outcome = client.GetFunction(request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"Function retrieve.\\n\" <<\n                      outcome.GetResult().GetConfiguration().Jsonize().View().WriteReadable()\n                      << std::endl;\n        }\n        else {\n            std::cerr << \"Error with Lambda::GetFunction. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n\n",
                                    "  4.SDK for C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::GetFunctionRequest request;\n        request.SetFunctionName(functionName);\n\n        Aws::Lambda::Model::GetFunctionOutcome outcome = client.GetFunction(request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"Function retrieve.\\n\" <<\n                      outcome.GetResult().GetConfiguration().Jsonize().View().WriteReadable()\n                      << std::endl;\n        }\n        else {\n            std::cerr << \"Error with Lambda::GetFunction. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n\n",
                                    "  5.CLI : get-function",
                                    "  6.AWS CLI : get-function",
                                    "  7.Go : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// GetFunction gets data about the Lambda function specified by functionName.\nfunc (wrapper FunctionWrapper) GetFunction(ctx context.Context, functionName string) types.State {\n\tvar state types.State\n\tfuncOutput, err := wrapper.LambdaClient.GetFunction(ctx, &lambda.GetFunctionInput{\n\t\tFunctionName: aws.String(functionName),\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't get function %v. Here's why: %v\\n\", functionName, err)\n\t} else {\n\t\tstate = funcOutput.Configuration.State\n\t}\n\treturn state\n}\n\n\n",
                                    "  8.SDK for Go V2 : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// GetFunction gets data about the Lambda function specified by functionName.\nfunc (wrapper FunctionWrapper) GetFunction(ctx context.Context, functionName string) types.State {\n\tvar state types.State\n\tfuncOutput, err := wrapper.LambdaClient.GetFunction(ctx, &lambda.GetFunctionInput{\n\t\tFunctionName: aws.String(functionName),\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't get function %v. Here's why: %v\\n\", functionName, err)\n\t} else {\n\t\tstate = funcOutput.Configuration.State\n\t}\n\treturn state\n}\n\n\n",
                                    "  9.Java :     /**\n     * Retrieves information about an AWS Lambda function.\n     *\n     * @param awsLambda    an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to retrieve information about\n     */\n    public static void getFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            GetFunctionRequest functionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            GetFunctionResponse response = awsLambda.getFunction(functionRequest);\n            System.out.println(\"The runtime of this Lambda function is \" + response.configuration().runtime());\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  10.SDK for Java 2.x :     /**\n     * Retrieves information about an AWS Lambda function.\n     *\n     * @param awsLambda    an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to retrieve information about\n     */\n    public static void getFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            GetFunctionRequest functionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            GetFunctionResponse response = awsLambda.getFunction(functionRequest);\n            System.out.println(\"The runtime of this Lambda function is \" + response.configuration().runtime());\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  11.JavaScript : const getFunction = (funcName) => {\n  const client = new LambdaClient({});\n  const command = new GetFunctionCommand({ FunctionName: funcName });\n  return client.send(command);\n};\n\n",
                                    "  12.SDK for JavaScript (v3) : const getFunction = (funcName) => {\n  const client = new LambdaClient({});\n  const command = new GetFunctionCommand({ FunctionName: funcName });\n  return client.send(command);\n};\n\n",
                                    "  13.PHP :     public function getFunction($functionName)\n    {\n        return $this->lambdaClient->getFunction([\n            'FunctionName' => $functionName,\n        ]);\n    }\n\n",
                                    "  14.SDK for PHP :     public function getFunction($functionName)\n    {\n        return $this->lambdaClient->getFunction([\n            'FunctionName' => $functionName,\n        ]);\n    }\n\n",
                                    "  15.Python : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def get_function(self, function_name):\n        \"\"\"\n        Gets data about a Lambda function.\n\n        :param function_name: The name of the function.\n        :return: The function data.\n        \"\"\"\n        response = None\n        try:\n            response = self.lambda_client.get_function(FunctionName=function_name)\n        except ClientError as err:\n            if err.response[\"Error\"][\"Code\"] == \"ResourceNotFoundException\":\n                logger.info(\"Function %s does not exist.\", function_name)\n            else:\n                logger.error(\n                    \"Couldn't get function %s. Here's why: %s: %s\",\n                    function_name,\n                    err.response[\"Error\"][\"Code\"],\n                    err.response[\"Error\"][\"Message\"],\n                )\n                raise\n        return response\n\n\n",
                                    "  16.SDK for Python (Boto3) : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def get_function(self, function_name):\n        \"\"\"\n        Gets data about a Lambda function.\n\n        :param function_name: The name of the function.\n        :return: The function data.\n        \"\"\"\n        response = None\n        try:\n            response = self.lambda_client.get_function(FunctionName=function_name)\n        except ClientError as err:\n            if err.response[\"Error\"][\"Code\"] == \"ResourceNotFoundException\":\n                logger.info(\"Function %s does not exist.\", function_name)\n            else:\n                logger.error(\n                    \"Couldn't get function %s. Here's why: %s: %s\",\n                    function_name,\n                    err.response[\"Error\"][\"Code\"],\n                    err.response[\"Error\"][\"Message\"],\n                )\n                raise\n        return response\n\n\n",
                                    "  17.Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Gets data about a Lambda function.\n  #\n  # @param function_name: The name of the function.\n  # @return response: The function data, or nil if no such function exists.\n  def get_function(function_name)\n    @lambda_client.get_function(\n      {\n        function_name: function_name\n      }\n    )\n  rescue Aws::Lambda::Errors::ResourceNotFoundException => e\n    @logger.debug(\"Could not find function: #{function_name}:\\n #{e.message}\")\n    nil\n  end\n\n",
                                    "  18.SDK for Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Gets data about a Lambda function.\n  #\n  # @param function_name: The name of the function.\n  # @return response: The function data, or nil if no such function exists.\n  def get_function(function_name)\n    @lambda_client.get_function(\n      {\n        function_name: function_name\n      }\n    )\n  rescue Aws::Lambda::Errors::ResourceNotFoundException => e\n    @logger.debug(\"Could not find function: #{function_name}:\\n #{e.message}\")\n    nil\n  end\n\n",
                                    "  19.Rust :     /** Get the Lambda function with this Manager's name. */\n    pub async fn get_function(&self) -> Result<GetFunctionOutput, anyhow::Error> {\n        info!(\"Getting lambda function\");\n        self.lambda_client\n            .get_function()\n            .function_name(self.lambda_name.clone())\n            .send()\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\n",
                                    "  20.SDK for Rust :     /** Get the Lambda function with this Manager's name. */\n    pub async fn get_function(&self) -> Result<GetFunctionOutput, anyhow::Error> {\n        info!(\"Getting lambda function\");\n        self.lambda_client\n            .get_function()\n            .function_name(self.lambda_name.clone())\n            .send()\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\n",
                                    "  21.SAP ABAP :     TRY.\n        oo_result =  lo_lmd->getfunction( iv_functionname = iv_function_name ).       \" oo_result is returned for testing purposes. \"\n        MESSAGE 'Lambda function information retrieved.' TYPE 'I'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "  22.SDK for SAP ABAP :     TRY.\n        oo_result =  lo_lmd->getfunction( iv_functionname = iv_function_name ).       \" oo_result is returned for testing purposes. \"\n        MESSAGE 'Lambda function information retrieved.' TYPE 'I'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET :     /// <summary>\n    /// Gets information about a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function for\n    /// which to retrieve information.</param>\n    /// <returns>Async Task.</returns>\n    public async Task<FunctionConfiguration> GetFunctionAsync(string functionName)\n    {\n        var functionRequest = new GetFunctionRequest\n        {\n            FunctionName = functionName,\n        };\n\n        var response = await _lambdaService.GetFunctionAsync(functionRequest);\n        return response.Configuration;\n    }\n\n\n",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "GetFunctionConcurrency",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetFunctionConcurrency_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use GetFunctionConcurrency.",
                                    "  1.CLI : get-function-concurrency",
                                    "  2.AWS CLI : get-function-concurrency",
                                    "  3.PowerShell : Get-LMFunctionConcurrency -FunctionName \"MylambdaFunction123\" -Select *\n",
                                    "  4.Tools for PowerShell : Get-LMFunctionConcurrency -FunctionName \"MylambdaFunction123\" -Select *\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : get-function-concurrency",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "GetFunctionConfiguration",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetFunctionConfiguration_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use GetFunctionConfiguration.",
                                    "  1.CLI : get-function-configuration",
                                    "  2.AWS CLI : get-function-configuration",
                                    "  3.PowerShell : Get-LMFunctionConfiguration -FunctionName \"MylambdaFunction123\" -Qualifier \"PowershellAlias\"\n",
                                    "  4.Tools for PowerShell : Get-LMFunctionConfiguration -FunctionName \"MylambdaFunction123\" -Qualifier \"PowershellAlias\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : get-function-configuration",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "GetPolicy",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetPolicy_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use GetPolicy.",
                                    "  1.CLI : get-policy",
                                    "  2.AWS CLI : get-policy",
                                    "  3.PowerShell : Get-LMPolicy -FunctionName test -Select Policy\n",
                                    "  4.Tools for PowerShell : Get-LMPolicy -FunctionName test -Select Policy\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : get-policy",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "GetProvisionedConcurrencyConfig",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_GetProvisionedConcurrencyConfig_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use GetProvisionedConcurrencyConfig.",
                                    "  1.CLI : get-provisioned-concurrency-config",
                                    "  2.AWS CLI : get-provisioned-concurrency-config",
                                    "  3.PowerShell : C:\\>Get-LMProvisionedConcurrencyConfig -FunctionName \"MylambdaFunction123\" -Qualifier \"NewAlias1\"\n",
                                    "  4.Tools for PowerShell : C:\\>Get-LMProvisionedConcurrencyConfig -FunctionName \"MylambdaFunction123\" -Qualifier \"NewAlias1\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : get-provisioned-concurrency-config",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "Invoke",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_Invoke_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use Invoke.",
                                    "Action examples are code excerpts from larger programs and must be run in context. You can see this action in            context in the following code example:            ",
                                    "  1.Learn the basics",
                                    "  1..NET :     /// <summary>\n    /// Invoke a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// invoke.</param\n    /// <param name=\"parameters\">The parameter values that will be passed to the function.</param>\n    /// <returns>A System Threading Task.</returns>\n    public async Task<string> InvokeFunctionAsync(\n        string functionName,\n        string parameters)\n    {\n        var payload = parameters;\n        var request = new InvokeRequest\n        {\n            FunctionName = functionName,\n            Payload = payload,\n        };\n\n        var response = await _lambdaService.InvokeAsync(request);\n        MemoryStream stream = response.Payload;\n        string returnValue = System.Text.Encoding.UTF8.GetString(stream.ToArray());\n        return returnValue;\n    }\n\n\n",
                                    "  2.AWS SDK for .NET :     /// <summary>\n    /// Invoke a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// invoke.</param\n    /// <param name=\"parameters\">The parameter values that will be passed to the function.</param>\n    /// <returns>A System Threading Task.</returns>\n    public async Task<string> InvokeFunctionAsync(\n        string functionName,\n        string parameters)\n    {\n        var payload = parameters;\n        var request = new InvokeRequest\n        {\n            FunctionName = functionName,\n            Payload = payload,\n        };\n\n        var response = await _lambdaService.InvokeAsync(request);\n        MemoryStream stream = response.Payload;\n        string returnValue = System.Text.Encoding.UTF8.GetString(stream.ToArray());\n        return returnValue;\n    }\n\n\n",
                                    "  3.C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::InvokeRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        request.SetLogType(logType);\n        std::shared_ptr<Aws::IOStream> payload = Aws::MakeShared<Aws::StringStream>(\n                \"FunctionTest\");\n        *payload << jsonPayload.View().WriteReadable();\n        request.SetBody(payload);\n        request.SetContentType(\"application/json\");\n        Aws::Lambda::Model::InvokeOutcome outcome = client.Invoke(request);\n\n        if (outcome.IsSuccess()) {\n            invokeResult = std::move(outcome.GetResult());\n            result = true;\n            break;\n        }\n\n        else {\n            std::cerr << \"Error with Lambda::InvokeRequest. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n            break;\n        }\n\n",
                                    "  4.SDK for C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::InvokeRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        request.SetLogType(logType);\n        std::shared_ptr<Aws::IOStream> payload = Aws::MakeShared<Aws::StringStream>(\n                \"FunctionTest\");\n        *payload << jsonPayload.View().WriteReadable();\n        request.SetBody(payload);\n        request.SetContentType(\"application/json\");\n        Aws::Lambda::Model::InvokeOutcome outcome = client.Invoke(request);\n\n        if (outcome.IsSuccess()) {\n            invokeResult = std::move(outcome.GetResult());\n            result = true;\n            break;\n        }\n\n        else {\n            std::cerr << \"Error with Lambda::InvokeRequest. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n            break;\n        }\n\n",
                                    "  5.CLI : invoke",
                                    "  6.AWS CLI : invoke",
                                    "  7.Go : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// Invoke invokes the Lambda function specified by functionName, passing the parameters\n// as a JSON payload. When getLog is true, types.LogTypeTail is specified, which tells\n// Lambda to include the last few log lines in the returned result.\nfunc (wrapper FunctionWrapper) Invoke(ctx context.Context, functionName string, parameters any, getLog bool) *lambda.InvokeOutput {\n\tlogType := types.LogTypeNone\n\tif getLog {\n\t\tlogType = types.LogTypeTail\n\t}\n\tpayload, err := json.Marshal(parameters)\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't marshal parameters to JSON. Here's why %v\\n\", err)\n\t}\n\tinvokeOutput, err := wrapper.LambdaClient.Invoke(ctx, &lambda.InvokeInput{\n\t\tFunctionName: aws.String(functionName),\n\t\tLogType:      logType,\n\t\tPayload:      payload,\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't invoke function %v. Here's why: %v\\n\", functionName, err)\n\t}\n\treturn invokeOutput\n}\n\n\n",
                                    "  8.SDK for Go V2 : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// Invoke invokes the Lambda function specified by functionName, passing the parameters\n// as a JSON payload. When getLog is true, types.LogTypeTail is specified, which tells\n// Lambda to include the last few log lines in the returned result.\nfunc (wrapper FunctionWrapper) Invoke(ctx context.Context, functionName string, parameters any, getLog bool) *lambda.InvokeOutput {\n\tlogType := types.LogTypeNone\n\tif getLog {\n\t\tlogType = types.LogTypeTail\n\t}\n\tpayload, err := json.Marshal(parameters)\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't marshal parameters to JSON. Here's why %v\\n\", err)\n\t}\n\tinvokeOutput, err := wrapper.LambdaClient.Invoke(ctx, &lambda.InvokeInput{\n\t\tFunctionName: aws.String(functionName),\n\t\tLogType:      logType,\n\t\tPayload:      payload,\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't invoke function %v. Here's why: %v\\n\", functionName, err)\n\t}\n\treturn invokeOutput\n}\n\n\n",
                                    "  9.Java :     /**\n     * Invokes a specific AWS Lambda function.\n     *\n     * @param awsLambda    an instance of {@link LambdaClient} to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to be invoked\n     */\n    public static void invokeFunction(LambdaClient awsLambda, String functionName) {\n        InvokeResponse res;\n        try {\n            // Need a SdkBytes instance for the payload.\n            JSONObject jsonObj = new JSONObject();\n            jsonObj.put(\"inputValue\", \"2000\");\n            String json = jsonObj.toString();\n            SdkBytes payload = SdkBytes.fromUtf8String(json);\n\n            InvokeRequest request = InvokeRequest.builder()\n                .functionName(functionName)\n                .payload(payload)\n                .build();\n\n            res = awsLambda.invoke(request);\n            String value = res.payload().asUtf8String();\n            System.out.println(value);\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  10.SDK for Java 2.x :     /**\n     * Invokes a specific AWS Lambda function.\n     *\n     * @param awsLambda    an instance of {@link LambdaClient} to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to be invoked\n     */\n    public static void invokeFunction(LambdaClient awsLambda, String functionName) {\n        InvokeResponse res;\n        try {\n            // Need a SdkBytes instance for the payload.\n            JSONObject jsonObj = new JSONObject();\n            jsonObj.put(\"inputValue\", \"2000\");\n            String json = jsonObj.toString();\n            SdkBytes payload = SdkBytes.fromUtf8String(json);\n\n            InvokeRequest request = InvokeRequest.builder()\n                .functionName(functionName)\n                .payload(payload)\n                .build();\n\n            res = awsLambda.invoke(request);\n            String value = res.payload().asUtf8String();\n            System.out.println(value);\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  11.JavaScript : const invoke = async (funcName, payload) => {\n  const client = new LambdaClient({});\n  const command = new InvokeCommand({\n    FunctionName: funcName,\n    Payload: JSON.stringify(payload),\n    LogType: LogType.Tail,\n  });\n\n  const { Payload, LogResult } = await client.send(command);\n  const result = Buffer.from(Payload).toString();\n  const logs = Buffer.from(LogResult, \"base64\").toString();\n  return { logs, result };\n};\n\n",
                                    "  12.SDK for JavaScript (v3) : const invoke = async (funcName, payload) => {\n  const client = new LambdaClient({});\n  const command = new InvokeCommand({\n    FunctionName: funcName,\n    Payload: JSON.stringify(payload),\n    LogType: LogType.Tail,\n  });\n\n  const { Payload, LogResult } = await client.send(command);\n  const result = Buffer.from(Payload).toString();\n  const logs = Buffer.from(LogResult, \"base64\").toString();\n  return { logs, result };\n};\n\n",
                                    "  13.Kotlin : suspend fun invokeFunction(functionNameVal: String) {\n    val json = \"\"\"{\"inputValue\":\"1000\"}\"\"\"\n    val byteArray = json.trimIndent().encodeToByteArray()\n    val request =\n        InvokeRequest {\n            functionName = functionNameVal\n            logType = LogType.Tail\n            payload = byteArray\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val res = awsLambda.invoke(request)\n        println(\"${res.payload?.toString(Charsets.UTF_8)}\")\n        println(\"The log result is ${res.logResult}\")\n    }\n}\n\n",
                                    "  14.SDK for Kotlin : suspend fun invokeFunction(functionNameVal: String) {\n    val json = \"\"\"{\"inputValue\":\"1000\"}\"\"\"\n    val byteArray = json.trimIndent().encodeToByteArray()\n    val request =\n        InvokeRequest {\n            functionName = functionNameVal\n            logType = LogType.Tail\n            payload = byteArray\n        }\n\n    LambdaClient { region = \"us-west-2\" }.use { awsLambda ->\n        val res = awsLambda.invoke(request)\n        println(\"${res.payload?.toString(Charsets.UTF_8)}\")\n        println(\"The log result is ${res.logResult}\")\n    }\n}\n\n",
                                    "  15.PHP :     public function invoke($functionName, $params, $logType = 'None')\n    {\n        return $this->lambdaClient->invoke([\n            'FunctionName' => $functionName,\n            'Payload' => json_encode($params),\n            'LogType' => $logType,\n        ]);\n    }\n\n",
                                    "  16.SDK for PHP :     public function invoke($functionName, $params, $logType = 'None')\n    {\n        return $this->lambdaClient->invoke([\n            'FunctionName' => $functionName,\n            'Payload' => json_encode($params),\n            'LogType' => $logType,\n        ]);\n    }\n\n",
                                    "  17.Python : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def invoke_function(self, function_name, function_params, get_log=False):\n        \"\"\"\n        Invokes a Lambda function.\n\n        :param function_name: The name of the function to invoke.\n        :param function_params: The parameters of the function as a dict. This dict\n                                is serialized to JSON before it is sent to Lambda.\n        :param get_log: When true, the last 4 KB of the execution log are included in\n                        the response.\n        :return: The response from the function invocation.\n        \"\"\"\n        try:\n            response = self.lambda_client.invoke(\n                FunctionName=function_name,\n                Payload=json.dumps(function_params),\n                LogType=\"Tail\" if get_log else \"None\",\n            )\n            logger.info(\"Invoked function %s.\", function_name)\n        except ClientError:\n            logger.exception(\"Couldn't invoke function %s.\", function_name)\n            raise\n        return response\n\n\n",
                                    "  18.SDK for Python (Boto3) : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def invoke_function(self, function_name, function_params, get_log=False):\n        \"\"\"\n        Invokes a Lambda function.\n\n        :param function_name: The name of the function to invoke.\n        :param function_params: The parameters of the function as a dict. This dict\n                                is serialized to JSON before it is sent to Lambda.\n        :param get_log: When true, the last 4 KB of the execution log are included in\n                        the response.\n        :return: The response from the function invocation.\n        \"\"\"\n        try:\n            response = self.lambda_client.invoke(\n                FunctionName=function_name,\n                Payload=json.dumps(function_params),\n                LogType=\"Tail\" if get_log else \"None\",\n            )\n            logger.info(\"Invoked function %s.\", function_name)\n        except ClientError:\n            logger.exception(\"Couldn't invoke function %s.\", function_name)\n            raise\n        return response\n\n\n",
                                    "  19.Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Invokes a Lambda function.\n  # @param function_name [String] The name of the function to invoke.\n  # @param payload [nil] Payload containing runtime parameters.\n  # @return [Object] The response from the function invocation.\n  def invoke_function(function_name, payload = nil)\n    params = { function_name: function_name }\n    params[:payload] = payload unless payload.nil?\n    @lambda_client.invoke(params)\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error executing #{function_name}:\\n #{e.message}\")\n  end\n\n",
                                    "  20.SDK for Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Invokes a Lambda function.\n  # @param function_name [String] The name of the function to invoke.\n  # @param payload [nil] Payload containing runtime parameters.\n  # @return [Object] The response from the function invocation.\n  def invoke_function(function_name, payload = nil)\n    params = { function_name: function_name }\n    params[:payload] = payload unless payload.nil?\n    @lambda_client.invoke(params)\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error executing #{function_name}:\\n #{e.message}\")\n  end\n\n",
                                    "  21.Rust :     /** Invoke the lambda function using calculator InvokeArgs. */\n    pub async fn invoke(&self, args: InvokeArgs) -> Result<InvokeOutput, anyhow::Error> {\n        info!(?args, \"Invoking {}\", self.lambda_name);\n        let payload = serde_json::to_string(&args)?;\n        debug!(?payload, \"Sending payload\");\n        self.lambda_client\n            .invoke()\n            .function_name(self.lambda_name.clone())\n            .payload(Blob::new(payload))\n            .send()\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\nfn log_invoke_output(invoke: &InvokeOutput, message: &str) {\n    if let Some(payload) = invoke.payload().cloned() {\n        let payload = String::from_utf8(payload.into_inner());\n        info!(?payload, message);\n    } else {\n        info!(\"Could not extract payload\")\n    }\n    if let Some(logs) = invoke.log_result() {\n        debug!(?logs, \"Invoked function logs\")\n    } else {\n        debug!(\"Invoked function had no logs\")\n    }\n}\n\n",
                                    "  22.SDK for Rust :     /** Invoke the lambda function using calculator InvokeArgs. */\n    pub async fn invoke(&self, args: InvokeArgs) -> Result<InvokeOutput, anyhow::Error> {\n        info!(?args, \"Invoking {}\", self.lambda_name);\n        let payload = serde_json::to_string(&args)?;\n        debug!(?payload, \"Sending payload\");\n        self.lambda_client\n            .invoke()\n            .function_name(self.lambda_name.clone())\n            .payload(Blob::new(payload))\n            .send()\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\nfn log_invoke_output(invoke: &InvokeOutput, message: &str) {\n    if let Some(payload) = invoke.payload().cloned() {\n        let payload = String::from_utf8(payload.into_inner());\n        info!(?payload, message);\n    } else {\n        info!(\"Could not extract payload\")\n    }\n    if let Some(logs) = invoke.log_result() {\n        debug!(?logs, \"Invoked function logs\")\n    } else {\n        debug!(\"Invoked function had no logs\")\n    }\n}\n\n",
                                    "  23.SAP ABAP :     TRY.\n        DATA(lv_json) = /aws1/cl_rt_util=>string_to_xstring(\n          `{`  &&\n            `\"action\": \"increment\",`  &&\n            `\"number\": 10` &&\n          `}`\n        ).\n        oo_result =  lo_lmd->invoke(                  \" oo_result is returned for testing purposes. \"\n                 iv_functionname = iv_function_name\n                 iv_payload = lv_json\n             ).\n        MESSAGE 'Lambda function invoked.' TYPE 'I'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvrequestcontex.\n        MESSAGE 'Unable to parse request body as JSON.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvalidzipfileex.\n        MESSAGE 'The deployment package could not be unzipped.' TYPE 'E'.\n      CATCH /aws1/cx_lmdrequesttoolargeex.\n        MESSAGE 'Invoke request body JSON input limit was exceeded by the request payload.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n      CATCH /aws1/cx_lmdunsuppedmediatyp00.\n        MESSAGE 'Invoke request body does not have JSON as its content type.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "  24.SDK for SAP ABAP :     TRY.\n        DATA(lv_json) = /aws1/cl_rt_util=>string_to_xstring(\n          `{`  &&\n            `\"action\": \"increment\",`  &&\n            `\"number\": 10` &&\n          `}`\n        ).\n        oo_result =  lo_lmd->invoke(                  \" oo_result is returned for testing purposes. \"\n                 iv_functionname = iv_function_name\n                 iv_payload = lv_json\n             ).\n        MESSAGE 'Lambda function invoked.' TYPE 'I'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvrequestcontex.\n        MESSAGE 'Unable to parse request body as JSON.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvalidzipfileex.\n        MESSAGE 'The deployment package could not be unzipped.' TYPE 'E'.\n      CATCH /aws1/cx_lmdrequesttoolargeex.\n        MESSAGE 'Invoke request body JSON input limit was exceeded by the request payload.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n      CATCH /aws1/cx_lmdunsuppedmediatyp00.\n        MESSAGE 'Invoke request body does not have JSON as its content type.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET :     /// <summary>\n    /// Invoke a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to\n    /// invoke.</param\n    /// <param name=\"parameters\">The parameter values that will be passed to the function.</param>\n    /// <returns>A System Threading Task.</returns>\n    public async Task<string> InvokeFunctionAsync(\n        string functionName,\n        string parameters)\n    {\n        var payload = parameters;\n        var request = new InvokeRequest\n        {\n            FunctionName = functionName,\n            Payload = payload,\n        };\n\n        var response = await _lambdaService.InvokeAsync(request);\n        MemoryStream stream = response.Payload;\n        string returnValue = System.Text.Encoding.UTF8.GetString(stream.ToArray());\n        return returnValue;\n    }\n\n\n",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "ListFunctions",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_ListFunctions_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use ListFunctions.",
                                    "Action examples are code excerpts from larger programs and must be run in context. You can see this action in            context in the following code example:            ",
                                    "  1.Learn the basics",
                                    "  1..NET :     /// <summary>\n    /// Get a list of Lambda functions.\n    /// </summary>\n    /// <returns>A list of FunctionConfiguration objects.</returns>\n    public async Task<List<FunctionConfiguration>> ListFunctionsAsync()\n    {\n        var functionList = new List<FunctionConfiguration>();\n\n        var functionPaginator =\n            _lambdaService.Paginators.ListFunctions(new ListFunctionsRequest());\n        await foreach (var function in functionPaginator.Functions)\n        {\n            functionList.Add(function);\n        }\n\n        return functionList;\n    }\n\n\n",
                                    "  2.AWS SDK for .NET :     /// <summary>\n    /// Get a list of Lambda functions.\n    /// </summary>\n    /// <returns>A list of FunctionConfiguration objects.</returns>\n    public async Task<List<FunctionConfiguration>> ListFunctionsAsync()\n    {\n        var functionList = new List<FunctionConfiguration>();\n\n        var functionPaginator =\n            _lambdaService.Paginators.ListFunctions(new ListFunctionsRequest());\n        await foreach (var function in functionPaginator.Functions)\n        {\n            functionList.Add(function);\n        }\n\n        return functionList;\n    }\n\n\n",
                                    "  3.C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n    std::vector<Aws::String> functions;\n    Aws::String marker;\n\n    do {\n        Aws::Lambda::Model::ListFunctionsRequest request;\n        if (!marker.empty()) {\n            request.SetMarker(marker);\n        }\n\n        Aws::Lambda::Model::ListFunctionsOutcome outcome = client.ListFunctions(\n                request);\n\n        if (outcome.IsSuccess()) {\n            const Aws::Lambda::Model::ListFunctionsResult &result = outcome.GetResult();\n            std::cout << result.GetFunctions().size()\n                      << \" lambda functions were retrieved.\" << std::endl;\n\n            for (const Aws::Lambda::Model::FunctionConfiguration &functionConfiguration: result.GetFunctions()) {\n                functions.push_back(functionConfiguration.GetFunctionName());\n                std::cout << functions.size() << \"  \"\n                          << functionConfiguration.GetDescription() << std::endl;\n                std::cout << \"   \"\n                          << Aws::Lambda::Model::RuntimeMapper::GetNameForRuntime(\n                                  functionConfiguration.GetRuntime()) << \": \"\n                          << functionConfiguration.GetHandler()\n                          << std::endl;\n            }\n            marker = result.GetNextMarker();\n        }\n        else {\n            std::cerr << \"Error with Lambda::ListFunctions. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n    } while (!marker.empty());\n\n",
                                    "  4.SDK for C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n    std::vector<Aws::String> functions;\n    Aws::String marker;\n\n    do {\n        Aws::Lambda::Model::ListFunctionsRequest request;\n        if (!marker.empty()) {\n            request.SetMarker(marker);\n        }\n\n        Aws::Lambda::Model::ListFunctionsOutcome outcome = client.ListFunctions(\n                request);\n\n        if (outcome.IsSuccess()) {\n            const Aws::Lambda::Model::ListFunctionsResult &result = outcome.GetResult();\n            std::cout << result.GetFunctions().size()\n                      << \" lambda functions were retrieved.\" << std::endl;\n\n            for (const Aws::Lambda::Model::FunctionConfiguration &functionConfiguration: result.GetFunctions()) {\n                functions.push_back(functionConfiguration.GetFunctionName());\n                std::cout << functions.size() << \"  \"\n                          << functionConfiguration.GetDescription() << std::endl;\n                std::cout << \"   \"\n                          << Aws::Lambda::Model::RuntimeMapper::GetNameForRuntime(\n                                  functionConfiguration.GetRuntime()) << \": \"\n                          << functionConfiguration.GetHandler()\n                          << std::endl;\n            }\n            marker = result.GetNextMarker();\n        }\n        else {\n            std::cerr << \"Error with Lambda::ListFunctions. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n    } while (!marker.empty());\n\n",
                                    "  5.CLI : list-functions",
                                    "  6.AWS CLI : list-functions",
                                    "  7.Go : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// ListFunctions lists up to maxItems functions for the account. This function uses a\n// lambda.ListFunctionsPaginator to paginate the results.\nfunc (wrapper FunctionWrapper) ListFunctions(ctx context.Context, maxItems int) []types.FunctionConfiguration {\n\tvar functions []types.FunctionConfiguration\n\tpaginator := lambda.NewListFunctionsPaginator(wrapper.LambdaClient, &lambda.ListFunctionsInput{\n\t\tMaxItems: aws.Int32(int32(maxItems)),\n\t})\n\tfor paginator.HasMorePages() && len(functions) < maxItems {\n\t\tpageOutput, err := paginator.NextPage(ctx)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't list functions for your account. Here's why: %v\\n\", err)\n\t\t}\n\t\tfunctions = append(functions, pageOutput.Functions...)\n\t}\n\treturn functions\n}\n\n\n",
                                    "  8.SDK for Go V2 : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// ListFunctions lists up to maxItems functions for the account. This function uses a\n// lambda.ListFunctionsPaginator to paginate the results.\nfunc (wrapper FunctionWrapper) ListFunctions(ctx context.Context, maxItems int) []types.FunctionConfiguration {\n\tvar functions []types.FunctionConfiguration\n\tpaginator := lambda.NewListFunctionsPaginator(wrapper.LambdaClient, &lambda.ListFunctionsInput{\n\t\tMaxItems: aws.Int32(int32(maxItems)),\n\t})\n\tfor paginator.HasMorePages() && len(functions) < maxItems {\n\t\tpageOutput, err := paginator.NextPage(ctx)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't list functions for your account. Here's why: %v\\n\", err)\n\t\t}\n\t\tfunctions = append(functions, pageOutput.Functions...)\n\t}\n\treturn functions\n}\n\n\n",
                                    "  9.JavaScript : const listFunctions = () => {\n  const client = new LambdaClient({});\n  const command = new ListFunctionsCommand({});\n\n  return client.send(command);\n};\n\n",
                                    "  10.SDK for JavaScript (v3) : const listFunctions = () => {\n  const client = new LambdaClient({});\n  const command = new ListFunctionsCommand({});\n\n  return client.send(command);\n};\n\n",
                                    "  11.PHP :     public function listFunctions($maxItems = 50, $marker = null)\n    {\n        if (is_null($marker)) {\n            return $this->lambdaClient->listFunctions([\n                'MaxItems' => $maxItems,\n            ]);\n        }\n\n        return $this->lambdaClient->listFunctions([\n            'Marker' => $marker,\n            'MaxItems' => $maxItems,\n        ]);\n    }\n\n",
                                    "  12.SDK for PHP :     public function listFunctions($maxItems = 50, $marker = null)\n    {\n        if (is_null($marker)) {\n            return $this->lambdaClient->listFunctions([\n                'MaxItems' => $maxItems,\n            ]);\n        }\n\n        return $this->lambdaClient->listFunctions([\n            'Marker' => $marker,\n            'MaxItems' => $maxItems,\n        ]);\n    }\n\n",
                                    "  13.PowerShell : Get-LMFunctionList | Sort-Object -Property CodeSize | Select-Object FunctionName, RunTime, Timeout, CodeSize\n",
                                    "  14.Tools for PowerShell : Get-LMFunctionList | Sort-Object -Property CodeSize | Select-Object FunctionName, RunTime, Timeout, CodeSize\n",
                                    "  15.Python : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def list_functions(self):\n        \"\"\"\n        Lists the Lambda functions for the current account.\n        \"\"\"\n        try:\n            func_paginator = self.lambda_client.get_paginator(\"list_functions\")\n            for func_page in func_paginator.paginate():\n                for func in func_page[\"Functions\"]:\n                    print(func[\"FunctionName\"])\n                    desc = func.get(\"Description\")\n                    if desc:\n                        print(f\"\\t{desc}\")\n                    print(f\"\\t{func['Runtime']}: {func['Handler']}\")\n        except ClientError as err:\n            logger.error(\n                \"Couldn't list functions. Here's why: %s: %s\",\n                err.response[\"Error\"][\"Code\"],\n                err.response[\"Error\"][\"Message\"],\n            )\n            raise\n\n\n",
                                    "  16.SDK for Python (Boto3) : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def list_functions(self):\n        \"\"\"\n        Lists the Lambda functions for the current account.\n        \"\"\"\n        try:\n            func_paginator = self.lambda_client.get_paginator(\"list_functions\")\n            for func_page in func_paginator.paginate():\n                for func in func_page[\"Functions\"]:\n                    print(func[\"FunctionName\"])\n                    desc = func.get(\"Description\")\n                    if desc:\n                        print(f\"\\t{desc}\")\n                    print(f\"\\t{func['Runtime']}: {func['Handler']}\")\n        except ClientError as err:\n            logger.error(\n                \"Couldn't list functions. Here's why: %s: %s\",\n                err.response[\"Error\"][\"Code\"],\n                err.response[\"Error\"][\"Message\"],\n            )\n            raise\n\n\n",
                                    "  17.Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Lists the Lambda functions for the current account.\n  def list_functions\n    functions = []\n    @lambda_client.list_functions.each do |response|\n      response['functions'].each do |function|\n        functions.append(function['function_name'])\n      end\n    end\n    functions\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error listing functions:\\n #{e.message}\")\n  end\n\n",
                                    "  18.SDK for Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Lists the Lambda functions for the current account.\n  def list_functions\n    functions = []\n    @lambda_client.list_functions.each do |response|\n      response['functions'].each do |function|\n        functions.append(function['function_name'])\n      end\n    end\n    functions\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error listing functions:\\n #{e.message}\")\n  end\n\n",
                                    "  19.Rust :     /** List all Lambda functions in the current Region. */\n    pub async fn list_functions(&self) -> Result<ListFunctionsOutput, anyhow::Error> {\n        info!(\"Listing lambda functions\");\n        self.lambda_client\n            .list_functions()\n            .send()\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\n",
                                    "  20.SDK for Rust :     /** List all Lambda functions in the current Region. */\n    pub async fn list_functions(&self) -> Result<ListFunctionsOutput, anyhow::Error> {\n        info!(\"Listing lambda functions\");\n        self.lambda_client\n            .list_functions()\n            .send()\n            .await\n            .map_err(anyhow::Error::from)\n    }\n\n",
                                    "  21.SAP ABAP :     TRY.\n        oo_result =  lo_lmd->listfunctions( ).       \" oo_result is returned for testing purposes. \"\n        DATA(lt_functions) = oo_result->get_functions( ).\n        MESSAGE 'Retrieved list of Lambda functions.' TYPE 'I'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "  22.SDK for SAP ABAP :     TRY.\n        oo_result =  lo_lmd->listfunctions( ).       \" oo_result is returned for testing purposes. \"\n        DATA(lt_functions) = oo_result->get_functions( ).\n        MESSAGE 'Retrieved list of Lambda functions.' TYPE 'I'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET :     /// <summary>\n    /// Get a list of Lambda functions.\n    /// </summary>\n    /// <returns>A list of FunctionConfiguration objects.</returns>\n    public async Task<List<FunctionConfiguration>> ListFunctionsAsync()\n    {\n        var functionList = new List<FunctionConfiguration>();\n\n        var functionPaginator =\n            _lambdaService.Paginators.ListFunctions(new ListFunctionsRequest());\n        await foreach (var function in functionPaginator.Functions)\n        {\n            functionList.Add(function);\n        }\n\n        return functionList;\n    }\n\n\n",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "ListProvisionedConcurrencyConfigs",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_ListProvisionedConcurrencyConfigs_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use ListProvisionedConcurrencyConfigs.",
                                    "  1.CLI : list-provisioned-concurrency-configs",
                                    "  2.AWS CLI : list-provisioned-concurrency-configs",
                                    "  3.PowerShell : Get-LMProvisionedConcurrencyConfigList -FunctionName \"MylambdaFunction123\"\n",
                                    "  4.Tools for PowerShell : Get-LMProvisionedConcurrencyConfigList -FunctionName \"MylambdaFunction123\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : list-provisioned-concurrency-configs",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "ListTags",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_ListTags_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use ListTags.",
                                    "  1.CLI : list-tags",
                                    "  2.AWS CLI : list-tags",
                                    "  3.PowerShell : Get-LMResourceTag -Resource \"arn:aws:lambda:us-west-2:123456789012:function:MyFunction\"\n",
                                    "  4.Tools for PowerShell : Get-LMResourceTag -Resource \"arn:aws:lambda:us-west-2:123456789012:function:MyFunction\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : list-tags",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "ListVersionsByFunction",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_ListVersionsByFunction_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use ListVersionsByFunction.",
                                    "  1.CLI : list-versions-by-function",
                                    "  2.AWS CLI : list-versions-by-function",
                                    "  3.PowerShell : Get-LMVersionsByFunction -FunctionName \"MylambdaFunction123\"\n",
                                    "  4.Tools for PowerShell : Get-LMVersionsByFunction -FunctionName \"MylambdaFunction123\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : list-versions-by-function",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "PublishVersion",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_PublishVersion_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use PublishVersion.",
                                    "  1.CLI : publish-version",
                                    "  2.AWS CLI : publish-version",
                                    "  3.PowerShell : Publish-LMVersion -FunctionName \"MylambdaFunction123\" -Description \"Publishing Existing Snapshot of function code as a  new version through Powershell\"\n",
                                    "  4.Tools for PowerShell : Publish-LMVersion -FunctionName \"MylambdaFunction123\" -Description \"Publishing Existing Snapshot of function code as a  new version through Powershell\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : publish-version",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "PutFunctionConcurrency",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_PutFunctionConcurrency_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use PutFunctionConcurrency.",
                                    "  1.CLI : put-function-concurrency",
                                    "  2.AWS CLI : put-function-concurrency",
                                    "  3.PowerShell : Write-LMFunctionConcurrency -FunctionName \"MylambdaFunction123\" -ReservedConcurrentExecution 100\n",
                                    "  4.Tools for PowerShell : Write-LMFunctionConcurrency -FunctionName \"MylambdaFunction123\" -ReservedConcurrentExecution 100\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : put-function-concurrency",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "PutProvisionedConcurrencyConfig",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_PutProvisionedConcurrencyConfig_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use PutProvisionedConcurrencyConfig.",
                                    "  1.CLI : put-provisioned-concurrency-config",
                                    "  2.AWS CLI : put-provisioned-concurrency-config",
                                    "  3.PowerShell : Write-LMProvisionedConcurrencyConfig -FunctionName \"MylambdaFunction123\" -ProvisionedConcurrentExecution 20 -Qualifier \"NewAlias1\"\n",
                                    "  4.Tools for PowerShell : Write-LMProvisionedConcurrencyConfig -FunctionName \"MylambdaFunction123\" -ProvisionedConcurrentExecution 20 -Qualifier \"NewAlias1\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : put-provisioned-concurrency-config",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "RemovePermission",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_RemovePermission_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use RemovePermission.",
                                    "  1.CLI : remove-permission",
                                    "  2.AWS CLI : remove-permission",
                                    "  3.PowerShell : $policy =  Get-LMPolicy -FunctionName \"MylambdaFunction123\" -Select Policy | ConvertFrom-Json| Select-Object -ExpandProperty Statement\nRemove-LMPermission -FunctionName \"MylambdaFunction123\" -StatementId $policy[0].Sid\n",
                                    "  4.Tools for PowerShell : $policy =  Get-LMPolicy -FunctionName \"MylambdaFunction123\" -Select Policy | ConvertFrom-Json| Select-Object -ExpandProperty Statement\nRemove-LMPermission -FunctionName \"MylambdaFunction123\" -StatementId $policy[0].Sid\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : remove-permission",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "TagResource",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_TagResource_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use TagResource.",
                                    "  1.CLI : tag-resource",
                                    "  2.AWS CLI : tag-resource",
                                    "  3.PowerShell : Add-LMResourceTag -Resource \"arn:aws:lambda:us-west-2:123456789012:function:MyFunction\" -Tag @{ \"Washington\" = \"Olympia\"; \"Oregon\" = \"Salem\"; \"California\" = \"Sacramento\" }\n",
                                    "  4.Tools for PowerShell : Add-LMResourceTag -Resource \"arn:aws:lambda:us-west-2:123456789012:function:MyFunction\" -Tag @{ \"Washington\" = \"Olympia\"; \"Oregon\" = \"Salem\"; \"California\" = \"Sacramento\" }\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : tag-resource",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "UntagResource",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_UntagResource_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use UntagResource.",
                                    "  1.CLI : untag-resource",
                                    "  2.AWS CLI : untag-resource",
                                    "  3.PowerShell : Remove-LMResourceTag -Resource \"arn:aws:lambda:us-west-2:123456789012:function:MyFunction\" -TagKey \"Washington\",\"Oregon\",\"California\"\n",
                                    "  4.Tools for PowerShell : Remove-LMResourceTag -Resource \"arn:aws:lambda:us-west-2:123456789012:function:MyFunction\" -TagKey \"Washington\",\"Oregon\",\"California\"\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : untag-resource",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "UpdateAlias",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_UpdateAlias_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use UpdateAlias.",
                                    "  1.CLI : update-alias",
                                    "  2.AWS CLI : update-alias",
                                    "  3.PowerShell : Update-LMAlias -FunctionName \"MylambdaFunction123\" -Description \" Alias for version 2\" -FunctionVersion 2 -Name \"newlabel1\" -RoutingConfig_AdditionalVersionWeight @{Name=\"1\";Value=\"0.6}\n",
                                    "  4.Tools for PowerShell : Update-LMAlias -FunctionName \"MylambdaFunction123\" -Description \" Alias for version 2\" -FunctionVersion 2 -Name \"newlabel1\" -RoutingConfig_AdditionalVersionWeight @{Name=\"1\";Value=\"0.6}\n",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS CLI : update-alias",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "UpdateFunctionCode",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_UpdateFunctionCode_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use UpdateFunctionCode.",
                                    "Action examples are code excerpts from larger programs and must be run in context. You can see this action in            context in the following code example:            ",
                                    "  1.Learn the basics",
                                    "  1..NET :     /// <summary>\n    /// Update an existing Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to update.</param>\n    /// <param name=\"bucketName\">The bucket where the zip file containing\n    /// the Lambda function code is stored.</param>\n    /// <param name=\"key\">The key name of the source code file.</param>\n    /// <returns>Async Task.</returns>\n    public async Task UpdateFunctionCodeAsync(\n        string functionName,\n        string bucketName,\n        string key)\n    {\n        var functionCodeRequest = new UpdateFunctionCodeRequest\n        {\n            FunctionName = functionName,\n            Publish = true,\n            S3Bucket = bucketName,\n            S3Key = key,\n        };\n\n        var response = await _lambdaService.UpdateFunctionCodeAsync(functionCodeRequest);\n        Console.WriteLine($\"The Function was last modified at {response.LastModified}.\");\n    }\n\n\n",
                                    "  2.AWS SDK for .NET :     /// <summary>\n    /// Update an existing Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to update.</param>\n    /// <param name=\"bucketName\">The bucket where the zip file containing\n    /// the Lambda function code is stored.</param>\n    /// <param name=\"key\">The key name of the source code file.</param>\n    /// <returns>Async Task.</returns>\n    public async Task UpdateFunctionCodeAsync(\n        string functionName,\n        string bucketName,\n        string key)\n    {\n        var functionCodeRequest = new UpdateFunctionCodeRequest\n        {\n            FunctionName = functionName,\n            Publish = true,\n            S3Bucket = bucketName,\n            S3Key = key,\n        };\n\n        var response = await _lambdaService.UpdateFunctionCodeAsync(functionCodeRequest);\n        Console.WriteLine($\"The Function was last modified at {response.LastModified}.\");\n    }\n\n\n",
                                    "  3.C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::UpdateFunctionCodeRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        std::ifstream ifstream(CALCULATOR_LAMBDA_CODE.c_str(),\n                               std::ios_base::in | std::ios_base::binary);\n        if (!ifstream.is_open()) {\n            std::cerr << \"Error opening file \" << INCREMENT_LAMBDA_CODE << \".\" << std::endl;\n\n#if USE_CPP_LAMBDA_FUNCTION\n            std::cerr\n                    << \"The cpp Lambda function must be built following the instructions in the cpp_lambda/README.md file. \"\n                    << std::endl;\n#endif\n            deleteLambdaFunction(client);\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n        Aws::StringStream buffer;\n        buffer << ifstream.rdbuf();\n        request.SetZipFile(\n                Aws::Utils::ByteBuffer((unsigned char *) buffer.str().c_str(),\n                                       buffer.str().length()));\n        request.SetPublish(true);\n\n        Aws::Lambda::Model::UpdateFunctionCodeOutcome outcome = client.UpdateFunctionCode(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda code was successfully updated.\" << std::endl;\n        }\n        else {\n            std::cerr << \"Error with Lambda::UpdateFunctionCode. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n\n",
                                    "  4.SDK for C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::UpdateFunctionCodeRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        std::ifstream ifstream(CALCULATOR_LAMBDA_CODE.c_str(),\n                               std::ios_base::in | std::ios_base::binary);\n        if (!ifstream.is_open()) {\n            std::cerr << \"Error opening file \" << INCREMENT_LAMBDA_CODE << \".\" << std::endl;\n\n#if USE_CPP_LAMBDA_FUNCTION\n            std::cerr\n                    << \"The cpp Lambda function must be built following the instructions in the cpp_lambda/README.md file. \"\n                    << std::endl;\n#endif\n            deleteLambdaFunction(client);\n            deleteIamRole(clientConfig);\n            return false;\n        }\n\n        Aws::StringStream buffer;\n        buffer << ifstream.rdbuf();\n        request.SetZipFile(\n                Aws::Utils::ByteBuffer((unsigned char *) buffer.str().c_str(),\n                                       buffer.str().length()));\n        request.SetPublish(true);\n\n        Aws::Lambda::Model::UpdateFunctionCodeOutcome outcome = client.UpdateFunctionCode(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda code was successfully updated.\" << std::endl;\n        }\n        else {\n            std::cerr << \"Error with Lambda::UpdateFunctionCode. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n\n",
                                    "  5.CLI : update-function-code",
                                    "  6.AWS CLI : update-function-code",
                                    "  7.Go : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// UpdateFunctionCode updates the code for the Lambda function specified by functionName.\n// The existing code for the Lambda function is entirely replaced by the code in the\n// zipPackage buffer. After the update action is called, a lambda.FunctionUpdatedV2Waiter\n// is used to wait until the update is successful.\nfunc (wrapper FunctionWrapper) UpdateFunctionCode(ctx context.Context, functionName string, zipPackage *bytes.Buffer) types.State {\n\tvar state types.State\n\t_, err := wrapper.LambdaClient.UpdateFunctionCode(ctx, &lambda.UpdateFunctionCodeInput{\n\t\tFunctionName: aws.String(functionName), ZipFile: zipPackage.Bytes(),\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't update code for function %v. Here's why: %v\\n\", functionName, err)\n\t} else {\n\t\twaiter := lambda.NewFunctionUpdatedV2Waiter(wrapper.LambdaClient)\n\t\tfuncOutput, err := waiter.WaitForOutput(ctx, &lambda.GetFunctionInput{\n\t\t\tFunctionName: aws.String(functionName)}, 1*time.Minute)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't wait for function %v to be active. Here's why: %v\\n\", functionName, err)\n\t\t} else {\n\t\t\tstate = funcOutput.Configuration.State\n\t\t}\n\t}\n\treturn state\n}\n\n\n",
                                    "  8.SDK for Go V2 : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// UpdateFunctionCode updates the code for the Lambda function specified by functionName.\n// The existing code for the Lambda function is entirely replaced by the code in the\n// zipPackage buffer. After the update action is called, a lambda.FunctionUpdatedV2Waiter\n// is used to wait until the update is successful.\nfunc (wrapper FunctionWrapper) UpdateFunctionCode(ctx context.Context, functionName string, zipPackage *bytes.Buffer) types.State {\n\tvar state types.State\n\t_, err := wrapper.LambdaClient.UpdateFunctionCode(ctx, &lambda.UpdateFunctionCodeInput{\n\t\tFunctionName: aws.String(functionName), ZipFile: zipPackage.Bytes(),\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't update code for function %v. Here's why: %v\\n\", functionName, err)\n\t} else {\n\t\twaiter := lambda.NewFunctionUpdatedV2Waiter(wrapper.LambdaClient)\n\t\tfuncOutput, err := waiter.WaitForOutput(ctx, &lambda.GetFunctionInput{\n\t\t\tFunctionName: aws.String(functionName)}, 1*time.Minute)\n\t\tif err != nil {\n\t\t\tlog.Panicf(\"Couldn't wait for function %v to be active. Here's why: %v\\n\", functionName, err)\n\t\t} else {\n\t\t\tstate = funcOutput.Configuration.State\n\t\t}\n\t}\n\treturn state\n}\n\n\n",
                                    "  9.Java :     /**\n     * Retrieves information about an AWS Lambda function.\n     *\n     * @param awsLambda    an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to retrieve information about\n     */\n    public static void getFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            GetFunctionRequest functionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            GetFunctionResponse response = awsLambda.getFunction(functionRequest);\n            System.out.println(\"The runtime of this Lambda function is \" + response.configuration().runtime());\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  10.SDK for Java 2.x :     /**\n     * Retrieves information about an AWS Lambda function.\n     *\n     * @param awsLambda    an instance of the {@link LambdaClient} class, which is used to interact with the AWS Lambda service\n     * @param functionName the name of the AWS Lambda function to retrieve information about\n     */\n    public static void getFunction(LambdaClient awsLambda, String functionName) {\n        try {\n            GetFunctionRequest functionRequest = GetFunctionRequest.builder()\n                .functionName(functionName)\n                .build();\n\n            GetFunctionResponse response = awsLambda.getFunction(functionRequest);\n            System.out.println(\"The runtime of this Lambda function is \" + response.configuration().runtime());\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  11.JavaScript : const updateFunctionCode = async (funcName, newFunc) => {\n  const client = new LambdaClient({});\n  const code = await readFile(`${dirname}../functions/${newFunc}.zip`);\n  const command = new UpdateFunctionCodeCommand({\n    ZipFile: code,\n    FunctionName: funcName,\n    Architectures: [Architecture.arm64],\n    Handler: \"index.handler\", // Required when sending a .zip file\n    PackageType: PackageType.Zip, // Required when sending a .zip file\n    Runtime: Runtime.nodejs16x, // Required when sending a .zip file\n  });\n\n  return client.send(command);\n};\n\n",
                                    "  12.SDK for JavaScript (v3) : const updateFunctionCode = async (funcName, newFunc) => {\n  const client = new LambdaClient({});\n  const code = await readFile(`${dirname}../functions/${newFunc}.zip`);\n  const command = new UpdateFunctionCodeCommand({\n    ZipFile: code,\n    FunctionName: funcName,\n    Architectures: [Architecture.arm64],\n    Handler: \"index.handler\", // Required when sending a .zip file\n    PackageType: PackageType.Zip, // Required when sending a .zip file\n    Runtime: Runtime.nodejs16x, // Required when sending a .zip file\n  });\n\n  return client.send(command);\n};\n\n",
                                    "  13.PHP :     public function updateFunctionCode($functionName, $s3Bucket, $s3Key)\n    {\n        return $this->lambdaClient->updateFunctionCode([\n            'FunctionName' => $functionName,\n            'S3Bucket' => $s3Bucket,\n            'S3Key' => $s3Key,\n        ]);\n    }\n\n",
                                    "  14.SDK for PHP :     public function updateFunctionCode($functionName, $s3Bucket, $s3Key)\n    {\n        return $this->lambdaClient->updateFunctionCode([\n            'FunctionName' => $functionName,\n            'S3Bucket' => $s3Bucket,\n            'S3Key' => $s3Key,\n        ]);\n    }\n\n",
                                    "  15.PowerShell : Update-LMFunctionCode -FunctionName MyFunction -ZipFilename .\\UpdatedCode.zip\n",
                                    "  16.Tools for PowerShell : Update-LMFunctionCode -FunctionName MyFunction -ZipFilename .\\UpdatedCode.zip\n",
                                    "  17.Python : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def update_function_code(self, function_name, deployment_package):\n        \"\"\"\n        Updates the code for a Lambda function by submitting a .zip archive that contains\n        the code for the function.\n\n        :param function_name: The name of the function to update.\n        :param deployment_package: The function code to update, packaged as bytes in\n                                   .zip format.\n        :return: Data about the update, including the status.\n        \"\"\"\n        try:\n            response = self.lambda_client.update_function_code(\n                FunctionName=function_name, ZipFile=deployment_package\n            )\n        except ClientError as err:\n            logger.error(\n                \"Couldn't update function %s. Here's why: %s: %s\",\n                function_name,\n                err.response[\"Error\"][\"Code\"],\n                err.response[\"Error\"][\"Message\"],\n            )\n            raise\n        else:\n            return response\n\n\n",
                                    "  18.SDK for Python (Boto3) : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def update_function_code(self, function_name, deployment_package):\n        \"\"\"\n        Updates the code for a Lambda function by submitting a .zip archive that contains\n        the code for the function.\n\n        :param function_name: The name of the function to update.\n        :param deployment_package: The function code to update, packaged as bytes in\n                                   .zip format.\n        :return: Data about the update, including the status.\n        \"\"\"\n        try:\n            response = self.lambda_client.update_function_code(\n                FunctionName=function_name, ZipFile=deployment_package\n            )\n        except ClientError as err:\n            logger.error(\n                \"Couldn't update function %s. Here's why: %s: %s\",\n                function_name,\n                err.response[\"Error\"][\"Code\"],\n                err.response[\"Error\"][\"Message\"],\n            )\n            raise\n        else:\n            return response\n\n\n",
                                    "  19.Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Updates the code for a Lambda function by submitting a .zip archive that contains\n  # the code for the function.\n  #\n  # @param function_name: The name of the function to update.\n  # @param deployment_package: The function code to update, packaged as bytes in\n  #                            .zip format.\n  # @return: Data about the update, including the status.\n  def update_function_code(function_name, deployment_package)\n    @lambda_client.update_function_code(\n      function_name: function_name,\n      zip_file: deployment_package\n    )\n    @lambda_client.wait_until(:function_updated_v2, { function_name: function_name }) do |w|\n      w.max_attempts = 5\n      w.delay = 5\n    end\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error updating function code for: #{function_name}:\\n #{e.message}\")\n    nil\n  rescue Aws::Waiters::Errors::WaiterFailed => e\n    @logger.error(\"Failed waiting for #{function_name} to update:\\n #{e.message}\")\n  end\n\n",
                                    "  20.SDK for Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Updates the code for a Lambda function by submitting a .zip archive that contains\n  # the code for the function.\n  #\n  # @param function_name: The name of the function to update.\n  # @param deployment_package: The function code to update, packaged as bytes in\n  #                            .zip format.\n  # @return: Data about the update, including the status.\n  def update_function_code(function_name, deployment_package)\n    @lambda_client.update_function_code(\n      function_name: function_name,\n      zip_file: deployment_package\n    )\n    @lambda_client.wait_until(:function_updated_v2, { function_name: function_name }) do |w|\n      w.max_attempts = 5\n      w.delay = 5\n    end\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error updating function code for: #{function_name}:\\n #{e.message}\")\n    nil\n  rescue Aws::Waiters::Errors::WaiterFailed => e\n    @logger.error(\"Failed waiting for #{function_name} to update:\\n #{e.message}\")\n  end\n\n",
                                    "  21.Rust :     /** Given a Path to a zip file, update the function's code and wait for the update to finish. */\n    pub async fn update_function_code(\n        &self,\n        zip_file: PathBuf,\n        key: String,\n    ) -> Result<UpdateFunctionCodeOutput, anyhow::Error> {\n        let function_code = self.prepare_function(zip_file, Some(key)).await?;\n\n        info!(\"Updating code for {}\", self.lambda_name);\n        let update = self\n            .lambda_client\n            .update_function_code()\n            .function_name(self.lambda_name.clone())\n            .s3_bucket(self.bucket.clone())\n            .s3_key(function_code.s3_key().unwrap().to_string())\n            .send()\n            .await\n            .map_err(anyhow::Error::from)?;\n\n        self.wait_for_function_ready().await?;\n\n        Ok(update)\n    }\n\n    /**\n     * Upload function code from a path to a zip file.\n     * The zip file must have an AL2 Linux-compatible binary called `bootstrap`.\n     * The easiest way to create such a zip is to use `cargo lambda build --output-format Zip`.\n     */\n    async fn prepare_function(\n        &self,\n        zip_file: PathBuf,\n        key: Option<String>,\n    ) -> Result<FunctionCode, anyhow::Error> {\n        let body = ByteStream::from_path(zip_file).await?;\n\n        let key = key.unwrap_or_else(|| format!(\"{}_code\", self.lambda_name));\n\n        info!(\"Uploading function code to s3://{}/{}\", self.bucket, key);\n        let _ = self\n            .s3_client\n            .put_object()\n            .bucket(self.bucket.clone())\n            .key(key.clone())\n            .body(body)\n            .send()\n            .await?;\n\n        Ok(FunctionCode::builder()\n            .s3_bucket(self.bucket.clone())\n            .s3_key(key)\n            .build())\n    }\n\n",
                                    "  22.SDK for Rust :     /** Given a Path to a zip file, update the function's code and wait for the update to finish. */\n    pub async fn update_function_code(\n        &self,\n        zip_file: PathBuf,\n        key: String,\n    ) -> Result<UpdateFunctionCodeOutput, anyhow::Error> {\n        let function_code = self.prepare_function(zip_file, Some(key)).await?;\n\n        info!(\"Updating code for {}\", self.lambda_name);\n        let update = self\n            .lambda_client\n            .update_function_code()\n            .function_name(self.lambda_name.clone())\n            .s3_bucket(self.bucket.clone())\n            .s3_key(function_code.s3_key().unwrap().to_string())\n            .send()\n            .await\n            .map_err(anyhow::Error::from)?;\n\n        self.wait_for_function_ready().await?;\n\n        Ok(update)\n    }\n\n    /**\n     * Upload function code from a path to a zip file.\n     * The zip file must have an AL2 Linux-compatible binary called `bootstrap`.\n     * The easiest way to create such a zip is to use `cargo lambda build --output-format Zip`.\n     */\n    async fn prepare_function(\n        &self,\n        zip_file: PathBuf,\n        key: Option<String>,\n    ) -> Result<FunctionCode, anyhow::Error> {\n        let body = ByteStream::from_path(zip_file).await?;\n\n        let key = key.unwrap_or_else(|| format!(\"{}_code\", self.lambda_name));\n\n        info!(\"Uploading function code to s3://{}/{}\", self.bucket, key);\n        let _ = self\n            .s3_client\n            .put_object()\n            .bucket(self.bucket.clone())\n            .key(key.clone())\n            .body(body)\n            .send()\n            .await?;\n\n        Ok(FunctionCode::builder()\n            .s3_bucket(self.bucket.clone())\n            .s3_key(key)\n            .build())\n    }\n\n",
                                    "  23.SAP ABAP :     TRY.\n        oo_result = lo_lmd->updatefunctioncode(     \" oo_result is returned for testing purposes. \"\n              iv_functionname = iv_function_name\n              iv_zipfile = io_zip_file\n          ).\n\n        MESSAGE 'Lambda function code updated.' TYPE 'I'.\n      CATCH /aws1/cx_lmdcodesigningcfgno00.\n        MESSAGE 'Code signing configuration does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodestorageexcdex.\n        MESSAGE 'Maximum total code size per account exceeded.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodeverification00.\n        MESSAGE 'Code signature failed one or more validation checks for signature mismatch or expiration.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvalidcodesigex.\n        MESSAGE 'Code signature failed the integrity check.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "  24.SDK for SAP ABAP :     TRY.\n        oo_result = lo_lmd->updatefunctioncode(     \" oo_result is returned for testing purposes. \"\n              iv_functionname = iv_function_name\n              iv_zipfile = io_zip_file\n          ).\n\n        MESSAGE 'Lambda function code updated.' TYPE 'I'.\n      CATCH /aws1/cx_lmdcodesigningcfgno00.\n        MESSAGE 'Code signing configuration does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodestorageexcdex.\n        MESSAGE 'Maximum total code size per account exceeded.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodeverification00.\n        MESSAGE 'Code signature failed one or more validation checks for signature mismatch or expiration.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvalidcodesigex.\n        MESSAGE 'Code signature failed the integrity check.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET :     /// <summary>\n    /// Update an existing Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the Lambda function to update.</param>\n    /// <param name=\"bucketName\">The bucket where the zip file containing\n    /// the Lambda function code is stored.</param>\n    /// <param name=\"key\">The key name of the source code file.</param>\n    /// <returns>Async Task.</returns>\n    public async Task UpdateFunctionCodeAsync(\n        string functionName,\n        string bucketName,\n        string key)\n    {\n        var functionCodeRequest = new UpdateFunctionCodeRequest\n        {\n            FunctionName = functionName,\n            Publish = true,\n            S3Bucket = bucketName,\n            S3Key = key,\n        };\n\n        var response = await _lambdaService.UpdateFunctionCodeAsync(functionCodeRequest);\n        Console.WriteLine($\"The Function was last modified at {response.LastModified}.\");\n    }\n\n\n",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            },
                            {
                                "title": "UpdateFunctionConfiguration",
                                "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_lambda_UpdateFunctionConfiguration_section.html",
                                "source": "aws_lamda",
                                "parent_content": [
                                    "The following code examples show how to use UpdateFunctionConfiguration.",
                                    "Action examples are code excerpts from larger programs and must be run in context. You can see this action in            context in the following code example:            ",
                                    "  1.Learn the basics",
                                    "  1..NET :     /// <summary>\n    /// Update the code of a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function to update.</param>\n    /// <param name=\"functionHandler\">The code that performs the function's actions.</param>\n    /// <param name=\"environmentVariables\">A dictionary of environment variables.</param>\n    /// <returns>A Boolean value indicating the success of the action.</returns>\n    public async Task<bool> UpdateFunctionConfigurationAsync(\n        string functionName,\n        string functionHandler,\n        Dictionary<string, string> environmentVariables)\n    {\n        var request = new UpdateFunctionConfigurationRequest\n        {\n            Handler = functionHandler,\n            FunctionName = functionName,\n            Environment = new Amazon.Lambda.Model.Environment { Variables = environmentVariables },\n        };\n\n        var response = await _lambdaService.UpdateFunctionConfigurationAsync(request);\n\n        Console.WriteLine(response.LastModified);\n\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n\n\n",
                                    "  2.AWS SDK for .NET :     /// <summary>\n    /// Update the code of a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function to update.</param>\n    /// <param name=\"functionHandler\">The code that performs the function's actions.</param>\n    /// <param name=\"environmentVariables\">A dictionary of environment variables.</param>\n    /// <returns>A Boolean value indicating the success of the action.</returns>\n    public async Task<bool> UpdateFunctionConfigurationAsync(\n        string functionName,\n        string functionHandler,\n        Dictionary<string, string> environmentVariables)\n    {\n        var request = new UpdateFunctionConfigurationRequest\n        {\n            Handler = functionHandler,\n            FunctionName = functionName,\n            Environment = new Amazon.Lambda.Model.Environment { Variables = environmentVariables },\n        };\n\n        var response = await _lambdaService.UpdateFunctionConfigurationAsync(request);\n\n        Console.WriteLine(response.LastModified);\n\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n\n\n",
                                    "  3.C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::UpdateFunctionConfigurationRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        Aws::Lambda::Model::Environment environment;\n        environment.AddVariables(\"LOG_LEVEL\", \"DEBUG\");\n        request.SetEnvironment(environment);\n\n        Aws::Lambda::Model::UpdateFunctionConfigurationOutcome outcome = client.UpdateFunctionConfiguration(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda configuration was successfully updated.\"\n                      << std::endl;\n            break;\n        }\n\n        else {\n            std::cerr << \"Error with Lambda::UpdateFunctionConfiguration. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n\n",
                                    "  4.SDK for C++ :         Aws::Client::ClientConfiguration clientConfig;\n        // Optional: Set to the AWS Region in which the bucket was created (overrides config file).\n        // clientConfig.region = \"us-east-1\";\n\n    Aws::Lambda::LambdaClient client(clientConfig);\n\n        Aws::Lambda::Model::UpdateFunctionConfigurationRequest request;\n        request.SetFunctionName(LAMBDA_NAME);\n        Aws::Lambda::Model::Environment environment;\n        environment.AddVariables(\"LOG_LEVEL\", \"DEBUG\");\n        request.SetEnvironment(environment);\n\n        Aws::Lambda::Model::UpdateFunctionConfigurationOutcome outcome = client.UpdateFunctionConfiguration(\n                request);\n\n        if (outcome.IsSuccess()) {\n            std::cout << \"The lambda configuration was successfully updated.\"\n                      << std::endl;\n            break;\n        }\n\n        else {\n            std::cerr << \"Error with Lambda::UpdateFunctionConfiguration. \"\n                      << outcome.GetError().GetMessage()\n                      << std::endl;\n        }\n\n",
                                    "  5.CLI : update-function-configuration",
                                    "  6.AWS CLI : update-function-configuration",
                                    "  7.Go : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// UpdateFunctionConfiguration updates a map of environment variables configured for\n// the Lambda function specified by functionName.\nfunc (wrapper FunctionWrapper) UpdateFunctionConfiguration(ctx context.Context, functionName string, envVars map[string]string) {\n\t_, err := wrapper.LambdaClient.UpdateFunctionConfiguration(ctx, &lambda.UpdateFunctionConfigurationInput{\n\t\tFunctionName: aws.String(functionName),\n\t\tEnvironment:  &types.Environment{Variables: envVars},\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't update configuration for %v. Here's why: %v\", functionName, err)\n\t}\n}\n\n\n",
                                    "  8.SDK for Go V2 : \nimport (\n\t\"bytes\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"errors\"\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/service/lambda/types\"\n)\n\n// FunctionWrapper encapsulates function actions used in the examples.\n// It contains an AWS Lambda service client that is used to perform user actions.\ntype FunctionWrapper struct {\n\tLambdaClient *lambda.Client\n}\n\n\n\n// UpdateFunctionConfiguration updates a map of environment variables configured for\n// the Lambda function specified by functionName.\nfunc (wrapper FunctionWrapper) UpdateFunctionConfiguration(ctx context.Context, functionName string, envVars map[string]string) {\n\t_, err := wrapper.LambdaClient.UpdateFunctionConfiguration(ctx, &lambda.UpdateFunctionConfigurationInput{\n\t\tFunctionName: aws.String(functionName),\n\t\tEnvironment:  &types.Environment{Variables: envVars},\n\t})\n\tif err != nil {\n\t\tlog.Panicf(\"Couldn't update configuration for %v. Here's why: %v\", functionName, err)\n\t}\n}\n\n\n",
                                    "  9.Java :     /**\n     * Updates the configuration of an AWS Lambda function.\n     *\n     * @param awsLambda     the {@link LambdaClient} instance to use for the AWS Lambda operation\n     * @param functionName  the name of the AWS Lambda function to update\n     * @param handler       the new handler for the AWS Lambda function\n     *\n     * @throws LambdaException if there is an error while updating the function configuration\n     */\n    public static void updateFunctionConfiguration(LambdaClient awsLambda, String functionName, String handler) {\n        try {\n            UpdateFunctionConfigurationRequest configurationRequest = UpdateFunctionConfigurationRequest.builder()\n                .functionName(functionName)\n                .handler(handler)\n                .runtime(Runtime.JAVA17)\n                .build();\n\n            awsLambda.updateFunctionConfiguration(configurationRequest);\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  10.SDK for Java 2.x :     /**\n     * Updates the configuration of an AWS Lambda function.\n     *\n     * @param awsLambda     the {@link LambdaClient} instance to use for the AWS Lambda operation\n     * @param functionName  the name of the AWS Lambda function to update\n     * @param handler       the new handler for the AWS Lambda function\n     *\n     * @throws LambdaException if there is an error while updating the function configuration\n     */\n    public static void updateFunctionConfiguration(LambdaClient awsLambda, String functionName, String handler) {\n        try {\n            UpdateFunctionConfigurationRequest configurationRequest = UpdateFunctionConfigurationRequest.builder()\n                .functionName(functionName)\n                .handler(handler)\n                .runtime(Runtime.JAVA17)\n                .build();\n\n            awsLambda.updateFunctionConfiguration(configurationRequest);\n\n        } catch (LambdaException e) {\n            System.err.println(e.getMessage());\n            System.exit(1);\n        }\n    }\n\n",
                                    "  11.JavaScript : const updateFunctionConfiguration = (funcName) => {\n  const client = new LambdaClient({});\n  const config = readFileSync(`${dirname}../functions/config.json`).toString();\n  const command = new UpdateFunctionConfigurationCommand({\n    ...JSON.parse(config),\n    FunctionName: funcName,\n  });\n  const result = client.send(command);\n  waitForFunctionUpdated({ FunctionName: funcName });\n  return result;\n};\n\n",
                                    "  12.SDK for JavaScript (v3) : const updateFunctionConfiguration = (funcName) => {\n  const client = new LambdaClient({});\n  const config = readFileSync(`${dirname}../functions/config.json`).toString();\n  const command = new UpdateFunctionConfigurationCommand({\n    ...JSON.parse(config),\n    FunctionName: funcName,\n  });\n  const result = client.send(command);\n  waitForFunctionUpdated({ FunctionName: funcName });\n  return result;\n};\n\n",
                                    "  13.PHP :     public function updateFunctionConfiguration($functionName, $handler, $environment = '')\n    {\n        return $this->lambdaClient->updateFunctionConfiguration([\n            'FunctionName' => $functionName,\n            'Handler' => \"$handler.lambda_handler\",\n            'Environment' => $environment,\n        ]);\n    }\n\n",
                                    "  14.SDK for PHP :     public function updateFunctionConfiguration($functionName, $handler, $environment = '')\n    {\n        return $this->lambdaClient->updateFunctionConfiguration([\n            'FunctionName' => $functionName,\n            'Handler' => \"$handler.lambda_handler\",\n            'Environment' => $environment,\n        ]);\n    }\n\n",
                                    "  15.PowerShell : Update-LMFunctionConfiguration -FunctionName \"MylambdaFunction123\" -Handler \"lambda_function.launch_instance\" -Timeout 600 -Environment_Variable @{ \"envvar1\"=\"value\";\"envvar2\"=\"value\" } -Role arn:aws:iam::123456789101:role/service-role/lambda -DeadLetterConfig_TargetArn arn:aws:sns:us-east-1: 123456789101:MyfirstTopic\n",
                                    "  16.Tools for PowerShell : Update-LMFunctionConfiguration -FunctionName \"MylambdaFunction123\" -Handler \"lambda_function.launch_instance\" -Timeout 600 -Environment_Variable @{ \"envvar1\"=\"value\";\"envvar2\"=\"value\" } -Role arn:aws:iam::123456789101:role/service-role/lambda -DeadLetterConfig_TargetArn arn:aws:sns:us-east-1: 123456789101:MyfirstTopic\n",
                                    "  17.Python : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def update_function_configuration(self, function_name, env_vars):\n        \"\"\"\n        Updates the environment variables for a Lambda function.\n\n        :param function_name: The name of the function to update.\n        :param env_vars: A dict of environment variables to update.\n        :return: Data about the update, including the status.\n        \"\"\"\n        try:\n            response = self.lambda_client.update_function_configuration(\n                FunctionName=function_name, Environment={\"Variables\": env_vars}\n            )\n        except ClientError as err:\n            logger.error(\n                \"Couldn't update function configuration %s. Here's why: %s: %s\",\n                function_name,\n                err.response[\"Error\"][\"Code\"],\n                err.response[\"Error\"][\"Message\"],\n            )\n            raise\n        else:\n            return response\n\n\n",
                                    "  18.SDK for Python (Boto3) : class LambdaWrapper:\n    def __init__(self, lambda_client, iam_resource):\n        self.lambda_client = lambda_client\n        self.iam_resource = iam_resource\n\n\n    def update_function_configuration(self, function_name, env_vars):\n        \"\"\"\n        Updates the environment variables for a Lambda function.\n\n        :param function_name: The name of the function to update.\n        :param env_vars: A dict of environment variables to update.\n        :return: Data about the update, including the status.\n        \"\"\"\n        try:\n            response = self.lambda_client.update_function_configuration(\n                FunctionName=function_name, Environment={\"Variables\": env_vars}\n            )\n        except ClientError as err:\n            logger.error(\n                \"Couldn't update function configuration %s. Here's why: %s: %s\",\n                function_name,\n                err.response[\"Error\"][\"Code\"],\n                err.response[\"Error\"][\"Message\"],\n            )\n            raise\n        else:\n            return response\n\n\n",
                                    "  19.Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Updates the environment variables for a Lambda function.\n  # @param function_name: The name of the function to update.\n  # @param log_level: The log level of the function.\n  # @return: Data about the update, including the status.\n  def update_function_configuration(function_name, log_level)\n    @lambda_client.update_function_configuration({\n                                                   function_name: function_name,\n                                                   environment: {\n                                                     variables: {\n                                                       'LOG_LEVEL' => log_level\n                                                     }\n                                                   }\n                                                 })\n    @lambda_client.wait_until(:function_updated_v2, { function_name: function_name }) do |w|\n      w.max_attempts = 5\n      w.delay = 5\n    end\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error updating configurations for #{function_name}:\\n #{e.message}\")\n  rescue Aws::Waiters::Errors::WaiterFailed => e\n    @logger.error(\"Failed waiting for #{function_name} to activate:\\n #{e.message}\")\n  end\n\n",
                                    "  20.SDK for Ruby : class LambdaWrapper\n  attr_accessor :lambda_client, :cloudwatch_client, :iam_client\n\n  def initialize\n    @lambda_client = Aws::Lambda::Client.new\n    @cloudwatch_client = Aws::CloudWatchLogs::Client.new(region: 'us-east-1')\n    @iam_client = Aws::IAM::Client.new(region: 'us-east-1')\n    @logger = Logger.new($stdout)\n    @logger.level = Logger::WARN\n  end\n\n  # Updates the environment variables for a Lambda function.\n  # @param function_name: The name of the function to update.\n  # @param log_level: The log level of the function.\n  # @return: Data about the update, including the status.\n  def update_function_configuration(function_name, log_level)\n    @lambda_client.update_function_configuration({\n                                                   function_name: function_name,\n                                                   environment: {\n                                                     variables: {\n                                                       'LOG_LEVEL' => log_level\n                                                     }\n                                                   }\n                                                 })\n    @lambda_client.wait_until(:function_updated_v2, { function_name: function_name }) do |w|\n      w.max_attempts = 5\n      w.delay = 5\n    end\n  rescue Aws::Lambda::Errors::ServiceException => e\n    @logger.error(\"There was an error updating configurations for #{function_name}:\\n #{e.message}\")\n  rescue Aws::Waiters::Errors::WaiterFailed => e\n    @logger.error(\"Failed waiting for #{function_name} to activate:\\n #{e.message}\")\n  end\n\n",
                                    "  21.Rust :     /** Update the environment for a function. */\n    pub async fn update_function_configuration(\n        &self,\n        environment: Environment,\n    ) -> Result<UpdateFunctionConfigurationOutput, anyhow::Error> {\n        info!(\n            ?environment,\n            \"Updating environment for {}\", self.lambda_name\n        );\n        let updated = self\n            .lambda_client\n            .update_function_configuration()\n            .function_name(self.lambda_name.clone())\n            .environment(environment)\n            .send()\n            .await\n            .map_err(anyhow::Error::from)?;\n\n        self.wait_for_function_ready().await?;\n\n        Ok(updated)\n    }\n\n",
                                    "  22.SDK for Rust :     /** Update the environment for a function. */\n    pub async fn update_function_configuration(\n        &self,\n        environment: Environment,\n    ) -> Result<UpdateFunctionConfigurationOutput, anyhow::Error> {\n        info!(\n            ?environment,\n            \"Updating environment for {}\", self.lambda_name\n        );\n        let updated = self\n            .lambda_client\n            .update_function_configuration()\n            .function_name(self.lambda_name.clone())\n            .environment(environment)\n            .send()\n            .await\n            .map_err(anyhow::Error::from)?;\n\n        self.wait_for_function_ready().await?;\n\n        Ok(updated)\n    }\n\n",
                                    "  23.SAP ABAP :     TRY.\n        oo_result = lo_lmd->updatefunctionconfiguration(     \" oo_result is returned for testing purposes. \"\n              iv_functionname = iv_function_name\n              iv_runtime = iv_runtime\n              iv_description  = 'Updated Lambda function'\n              iv_memorysize  = iv_memory_size\n          ).\n\n        MESSAGE 'Lambda function configuration/settings updated.' TYPE 'I'.\n      CATCH /aws1/cx_lmdcodesigningcfgno00.\n        MESSAGE 'Code signing configuration does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodeverification00.\n        MESSAGE 'Code signature failed one or more validation checks for signature mismatch or expiration.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvalidcodesigex.\n        MESSAGE 'Code signature failed the integrity check.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "  24.SDK for SAP ABAP :     TRY.\n        oo_result = lo_lmd->updatefunctionconfiguration(     \" oo_result is returned for testing purposes. \"\n              iv_functionname = iv_function_name\n              iv_runtime = iv_runtime\n              iv_description  = 'Updated Lambda function'\n              iv_memorysize  = iv_memory_size\n          ).\n\n        MESSAGE 'Lambda function configuration/settings updated.' TYPE 'I'.\n      CATCH /aws1/cx_lmdcodesigningcfgno00.\n        MESSAGE 'Code signing configuration does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdcodeverification00.\n        MESSAGE 'Code signature failed one or more validation checks for signature mismatch or expiration.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvalidcodesigex.\n        MESSAGE 'Code signature failed the integrity check.' TYPE 'E'.\n      CATCH /aws1/cx_lmdinvparamvalueex.\n        MESSAGE 'The request contains a non-valid parameter.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourceconflictex.\n        MESSAGE 'Resource already exists or another operation is in progress.' TYPE 'E'.\n      CATCH /aws1/cx_lmdresourcenotfoundex.\n        MESSAGE 'The requested resource does not exist.' TYPE 'E'.\n      CATCH /aws1/cx_lmdserviceexception.\n        MESSAGE 'An internal problem was encountered by the AWS Lambda service.' TYPE 'E'.\n      CATCH /aws1/cx_lmdtoomanyrequestsex.\n        MESSAGE 'The maximum request throughput was reached.' TYPE 'E'.\n    ENDTRY.\n\n",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "anchor",
                                    "  1.AWS SDK for .NET :     /// <summary>\n    /// Update the code of a Lambda function.\n    /// </summary>\n    /// <param name=\"functionName\">The name of the function to update.</param>\n    /// <param name=\"functionHandler\">The code that performs the function's actions.</param>\n    /// <param name=\"environmentVariables\">A dictionary of environment variables.</param>\n    /// <returns>A Boolean value indicating the success of the action.</returns>\n    public async Task<bool> UpdateFunctionConfigurationAsync(\n        string functionName,\n        string functionHandler,\n        Dictionary<string, string> environmentVariables)\n    {\n        var request = new UpdateFunctionConfigurationRequest\n        {\n            Handler = functionHandler,\n            FunctionName = functionName,\n            Environment = new Amazon.Lambda.Model.Environment { Variables = environmentVariables },\n        };\n\n        var response = await _lambdaService.UpdateFunctionConfigurationAsync(request);\n\n        Console.WriteLine(response.LastModified);\n\n        return response.HttpStatusCode == System.Net.HttpStatusCode.OK;\n    }\n\n\n",
                                    "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                                ]
                            }
                        ],
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples demonstrate how to perform individual Lambda        actions with AWS SDKs. Each example includes        a link to GitHub, where you can find instructions for setting up and running the code.    ",
                            "These excerpts call the Lambda API and        are code excerpts from larger programs that must be run in context.        You can see actions in context in        Scenarios for            Lambda using AWS SDKs        .    ",
                            "        The following examples include only the most commonly used actions.        For a complete list, see the        AWS Lambda API Reference.    ",
                            "Examples"
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "The following code examples show how to use the basics of AWS Lambda with AWS    SDKs.",
                    "Examples"
                ]
            },
            {
                "title": "Scenarios",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples_scenarios.html",
                "contents": [
                    {
                        "title": "Automatically confirm known users with a Lambda function",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_CognitoAutoConfirmUser_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to automatically confirm known Amazon Cognito users with a Lambda function.",
                            "  1.Configure a user pool to call a Lambda function for the PreSignUp trigger.",
                            "  2.Sign up a user with Amazon Cognito.",
                            "  3.The Lambda function scans a DynamoDB table and automatically confirms known users.",
                            "  4.Sign in as the new user, then clean up resources.",
                            "  1.Go : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// AutoConfirm separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype AutoConfirm struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewAutoConfirm constructs a new auto confirm runner.\nfunc NewAutoConfirm(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) AutoConfirm {\n\tscenario := AutoConfirm{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddPreSignUpTrigger adds a Lambda handler as an invocation target for the PreSignUp trigger.\nfunc (runner *AutoConfirm) AddPreSignUpTrigger(ctx context.Context, userPoolId string, functionArn string) {\n\tlog.Printf(\"Let's add a Lambda function to handle the PreSignUp trigger from Cognito.\\n\" +\n\t\t\"This trigger happens when a user signs up, and lets your function take action before the main Cognito\\n\" +\n\t\t\"sign up processing occurs.\\n\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.PreSignUp, HandlerArn: aws.String(functionArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle the PreSignUp trigger.\\n\",\n\t\tfunctionArn, userPoolId)\n}\n\n// SignUpUser signs up a user from the known user table with a password you specify.\nfunc (runner *AutoConfirm) SignUpUser(ctx context.Context, clientId string, usersTable string) (string, string) {\n\tlog.Println(\"Let's sign up a user to your Cognito user pool. When the user's email matches an email in the\\n\" +\n\t\t\"DynamoDB known users table, it is automatically verified and the user is confirmed.\")\n\n\tknownUsers, err := runner.helper.GetKnownUsers(ctx, usersTable)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tuserChoice := runner.questioner.AskChoice(\"Which user do you want to use?\\n\", knownUsers.UserNameList())\n\tuser := knownUsers.Users[userChoice]\n\n\tvar signedUp bool\n\tvar userConfirmed bool\n\tpassword := runner.questioner.AskPassword(\"Enter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !signedUp {\n\t\tlog.Printf(\"Signing up user '%v' with email '%v' to Cognito.\\n\", user.UserName, user.UserEmail)\n\t\tuserConfirmed, err = runner.cognitoActor.SignUp(ctx, clientId, user.UserName, password, user.UserEmail)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"Enter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tsignedUp = true\n\t\t}\n\t}\n\tlog.Printf(\"User %v signed up, confirmed = %v.\\n\", user.UserName, userConfirmed)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\treturn user.UserName, password\n}\n\n// SignInUser signs in a user.\nfunc (runner *AutoConfirm) SignInUser(ctx context.Context, clientId string, userName string, password string) string {\n\trunner.questioner.Ask(\"Press Enter when you're ready to continue.\")\n\tlog.Printf(\"Let's sign in as %v...\\n\", userName)\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, userName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Successfully signed in. Your access token starts with: %v...\\n\", (*authResult.AccessToken)[:10])\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn *authResult.AccessToken\n}\n\n// Run runs the scenario.\nfunc (runner *AutoConfirm) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\trunner.helper.PopulateUserTable(ctx, stackOutputs[\"TableName\"])\n\n\trunner.AddPreSignUpTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"AutoConfirmFunctionArn\"])\n\trunner.resources.triggers = append(runner.resources.triggers, actions.PreSignUp)\n\tuserName, password := runner.SignUpUser(ctx, stackOutputs[\"UserPoolClientId\"], stackOutputs[\"TableName\"])\n\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"AutoConfirmFunction\"])\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens,\n\t\trunner.SignInUser(ctx, stackOutputs[\"UserPoolClientId\"], userName, password))\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "  2.SDK for Go V2 : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// AutoConfirm separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype AutoConfirm struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewAutoConfirm constructs a new auto confirm runner.\nfunc NewAutoConfirm(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) AutoConfirm {\n\tscenario := AutoConfirm{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddPreSignUpTrigger adds a Lambda handler as an invocation target for the PreSignUp trigger.\nfunc (runner *AutoConfirm) AddPreSignUpTrigger(ctx context.Context, userPoolId string, functionArn string) {\n\tlog.Printf(\"Let's add a Lambda function to handle the PreSignUp trigger from Cognito.\\n\" +\n\t\t\"This trigger happens when a user signs up, and lets your function take action before the main Cognito\\n\" +\n\t\t\"sign up processing occurs.\\n\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.PreSignUp, HandlerArn: aws.String(functionArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle the PreSignUp trigger.\\n\",\n\t\tfunctionArn, userPoolId)\n}\n\n// SignUpUser signs up a user from the known user table with a password you specify.\nfunc (runner *AutoConfirm) SignUpUser(ctx context.Context, clientId string, usersTable string) (string, string) {\n\tlog.Println(\"Let's sign up a user to your Cognito user pool. When the user's email matches an email in the\\n\" +\n\t\t\"DynamoDB known users table, it is automatically verified and the user is confirmed.\")\n\n\tknownUsers, err := runner.helper.GetKnownUsers(ctx, usersTable)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tuserChoice := runner.questioner.AskChoice(\"Which user do you want to use?\\n\", knownUsers.UserNameList())\n\tuser := knownUsers.Users[userChoice]\n\n\tvar signedUp bool\n\tvar userConfirmed bool\n\tpassword := runner.questioner.AskPassword(\"Enter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !signedUp {\n\t\tlog.Printf(\"Signing up user '%v' with email '%v' to Cognito.\\n\", user.UserName, user.UserEmail)\n\t\tuserConfirmed, err = runner.cognitoActor.SignUp(ctx, clientId, user.UserName, password, user.UserEmail)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"Enter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tsignedUp = true\n\t\t}\n\t}\n\tlog.Printf(\"User %v signed up, confirmed = %v.\\n\", user.UserName, userConfirmed)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\treturn user.UserName, password\n}\n\n// SignInUser signs in a user.\nfunc (runner *AutoConfirm) SignInUser(ctx context.Context, clientId string, userName string, password string) string {\n\trunner.questioner.Ask(\"Press Enter when you're ready to continue.\")\n\tlog.Printf(\"Let's sign in as %v...\\n\", userName)\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, userName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Successfully signed in. Your access token starts with: %v...\\n\", (*authResult.AccessToken)[:10])\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn *authResult.AccessToken\n}\n\n// Run runs the scenario.\nfunc (runner *AutoConfirm) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\trunner.helper.PopulateUserTable(ctx, stackOutputs[\"TableName\"])\n\n\trunner.AddPreSignUpTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"AutoConfirmFunctionArn\"])\n\trunner.resources.triggers = append(runner.resources.triggers, actions.PreSignUp)\n\tuserName, password := runner.SignUpUser(ctx, stackOutputs[\"UserPoolClientId\"], stackOutputs[\"TableName\"])\n\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"AutoConfirmFunction\"])\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens,\n\t\trunner.SignInUser(ctx, stackOutputs[\"UserPoolClientId\"], userName, password))\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "  3.JavaScript : import { AutoConfirm } from \"./scenario-auto-confirm.js\";\n\n/**\n * The context is passed to every scenario. Scenario steps\n * will modify the context.\n */\nconst context = {\n  errors: [],\n  users: [\n    {\n      UserName: \"test_user_1\",\n      UserEmail: \"test_email_1@example.com\",\n    },\n    {\n      UserName: \"test_user_2\",\n      UserEmail: \"test_email_2@example.com\",\n    },\n    {\n      UserName: \"test_user_3\",\n      UserEmail: \"test_email_3@example.com\",\n    },\n  ],\n};\n\n/**\n * Three Scenarios are created for the workflow. A Scenario is an orchestration class\n * that simplifies running a series of steps.\n */\nexport const scenarios = {\n  // Demonstrate automatically confirming known users in a database.\n  \"auto-confirm\": AutoConfirm(context),\n};\n\n// Call function if run directly\nimport { fileURLToPath } from \"node:url\";\nimport { parseScenarioArgs } from \"@aws-doc-sdk-examples/lib/scenario/index.js\";\n\nif (process.argv[1] === fileURLToPath(import.meta.url)) {\n  parseScenarioArgs(scenarios, {\n    name: \"Cognito user pools and triggers\",\n    description:\n      \"Demonstrate how to use the AWS SDKs to customize Amazon Cognito authentication behavior.\",\n  });\n}\n\n",
                            "  4.SDK for JavaScript (v3) : import { AutoConfirm } from \"./scenario-auto-confirm.js\";\n\n/**\n * The context is passed to every scenario. Scenario steps\n * will modify the context.\n */\nconst context = {\n  errors: [],\n  users: [\n    {\n      UserName: \"test_user_1\",\n      UserEmail: \"test_email_1@example.com\",\n    },\n    {\n      UserName: \"test_user_2\",\n      UserEmail: \"test_email_2@example.com\",\n    },\n    {\n      UserName: \"test_user_3\",\n      UserEmail: \"test_email_3@example.com\",\n    },\n  ],\n};\n\n/**\n * Three Scenarios are created for the workflow. A Scenario is an orchestration class\n * that simplifies running a series of steps.\n */\nexport const scenarios = {\n  // Demonstrate automatically confirming known users in a database.\n  \"auto-confirm\": AutoConfirm(context),\n};\n\n// Call function if run directly\nimport { fileURLToPath } from \"node:url\";\nimport { parseScenarioArgs } from \"@aws-doc-sdk-examples/lib/scenario/index.js\";\n\nif (process.argv[1] === fileURLToPath(import.meta.url)) {\n  parseScenarioArgs(scenarios, {\n    name: \"Cognito user pools and triggers\",\n    description:\n      \"Demonstrate how to use the AWS SDKs to customize Amazon Cognito authentication behavior.\",\n  });\n}\n\n",
                            "anchor",
                            "anchor",
                            "  1.SDK for Go V2 : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// AutoConfirm separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype AutoConfirm struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewAutoConfirm constructs a new auto confirm runner.\nfunc NewAutoConfirm(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) AutoConfirm {\n\tscenario := AutoConfirm{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddPreSignUpTrigger adds a Lambda handler as an invocation target for the PreSignUp trigger.\nfunc (runner *AutoConfirm) AddPreSignUpTrigger(ctx context.Context, userPoolId string, functionArn string) {\n\tlog.Printf(\"Let's add a Lambda function to handle the PreSignUp trigger from Cognito.\\n\" +\n\t\t\"This trigger happens when a user signs up, and lets your function take action before the main Cognito\\n\" +\n\t\t\"sign up processing occurs.\\n\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.PreSignUp, HandlerArn: aws.String(functionArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle the PreSignUp trigger.\\n\",\n\t\tfunctionArn, userPoolId)\n}\n\n// SignUpUser signs up a user from the known user table with a password you specify.\nfunc (runner *AutoConfirm) SignUpUser(ctx context.Context, clientId string, usersTable string) (string, string) {\n\tlog.Println(\"Let's sign up a user to your Cognito user pool. When the user's email matches an email in the\\n\" +\n\t\t\"DynamoDB known users table, it is automatically verified and the user is confirmed.\")\n\n\tknownUsers, err := runner.helper.GetKnownUsers(ctx, usersTable)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tuserChoice := runner.questioner.AskChoice(\"Which user do you want to use?\\n\", knownUsers.UserNameList())\n\tuser := knownUsers.Users[userChoice]\n\n\tvar signedUp bool\n\tvar userConfirmed bool\n\tpassword := runner.questioner.AskPassword(\"Enter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !signedUp {\n\t\tlog.Printf(\"Signing up user '%v' with email '%v' to Cognito.\\n\", user.UserName, user.UserEmail)\n\t\tuserConfirmed, err = runner.cognitoActor.SignUp(ctx, clientId, user.UserName, password, user.UserEmail)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"Enter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tsignedUp = true\n\t\t}\n\t}\n\tlog.Printf(\"User %v signed up, confirmed = %v.\\n\", user.UserName, userConfirmed)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\treturn user.UserName, password\n}\n\n// SignInUser signs in a user.\nfunc (runner *AutoConfirm) SignInUser(ctx context.Context, clientId string, userName string, password string) string {\n\trunner.questioner.Ask(\"Press Enter when you're ready to continue.\")\n\tlog.Printf(\"Let's sign in as %v...\\n\", userName)\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, userName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Successfully signed in. Your access token starts with: %v...\\n\", (*authResult.AccessToken)[:10])\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn *authResult.AccessToken\n}\n\n// Run runs the scenario.\nfunc (runner *AutoConfirm) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\trunner.helper.PopulateUserTable(ctx, stackOutputs[\"TableName\"])\n\n\trunner.AddPreSignUpTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"AutoConfirmFunctionArn\"])\n\trunner.resources.triggers = append(runner.resources.triggers, actions.PreSignUp)\n\tuserName, password := runner.SignUpUser(ctx, stackOutputs[\"UserPoolClientId\"], stackOutputs[\"TableName\"])\n\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"AutoConfirmFunction\"])\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens,\n\t\trunner.SignInUser(ctx, stackOutputs[\"UserPoolClientId\"], userName, password))\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Automatically migrate known users with a Lambda function",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_CognitoAutoMigrateUser_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to automatically migrate known Amazon Cognito users with a Lambda function.",
                            "  1.Configure a user pool to call a Lambda function for the MigrateUser trigger.",
                            "  2.Sign in to Amazon Cognito with a username and email that is not in the user pool.",
                            "  3.The Lambda function scans a DynamoDB table and automatically migrates known users to the user pool.",
                            "  4.Perform the forgot password flow to reset the password for the migrated user.",
                            "  5.Sign in as the new user, then clean up resources.",
                            "  1.Go : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// MigrateUser separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype MigrateUser struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewMigrateUser constructs a new migrate user runner.\nfunc NewMigrateUser(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) MigrateUser {\n\tscenario := MigrateUser{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddMigrateUserTrigger adds a Lambda handler as an invocation target for the MigrateUser trigger.\nfunc (runner *MigrateUser) AddMigrateUserTrigger(ctx context.Context, userPoolId string, functionArn string) {\n\tlog.Printf(\"Let's add a Lambda function to handle the MigrateUser trigger from Cognito.\\n\" +\n\t\t\"This trigger happens when an unknown user signs in, and lets your function take action before Cognito\\n\" +\n\t\t\"rejects the user.\\n\\n\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.UserMigration, HandlerArn: aws.String(functionArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle the MigrateUser trigger.\\n\",\n\t\tfunctionArn, userPoolId)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// SignInUser adds a new user to the known users table and signs that user in to Amazon Cognito.\nfunc (runner *MigrateUser) SignInUser(ctx context.Context, usersTable string, clientId string) (bool, actions.User) {\n\tlog.Println(\"Let's sign in a user to your Cognito user pool. When the username and email matches an entry in the\\n\" +\n\t\t\"DynamoDB known users table, the email is automatically verified and the user is migrated to the Cognito user pool.\")\n\n\tuser := actions.User{}\n\tuser.UserName = runner.questioner.Ask(\"\\nEnter a username:\")\n\tuser.UserEmail = runner.questioner.Ask(\"\\nEnter an email that you own. This email will be used to confirm user migration\\n\" +\n\t\t\"during this example:\")\n\n\trunner.helper.AddKnownUser(ctx, usersTable, user)\n\n\tvar err error\n\tvar resetRequired *types.PasswordResetRequiredException\n\tvar authResult *types.AuthenticationResultType\n\tsignedIn := false\n\tfor !signedIn && resetRequired == nil {\n\t\tlog.Printf(\"Signing in to Cognito as user '%v'. The expected result is a PasswordResetRequiredException.\\n\\n\", user.UserName)\n\t\tauthResult, err = runner.cognitoActor.SignIn(ctx, clientId, user.UserName, \"_\")\n\t\tif err != nil {\n\t\t\tif errors.As(err, &resetRequired) {\n\t\t\t\tlog.Printf(\"\\nUser '%v' is not in the Cognito user pool but was found in the DynamoDB known users table.\\n\"+\n\t\t\t\t\t\"User migration is started and a password reset is required.\", user.UserName)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Printf(\"User '%v' successfully signed in. This is unexpected and probably means you have not\\n\"+\n\t\t\t\t\"cleaned up a previous run of this scenario, so the user exist in the Cognito user pool.\\n\"+\n\t\t\t\t\"You can continue this example and select to clean up resources, or manually remove\\n\"+\n\t\t\t\t\"the user from your user pool and try again.\", user.UserName)\n\t\t\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n\t\t\tsignedIn = true\n\t\t}\n\t}\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn resetRequired != nil, user\n}\n\n// ResetPassword starts a password recovery flow.\nfunc (runner *MigrateUser) ResetPassword(ctx context.Context, clientId string, user actions.User) {\n\twantCode := runner.questioner.AskBool(fmt.Sprintf(\"In order to migrate the user to Cognito, you must be able to receive a confirmation\\n\"+\n\t\t\"code by email at %v. Do you want to send a code (y/n)?\", user.UserEmail), \"y\")\n\tif !wantCode {\n\t\tlog.Println(\"To complete this example and successfully migrate a user to Cognito, you must enter an email\\n\" +\n\t\t\t\"you own that can receive a confirmation code.\")\n\t\treturn\n\t}\n\tcodeDelivery, err := runner.cognitoActor.ForgotPassword(ctx, clientId, user.UserName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"\\nA confirmation code has been sent to %v.\", *codeDelivery.Destination)\n\tcode := runner.questioner.Ask(\"Check your email and enter it here:\")\n\n\tconfirmed := false\n\tpassword := runner.questioner.AskPassword(\"\\nEnter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !confirmed {\n\t\tlog.Printf(\"\\nConfirming password reset for user '%v'.\\n\", user.UserName)\n\t\terr = runner.cognitoActor.ConfirmForgotPassword(ctx, clientId, code, user.UserName, password)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"\\nEnter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tconfirmed = true\n\t\t}\n\t}\n\tlog.Printf(\"User '%v' successfully confirmed and migrated.\\n\", user.UserName)\n\tlog.Println(\"Signing in with your username and password...\")\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, user.UserName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Successfully signed in. Your access token starts with: %v...\\n\", (*authResult.AccessToken)[:10])\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// Run runs the scenario.\nfunc (runner *MigrateUser) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\n\trunner.AddMigrateUserTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"MigrateUserFunctionArn\"])\n\trunner.resources.triggers = append(runner.resources.triggers, actions.UserMigration)\n\tresetNeeded, user := runner.SignInUser(ctx, stackOutputs[\"TableName\"], stackOutputs[\"UserPoolClientId\"])\n\tif resetNeeded {\n\t\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"MigrateUserFunction\"])\n\t\trunner.ResetPassword(ctx, stackOutputs[\"UserPoolClientId\"], user)\n\t}\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "  2.SDK for Go V2 : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// MigrateUser separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype MigrateUser struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewMigrateUser constructs a new migrate user runner.\nfunc NewMigrateUser(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) MigrateUser {\n\tscenario := MigrateUser{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddMigrateUserTrigger adds a Lambda handler as an invocation target for the MigrateUser trigger.\nfunc (runner *MigrateUser) AddMigrateUserTrigger(ctx context.Context, userPoolId string, functionArn string) {\n\tlog.Printf(\"Let's add a Lambda function to handle the MigrateUser trigger from Cognito.\\n\" +\n\t\t\"This trigger happens when an unknown user signs in, and lets your function take action before Cognito\\n\" +\n\t\t\"rejects the user.\\n\\n\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.UserMigration, HandlerArn: aws.String(functionArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle the MigrateUser trigger.\\n\",\n\t\tfunctionArn, userPoolId)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// SignInUser adds a new user to the known users table and signs that user in to Amazon Cognito.\nfunc (runner *MigrateUser) SignInUser(ctx context.Context, usersTable string, clientId string) (bool, actions.User) {\n\tlog.Println(\"Let's sign in a user to your Cognito user pool. When the username and email matches an entry in the\\n\" +\n\t\t\"DynamoDB known users table, the email is automatically verified and the user is migrated to the Cognito user pool.\")\n\n\tuser := actions.User{}\n\tuser.UserName = runner.questioner.Ask(\"\\nEnter a username:\")\n\tuser.UserEmail = runner.questioner.Ask(\"\\nEnter an email that you own. This email will be used to confirm user migration\\n\" +\n\t\t\"during this example:\")\n\n\trunner.helper.AddKnownUser(ctx, usersTable, user)\n\n\tvar err error\n\tvar resetRequired *types.PasswordResetRequiredException\n\tvar authResult *types.AuthenticationResultType\n\tsignedIn := false\n\tfor !signedIn && resetRequired == nil {\n\t\tlog.Printf(\"Signing in to Cognito as user '%v'. The expected result is a PasswordResetRequiredException.\\n\\n\", user.UserName)\n\t\tauthResult, err = runner.cognitoActor.SignIn(ctx, clientId, user.UserName, \"_\")\n\t\tif err != nil {\n\t\t\tif errors.As(err, &resetRequired) {\n\t\t\t\tlog.Printf(\"\\nUser '%v' is not in the Cognito user pool but was found in the DynamoDB known users table.\\n\"+\n\t\t\t\t\t\"User migration is started and a password reset is required.\", user.UserName)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Printf(\"User '%v' successfully signed in. This is unexpected and probably means you have not\\n\"+\n\t\t\t\t\"cleaned up a previous run of this scenario, so the user exist in the Cognito user pool.\\n\"+\n\t\t\t\t\"You can continue this example and select to clean up resources, or manually remove\\n\"+\n\t\t\t\t\"the user from your user pool and try again.\", user.UserName)\n\t\t\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n\t\t\tsignedIn = true\n\t\t}\n\t}\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn resetRequired != nil, user\n}\n\n// ResetPassword starts a password recovery flow.\nfunc (runner *MigrateUser) ResetPassword(ctx context.Context, clientId string, user actions.User) {\n\twantCode := runner.questioner.AskBool(fmt.Sprintf(\"In order to migrate the user to Cognito, you must be able to receive a confirmation\\n\"+\n\t\t\"code by email at %v. Do you want to send a code (y/n)?\", user.UserEmail), \"y\")\n\tif !wantCode {\n\t\tlog.Println(\"To complete this example and successfully migrate a user to Cognito, you must enter an email\\n\" +\n\t\t\t\"you own that can receive a confirmation code.\")\n\t\treturn\n\t}\n\tcodeDelivery, err := runner.cognitoActor.ForgotPassword(ctx, clientId, user.UserName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"\\nA confirmation code has been sent to %v.\", *codeDelivery.Destination)\n\tcode := runner.questioner.Ask(\"Check your email and enter it here:\")\n\n\tconfirmed := false\n\tpassword := runner.questioner.AskPassword(\"\\nEnter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !confirmed {\n\t\tlog.Printf(\"\\nConfirming password reset for user '%v'.\\n\", user.UserName)\n\t\terr = runner.cognitoActor.ConfirmForgotPassword(ctx, clientId, code, user.UserName, password)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"\\nEnter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tconfirmed = true\n\t\t}\n\t}\n\tlog.Printf(\"User '%v' successfully confirmed and migrated.\\n\", user.UserName)\n\tlog.Println(\"Signing in with your username and password...\")\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, user.UserName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Successfully signed in. Your access token starts with: %v...\\n\", (*authResult.AccessToken)[:10])\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// Run runs the scenario.\nfunc (runner *MigrateUser) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\n\trunner.AddMigrateUserTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"MigrateUserFunctionArn\"])\n\trunner.resources.triggers = append(runner.resources.triggers, actions.UserMigration)\n\tresetNeeded, user := runner.SignInUser(ctx, stackOutputs[\"TableName\"], stackOutputs[\"UserPoolClientId\"])\n\tif resetNeeded {\n\t\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"MigrateUserFunction\"])\n\t\trunner.ResetPassword(ctx, stackOutputs[\"UserPoolClientId\"], user)\n\t}\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "anchor",
                            "  1.SDK for Go V2 : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// MigrateUser separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype MigrateUser struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewMigrateUser constructs a new migrate user runner.\nfunc NewMigrateUser(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) MigrateUser {\n\tscenario := MigrateUser{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddMigrateUserTrigger adds a Lambda handler as an invocation target for the MigrateUser trigger.\nfunc (runner *MigrateUser) AddMigrateUserTrigger(ctx context.Context, userPoolId string, functionArn string) {\n\tlog.Printf(\"Let's add a Lambda function to handle the MigrateUser trigger from Cognito.\\n\" +\n\t\t\"This trigger happens when an unknown user signs in, and lets your function take action before Cognito\\n\" +\n\t\t\"rejects the user.\\n\\n\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.UserMigration, HandlerArn: aws.String(functionArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle the MigrateUser trigger.\\n\",\n\t\tfunctionArn, userPoolId)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// SignInUser adds a new user to the known users table and signs that user in to Amazon Cognito.\nfunc (runner *MigrateUser) SignInUser(ctx context.Context, usersTable string, clientId string) (bool, actions.User) {\n\tlog.Println(\"Let's sign in a user to your Cognito user pool. When the username and email matches an entry in the\\n\" +\n\t\t\"DynamoDB known users table, the email is automatically verified and the user is migrated to the Cognito user pool.\")\n\n\tuser := actions.User{}\n\tuser.UserName = runner.questioner.Ask(\"\\nEnter a username:\")\n\tuser.UserEmail = runner.questioner.Ask(\"\\nEnter an email that you own. This email will be used to confirm user migration\\n\" +\n\t\t\"during this example:\")\n\n\trunner.helper.AddKnownUser(ctx, usersTable, user)\n\n\tvar err error\n\tvar resetRequired *types.PasswordResetRequiredException\n\tvar authResult *types.AuthenticationResultType\n\tsignedIn := false\n\tfor !signedIn && resetRequired == nil {\n\t\tlog.Printf(\"Signing in to Cognito as user '%v'. The expected result is a PasswordResetRequiredException.\\n\\n\", user.UserName)\n\t\tauthResult, err = runner.cognitoActor.SignIn(ctx, clientId, user.UserName, \"_\")\n\t\tif err != nil {\n\t\t\tif errors.As(err, &resetRequired) {\n\t\t\t\tlog.Printf(\"\\nUser '%v' is not in the Cognito user pool but was found in the DynamoDB known users table.\\n\"+\n\t\t\t\t\t\"User migration is started and a password reset is required.\", user.UserName)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tlog.Printf(\"User '%v' successfully signed in. This is unexpected and probably means you have not\\n\"+\n\t\t\t\t\"cleaned up a previous run of this scenario, so the user exist in the Cognito user pool.\\n\"+\n\t\t\t\t\"You can continue this example and select to clean up resources, or manually remove\\n\"+\n\t\t\t\t\"the user from your user pool and try again.\", user.UserName)\n\t\t\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n\t\t\tsignedIn = true\n\t\t}\n\t}\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\treturn resetRequired != nil, user\n}\n\n// ResetPassword starts a password recovery flow.\nfunc (runner *MigrateUser) ResetPassword(ctx context.Context, clientId string, user actions.User) {\n\twantCode := runner.questioner.AskBool(fmt.Sprintf(\"In order to migrate the user to Cognito, you must be able to receive a confirmation\\n\"+\n\t\t\"code by email at %v. Do you want to send a code (y/n)?\", user.UserEmail), \"y\")\n\tif !wantCode {\n\t\tlog.Println(\"To complete this example and successfully migrate a user to Cognito, you must enter an email\\n\" +\n\t\t\t\"you own that can receive a confirmation code.\")\n\t\treturn\n\t}\n\tcodeDelivery, err := runner.cognitoActor.ForgotPassword(ctx, clientId, user.UserName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"\\nA confirmation code has been sent to %v.\", *codeDelivery.Destination)\n\tcode := runner.questioner.Ask(\"Check your email and enter it here:\")\n\n\tconfirmed := false\n\tpassword := runner.questioner.AskPassword(\"\\nEnter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !confirmed {\n\t\tlog.Printf(\"\\nConfirming password reset for user '%v'.\\n\", user.UserName)\n\t\terr = runner.cognitoActor.ConfirmForgotPassword(ctx, clientId, code, user.UserName, password)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"\\nEnter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tconfirmed = true\n\t\t}\n\t}\n\tlog.Printf(\"User '%v' successfully confirmed and migrated.\\n\", user.UserName)\n\tlog.Println(\"Signing in with your username and password...\")\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, user.UserName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Printf(\"Successfully signed in. Your access token starts with: %v...\\n\", (*authResult.AccessToken)[:10])\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// Run runs the scenario.\nfunc (runner *MigrateUser) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\n\trunner.AddMigrateUserTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"MigrateUserFunctionArn\"])\n\trunner.resources.triggers = append(runner.resources.triggers, actions.UserMigration)\n\tresetNeeded, user := runner.SignInUser(ctx, stackOutputs[\"TableName\"], stackOutputs[\"UserPoolClientId\"])\n\tif resetNeeded {\n\t\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"MigrateUserFunction\"])\n\t\trunner.ResetPassword(ctx, stackOutputs[\"UserPoolClientId\"], user)\n\t}\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Create a REST API to track COVID-19 data",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_ApiGatewayDataTracker_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to create a REST API that simulates a system to track daily cases of COVID-19 in the United States, using fictional data.",
                            "  1.Python : \n\n\nSDK for Python (Boto3)\n\n\n        Shows how to use AWS Chalice with the AWS SDK for Python (Boto3) to\n        create a serverless REST API that uses Amazon API Gateway, AWS Lambda, and\n        Amazon DynamoDB. The REST API simulates a system that tracks daily cases\n        of COVID-19 in the United States, using fictional data. Learn how to:\n    \n\nUse AWS Chalice to define routes in Lambda functions that\n        are called to handle REST requests that come through API Gateway.Use Lambda functions to retrieve and store data in a DynamoDB\n        table to serve REST requests.Define table structure and security role resources in an AWS CloudFormation template.Use AWS Chalice and CloudFormation to package and deploy all necessary resources.Use CloudFormation to clean up all created resources.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayAWS CloudFormationDynamoDBLambda\n\n\n",
                            "  2.SDK for Python (Boto3) : \n\n        Shows how to use AWS Chalice with the AWS SDK for Python (Boto3) to\n        create a serverless REST API that uses Amazon API Gateway, AWS Lambda, and\n        Amazon DynamoDB. The REST API simulates a system that tracks daily cases\n        of COVID-19 in the United States, using fictional data. Learn how to:\n    \n\nUse AWS Chalice to define routes in Lambda functions that\n        are called to handle REST requests that come through API Gateway.Use Lambda functions to retrieve and store data in a DynamoDB\n        table to serve REST requests.Define table structure and security role resources in an AWS CloudFormation template.Use AWS Chalice and CloudFormation to package and deploy all necessary resources.Use CloudFormation to clean up all created resources.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayAWS CloudFormationDynamoDBLambda\n",
                            "anchor",
                            "  1.SDK for Python (Boto3) : \n\n        Shows how to use AWS Chalice with the AWS SDK for Python (Boto3) to\n        create a serverless REST API that uses Amazon API Gateway, AWS Lambda, and\n        Amazon DynamoDB. The REST API simulates a system that tracks daily cases\n        of COVID-19 in the United States, using fictional data. Learn how to:\n    \n\nUse AWS Chalice to define routes in Lambda functions that\n        are called to handle REST requests that come through API Gateway.Use Lambda functions to retrieve and store data in a DynamoDB\n        table to serve REST requests.Define table structure and security role resources in an AWS CloudFormation template.Use AWS Chalice and CloudFormation to package and deploy all necessary resources.Use CloudFormation to clean up all created resources.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayAWS CloudFormationDynamoDBLambda\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Create a lending library REST API",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_AuroraRestLendingLibrary_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to create a lending library where patrons can borrow and return books by using a REST API backed by an Amazon Aurora database.",
                            "  1.Python : \n\n\nSDK for Python (Boto3)\n\n\n        Shows how to use the AWS SDK for Python (Boto3) with the Amazon Relational Database Service (Amazon RDS) API and AWS Chalice to create a REST API\n        backed by an Amazon Aurora database. The web service is fully serverless and represents\n        a simple lending library where patrons can borrow and return books. Learn how to:\n    \n\nCreate and manage a serverless Aurora database cluster.Use AWS Secrets Manager to manage database credentials.Implement a data storage layer that uses Amazon RDS to move data into\n            and out of the database.Use AWS Chalice to deploy a serverless REST API to Amazon API Gateway and AWS Lambda.Use the Requests package to send requests to the web service.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayAuroraLambdaSecrets Manager\n\n\n",
                            "  2.SDK for Python (Boto3) : \n\n        Shows how to use the AWS SDK for Python (Boto3) with the Amazon Relational Database Service (Amazon RDS) API and AWS Chalice to create a REST API\n        backed by an Amazon Aurora database. The web service is fully serverless and represents\n        a simple lending library where patrons can borrow and return books. Learn how to:\n    \n\nCreate and manage a serverless Aurora database cluster.Use AWS Secrets Manager to manage database credentials.Implement a data storage layer that uses Amazon RDS to move data into\n            and out of the database.Use AWS Chalice to deploy a serverless REST API to Amazon API Gateway and AWS Lambda.Use the Requests package to send requests to the web service.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayAuroraLambdaSecrets Manager\n",
                            "anchor",
                            "  1.SDK for Python (Boto3) : \n\n        Shows how to use the AWS SDK for Python (Boto3) with the Amazon Relational Database Service (Amazon RDS) API and AWS Chalice to create a REST API\n        backed by an Amazon Aurora database. The web service is fully serverless and represents\n        a simple lending library where patrons can borrow and return books. Learn how to:\n    \n\nCreate and manage a serverless Aurora database cluster.Use AWS Secrets Manager to manage database credentials.Implement a data storage layer that uses Amazon RDS to move data into\n            and out of the database.Use AWS Chalice to deploy a serverless REST API to Amazon API Gateway and AWS Lambda.Use the Requests package to send requests to the web service.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayAuroraLambdaSecrets Manager\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Create a messenger application",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_StepFunctionsMessenger_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to create an AWS Step Functions messenger application that retrieves message records from a database table.",
                            "  1.Python : \n\n\nSDK for Python (Boto3)\n\n\n        Shows how to use the AWS SDK for Python (Boto3) with AWS Step Functions to create a messenger application that\n        retrieves message records from an Amazon DynamoDB table and sends them with Amazon Simple Queue Service (Amazon SQS).\n        The state machine integrates with an AWS Lambda function to scan the database for unsent messages.\n    \n\nCreate a state machine that retrieves and updates message records from an Amazon DynamoDB table.Update the state machine definition to also send messages to Amazon Simple Queue Service (Amazon SQS).Start and stop state machine runs.Connect to Lambda, DynamoDB, and Amazon SQS from a state machine by using service integrations.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambdaAmazon SQSStep Functions\n\n\n",
                            "  2.SDK for Python (Boto3) : \n\n        Shows how to use the AWS SDK for Python (Boto3) with AWS Step Functions to create a messenger application that\n        retrieves message records from an Amazon DynamoDB table and sends them with Amazon Simple Queue Service (Amazon SQS).\n        The state machine integrates with an AWS Lambda function to scan the database for unsent messages.\n    \n\nCreate a state machine that retrieves and updates message records from an Amazon DynamoDB table.Update the state machine definition to also send messages to Amazon Simple Queue Service (Amazon SQS).Start and stop state machine runs.Connect to Lambda, DynamoDB, and Amazon SQS from a state machine by using service integrations.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambdaAmazon SQSStep Functions\n",
                            "anchor",
                            "  1.SDK for Python (Boto3) : \n\n        Shows how to use the AWS SDK for Python (Boto3) with AWS Step Functions to create a messenger application that\n        retrieves message records from an Amazon DynamoDB table and sends them with Amazon Simple Queue Service (Amazon SQS).\n        The state machine integrates with an AWS Lambda function to scan the database for unsent messages.\n    \n\nCreate a state machine that retrieves and updates message records from an Amazon DynamoDB table.Update the state machine definition to also send messages to Amazon Simple Queue Service (Amazon SQS).Start and stop state machine runs.Connect to Lambda, DynamoDB, and Amazon SQS from a state machine by using service integrations.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambdaAmazon SQSStep Functions\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Create a serverless application to manage photos",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_PAM_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to create a serverless application that lets users manage photos using labels.",
                            "  1..NET : \n\n\nAWS SDK for .NET\n\n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n\n\n",
                            "  2.AWS SDK for .NET : \n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n",
                            "  3.C++ : \n\n\nSDK for C++\n\n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n\n\n",
                            "  4.SDK for C++ : \n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n",
                            "  5.Java : \n\n\nSDK for Java 2.x\n\n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n\n\n",
                            "  6.SDK for Java 2.x : \n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n",
                            "  7.JavaScript : \n\n\nSDK for JavaScript (v3)\n\n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n\n\n",
                            "  8.SDK for JavaScript (v3) : \n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n",
                            "  9.Kotlin : \n\n\nSDK for Kotlin\n\n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n\n\n",
                            "  10.SDK for Kotlin : \n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n",
                            "  11.PHP : \n\n\nSDK for PHP\n\n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n\n\n",
                            "  12.SDK for PHP : \n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n",
                            "  13.Rust : \n\n\nSDK for Rust\n\n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n\n\n",
                            "  14.SDK for Rust : \n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : \n\n        Shows how to develop a photo asset management application that detects labels in images\n        using Amazon Rekognition and stores them for later retrieval.\n    \nFor complete source code and instructions on how to set up and run, see the full example\n        on \n        GitHub.\nFor a deep dive into the origin of this example see the post on AWS Community.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon RekognitionAmazon S3Amazon SNS\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Create a websocket chat application",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_ApiGatewayWebsocketChat_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to create a chat application that is served by a websocket API built on Amazon API Gateway.",
                            "  1.Python : \n\n\nSDK for Python (Boto3)\n\n\n        Shows how to use the AWS SDK for Python (Boto3) with Amazon API Gateway V2 to\n        create a websocket API that integrates with AWS Lambda and Amazon DynamoDB.\n    \n\nCreate a websocket API served by API Gateway.Define a Lambda handler that stores connections in DynamoDB and posts messages to\n        other chat participants.Connect to the websocket chat application and send messages with the Websockets\n        package.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayDynamoDBLambda\n\n\n",
                            "  2.SDK for Python (Boto3) : \n\n        Shows how to use the AWS SDK for Python (Boto3) with Amazon API Gateway V2 to\n        create a websocket API that integrates with AWS Lambda and Amazon DynamoDB.\n    \n\nCreate a websocket API served by API Gateway.Define a Lambda handler that stores connections in DynamoDB and posts messages to\n        other chat participants.Connect to the websocket chat application and send messages with the Websockets\n        package.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayDynamoDBLambda\n",
                            "anchor",
                            "  1.SDK for Python (Boto3) : \n\n        Shows how to use the AWS SDK for Python (Boto3) with Amazon API Gateway V2 to\n        create a websocket API that integrates with AWS Lambda and Amazon DynamoDB.\n    \n\nCreate a websocket API served by API Gateway.Define a Lambda handler that stores connections in DynamoDB and posts messages to\n        other chat participants.Connect to the websocket chat application and send messages with the Websockets\n        package.\n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayDynamoDBLambda\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Create an application to analyze customer feedback",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_FSA_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to create an application that analyzes customer comment cards, translates them from their original language, determines their sentiment, and generates an audio file from the translated text.",
                            "  1..NET : \n\n\nAWS SDK for .NET\n\n\n    This example application analyzes and stores customer feedback cards. Specifically,\n    it fulfills the need of a fictitious hotel in New York City. The hotel receives feedback\n    from guests in various languages in the form of physical comment cards. That feedback\n    is uploaded into the app through a web client.\n\n    After an image of a comment card is uploaded, the following steps occur:\n  \n\n\nText is extracted from the image using Amazon Textract.\n\nAmazon Comprehend determines the sentiment of the extracted text and its language.\n\nThe extracted text is translated to English using Amazon Translate.\n\nAmazon Polly synthesizes an audio file from the extracted text.\n\n The full app can be deployed with the AWS CDK. For source code and deployment\n    instructions, see the project in \n    GitHub. \n\nServices used in this example\nAmazon ComprehendLambdaAmazon PollyAmazon TextractAmazon Translate\n\n\n",
                            "  2.AWS SDK for .NET : \n\n    This example application analyzes and stores customer feedback cards. Specifically,\n    it fulfills the need of a fictitious hotel in New York City. The hotel receives feedback\n    from guests in various languages in the form of physical comment cards. That feedback\n    is uploaded into the app through a web client.\n\n    After an image of a comment card is uploaded, the following steps occur:\n  \n\n\nText is extracted from the image using Amazon Textract.\n\nAmazon Comprehend determines the sentiment of the extracted text and its language.\n\nThe extracted text is translated to English using Amazon Translate.\n\nAmazon Polly synthesizes an audio file from the extracted text.\n\n The full app can be deployed with the AWS CDK. For source code and deployment\n    instructions, see the project in \n    GitHub. \n\nServices used in this example\nAmazon ComprehendLambdaAmazon PollyAmazon TextractAmazon Translate\n",
                            "  3.Java : \n\n\nSDK for Java 2.x\n\n\n    This example application analyzes and stores customer feedback cards. Specifically,\n    it fulfills the need of a fictitious hotel in New York City. The hotel receives feedback\n    from guests in various languages in the form of physical comment cards. That feedback\n    is uploaded into the app through a web client.\n\n    After an image of a comment card is uploaded, the following steps occur:\n  \n\n\nText is extracted from the image using Amazon Textract.\n\nAmazon Comprehend determines the sentiment of the extracted text and its language.\n\nThe extracted text is translated to English using Amazon Translate.\n\nAmazon Polly synthesizes an audio file from the extracted text.\n\n The full app can be deployed with the AWS CDK. For source code and deployment\n    instructions, see the project in \n    GitHub. \n\nServices used in this example\nAmazon ComprehendLambdaAmazon PollyAmazon TextractAmazon Translate\n\n\n",
                            "  4.SDK for Java 2.x : \n\n    This example application analyzes and stores customer feedback cards. Specifically,\n    it fulfills the need of a fictitious hotel in New York City. The hotel receives feedback\n    from guests in various languages in the form of physical comment cards. That feedback\n    is uploaded into the app through a web client.\n\n    After an image of a comment card is uploaded, the following steps occur:\n  \n\n\nText is extracted from the image using Amazon Textract.\n\nAmazon Comprehend determines the sentiment of the extracted text and its language.\n\nThe extracted text is translated to English using Amazon Translate.\n\nAmazon Polly synthesizes an audio file from the extracted text.\n\n The full app can be deployed with the AWS CDK. For source code and deployment\n    instructions, see the project in \n    GitHub. \n\nServices used in this example\nAmazon ComprehendLambdaAmazon PollyAmazon TextractAmazon Translate\n",
                            "  5.JavaScript : import {\n  ComprehendClient,\n  DetectDominantLanguageCommand,\n  DetectSentimentCommand,\n} from \"@aws-sdk/client-comprehend\";\n\n/**\n * Determine the language and sentiment of the extracted text.\n *\n * @param {{ source_text: string}} extractTextOutput\n */\nexport const handler = async (extractTextOutput) => {\n  const comprehendClient = new ComprehendClient({});\n\n  const detectDominantLanguageCommand = new DetectDominantLanguageCommand({\n    Text: extractTextOutput.source_text,\n  });\n\n  // The source language is required for sentiment analysis and\n  // translation in the next step.\n  const { Languages } = await comprehendClient.send(\n    detectDominantLanguageCommand,\n  );\n\n  const languageCode = Languages[0].LanguageCode;\n\n  const detectSentimentCommand = new DetectSentimentCommand({\n    Text: extractTextOutput.source_text,\n    LanguageCode: languageCode,\n  });\n\n  const { Sentiment } = await comprehendClient.send(detectSentimentCommand);\n\n  return {\n    sentiment: Sentiment,\n    language_code: languageCode,\n  };\n};\n",
                            "  6.SDK for JavaScript (v3) : import {\n  ComprehendClient,\n  DetectDominantLanguageCommand,\n  DetectSentimentCommand,\n} from \"@aws-sdk/client-comprehend\";\n\n/**\n * Determine the language and sentiment of the extracted text.\n *\n * @param {{ source_text: string}} extractTextOutput\n */\nexport const handler = async (extractTextOutput) => {\n  const comprehendClient = new ComprehendClient({});\n\n  const detectDominantLanguageCommand = new DetectDominantLanguageCommand({\n    Text: extractTextOutput.source_text,\n  });\n\n  // The source language is required for sentiment analysis and\n  // translation in the next step.\n  const { Languages } = await comprehendClient.send(\n    detectDominantLanguageCommand,\n  );\n\n  const languageCode = Languages[0].LanguageCode;\n\n  const detectSentimentCommand = new DetectSentimentCommand({\n    Text: extractTextOutput.source_text,\n    LanguageCode: languageCode,\n  });\n\n  const { Sentiment } = await comprehendClient.send(detectSentimentCommand);\n\n  return {\n    sentiment: Sentiment,\n    language_code: languageCode,\n  };\n};\n",
                            "  7.Ruby : \n\n\nSDK for Ruby\n\n\n    This example application analyzes and stores customer feedback cards. Specifically,\n    it fulfills the need of a fictitious hotel in New York City. The hotel receives feedback\n    from guests in various languages in the form of physical comment cards. That feedback\n    is uploaded into the app through a web client.\n\n    After an image of a comment card is uploaded, the following steps occur:\n  \n\n\nText is extracted from the image using Amazon Textract.\n\nAmazon Comprehend determines the sentiment of the extracted text and its language.\n\nThe extracted text is translated to English using Amazon Translate.\n\nAmazon Polly synthesizes an audio file from the extracted text.\n\n The full app can be deployed with the AWS CDK. For source code and deployment\n    instructions, see the project in \n    GitHub. \n\nServices used in this example\nAmazon ComprehendLambdaAmazon PollyAmazon TextractAmazon Translate\n\n\n",
                            "  8.SDK for Ruby : \n\n    This example application analyzes and stores customer feedback cards. Specifically,\n    it fulfills the need of a fictitious hotel in New York City. The hotel receives feedback\n    from guests in various languages in the form of physical comment cards. That feedback\n    is uploaded into the app through a web client.\n\n    After an image of a comment card is uploaded, the following steps occur:\n  \n\n\nText is extracted from the image using Amazon Textract.\n\nAmazon Comprehend determines the sentiment of the extracted text and its language.\n\nThe extracted text is translated to English using Amazon Translate.\n\nAmazon Polly synthesizes an audio file from the extracted text.\n\n The full app can be deployed with the AWS CDK. For source code and deployment\n    instructions, see the project in \n    GitHub. \n\nServices used in this example\nAmazon ComprehendLambdaAmazon PollyAmazon TextractAmazon Translate\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : \n\n    This example application analyzes and stores customer feedback cards. Specifically,\n    it fulfills the need of a fictitious hotel in New York City. The hotel receives feedback\n    from guests in various languages in the form of physical comment cards. That feedback\n    is uploaded into the app through a web client.\n\n    After an image of a comment card is uploaded, the following steps occur:\n  \n\n\nText is extracted from the image using Amazon Textract.\n\nAmazon Comprehend determines the sentiment of the extracted text and its language.\n\nThe extracted text is translated to English using Amazon Translate.\n\nAmazon Polly synthesizes an audio file from the extracted text.\n\n The full app can be deployed with the AWS CDK. For source code and deployment\n    instructions, see the project in \n    GitHub. \n\nServices used in this example\nAmazon ComprehendLambdaAmazon PollyAmazon TextractAmazon Translate\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Invoke a Lambda function from a browser",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_LambdaForBrowser_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to invoke an AWS Lambda function from a browser.",
                            "  1.JavaScript : \n\n\nSDK for JavaScript (v2)\n\n\n        You can create a browser-based application that uses an AWS Lambda function to update an Amazon DynamoDB\n        table with user selections.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambda\n\nSDK for JavaScript (v3)\n\n\n        You can create a browser-based application that uses an AWS Lambda function to update an Amazon DynamoDB\n        table with user selections. This app uses AWS SDK for JavaScript v3.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n\n    \n\nServices used in this example\nDynamoDBLambda\n\n\n",
                            "  2.SDK for JavaScript (v2) : \n\n        You can create a browser-based application that uses an AWS Lambda function to update an Amazon DynamoDB\n        table with user selections.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambda\n",
                            "  3.SDK for JavaScript (v3) : \n\n        You can create a browser-based application that uses an AWS Lambda function to update an Amazon DynamoDB\n        table with user selections. This app uses AWS SDK for JavaScript v3.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n\n    \n\nServices used in this example\nDynamoDBLambda\n",
                            "anchor",
                            "  1.SDK for JavaScript (v2) : \n\n        You can create a browser-based application that uses an AWS Lambda function to update an Amazon DynamoDB\n        table with user selections.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambda\n",
                            "  2.SDK for JavaScript (v3) : \n\n        You can create a browser-based application that uses an AWS Lambda function to update an Amazon DynamoDB\n        table with user selections. This app uses AWS SDK for JavaScript v3.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n\n    \n\nServices used in this example\nDynamoDBLambda\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Transform data with S3 Object Lambda",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_ServerlessS3DataTransformation_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to transform data for your application with S3 Object Lambda.",
                            "  1..NET : \n\n\nAWS SDK for .NET\n\n\n        Shows how to add custom code to standard S3 GET requests to modify the requested object retrieved from S3 so that the object suit the needs of the requesting client or application.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nLambdaAmazon S3\n\n\n",
                            "  2.AWS SDK for .NET : \n\n        Shows how to add custom code to standard S3 GET requests to modify the requested object retrieved from S3 so that the object suit the needs of the requesting client or application.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nLambdaAmazon S3\n",
                            "anchor",
                            "  1.AWS SDK for .NET : \n\n        Shows how to add custom code to standard S3 GET requests to modify the requested object retrieved from S3 so that the object suit the needs of the requesting client or application.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nLambdaAmazon S3\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Use API Gateway to invoke a Lambda function",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_LambdaAPIGateway_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to create an AWS Lambda function invoked by Amazon API Gateway.",
                            "  1.Java : \n\n\nSDK for Java 2.x\n\n\n        Shows how to create an AWS Lambda function by using the Lambda Java runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create a Lambda function invoked by Amazon API Gateway that scans an Amazon DynamoDB table for work anniversaries\n        and uses Amazon Simple Notification Service (Amazon SNS) to send a text message to your employees that congratulates\n        them at their one year anniversary date.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon SNS\n\n\n",
                            "  2.SDK for Java 2.x : \n\n        Shows how to create an AWS Lambda function by using the Lambda Java runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create a Lambda function invoked by Amazon API Gateway that scans an Amazon DynamoDB table for work anniversaries\n        and uses Amazon Simple Notification Service (Amazon SNS) to send a text message to your employees that congratulates\n        them at their one year anniversary date.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon SNS\n",
                            "  3.JavaScript : \n\n\nSDK for JavaScript (v3)\n\n\n        Shows how to create an AWS Lambda function by using the Lambda JavaScript runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create a Lambda function invoked by Amazon API Gateway that scans an Amazon DynamoDB table for work anniversaries\n        and uses Amazon Simple Notification Service (Amazon SNS) to send a text message to your employees that congratulates\n        them at their one year anniversary date.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \nThis example is also available in the\n        AWS SDK for JavaScript v3 developer guide.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon SNS\n\n\n",
                            "  4.SDK for JavaScript (v3) : \n\n        Shows how to create an AWS Lambda function by using the Lambda JavaScript runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create a Lambda function invoked by Amazon API Gateway that scans an Amazon DynamoDB table for work anniversaries\n        and uses Amazon Simple Notification Service (Amazon SNS) to send a text message to your employees that congratulates\n        them at their one year anniversary date.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \nThis example is also available in the\n        AWS SDK for JavaScript v3 developer guide.\n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon SNS\n",
                            "  5.Python : \n\n\nSDK for Python (Boto3)\n\n\n        This example shows how to create and use an Amazon API Gateway REST API that targets an\n        AWS Lambda function. The Lambda handler demonstrates how to route based on HTTP\n        methods; how to get data from the query string, header, and body; and how to\n        return a JSON response.\n    \n\nDeploy a Lambda function.Create an API Gateway REST API.Create a REST resource that targets the Lambda function.Grant permission to let API Gateway invoke the Lambda function.Use the Requests package to send requests to the REST API.Clean up all resources created during the demo.\n\n        This example is best viewed on GitHub. For complete source code and\n        instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayLambda\n\n\n",
                            "  6.SDK for Python (Boto3) : \n\n        This example shows how to create and use an Amazon API Gateway REST API that targets an\n        AWS Lambda function. The Lambda handler demonstrates how to route based on HTTP\n        methods; how to get data from the query string, header, and body; and how to\n        return a JSON response.\n    \n\nDeploy a Lambda function.Create an API Gateway REST API.Create a REST resource that targets the Lambda function.Grant permission to let API Gateway invoke the Lambda function.Use the Requests package to send requests to the REST API.Clean up all resources created during the demo.\n\n        This example is best viewed on GitHub. For complete source code and\n        instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayLambda\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.SDK for Java 2.x : \n\n        Shows how to create an AWS Lambda function by using the Lambda Java runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create a Lambda function invoked by Amazon API Gateway that scans an Amazon DynamoDB table for work anniversaries\n        and uses Amazon Simple Notification Service (Amazon SNS) to send a text message to your employees that congratulates\n        them at their one year anniversary date.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nAPI GatewayDynamoDBLambdaAmazon SNS\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Use Step Functions to invoke Lambda functions",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_ServerlessWorkflows_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to create an AWS Step Functions state machine that invokes AWS Lambda functions in sequence.",
                            "  1.Java : \n\n\nSDK for Java 2.x\n\n\n        Shows how to create an AWS serverless workflow by using AWS Step Functions and the AWS SDK for Java 2.x.\n        Each workflow step is implemented using an AWS Lambda function.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambdaAmazon SESStep Functions\n\n\n",
                            "  2.SDK for Java 2.x : \n\n        Shows how to create an AWS serverless workflow by using AWS Step Functions and the AWS SDK for Java 2.x.\n        Each workflow step is implemented using an AWS Lambda function.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambdaAmazon SESStep Functions\n",
                            "anchor",
                            "  1.SDK for Java 2.x : \n\n        Shows how to create an AWS serverless workflow by using AWS Step Functions and the AWS SDK for Java 2.x.\n        Each workflow step is implemented using an AWS Lambda function.\n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBLambdaAmazon SESStep Functions\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Use scheduled events to invoke a Lambda function",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_LambdaScheduledEvents_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to create an AWS Lambda function invoked by an Amazon EventBridge scheduled event.",
                            "  1.Java : \n\n\nSDK for Java 2.x\n\n\n        Shows how to create an Amazon EventBridge scheduled event that invokes an AWS Lambda function.\n        Configure EventBridge to use a cron expression to schedule when the Lambda function is invoked.\n        In this example, you create a Lambda function by using the Lambda Java runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create an app that sends a mobile text message to your employees that congratulates \n        them at the one year anniversary date. \n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBEventBridgeLambdaAmazon SNS\n\n\n",
                            "  2.SDK for Java 2.x : \n\n        Shows how to create an Amazon EventBridge scheduled event that invokes an AWS Lambda function.\n        Configure EventBridge to use a cron expression to schedule when the Lambda function is invoked.\n        In this example, you create a Lambda function by using the Lambda Java runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create an app that sends a mobile text message to your employees that congratulates \n        them at the one year anniversary date. \n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBEventBridgeLambdaAmazon SNS\n",
                            "  3.JavaScript : \n\n\nSDK for JavaScript (v3)\n\n\n        Shows how to create an Amazon EventBridge scheduled event that invokes an AWS Lambda function.\n        Configure EventBridge to use a cron expression to schedule when the Lambda function is invoked.\n        In this example, you create a Lambda function by using the Lambda JavaScript runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create an app that sends a mobile text message to your employees that congratulates \n        them at the one year anniversary date. \n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \nThis example is also available in the\n        AWS SDK for JavaScript v3 developer guide.\n\nServices used in this example\nDynamoDBEventBridgeLambdaAmazon SNS\n\n\n",
                            "  4.SDK for JavaScript (v3) : \n\n        Shows how to create an Amazon EventBridge scheduled event that invokes an AWS Lambda function.\n        Configure EventBridge to use a cron expression to schedule when the Lambda function is invoked.\n        In this example, you create a Lambda function by using the Lambda JavaScript runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create an app that sends a mobile text message to your employees that congratulates \n        them at the one year anniversary date. \n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \nThis example is also available in the\n        AWS SDK for JavaScript v3 developer guide.\n\nServices used in this example\nDynamoDBEventBridgeLambdaAmazon SNS\n",
                            "  5.Python : \n\n\nSDK for Python (Boto3)\n\n\n        This example shows how to register an AWS Lambda function as the target of a\n        scheduled Amazon EventBridge event. The Lambda handler writes a friendly message and the\n        full event data to Amazon CloudWatch Logs for later retrieval.\n    \n\nDeploys a Lambda function.Creates an EventBridge scheduled event and makes the Lambda function the target.Grants permission to let EventBridge invoke the Lambda function.Prints the latest data from CloudWatch Logs to show the result of the scheduled invocations.Cleans up all resources created during the demo.\n\n        This example is best viewed on GitHub. For complete source code and\n        instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nCloudWatch LogsEventBridgeLambda\n\n\n",
                            "  6.SDK for Python (Boto3) : \n\n        This example shows how to register an AWS Lambda function as the target of a\n        scheduled Amazon EventBridge event. The Lambda handler writes a friendly message and the\n        full event data to Amazon CloudWatch Logs for later retrieval.\n    \n\nDeploys a Lambda function.Creates an EventBridge scheduled event and makes the Lambda function the target.Grants permission to let EventBridge invoke the Lambda function.Prints the latest data from CloudWatch Logs to show the result of the scheduled invocations.Cleans up all resources created during the demo.\n\n        This example is best viewed on GitHub. For complete source code and\n        instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nCloudWatch LogsEventBridgeLambda\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.SDK for Java 2.x : \n\n        Shows how to create an Amazon EventBridge scheduled event that invokes an AWS Lambda function.\n        Configure EventBridge to use a cron expression to schedule when the Lambda function is invoked.\n        In this example, you create a Lambda function by using the Lambda Java runtime API.\n        This example invokes different AWS services to perform a specific use case. This example demonstrates how to\n        create an app that sends a mobile text message to your employees that congratulates \n        them at the one year anniversary date. \n    \n\n        For complete source code and instructions on how to set up and run, see the full example on\n        GitHub.\n    \n\nServices used in this example\nDynamoDBEventBridgeLambdaAmazon SNS\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Write custom activity data with a Lambda function after Amazon Cognito user authentication",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_cross_CognitoCustomActivityLog_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code example shows how to write custom activity data with a Lambda function after Amazon Cognito user authentication.",
                            "  1.Use administrator functions to add a user to a user pool.",
                            "  2.Configure a user pool to call a Lambda function for the PostAuthentication trigger.",
                            "  3.Sign the new user in to Amazon Cognito.",
                            "  4.The Lambda function writes custom information to CloudWatch Logs and to an DynamoDB table.",
                            "  5.Get and display custom data from the DynamoDB table, then clean up resources.",
                            "  1.Go : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// ActivityLog separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype ActivityLog struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewActivityLog constructs a new activity log runner.\nfunc NewActivityLog(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) ActivityLog {\n\tscenario := ActivityLog{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddUserToPool selects a user from the known users table and uses administrator credentials to add the user to the user pool.\nfunc (runner *ActivityLog) AddUserToPool(ctx context.Context, userPoolId string, tableName string) (string, string) {\n\tlog.Println(\"To facilitate this example, let's add a user to the user pool using administrator privileges.\")\n\tusers, err := runner.helper.GetKnownUsers(ctx, tableName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tuser := users.Users[0]\n\tlog.Printf(\"Adding known user %v to the user pool.\\n\", user.UserName)\n\terr = runner.cognitoActor.AdminCreateUser(ctx, userPoolId, user.UserName, user.UserEmail)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpwSet := false\n\tpassword := runner.questioner.AskPassword(\"\\nEnter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !pwSet {\n\t\tlog.Printf(\"\\nSetting password for user '%v'.\\n\", user.UserName)\n\t\terr = runner.cognitoActor.AdminSetUserPassword(ctx, userPoolId, user.UserName, password)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"\\nEnter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tpwSet = true\n\t\t}\n\t}\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\treturn user.UserName, password\n}\n\n// AddActivityLogTrigger adds a Lambda handler as an invocation target for the PostAuthentication trigger.\nfunc (runner *ActivityLog) AddActivityLogTrigger(ctx context.Context, userPoolId string, activityLogArn string) {\n\tlog.Println(\"Let's add a Lambda function to handle the PostAuthentication trigger from Cognito.\\n\" +\n\t\t\"This trigger happens after a user is authenticated, and lets your function take action, such as logging\\n\" +\n\t\t\"the outcome.\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.PostAuthentication, HandlerArn: aws.String(activityLogArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.triggers = append(runner.resources.triggers, actions.PostAuthentication)\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle PostAuthentication Cognito trigger.\\n\",\n\t\tactivityLogArn, userPoolId)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// SignInUser signs in as the specified user.\nfunc (runner *ActivityLog) SignInUser(ctx context.Context, clientId string, userName string, password string) {\n\tlog.Printf(\"Now we'll sign in user %v and check the results in the logs and the DynamoDB table.\", userName)\n\trunner.questioner.Ask(\"Press Enter when you're ready.\")\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, userName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Println(\"Sign in successful.\",\n\t\t\"The PostAuthentication Lambda handler writes custom information to CloudWatch Logs.\")\n\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n}\n\n// GetKnownUserLastLogin gets the login info for a user from the Amazon DynamoDB table and displays it.\nfunc (runner *ActivityLog) GetKnownUserLastLogin(ctx context.Context, tableName string, userName string) {\n\tlog.Println(\"The PostAuthentication handler also writes login data to the DynamoDB table.\")\n\trunner.questioner.Ask(\"Press Enter when you're ready to continue.\")\n\tusers, err := runner.helper.GetKnownUsers(ctx, tableName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, user := range users.Users {\n\t\tif user.UserName == userName {\n\t\t\tlog.Println(\"The last login info for the user in the known users table is:\")\n\t\t\tlog.Printf(\"\\t%+v\", *user.LastLogin)\n\t\t}\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// Run runs the scenario.\nfunc (runner *ActivityLog) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\trunner.helper.PopulateUserTable(ctx, stackOutputs[\"TableName\"])\n\tuserName, password := runner.AddUserToPool(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"TableName\"])\n\n\trunner.AddActivityLogTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"ActivityLogFunctionArn\"])\n\trunner.SignInUser(ctx, stackOutputs[\"UserPoolClientId\"], userName, password)\n\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"ActivityLogFunction\"])\n\trunner.GetKnownUserLastLogin(ctx, stackOutputs[\"TableName\"], userName)\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "  2.SDK for Go V2 : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// ActivityLog separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype ActivityLog struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewActivityLog constructs a new activity log runner.\nfunc NewActivityLog(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) ActivityLog {\n\tscenario := ActivityLog{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddUserToPool selects a user from the known users table and uses administrator credentials to add the user to the user pool.\nfunc (runner *ActivityLog) AddUserToPool(ctx context.Context, userPoolId string, tableName string) (string, string) {\n\tlog.Println(\"To facilitate this example, let's add a user to the user pool using administrator privileges.\")\n\tusers, err := runner.helper.GetKnownUsers(ctx, tableName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tuser := users.Users[0]\n\tlog.Printf(\"Adding known user %v to the user pool.\\n\", user.UserName)\n\terr = runner.cognitoActor.AdminCreateUser(ctx, userPoolId, user.UserName, user.UserEmail)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpwSet := false\n\tpassword := runner.questioner.AskPassword(\"\\nEnter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !pwSet {\n\t\tlog.Printf(\"\\nSetting password for user '%v'.\\n\", user.UserName)\n\t\terr = runner.cognitoActor.AdminSetUserPassword(ctx, userPoolId, user.UserName, password)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"\\nEnter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tpwSet = true\n\t\t}\n\t}\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\treturn user.UserName, password\n}\n\n// AddActivityLogTrigger adds a Lambda handler as an invocation target for the PostAuthentication trigger.\nfunc (runner *ActivityLog) AddActivityLogTrigger(ctx context.Context, userPoolId string, activityLogArn string) {\n\tlog.Println(\"Let's add a Lambda function to handle the PostAuthentication trigger from Cognito.\\n\" +\n\t\t\"This trigger happens after a user is authenticated, and lets your function take action, such as logging\\n\" +\n\t\t\"the outcome.\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.PostAuthentication, HandlerArn: aws.String(activityLogArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.triggers = append(runner.resources.triggers, actions.PostAuthentication)\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle PostAuthentication Cognito trigger.\\n\",\n\t\tactivityLogArn, userPoolId)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// SignInUser signs in as the specified user.\nfunc (runner *ActivityLog) SignInUser(ctx context.Context, clientId string, userName string, password string) {\n\tlog.Printf(\"Now we'll sign in user %v and check the results in the logs and the DynamoDB table.\", userName)\n\trunner.questioner.Ask(\"Press Enter when you're ready.\")\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, userName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Println(\"Sign in successful.\",\n\t\t\"The PostAuthentication Lambda handler writes custom information to CloudWatch Logs.\")\n\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n}\n\n// GetKnownUserLastLogin gets the login info for a user from the Amazon DynamoDB table and displays it.\nfunc (runner *ActivityLog) GetKnownUserLastLogin(ctx context.Context, tableName string, userName string) {\n\tlog.Println(\"The PostAuthentication handler also writes login data to the DynamoDB table.\")\n\trunner.questioner.Ask(\"Press Enter when you're ready to continue.\")\n\tusers, err := runner.helper.GetKnownUsers(ctx, tableName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, user := range users.Users {\n\t\tif user.UserName == userName {\n\t\t\tlog.Println(\"The last login info for the user in the known users table is:\")\n\t\t\tlog.Printf(\"\\t%+v\", *user.LastLogin)\n\t\t}\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// Run runs the scenario.\nfunc (runner *ActivityLog) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\trunner.helper.PopulateUserTable(ctx, stackOutputs[\"TableName\"])\n\tuserName, password := runner.AddUserToPool(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"TableName\"])\n\n\trunner.AddActivityLogTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"ActivityLogFunctionArn\"])\n\trunner.SignInUser(ctx, stackOutputs[\"UserPoolClientId\"], userName, password)\n\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"ActivityLogFunction\"])\n\trunner.GetKnownUserLastLogin(ctx, stackOutputs[\"TableName\"], userName)\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "anchor",
                            "  1.SDK for Go V2 : \nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"strings\"\n\t\"user_pools_and_lambda_triggers/actions\"\n\n\t\"github.com/aws/aws-sdk-go-v2/aws\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider\"\n\t\"github.com/aws/aws-sdk-go-v2/service/cognitoidentityprovider/types\"\n\t\"github.com/awsdocs/aws-doc-sdk-examples/gov2/demotools\"\n)\n\n// ActivityLog separates the steps of this scenario into individual functions so that\n// they are simpler to read and understand.\ntype ActivityLog struct {\n\thelper       IScenarioHelper\n\tquestioner   demotools.IQuestioner\n\tresources    Resources\n\tcognitoActor *actions.CognitoActions\n}\n\n// NewActivityLog constructs a new activity log runner.\nfunc NewActivityLog(sdkConfig aws.Config, questioner demotools.IQuestioner, helper IScenarioHelper) ActivityLog {\n\tscenario := ActivityLog{\n\t\thelper:       helper,\n\t\tquestioner:   questioner,\n\t\tresources:    Resources{},\n\t\tcognitoActor: &actions.CognitoActions{CognitoClient: cognitoidentityprovider.NewFromConfig(sdkConfig)},\n\t}\n\tscenario.resources.init(scenario.cognitoActor, questioner)\n\treturn scenario\n}\n\n// AddUserToPool selects a user from the known users table and uses administrator credentials to add the user to the user pool.\nfunc (runner *ActivityLog) AddUserToPool(ctx context.Context, userPoolId string, tableName string) (string, string) {\n\tlog.Println(\"To facilitate this example, let's add a user to the user pool using administrator privileges.\")\n\tusers, err := runner.helper.GetKnownUsers(ctx, tableName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tuser := users.Users[0]\n\tlog.Printf(\"Adding known user %v to the user pool.\\n\", user.UserName)\n\terr = runner.cognitoActor.AdminCreateUser(ctx, userPoolId, user.UserName, user.UserEmail)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tpwSet := false\n\tpassword := runner.questioner.AskPassword(\"\\nEnter a password that has at least eight characters, uppercase, lowercase, numbers and symbols.\\n\"+\n\t\t\"(the password will not display as you type):\", 8)\n\tfor !pwSet {\n\t\tlog.Printf(\"\\nSetting password for user '%v'.\\n\", user.UserName)\n\t\terr = runner.cognitoActor.AdminSetUserPassword(ctx, userPoolId, user.UserName, password)\n\t\tif err != nil {\n\t\t\tvar invalidPassword *types.InvalidPasswordException\n\t\t\tif errors.As(err, &invalidPassword) {\n\t\t\t\tpassword = runner.questioner.AskPassword(\"\\nEnter another password:\", 8)\n\t\t\t} else {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t} else {\n\t\t\tpwSet = true\n\t\t}\n\t}\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\treturn user.UserName, password\n}\n\n// AddActivityLogTrigger adds a Lambda handler as an invocation target for the PostAuthentication trigger.\nfunc (runner *ActivityLog) AddActivityLogTrigger(ctx context.Context, userPoolId string, activityLogArn string) {\n\tlog.Println(\"Let's add a Lambda function to handle the PostAuthentication trigger from Cognito.\\n\" +\n\t\t\"This trigger happens after a user is authenticated, and lets your function take action, such as logging\\n\" +\n\t\t\"the outcome.\")\n\terr := runner.cognitoActor.UpdateTriggers(\n\t\tctx, userPoolId,\n\t\tactions.TriggerInfo{Trigger: actions.PostAuthentication, HandlerArn: aws.String(activityLogArn)})\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.triggers = append(runner.resources.triggers, actions.PostAuthentication)\n\tlog.Printf(\"Lambda function %v added to user pool %v to handle PostAuthentication Cognito trigger.\\n\",\n\t\tactivityLogArn, userPoolId)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// SignInUser signs in as the specified user.\nfunc (runner *ActivityLog) SignInUser(ctx context.Context, clientId string, userName string, password string) {\n\tlog.Printf(\"Now we'll sign in user %v and check the results in the logs and the DynamoDB table.\", userName)\n\trunner.questioner.Ask(\"Press Enter when you're ready.\")\n\tauthResult, err := runner.cognitoActor.SignIn(ctx, clientId, userName, password)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tlog.Println(\"Sign in successful.\",\n\t\t\"The PostAuthentication Lambda handler writes custom information to CloudWatch Logs.\")\n\n\trunner.resources.userAccessTokens = append(runner.resources.userAccessTokens, *authResult.AccessToken)\n}\n\n// GetKnownUserLastLogin gets the login info for a user from the Amazon DynamoDB table and displays it.\nfunc (runner *ActivityLog) GetKnownUserLastLogin(ctx context.Context, tableName string, userName string) {\n\tlog.Println(\"The PostAuthentication handler also writes login data to the DynamoDB table.\")\n\trunner.questioner.Ask(\"Press Enter when you're ready to continue.\")\n\tusers, err := runner.helper.GetKnownUsers(ctx, tableName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tfor _, user := range users.Users {\n\t\tif user.UserName == userName {\n\t\t\tlog.Println(\"The last login info for the user in the known users table is:\")\n\t\t\tlog.Printf(\"\\t%+v\", *user.LastLogin)\n\t\t}\n\t}\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n// Run runs the scenario.\nfunc (runner *ActivityLog) Run(ctx context.Context, stackName string) {\n\tdefer func() {\n\t\tif r := recover(); r != nil {\n\t\t\tlog.Println(\"Something went wrong with the demo.\")\n\t\t\trunner.resources.Cleanup(ctx)\n\t\t}\n\t}()\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Printf(\"Welcome\\n\")\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\n\tstackOutputs, err := runner.helper.GetStackOutputs(ctx, stackName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\trunner.resources.userPoolId = stackOutputs[\"UserPoolId\"]\n\trunner.helper.PopulateUserTable(ctx, stackOutputs[\"TableName\"])\n\tuserName, password := runner.AddUserToPool(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"TableName\"])\n\n\trunner.AddActivityLogTrigger(ctx, stackOutputs[\"UserPoolId\"], stackOutputs[\"ActivityLogFunctionArn\"])\n\trunner.SignInUser(ctx, stackOutputs[\"UserPoolClientId\"], userName, password)\n\trunner.helper.ListRecentLogEvents(ctx, stackOutputs[\"ActivityLogFunction\"])\n\trunner.GetKnownUserLastLogin(ctx, stackOutputs[\"TableName\"], userName)\n\n\trunner.resources.Cleanup(ctx)\n\n\tlog.Println(strings.Repeat(\"-\", 88))\n\tlog.Println(\"Thanks for watching!\")\n\tlog.Println(strings.Repeat(\"-\", 88))\n}\n\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "The following code examples show you how to implement common scenarios in Lambda        with AWS SDKs. These scenarios show you how to accomplish specific tasks by calling multiple functions        within Lambda or combined with other AWS services.        Each scenario includes a link to the complete source code, where you can find instructions on how to set up and run the code.    ",
                    "Scenarios target an intermediate level of experience to help you understand service actions in context.",
                    "Examples"
                ]
            },
            {
                "title": "Serverless examples",
                "href": "https://docs.aws.amazon.com/lambda/latest/dg/service_code_examples_serverless_examples.html",
                "contents": [
                    {
                        "title": "Connecting to an Amazon RDS database in a Lambda function",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_connect_RDS_Lambda_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement a Lambda function that connects to an RDS database. The function makes a simple database request and returns the result.",
                            "  1.Go : /*\nGolang v2 code here.\n*/\n\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/rds/auth\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype MyEvent struct {\n\tName string `json:\"name\"`\n}\n\nfunc HandleRequest(event *MyEvent) (map[string]interface{}, error) {\n\n\tvar dbName string = os.Getenv(\"DatabaseName\")\n\tvar dbUser string = os.Getenv(\"DatabaseUser\")\n\tvar dbHost string = os.Getenv(\"DBHost\") // Add hostname without https\n\tvar dbPort int = os.Getenv(\"Port\")      // Add port number\n\tvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\n\tvar region string = os.Getenv(\"AWS_REGION\")\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tpanic(\"configuration error: \" + err.Error())\n\t}\n\n\tauthenticationToken, err := auth.BuildAuthToken(\n\t\tcontext.TODO(), dbEndpoint, region, dbUser, cfg.Credentials)\n\tif err != nil {\n\t\tpanic(\"failed to create authentication token: \" + err.Error())\n\t}\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?tls=true&allowCleartextPasswords=true\",\n\t\tdbUser, authenticationToken, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer db.Close()\n\n\tvar sum int\n\terr = db.QueryRow(\"SELECT ?+? AS sum\", 3, 2).Scan(&sum)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts := fmt.Sprint(sum)\n\tmessage := fmt.Sprintf(\"The selected sum is: %s\", s)\n\n\tmessageBytes, err := json.Marshal(message)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmessageString := string(messageBytes)\n\treturn map[string]interface{}{\n\t\t\"statusCode\": 200,\n\t\t\"headers\":    map[string]string{\"Content-Type\": \"application/json\"},\n\t\t\"body\":       messageString,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                            "  2.SDK for Go V2 : /*\nGolang v2 code here.\n*/\n\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/rds/auth\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype MyEvent struct {\n\tName string `json:\"name\"`\n}\n\nfunc HandleRequest(event *MyEvent) (map[string]interface{}, error) {\n\n\tvar dbName string = os.Getenv(\"DatabaseName\")\n\tvar dbUser string = os.Getenv(\"DatabaseUser\")\n\tvar dbHost string = os.Getenv(\"DBHost\") // Add hostname without https\n\tvar dbPort int = os.Getenv(\"Port\")      // Add port number\n\tvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\n\tvar region string = os.Getenv(\"AWS_REGION\")\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tpanic(\"configuration error: \" + err.Error())\n\t}\n\n\tauthenticationToken, err := auth.BuildAuthToken(\n\t\tcontext.TODO(), dbEndpoint, region, dbUser, cfg.Credentials)\n\tif err != nil {\n\t\tpanic(\"failed to create authentication token: \" + err.Error())\n\t}\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?tls=true&allowCleartextPasswords=true\",\n\t\tdbUser, authenticationToken, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer db.Close()\n\n\tvar sum int\n\terr = db.QueryRow(\"SELECT ?+? AS sum\", 3, 2).Scan(&sum)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts := fmt.Sprint(sum)\n\tmessage := fmt.Sprintf(\"The selected sum is: %s\", s)\n\n\tmessageBytes, err := json.Marshal(message)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmessageString := string(messageBytes)\n\treturn map[string]interface{}{\n\t\t\"statusCode\": 200,\n\t\t\"headers\":    map[string]string{\"Content-Type\": \"application/json\"},\n\t\t\"body\":       messageString,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                            "  3.Java : import com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\nimport software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.rdsdata.RdsDataClient;\nimport software.amazon.awssdk.services.rdsdata.model.ExecuteStatementRequest;\nimport software.amazon.awssdk.services.rdsdata.model.ExecuteStatementResponse;\nimport software.amazon.awssdk.services.rdsdata.model.Field;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\npublic class RdsLambdaHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n\n    @Override\n    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context) {\n        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();\n\n        try {\n            // Obtain auth token\n            String token = createAuthToken();\n\n            // Define connection configuration\n            String connectionString = String.format(\"jdbc:mysql://%s:%s/%s?useSSL=true&requireSSL=true\",\n                    System.getenv(\"ProxyHostName\"),\n                    System.getenv(\"Port\"),\n                    System.getenv(\"DBName\"));\n\n            // Establish a connection to the database\n            try (Connection connection = DriverManager.getConnection(connectionString, System.getenv(\"DBUserName\"), token);\n                 PreparedStatement statement = connection.prepareStatement(\"SELECT ? + ? AS sum\")) {\n\n                statement.setInt(1, 3);\n                statement.setInt(2, 2);\n\n                try (ResultSet resultSet = statement.executeQuery()) {\n                    if (resultSet.next()) {\n                        int sum = resultSet.getInt(\"sum\");\n                        response.setStatusCode(200);\n                        response.setBody(\"The selected sum is: \" + sum);\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            response.setStatusCode(500);\n            response.setBody(\"Error: \" + e.getMessage());\n        }\n\n        return response;\n    }\n\n    private String createAuthToken() {\n        // Create RDS Data Service client\n        RdsDataClient rdsDataClient = RdsDataClient.builder()\n                .region(Region.of(System.getenv(\"AWS_REGION\")))\n                .credentialsProvider(DefaultCredentialsProvider.create())\n                .build();\n\n        // Define authentication request\n        ExecuteStatementRequest request = ExecuteStatementRequest.builder()\n                .resourceArn(System.getenv(\"ProxyHostName\"))\n                .secretArn(System.getenv(\"DBUserName\"))\n                .database(System.getenv(\"DBName\"))\n                .sql(\"SELECT 'RDS IAM Authentication'\")\n                .build();\n\n        // Execute request and obtain authentication token\n        ExecuteStatementResponse response = rdsDataClient.executeStatement(request);\n        Field tokenField = response.records().get(0).get(0);\n\n        return tokenField.stringValue();\n    }\n}\n\n",
                            "  4.SDK for Java 2.x : import com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyRequestEvent;\nimport com.amazonaws.services.lambda.runtime.events.APIGatewayProxyResponseEvent;\nimport software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider;\nimport software.amazon.awssdk.regions.Region;\nimport software.amazon.awssdk.services.rdsdata.RdsDataClient;\nimport software.amazon.awssdk.services.rdsdata.model.ExecuteStatementRequest;\nimport software.amazon.awssdk.services.rdsdata.model.ExecuteStatementResponse;\nimport software.amazon.awssdk.services.rdsdata.model.Field;\n\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\n\npublic class RdsLambdaHandler implements RequestHandler<APIGatewayProxyRequestEvent, APIGatewayProxyResponseEvent> {\n\n    @Override\n    public APIGatewayProxyResponseEvent handleRequest(APIGatewayProxyRequestEvent event, Context context) {\n        APIGatewayProxyResponseEvent response = new APIGatewayProxyResponseEvent();\n\n        try {\n            // Obtain auth token\n            String token = createAuthToken();\n\n            // Define connection configuration\n            String connectionString = String.format(\"jdbc:mysql://%s:%s/%s?useSSL=true&requireSSL=true\",\n                    System.getenv(\"ProxyHostName\"),\n                    System.getenv(\"Port\"),\n                    System.getenv(\"DBName\"));\n\n            // Establish a connection to the database\n            try (Connection connection = DriverManager.getConnection(connectionString, System.getenv(\"DBUserName\"), token);\n                 PreparedStatement statement = connection.prepareStatement(\"SELECT ? + ? AS sum\")) {\n\n                statement.setInt(1, 3);\n                statement.setInt(2, 2);\n\n                try (ResultSet resultSet = statement.executeQuery()) {\n                    if (resultSet.next()) {\n                        int sum = resultSet.getInt(\"sum\");\n                        response.setStatusCode(200);\n                        response.setBody(\"The selected sum is: \" + sum);\n                    }\n                }\n            }\n\n        } catch (Exception e) {\n            response.setStatusCode(500);\n            response.setBody(\"Error: \" + e.getMessage());\n        }\n\n        return response;\n    }\n\n    private String createAuthToken() {\n        // Create RDS Data Service client\n        RdsDataClient rdsDataClient = RdsDataClient.builder()\n                .region(Region.of(System.getenv(\"AWS_REGION\")))\n                .credentialsProvider(DefaultCredentialsProvider.create())\n                .build();\n\n        // Define authentication request\n        ExecuteStatementRequest request = ExecuteStatementRequest.builder()\n                .resourceArn(System.getenv(\"ProxyHostName\"))\n                .secretArn(System.getenv(\"DBUserName\"))\n                .database(System.getenv(\"DBName\"))\n                .sql(\"SELECT 'RDS IAM Authentication'\")\n                .build();\n\n        // Execute request and obtain authentication token\n        ExecuteStatementResponse response = rdsDataClient.executeStatement(request);\n        Field tokenField = response.records().get(0).get(0);\n\n        return tokenField.stringValue();\n    }\n}\n\n",
                            "  5.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/* \nNode.js code here.\n*/\n// ES6+ example\nimport { Signer } from \"@aws-sdk/rds-signer\";\nimport mysql from 'mysql2/promise';\n\nasync function createAuthToken() {\n  // Define connection authentication parameters\n  const dbinfo = {\n\n    hostname: process.env.ProxyHostName,\n    port: process.env.Port,\n    username: process.env.DBUserName,\n    region: process.env.AWS_REGION,\n\n  }\n\n  // Create RDS Signer object\n  const signer = new Signer(dbinfo);\n\n  // Request authorization token from RDS, specifying the username\n  const token = await signer.getAuthToken();\n  return token;\n}\n\nasync function dbOps() {\n\n  // Obtain auth token\n  const token = await createAuthToken();\n  // Define connection configuration\n  let connectionConfig = {\n    host: process.env.ProxyHostName,\n    user: process.env.DBUserName,\n    password: token,\n    database: process.env.DBName,\n    ssl: 'Amazon RDS'\n  }\n  // Create the connection to the DB\n  const conn = await mysql.createConnection(connectionConfig);\n  // Obtain the result of the query\n  const [res,] = await conn.execute('select ?+? as sum', [3, 2]);\n  return res;\n\n}\n\nexport const handler = async (event) => {\n  // Execute database flow\n  const result = await dbOps();\n  // Return result\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\"The selected sum is: \" + result[0].sum)\n  }\n};\n\n",
                            "  6.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/* \nNode.js code here.\n*/\n// ES6+ example\nimport { Signer } from \"@aws-sdk/rds-signer\";\nimport mysql from 'mysql2/promise';\n\nasync function createAuthToken() {\n  // Define connection authentication parameters\n  const dbinfo = {\n\n    hostname: process.env.ProxyHostName,\n    port: process.env.Port,\n    username: process.env.DBUserName,\n    region: process.env.AWS_REGION,\n\n  }\n\n  // Create RDS Signer object\n  const signer = new Signer(dbinfo);\n\n  // Request authorization token from RDS, specifying the username\n  const token = await signer.getAuthToken();\n  return token;\n}\n\nasync function dbOps() {\n\n  // Obtain auth token\n  const token = await createAuthToken();\n  // Define connection configuration\n  let connectionConfig = {\n    host: process.env.ProxyHostName,\n    user: process.env.DBUserName,\n    password: token,\n    database: process.env.DBName,\n    ssl: 'Amazon RDS'\n  }\n  // Create the connection to the DB\n  const conn = await mysql.createConnection(connectionConfig);\n  // Obtain the result of the query\n  const [res,] = await conn.execute('select ?+? as sum', [3, 2]);\n  return res;\n\n}\n\nexport const handler = async (event) => {\n  // Execute database flow\n  const result = await dbOps();\n  // Return result\n  return {\n    statusCode: 200,\n    body: JSON.stringify(\"The selected sum is: \" + result[0].sum)\n  }\n};\n\n",
                            "  7.PHP : <?php\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\nuse Aws\\Rds\\AuthTokenGenerator;\nuse Aws\\Credentials\\CredentialProvider;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n\n    private function getAuthToken(): string {\n        // Define connection authentication parameters\n        $dbConnection = [\n            'hostname' => getenv('DB_HOSTNAME'),\n            'port' => getenv('DB_PORT'),\n            'username' => getenv('DB_USERNAME'),\n            'region' => getenv('AWS_REGION'),\n        ];\n\n        // Create RDS AuthTokenGenerator object\n        $generator = new AuthTokenGenerator(CredentialProvider::defaultProvider());\n\n        // Request authorization token from RDS, specifying the username\n        return $generator->createToken(\n            $dbConnection['hostname'] . ':' . $dbConnection['port'],\n            $dbConnection['region'],\n            $dbConnection['username']\n        );\n    }\n\n    private function getQueryResults() {\n        // Obtain auth token\n        $token = $this->getAuthToken();\n\n        // Define connection configuration\n        $connectionConfig = [\n            'host' => getenv('DB_HOSTNAME'),\n            'user' => getenv('DB_USERNAME'),\n            'password' => $token,\n            'database' => getenv('DB_NAME'),\n        ];\n\n        // Create the connection to the DB\n        $conn = new PDO(\n            \"mysql:host={$connectionConfig['host']};dbname={$connectionConfig['database']}\",\n            $connectionConfig['user'],\n            $connectionConfig['password'],\n            [\n                PDO::MYSQL_ATTR_SSL_CA => '/path/to/rds-ca-2019-root.pem',\n                PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT => true,\n            ]\n        );\n\n        // Obtain the result of the query\n        $stmt = $conn->prepare('SELECT ?+? AS sum');\n        $stmt->execute([3, 2]);\n\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * @param mixed $event\n     * @param Context $context\n     * @return array\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $this->logger->info(\"Processing query\");\n\n        // Execute database flow\n        $result = $this->getQueryResults();\n\n        return [\n            'sum' => $result['sum']\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n",
                            "  8.SDK for PHP : <?php\n# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\nuse Aws\\Rds\\AuthTokenGenerator;\nuse Aws\\Credentials\\CredentialProvider;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n\n    private function getAuthToken(): string {\n        // Define connection authentication parameters\n        $dbConnection = [\n            'hostname' => getenv('DB_HOSTNAME'),\n            'port' => getenv('DB_PORT'),\n            'username' => getenv('DB_USERNAME'),\n            'region' => getenv('AWS_REGION'),\n        ];\n\n        // Create RDS AuthTokenGenerator object\n        $generator = new AuthTokenGenerator(CredentialProvider::defaultProvider());\n\n        // Request authorization token from RDS, specifying the username\n        return $generator->createToken(\n            $dbConnection['hostname'] . ':' . $dbConnection['port'],\n            $dbConnection['region'],\n            $dbConnection['username']\n        );\n    }\n\n    private function getQueryResults() {\n        // Obtain auth token\n        $token = $this->getAuthToken();\n\n        // Define connection configuration\n        $connectionConfig = [\n            'host' => getenv('DB_HOSTNAME'),\n            'user' => getenv('DB_USERNAME'),\n            'password' => $token,\n            'database' => getenv('DB_NAME'),\n        ];\n\n        // Create the connection to the DB\n        $conn = new PDO(\n            \"mysql:host={$connectionConfig['host']};dbname={$connectionConfig['database']}\",\n            $connectionConfig['user'],\n            $connectionConfig['password'],\n            [\n                PDO::MYSQL_ATTR_SSL_CA => '/path/to/rds-ca-2019-root.pem',\n                PDO::MYSQL_ATTR_SSL_VERIFY_SERVER_CERT => true,\n            ]\n        );\n\n        // Obtain the result of the query\n        $stmt = $conn->prepare('SELECT ?+? AS sum');\n        $stmt->execute([3, 2]);\n\n        return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n\n    /**\n     * @param mixed $event\n     * @param Context $context\n     * @return array\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $this->logger->info(\"Processing query\");\n\n        // Execute database flow\n        $result = $this->getQueryResults();\n\n        return [\n            'sum' => $result['sum']\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n",
                            "  9.Python : import json\nimport os\nimport boto3\nimport pymysql\n\n# RDS settings\nproxy_host_name = os.environ['PROXY_HOST_NAME']\nport = int(os.environ['PORT'])\ndb_name = os.environ['DB_NAME']\ndb_user_name = os.environ['DB_USER_NAME']\naws_region = os.environ['AWS_REGION']\n\n\n# Fetch RDS Auth Token\ndef get_auth_token():\n    client = boto3.client('rds')\n    token = client.generate_db_auth_token(\n        DBHostname=proxy_host_name,\n        Port=port\n        DBUsername=db_user_name\n        Region=aws_region\n    )\n    return token\n\ndef lambda_handler(event, context):\n    token = get_auth_token()\n    try:\n        connection = pymysql.connect(\n            host=proxy_host_name,\n            user=db_user_name,\n            password=token,\n            db=db_name,\n            port=port,\n            ssl={'ca': 'Amazon RDS'}  # Ensure you have the CA bundle for SSL connection\n        )\n        \n        with connection.cursor() as cursor:\n            cursor.execute('SELECT %s + %s AS sum', (3, 2))\n            result = cursor.fetchone()\n\n        return result\n        \n    except Exception as e:\n        return (f\"Error: {str(e)}\")  # Return an error message if an exception occurs \n    \n",
                            "  10.SDK for Python (Boto3) : import json\nimport os\nimport boto3\nimport pymysql\n\n# RDS settings\nproxy_host_name = os.environ['PROXY_HOST_NAME']\nport = int(os.environ['PORT'])\ndb_name = os.environ['DB_NAME']\ndb_user_name = os.environ['DB_USER_NAME']\naws_region = os.environ['AWS_REGION']\n\n\n# Fetch RDS Auth Token\ndef get_auth_token():\n    client = boto3.client('rds')\n    token = client.generate_db_auth_token(\n        DBHostname=proxy_host_name,\n        Port=port\n        DBUsername=db_user_name\n        Region=aws_region\n    )\n    return token\n\ndef lambda_handler(event, context):\n    token = get_auth_token()\n    try:\n        connection = pymysql.connect(\n            host=proxy_host_name,\n            user=db_user_name,\n            password=token,\n            db=db_name,\n            port=port,\n            ssl={'ca': 'Amazon RDS'}  # Ensure you have the CA bundle for SSL connection\n        )\n        \n        with connection.cursor() as cursor:\n            cursor.execute('SELECT %s + %s AS sum', (3, 2))\n            result = cursor.fetchone()\n\n        return result\n        \n    except Exception as e:\n        return (f\"Error: {str(e)}\")  # Return an error message if an exception occurs \n    \n",
                            "  11.Ruby : # Ruby code here.\n\nrequire 'aws-sdk-rds'\nrequire 'json'\nrequire 'mysql2'\n\ndef lambda_handler(event:, context:)\n  endpoint = ENV['DBEndpoint'] # Add the endpoint without https\"\n  port = ENV['Port']           # 3306\n  user = ENV['DBUser']\n  region = ENV['DBRegion']     # 'us-east-1'\n  db_name = ENV['DBName']\n\n  credentials = Aws::Credentials.new(\n    ENV['AWS_ACCESS_KEY_ID'],\n    ENV['AWS_SECRET_ACCESS_KEY'],\n    ENV['AWS_SESSION_TOKEN']\n  )\n  rds_client = Aws::RDS::AuthTokenGenerator.new(\n    region: region, \n    credentials: credentials\n  )\n\n  token = rds_client.auth_token(\n    endpoint: endpoint+ ':' + port,\n    user_name: user,\n    region: region\n  )\n\n  begin\n    conn = Mysql2::Client.new(\n      host: endpoint,\n      username: user,\n      password: token,\n      port: port,\n      database: db_name,\n      sslca: '/var/task/global-bundle.pem', \n      sslverify: true,\n      enable_cleartext_plugin: true\n    )\n    a = 3\n    b = 2\n    result = conn.query(\"SELECT #{a} + #{b} AS sum\").first['sum']\n    puts result\n    conn.close\n    {\n      statusCode: 200,\n      body: result.to_json\n    }\n  rescue => e\n    puts \"Database connection failed due to #{e}\"\n  end\nend\n",
                            "  12.SDK for Ruby : # Ruby code here.\n\nrequire 'aws-sdk-rds'\nrequire 'json'\nrequire 'mysql2'\n\ndef lambda_handler(event:, context:)\n  endpoint = ENV['DBEndpoint'] # Add the endpoint without https\"\n  port = ENV['Port']           # 3306\n  user = ENV['DBUser']\n  region = ENV['DBRegion']     # 'us-east-1'\n  db_name = ENV['DBName']\n\n  credentials = Aws::Credentials.new(\n    ENV['AWS_ACCESS_KEY_ID'],\n    ENV['AWS_SECRET_ACCESS_KEY'],\n    ENV['AWS_SESSION_TOKEN']\n  )\n  rds_client = Aws::RDS::AuthTokenGenerator.new(\n    region: region, \n    credentials: credentials\n  )\n\n  token = rds_client.auth_token(\n    endpoint: endpoint+ ':' + port,\n    user_name: user,\n    region: region\n  )\n\n  begin\n    conn = Mysql2::Client.new(\n      host: endpoint,\n      username: user,\n      password: token,\n      port: port,\n      database: db_name,\n      sslca: '/var/task/global-bundle.pem', \n      sslverify: true,\n      enable_cleartext_plugin: true\n    )\n    a = 3\n    b = 2\n    result = conn.query(\"SELECT #{a} + #{b} AS sum\").first['sum']\n    puts result\n    conn.close\n    {\n      statusCode: 200,\n      body: result.to_json\n    }\n  rescue => e\n    puts \"Database connection failed due to #{e}\"\n  end\nend\n",
                            "  13.Rust : use aws_config::BehaviorVersion;\nuse aws_credential_types::provider::ProvideCredentials;\nuse aws_sigv4::{\n    http_request::{sign, SignableBody, SignableRequest, SigningSettings},\n    sign::v4,\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse serde_json::{json, Value};\nuse sqlx::postgres::PgConnectOptions;\nuse std::env;\nuse std::time::{Duration, SystemTime};\n\nconst RDS_CERTS: &[u8] = include_bytes!(\"global-bundle.pem\");\n\nasync fn generate_rds_iam_token(\n    db_hostname: &str,\n    port: u16,\n    db_username: &str,\n) -> Result<String, Error> {\n    let config = aws_config::load_defaults(BehaviorVersion::v2024_03_28()).await;\n\n    let credentials = config\n        .credentials_provider()\n        .expect(\"no credentials provider found\")\n        .provide_credentials()\n        .await\n        .expect(\"unable to load credentials\");\n    let identity = credentials.into();\n    let region = config.region().unwrap().to_string();\n\n    let mut signing_settings = SigningSettings::default();\n    signing_settings.expires_in = Some(Duration::from_secs(900));\n    signing_settings.signature_location = aws_sigv4::http_request::SignatureLocation::QueryParams;\n\n    let signing_params = v4::SigningParams::builder()\n        .identity(&identity)\n        .region(&region)\n        .name(\"rds-db\")\n        .time(SystemTime::now())\n        .settings(signing_settings)\n        .build()?;\n\n    let url = format!(\n        \"https://{db_hostname}:{port}/?Action=connect&DBUser={db_user}\",\n        db_hostname = db_hostname,\n        port = port,\n        db_user = db_username\n    );\n\n    let signable_request =\n        SignableRequest::new(\"GET\", &url, std::iter::empty(), SignableBody::Bytes(&[]))\n            .expect(\"signable request\");\n\n    let (signing_instructions, _signature) =\n        sign(signable_request, &signing_params.into())?.into_parts();\n\n    let mut url = url::Url::parse(&url).unwrap();\n    for (name, value) in signing_instructions.params() {\n        url.query_pairs_mut().append_pair(name, &value);\n    }\n\n    let response = url.to_string().split_off(\"https://\".len());\n\n    Ok(response)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    run(service_fn(handler)).await\n}\n\nasync fn handler(_event: LambdaEvent<Value>) -> Result<Value, Error> {\n    let db_host = env::var(\"DB_HOSTNAME\").expect(\"DB_HOSTNAME must be set\");\n    let db_port = env::var(\"DB_PORT\")\n        .expect(\"DB_PORT must be set\")\n        .parse::<u16>()\n        .expect(\"PORT must be a valid number\");\n    let db_name = env::var(\"DB_NAME\").expect(\"DB_NAME must be set\");\n    let db_user_name = env::var(\"DB_USERNAME\").expect(\"DB_USERNAME must be set\");\n\n    let token = generate_rds_iam_token(&db_host, db_port, &db_user_name).await?;\n\n    let opts = PgConnectOptions::new()\n        .host(&db_host)\n        .port(db_port)\n        .username(&db_user_name)\n        .password(&token)\n        .database(&db_name)\n        .ssl_root_cert_from_pem(RDS_CERTS.to_vec())\n        .ssl_mode(sqlx::postgres::PgSslMode::Require);\n\n    let pool = sqlx::postgres::PgPoolOptions::new()\n        .connect_with(opts)\n        .await?;\n\n    let result: i32 = sqlx::query_scalar(\"SELECT $1 + $2\")\n        .bind(3)\n        .bind(2)\n        .fetch_one(&pool)\n        .await?;\n\n    println!(\"Result: {:?}\", result);\n\n    Ok(json!({\n        \"statusCode\": 200,\n        \"content-type\": \"text/plain\",\n        \"body\": format!(\"The selected sum is: {result}\")\n    }))\n}\n\n",
                            "  14.SDK for Rust : use aws_config::BehaviorVersion;\nuse aws_credential_types::provider::ProvideCredentials;\nuse aws_sigv4::{\n    http_request::{sign, SignableBody, SignableRequest, SigningSettings},\n    sign::v4,\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse serde_json::{json, Value};\nuse sqlx::postgres::PgConnectOptions;\nuse std::env;\nuse std::time::{Duration, SystemTime};\n\nconst RDS_CERTS: &[u8] = include_bytes!(\"global-bundle.pem\");\n\nasync fn generate_rds_iam_token(\n    db_hostname: &str,\n    port: u16,\n    db_username: &str,\n) -> Result<String, Error> {\n    let config = aws_config::load_defaults(BehaviorVersion::v2024_03_28()).await;\n\n    let credentials = config\n        .credentials_provider()\n        .expect(\"no credentials provider found\")\n        .provide_credentials()\n        .await\n        .expect(\"unable to load credentials\");\n    let identity = credentials.into();\n    let region = config.region().unwrap().to_string();\n\n    let mut signing_settings = SigningSettings::default();\n    signing_settings.expires_in = Some(Duration::from_secs(900));\n    signing_settings.signature_location = aws_sigv4::http_request::SignatureLocation::QueryParams;\n\n    let signing_params = v4::SigningParams::builder()\n        .identity(&identity)\n        .region(&region)\n        .name(\"rds-db\")\n        .time(SystemTime::now())\n        .settings(signing_settings)\n        .build()?;\n\n    let url = format!(\n        \"https://{db_hostname}:{port}/?Action=connect&DBUser={db_user}\",\n        db_hostname = db_hostname,\n        port = port,\n        db_user = db_username\n    );\n\n    let signable_request =\n        SignableRequest::new(\"GET\", &url, std::iter::empty(), SignableBody::Bytes(&[]))\n            .expect(\"signable request\");\n\n    let (signing_instructions, _signature) =\n        sign(signable_request, &signing_params.into())?.into_parts();\n\n    let mut url = url::Url::parse(&url).unwrap();\n    for (name, value) in signing_instructions.params() {\n        url.query_pairs_mut().append_pair(name, &value);\n    }\n\n    let response = url.to_string().split_off(\"https://\".len());\n\n    Ok(response)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    run(service_fn(handler)).await\n}\n\nasync fn handler(_event: LambdaEvent<Value>) -> Result<Value, Error> {\n    let db_host = env::var(\"DB_HOSTNAME\").expect(\"DB_HOSTNAME must be set\");\n    let db_port = env::var(\"DB_PORT\")\n        .expect(\"DB_PORT must be set\")\n        .parse::<u16>()\n        .expect(\"PORT must be a valid number\");\n    let db_name = env::var(\"DB_NAME\").expect(\"DB_NAME must be set\");\n    let db_user_name = env::var(\"DB_USERNAME\").expect(\"DB_USERNAME must be set\");\n\n    let token = generate_rds_iam_token(&db_host, db_port, &db_user_name).await?;\n\n    let opts = PgConnectOptions::new()\n        .host(&db_host)\n        .port(db_port)\n        .username(&db_user_name)\n        .password(&token)\n        .database(&db_name)\n        .ssl_root_cert_from_pem(RDS_CERTS.to_vec())\n        .ssl_mode(sqlx::postgres::PgSslMode::Require);\n\n    let pool = sqlx::postgres::PgPoolOptions::new()\n        .connect_with(opts)\n        .await?;\n\n    let result: i32 = sqlx::query_scalar(\"SELECT $1 + $2\")\n        .bind(3)\n        .bind(2)\n        .fetch_one(&pool)\n        .await?;\n\n    println!(\"Result: {:?}\", result);\n\n    Ok(json!({\n        \"statusCode\": 200,\n        \"content-type\": \"text/plain\",\n        \"body\": format!(\"The selected sum is: {result}\")\n    }))\n}\n\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.SDK for Go V2 : /*\nGolang v2 code here.\n*/\n\npackage main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/feature/rds/auth\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\ntype MyEvent struct {\n\tName string `json:\"name\"`\n}\n\nfunc HandleRequest(event *MyEvent) (map[string]interface{}, error) {\n\n\tvar dbName string = os.Getenv(\"DatabaseName\")\n\tvar dbUser string = os.Getenv(\"DatabaseUser\")\n\tvar dbHost string = os.Getenv(\"DBHost\") // Add hostname without https\n\tvar dbPort int = os.Getenv(\"Port\")      // Add port number\n\tvar dbEndpoint string = fmt.Sprintf(\"%s:%d\", dbHost, dbPort)\n\tvar region string = os.Getenv(\"AWS_REGION\")\n\n\tcfg, err := config.LoadDefaultConfig(context.TODO())\n\tif err != nil {\n\t\tpanic(\"configuration error: \" + err.Error())\n\t}\n\n\tauthenticationToken, err := auth.BuildAuthToken(\n\t\tcontext.TODO(), dbEndpoint, region, dbUser, cfg.Credentials)\n\tif err != nil {\n\t\tpanic(\"failed to create authentication token: \" + err.Error())\n\t}\n\n\tdsn := fmt.Sprintf(\"%s:%s@tcp(%s)/%s?tls=true&allowCleartextPasswords=true\",\n\t\tdbUser, authenticationToken, dbEndpoint, dbName,\n\t)\n\n\tdb, err := sql.Open(\"mysql\", dsn)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tdefer db.Close()\n\n\tvar sum int\n\terr = db.QueryRow(\"SELECT ?+? AS sum\", 3, 2).Scan(&sum)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ts := fmt.Sprint(sum)\n\tmessage := fmt.Sprintf(\"The selected sum is: %s\", s)\n\n\tmessageBytes, err := json.Marshal(message)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmessageString := string(messageBytes)\n\treturn map[string]interface{}{\n\t\t\"statusCode\": 200,\n\t\t\"headers\":    map[string]string{\"Content-Type\": \"application/json\"},\n\t\t\"body\":       messageString,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Invoke a Lambda function from a Kinesis trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_Kinesis_Lambda_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement a Lambda function that receives an event triggered by receiving records from a Kinesis stream. The function retrieves the Kinesis payload, decodes from Base64, and logs the record contents.",
                            "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegrationSampleCode;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return;\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                throw;\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n",
                            "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegrationSampleCode;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return;\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                throw;\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n",
                            "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) error {\n\tif len(kinesisEvent.Records) == 0 {\n\t\tlog.Printf(\"empty Kinesis event received\")\n\t\treturn nil\n\t}\n\n\tfor _, record := range kinesisEvent.Records {\n\t\tlog.Printf(\"processed Kinesis event with EventId: %v\", record.EventID)\n\t\trecordDataBytes := record.Kinesis.Data\n\t\trecordDataText := string(recordDataBytes)\n\t\tlog.Printf(\"record data: %v\", recordDataText)\n\t\t// TODO: Do interesting work based on the new data\n\t}\n\tlog.Printf(\"successfully processed %v records\", len(kinesisEvent.Records))\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) error {\n\tif len(kinesisEvent.Records) == 0 {\n\t\tlog.Printf(\"empty Kinesis event received\")\n\t\treturn nil\n\t}\n\n\tfor _, record := range kinesisEvent.Records {\n\t\tlog.Printf(\"processed Kinesis event with EventId: %v\", record.EventID)\n\t\trecordDataBytes := record.Kinesis.Data\n\t\trecordDataText := string(recordDataBytes)\n\t\tlog.Printf(\"record data: %v\", recordDataText)\n\t\t// TODO: Do interesting work based on the new data\n\t}\n\tlog.Printf(\"successfully processed %v records\", len(kinesisEvent.Records))\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KinesisEvent;\n\npublic class Handler implements RequestHandler<KinesisEvent, Void> {\n    @Override\n    public Void handleRequest(final KinesisEvent event, final Context context) {\n        LambdaLogger logger = context.getLogger();\n        if (event.getRecords().isEmpty()) {\n            logger.log(\"Empty Kinesis Event received\");\n            return null;\n        }\n        for (KinesisEvent.KinesisEventRecord record : event.getRecords()) {\n            try {\n                logger.log(\"Processed Event with EventId: \"+record.getEventID());\n                String data = new String(record.getKinesis().getData().array());\n                logger.log(\"Data:\"+ data);\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex) {\n                logger.log(\"An error occurred:\"+ex.getMessage());\n                throw ex;\n            }\n        }\n        logger.log(\"Successfully processed:\"+event.getRecords().size()+\" records\");\n        return null;\n    }\n\n}\n\n",
                            "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KinesisEvent;\n\npublic class Handler implements RequestHandler<KinesisEvent, Void> {\n    @Override\n    public Void handleRequest(final KinesisEvent event, final Context context) {\n        LambdaLogger logger = context.getLogger();\n        if (event.getRecords().isEmpty()) {\n            logger.log(\"Empty Kinesis Event received\");\n            return null;\n        }\n        for (KinesisEvent.KinesisEventRecord record : event.getRecords()) {\n            try {\n                logger.log(\"Processed Event with EventId: \"+record.getEventID());\n                String data = new String(record.getKinesis().getData().array());\n                logger.log(\"Data:\"+ data);\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex) {\n                logger.log(\"An error occurred:\"+ex.getMessage());\n                throw ex;\n            }\n        }\n        logger.log(\"Successfully processed:\"+event.getRecords().size()+\" records\");\n        return null;\n    }\n\n}\n\n",
                            "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    try {\n      console.log(`Processed Kinesis Event - EventID: ${record.eventID}`);\n      const recordData = await getRecordDataAsync(record.kinesis);\n      console.log(`Record Data: ${recordData}`);\n      // TODO: Do interesting work based on the new data\n    } catch (err) {\n      console.error(`An error occurred ${err}`);\n      throw err;\n    }\n  }\n  console.log(`Successfully processed ${event.Records.length} records.`);\n};\n\nasync function getRecordDataAsync(payload) {\n  var data = Buffer.from(payload.data, \"base64\").toString(\"utf-8\");\n  await Promise.resolve(1); //Placeholder for actual async work\n  return data;\n}\n\n",
                            "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    try {\n      console.log(`Processed Kinesis Event - EventID: ${record.eventID}`);\n      const recordData = await getRecordDataAsync(record.kinesis);\n      console.log(`Record Data: ${recordData}`);\n      // TODO: Do interesting work based on the new data\n    } catch (err) {\n      console.error(`An error occurred ${err}`);\n      throw err;\n    }\n  }\n  console.log(`Successfully processed ${event.Records.length} records.`);\n};\n\nasync function getRecordDataAsync(payload) {\n  var data = Buffer.from(payload.data, \"base64\").toString(\"utf-8\");\n  await Promise.resolve(1); //Placeholder for actual async work\n  return data;\n}\n\n",
                            "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kinesis\\KinesisEvent;\nuse Bref\\Event\\Kinesis\\KinesisHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends KinesisHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleKinesis(KinesisEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing records\");\n        $records = $event->getRecords();\n        foreach ($records as $record) {\n            $data = $record->getData();\n            $this->logger->info(json_encode($data));\n            // TODO: Do interesting work based on the new data\n\n            // Any exception thrown will be logged and the invocation will be marked as failed\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kinesis\\KinesisEvent;\nuse Bref\\Event\\Kinesis\\KinesisHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends KinesisHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleKinesis(KinesisEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing records\");\n        $records = $event->getRecords();\n        foreach ($records as $record) {\n            $data = $record->getData();\n            $this->logger->info(json_encode($data));\n            // TODO: Do interesting work based on the new data\n\n            // Any exception thrown will be logged and the invocation will be marked as failed\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport base64\ndef lambda_handler(event, context):\n\n    for record in event['Records']:\n        try:\n            print(f\"Processed Kinesis Event - EventID: {record['eventID']}\")\n            record_data = base64.b64decode(record['kinesis']['data']).decode('utf-8')\n            print(f\"Record Data: {record_data}\")\n            # TODO: Do interesting work based on the new data\n        except Exception as e:\n            print(f\"An error occurred {e}\")\n            raise e\n    print(f\"Successfully processed {len(event['Records'])} records.\")\n\n",
                            "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport base64\ndef lambda_handler(event, context):\n\n    for record in event['Records']:\n        try:\n            print(f\"Processed Kinesis Event - EventID: {record['eventID']}\")\n            record_data = base64.b64decode(record['kinesis']['data']).decode('utf-8')\n            print(f\"Record Data: {record_data}\")\n            # TODO: Do interesting work based on the new data\n        except Exception as e:\n            print(f\"An error occurred {e}\")\n            raise e\n    print(f\"Successfully processed {len(event['Records'])} records.\")\n\n",
                            "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'aws-sdk'\n\ndef lambda_handler(event:, context:)\n  event['Records'].each do |record|\n    begin\n      puts \"Processed Kinesis Event - EventID: #{record['eventID']}\"\n      record_data = get_record_data_async(record['kinesis'])\n      puts \"Record Data: #{record_data}\"\n      # TODO: Do interesting work based on the new data\n    rescue => err\n      $stderr.puts \"An error occurred #{err}\"\n      raise err\n    end\n  end\n  puts \"Successfully processed #{event['Records'].length} records.\"\nend\n\ndef get_record_data_async(payload)\n  data = Base64.decode64(payload['data']).force_encoding('UTF-8')\n  # Placeholder for actual async work\n  # You can use Ruby's asynchronous programming tools like async/await or fibers here.\n  return data\nend\n",
                            "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'aws-sdk'\n\ndef lambda_handler(event:, context:)\n  event['Records'].each do |record|\n    begin\n      puts \"Processed Kinesis Event - EventID: #{record['eventID']}\"\n      record_data = get_record_data_async(record['kinesis'])\n      puts \"Record Data: #{record_data}\"\n      # TODO: Do interesting work based on the new data\n    rescue => err\n      $stderr.puts \"An error occurred #{err}\"\n      raise err\n    end\n  end\n  puts \"Successfully processed #{event['Records'].length} records.\"\nend\n\ndef get_record_data_async(payload)\n  data = Base64.decode64(payload['data']).force_encoding('UTF-8')\n  # Placeholder for actual async work\n  # You can use Ruby's asynchronous programming tools like async/await or fibers here.\n  return data\nend\n",
                            "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::kinesis::KinesisEvent;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<KinesisEvent>) -> Result<(), Error> {\n    if event.payload.records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    event.payload.records.iter().for_each(|record| {\n        tracing::info!(\"EventId: {}\",record.event_id.as_deref().unwrap_or_default());\n\n        let record_data = std::str::from_utf8(&record.kinesis.data);\n\n        match record_data {\n            Ok(data) => {\n                // log the record data\n                tracing::info!(\"Data: {}\", data);\n            }\n            Err(e) => {\n                tracing::error!(\"Error: {}\", e);\n            }\n        }\n    });\n\n    tracing::info!(\n        \"Successfully processed {} records\",\n        event.payload.records.len()\n    );\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                            "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::kinesis::KinesisEvent;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<KinesisEvent>) -> Result<(), Error> {\n    if event.payload.records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    event.payload.records.iter().for_each(|record| {\n        tracing::info!(\"EventId: {}\",record.event_id.as_deref().unwrap_or_default());\n\n        let record_data = std::str::from_utf8(&record.kinesis.data);\n\n        match record_data {\n            Ok(data) => {\n                // log the record data\n                tracing::info!(\"Data: {}\", data);\n            }\n            Err(e) => {\n                tracing::error!(\"Error: {}\", e);\n            }\n        }\n    });\n\n    tracing::info!(\n        \"Successfully processed {} records\",\n        event.payload.records.len()\n    );\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegrationSampleCode;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return;\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                throw;\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Invoke a Lambda function from a DynamoDB trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_DynamoDB_Lambda_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement a Lambda function that receives an event triggered by receiving records from a DynamoDB stream. The function retrieves the DynamoDB payload and logs the record contents.",
                            "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public void FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            context.Logger.LogInformation($\"Event ID: {record.EventID}\");\n            context.Logger.LogInformation($\"Event Name: {record.EventName}\");\n\n            context.Logger.LogInformation(JsonSerializer.Serialize(record));\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n    }\n}\n\n",
                            "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public void FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            context.Logger.LogInformation($\"Event ID: {record.EventID}\");\n            context.Logger.LogInformation($\"Event Name: {record.EventName}\");\n\n            context.Logger.LogInformation(JsonSerializer.Serialize(record));\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n    }\n}\n\n",
                            "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"fmt\"\n)\n\nfunc HandleRequest(ctx context.Context, event events.DynamoDBEvent) (*string, error) {\n\tif len(event.Records) == 0 {\n\t\treturn nil, fmt.Errorf(\"received empty event\")\n\t}\n\n\tfor _, record := range event.Records {\n\t \tLogDynamoDBRecord(record)\n\t}\n\n\tmessage := fmt.Sprintf(\"Records processed: %d\", len(event.Records))\n\treturn &message, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\nfunc LogDynamoDBRecord(record events.DynamoDBEventRecord){\n\tfmt.Println(record.EventID)\n\tfmt.Println(record.EventName)\n\tfmt.Printf(\"%+v\\n\", record.Change)\n}\n",
                            "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"fmt\"\n)\n\nfunc HandleRequest(ctx context.Context, event events.DynamoDBEvent) (*string, error) {\n\tif len(event.Records) == 0 {\n\t\treturn nil, fmt.Errorf(\"received empty event\")\n\t}\n\n\tfor _, record := range event.Records {\n\t \tLogDynamoDBRecord(record)\n\t}\n\n\tmessage := fmt.Sprintf(\"Records processed: %d\", len(event.Records))\n\treturn &message, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\nfunc LogDynamoDBRecord(record events.DynamoDBEventRecord){\n\tfmt.Println(record.EventID)\n\tfmt.Println(record.EventName)\n\tfmt.Printf(\"%+v\\n\", record.Change)\n}\n",
                            "  5.Java : import com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent.DynamodbStreamRecord;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class example implements RequestHandler<DynamodbEvent, Void> {\n\n    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n\n    @Override\n    public Void handleRequest(DynamodbEvent event, Context context) {\n        System.out.println(GSON.toJson(event));\n        event.getRecords().forEach(this::logDynamoDBRecord);\n        return null;\n    }\n\n    private void logDynamoDBRecord(DynamodbStreamRecord record) {\n        System.out.println(record.getEventID());\n        System.out.println(record.getEventName());\n        System.out.println(\"DynamoDB Record: \" + GSON.toJson(record.getDynamodb()));\n    }\n}\n",
                            "  6.SDK for Java 2.x : import com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent.DynamodbStreamRecord;\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class example implements RequestHandler<DynamodbEvent, Void> {\n\n    private static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();\n\n    @Override\n    public Void handleRequest(DynamodbEvent event, Context context) {\n        System.out.println(GSON.toJson(event));\n        event.getRecords().forEach(this::logDynamoDBRecord);\n        return null;\n    }\n\n    private void logDynamoDBRecord(DynamodbStreamRecord record) {\n        System.out.println(record.getEventID());\n        System.out.println(record.getEventName());\n        System.out.println(\"DynamoDB Record: \" + GSON.toJson(record.getDynamodb()));\n    }\n}\n",
                            "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n    console.log(JSON.stringify(event, null, 2));\n    event.Records.forEach(record => {\n        logDynamoDBRecord(record);\n    });\n};\n\nconst logDynamoDBRecord = (record) => {\n    console.log(record.eventID);\n    console.log(record.eventName);\n    console.log(`DynamoDB Record: ${JSON.stringify(record.dynamodb)}`);\n};\n\n",
                            "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n    console.log(JSON.stringify(event, null, 2));\n    event.Records.forEach(record => {\n        logDynamoDBRecord(record);\n    });\n};\n\nconst logDynamoDBRecord = (record) => {\n    console.log(record.eventID);\n    console.log(record.eventName);\n    console.log(`DynamoDB Record: ${JSON.stringify(record.dynamodb)}`);\n};\n\n",
                            "  9.PHP : <?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\DynamoDb\\DynamoDbEvent;\nuse Bref\\Event\\DynamoDb\\DynamoDbHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends DynamoDbHandler\n{\n    private StderrLogger $logger;\n\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleDynamoDb(DynamoDbEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing DynamoDb table items\");\n        $records = $event->getRecords();\n\n        foreach ($records as $record) {\n            $eventName = $record->getEventName();\n            $keys = $record->getKeys();\n            $old = $record->getOldImage();\n            $new = $record->getNewImage();\n            \n            $this->logger->info(\"Event Name:\".$eventName.\"\\n\");\n            $this->logger->info(\"Keys:\". json_encode($keys).\"\\n\");\n            $this->logger->info(\"Old Image:\". json_encode($old).\"\\n\");\n            $this->logger->info(\"New Image:\". json_encode($new));\n            \n            // TODO: Do interesting work based on the new data\n\n            // Any exception thrown will be logged and the invocation will be marked as failed\n        }\n\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords items\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n",
                            "  10.SDK for PHP : <?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\DynamoDb\\DynamoDbEvent;\nuse Bref\\Event\\DynamoDb\\DynamoDbHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends DynamoDbHandler\n{\n    private StderrLogger $logger;\n\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleDynamoDb(DynamoDbEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing DynamoDb table items\");\n        $records = $event->getRecords();\n\n        foreach ($records as $record) {\n            $eventName = $record->getEventName();\n            $keys = $record->getKeys();\n            $old = $record->getOldImage();\n            $new = $record->getNewImage();\n            \n            $this->logger->info(\"Event Name:\".$eventName.\"\\n\");\n            $this->logger->info(\"Keys:\". json_encode($keys).\"\\n\");\n            $this->logger->info(\"Old Image:\". json_encode($old).\"\\n\");\n            $this->logger->info(\"New Image:\". json_encode($new));\n            \n            // TODO: Do interesting work based on the new data\n\n            // Any exception thrown will be logged and the invocation will be marked as failed\n        }\n\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords items\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n",
                            "  11.Python : \nimport json\n\ndef lambda_handler(event, context):\n    print(json.dumps(event, indent=2))\n\n    for record in event['Records']:\n        log_dynamodb_record(record)\n\ndef log_dynamodb_record(record):\n    print(record['eventID'])\n    print(record['eventName'])\n    print(f\"DynamoDB Record: {json.dumps(record['dynamodb'])}\")\n\n",
                            "  12.SDK for Python (Boto3) : \nimport json\n\ndef lambda_handler(event, context):\n    print(json.dumps(event, indent=2))\n\n    for record in event['Records']:\n        log_dynamodb_record(record)\n\ndef log_dynamodb_record(record):\n    print(record['eventID'])\n    print(record['eventName'])\n    print(f\"DynamoDB Record: {json.dumps(record['dynamodb'])}\")\n\n",
                            "  13.Ruby : \ndef lambda_handler(event:, context:)\n    return 'received empty event' if event['Records'].empty?\n  \n    event['Records'].each do |record|\n      log_dynamodb_record(record)\n    end\n  \n    \"Records processed: #{event['Records'].length}\"\n  end\n  \n  def log_dynamodb_record(record)\n    puts record['eventID']\n    puts record['eventName']\n    puts \"DynamoDB Record: #{JSON.generate(record['dynamodb'])}\"\n  end\n  \n",
                            "  14.SDK for Ruby : \ndef lambda_handler(event:, context:)\n    return 'received empty event' if event['Records'].empty?\n  \n    event['Records'].each do |record|\n      log_dynamodb_record(record)\n    end\n  \n    \"Records processed: #{event['Records'].length}\"\n  end\n  \n  def log_dynamodb_record(record)\n    puts record['eventID']\n    puts record['eventName']\n    puts \"DynamoDB Record: #{JSON.generate(record['dynamodb'])}\"\n  end\n  \n",
                            "  15.Rust : \nuse lambda_runtime::{service_fn, tracing, Error, LambdaEvent};\nuse aws_lambda_events::{\n    event::dynamodb::{Event, EventRecord},\n   };\n\n\n// Built with the following dependencies:\n//lambda_runtime = \"0.11.1\"\n//serde_json = \"1.0\"\n//tokio = { version = \"1\", features = [\"macros\"] }\n//tracing = { version = \"0.1\", features = [\"log\"] }\n//tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n//aws_lambda_events = \"0.15.0\"\n\nasync fn function_handler(event: LambdaEvent<Event>) ->Result<(), Error> {\n    \n    let records = &event.payload.records;\n    tracing::info!(\"event payload: {:?}\",records);\n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    for record in records{\n        log_dynamo_dbrecord(record);\n    }\n\n    tracing::info!(\"Dynamo db records processed\");\n\n    // Prepare the response\n    Ok(())\n\n}\n\nfn log_dynamo_dbrecord(record: &EventRecord)-> Result<(), Error>{\n    tracing::info!(\"EventId: {}\", record.event_id);\n    tracing::info!(\"EventName: {}\", record.event_name);\n    tracing::info!(\"DynamoDB Record: {:?}\", record.change );\n    Ok(())\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n    .with_max_level(tracing::Level::INFO)\n    .with_target(false)\n    .without_time()\n    .init();\n\n    let func = service_fn(function_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n    \n}\n\n",
                            "  16.SDK for Rust : \nuse lambda_runtime::{service_fn, tracing, Error, LambdaEvent};\nuse aws_lambda_events::{\n    event::dynamodb::{Event, EventRecord},\n   };\n\n\n// Built with the following dependencies:\n//lambda_runtime = \"0.11.1\"\n//serde_json = \"1.0\"\n//tokio = { version = \"1\", features = [\"macros\"] }\n//tracing = { version = \"0.1\", features = [\"log\"] }\n//tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n//aws_lambda_events = \"0.15.0\"\n\nasync fn function_handler(event: LambdaEvent<Event>) ->Result<(), Error> {\n    \n    let records = &event.payload.records;\n    tracing::info!(\"event payload: {:?}\",records);\n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    for record in records{\n        log_dynamo_dbrecord(record);\n    }\n\n    tracing::info!(\"Dynamo db records processed\");\n\n    // Prepare the response\n    Ok(())\n\n}\n\nfn log_dynamo_dbrecord(record: &EventRecord)-> Result<(), Error>{\n    tracing::info!(\"EventId: {}\", record.event_id);\n    tracing::info!(\"EventName: {}\", record.event_name);\n    tracing::info!(\"DynamoDB Record: {:?}\", record.change );\n    Ok(())\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n    .with_max_level(tracing::Level::INFO)\n    .with_target(false)\n    .without_time()\n    .init();\n\n    let func = service_fn(function_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n    \n}\n\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public void FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            context.Logger.LogInformation($\"Event ID: {record.EventID}\");\n            context.Logger.LogInformation($\"Event Name: {record.EventName}\");\n\n            context.Logger.LogInformation(JsonSerializer.Serialize(record));\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n    }\n}\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Invoke a Lambda function from a Amazon DocumentDB trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_DocumentDB_Lambda_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement a Lambda function that receives an event triggered by receiving records from a DocumentDB change stream. The function retrieves the DocumentDB payload and logs the record contents.",
                            "  1..NET : using Amazon.Lambda.Core;\nusing System.Text.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Text.Json.Serialization;\n//Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace LambdaDocDb;\n\npublic class Function\n{\n    \n     /// <summary>\n    /// Lambda function entry point to process Amazon DocumentDB events.\n    /// </summary>\n    /// <param name=\"event\">The Amazon DocumentDB event.</param>\n    /// <param name=\"context\">The Lambda context object.</param>\n    /// <returns>A string to indicate successful processing.</returns>\n    public string FunctionHandler(Event evnt, ILambdaContext context)\n    {\n        \n        foreach (var record in evnt.Events)\n        {\n            ProcessDocumentDBEvent(record, context);\n        }\n\n        return \"OK\";\n    }\n\n     private void ProcessDocumentDBEvent(DocumentDBEventRecord record, ILambdaContext context)\n    {\n        \n        var eventData = record.Event;\n        var operationType = eventData.OperationType;\n        var databaseName = eventData.Ns.Db;\n        var collectionName = eventData.Ns.Coll;\n        var fullDocument = JsonSerializer.Serialize(eventData.FullDocument, new JsonSerializerOptions { WriteIndented = true });\n\n        context.Logger.LogLine($\"Operation type: {operationType}\");\n        context.Logger.LogLine($\"Database: {databaseName}\");\n        context.Logger.LogLine($\"Collection: {collectionName}\");\n        context.Logger.LogLine($\"Full document:\\n{fullDocument}\");\n    }\n\n\n\n    public class Event\n    {\n        [JsonPropertyName(\"eventSourceArn\")]\n        public string EventSourceArn { get; set; }\n\n        [JsonPropertyName(\"events\")]\n        public List<DocumentDBEventRecord> Events { get; set; }\n\n        [JsonPropertyName(\"eventSource\")]\n        public string EventSource { get; set; }\n    }\n\n    public class DocumentDBEventRecord\n    {\n        [JsonPropertyName(\"event\")]\n        public EventData Event { get; set; }\n    }\n\n    public class EventData\n    {\n        [JsonPropertyName(\"_id\")]\n        public IdData Id { get; set; }\n\n        [JsonPropertyName(\"clusterTime\")]\n        public ClusterTime ClusterTime { get; set; }\n\n        [JsonPropertyName(\"documentKey\")]\n        public DocumentKey DocumentKey { get; set; }\n\n        [JsonPropertyName(\"fullDocument\")]\n        public Dictionary<string, object> FullDocument { get; set; }\n\n        [JsonPropertyName(\"ns\")]\n        public Namespace Ns { get; set; }\n\n        [JsonPropertyName(\"operationType\")]\n        public string OperationType { get; set; }\n    }\n\n    public class IdData\n    {\n        [JsonPropertyName(\"_data\")]\n        public string Data { get; set; }\n    }\n\n    public class ClusterTime\n    {\n        [JsonPropertyName(\"$timestamp\")]\n        public Timestamp Timestamp { get; set; }\n    }\n\n    public class Timestamp\n    {\n        [JsonPropertyName(\"t\")]\n        public long T { get; set; }\n\n        [JsonPropertyName(\"i\")]\n        public int I { get; set; }\n    }\n\n    public class DocumentKey\n    {\n        [JsonPropertyName(\"_id\")]\n        public Id Id { get; set; }\n    }\n\n    public class Id\n    {\n        [JsonPropertyName(\"$oid\")]\n        public string Oid { get; set; }\n    }\n\n    public class Namespace\n    {\n        [JsonPropertyName(\"db\")]\n        public string Db { get; set; }\n\n        [JsonPropertyName(\"coll\")]\n        public string Coll { get; set; }\n    }\n}\n\n",
                            "  2.AWS SDK for .NET : using Amazon.Lambda.Core;\nusing System.Text.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Text.Json.Serialization;\n//Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace LambdaDocDb;\n\npublic class Function\n{\n    \n     /// <summary>\n    /// Lambda function entry point to process Amazon DocumentDB events.\n    /// </summary>\n    /// <param name=\"event\">The Amazon DocumentDB event.</param>\n    /// <param name=\"context\">The Lambda context object.</param>\n    /// <returns>A string to indicate successful processing.</returns>\n    public string FunctionHandler(Event evnt, ILambdaContext context)\n    {\n        \n        foreach (var record in evnt.Events)\n        {\n            ProcessDocumentDBEvent(record, context);\n        }\n\n        return \"OK\";\n    }\n\n     private void ProcessDocumentDBEvent(DocumentDBEventRecord record, ILambdaContext context)\n    {\n        \n        var eventData = record.Event;\n        var operationType = eventData.OperationType;\n        var databaseName = eventData.Ns.Db;\n        var collectionName = eventData.Ns.Coll;\n        var fullDocument = JsonSerializer.Serialize(eventData.FullDocument, new JsonSerializerOptions { WriteIndented = true });\n\n        context.Logger.LogLine($\"Operation type: {operationType}\");\n        context.Logger.LogLine($\"Database: {databaseName}\");\n        context.Logger.LogLine($\"Collection: {collectionName}\");\n        context.Logger.LogLine($\"Full document:\\n{fullDocument}\");\n    }\n\n\n\n    public class Event\n    {\n        [JsonPropertyName(\"eventSourceArn\")]\n        public string EventSourceArn { get; set; }\n\n        [JsonPropertyName(\"events\")]\n        public List<DocumentDBEventRecord> Events { get; set; }\n\n        [JsonPropertyName(\"eventSource\")]\n        public string EventSource { get; set; }\n    }\n\n    public class DocumentDBEventRecord\n    {\n        [JsonPropertyName(\"event\")]\n        public EventData Event { get; set; }\n    }\n\n    public class EventData\n    {\n        [JsonPropertyName(\"_id\")]\n        public IdData Id { get; set; }\n\n        [JsonPropertyName(\"clusterTime\")]\n        public ClusterTime ClusterTime { get; set; }\n\n        [JsonPropertyName(\"documentKey\")]\n        public DocumentKey DocumentKey { get; set; }\n\n        [JsonPropertyName(\"fullDocument\")]\n        public Dictionary<string, object> FullDocument { get; set; }\n\n        [JsonPropertyName(\"ns\")]\n        public Namespace Ns { get; set; }\n\n        [JsonPropertyName(\"operationType\")]\n        public string OperationType { get; set; }\n    }\n\n    public class IdData\n    {\n        [JsonPropertyName(\"_data\")]\n        public string Data { get; set; }\n    }\n\n    public class ClusterTime\n    {\n        [JsonPropertyName(\"$timestamp\")]\n        public Timestamp Timestamp { get; set; }\n    }\n\n    public class Timestamp\n    {\n        [JsonPropertyName(\"t\")]\n        public long T { get; set; }\n\n        [JsonPropertyName(\"i\")]\n        public int I { get; set; }\n    }\n\n    public class DocumentKey\n    {\n        [JsonPropertyName(\"_id\")]\n        public Id Id { get; set; }\n    }\n\n    public class Id\n    {\n        [JsonPropertyName(\"$oid\")]\n        public string Oid { get; set; }\n    }\n\n    public class Namespace\n    {\n        [JsonPropertyName(\"db\")]\n        public string Db { get; set; }\n\n        [JsonPropertyName(\"coll\")]\n        public string Coll { get; set; }\n    }\n}\n\n",
                            "  3.Go : \npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype Event struct {\n\tEvents []Record `json:\"events\"`\n}\n\ntype Record struct {\n\tEvent struct {\n\t\tOperationType string `json:\"operationType\"`\n\t\tNS            struct {\n\t\t\tDB   string `json:\"db\"`\n\t\t\tColl string `json:\"coll\"`\n\t\t} `json:\"ns\"`\n\t\tFullDocument interface{} `json:\"fullDocument\"`\n\t} `json:\"event\"`\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\nfunc handler(ctx context.Context, event Event) (string, error) {\n\tfmt.Println(\"Loading function\")\n\tfor _, record := range event.Events {\n\t\tlogDocumentDBEvent(record)\n\t}\n\n\treturn \"OK\", nil\n}\n\nfunc logDocumentDBEvent(record Record) {\n\tfmt.Printf(\"Operation type: %s\\n\", record.Event.OperationType)\n\tfmt.Printf(\"db: %s\\n\", record.Event.NS.DB)\n\tfmt.Printf(\"collection: %s\\n\", record.Event.NS.Coll)\n\tdocBytes, _ := json.MarshalIndent(record.Event.FullDocument, \"\", \"  \")\n\tfmt.Printf(\"Full document: %s\\n\", string(docBytes))\n}\n\n",
                            "  4.SDK for Go V2 : \npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype Event struct {\n\tEvents []Record `json:\"events\"`\n}\n\ntype Record struct {\n\tEvent struct {\n\t\tOperationType string `json:\"operationType\"`\n\t\tNS            struct {\n\t\t\tDB   string `json:\"db\"`\n\t\t\tColl string `json:\"coll\"`\n\t\t} `json:\"ns\"`\n\t\tFullDocument interface{} `json:\"fullDocument\"`\n\t} `json:\"event\"`\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\nfunc handler(ctx context.Context, event Event) (string, error) {\n\tfmt.Println(\"Loading function\")\n\tfor _, record := range event.Events {\n\t\tlogDocumentDBEvent(record)\n\t}\n\n\treturn \"OK\", nil\n}\n\nfunc logDocumentDBEvent(record Record) {\n\tfmt.Printf(\"Operation type: %s\\n\", record.Event.OperationType)\n\tfmt.Printf(\"db: %s\\n\", record.Event.NS.DB)\n\tfmt.Printf(\"collection: %s\\n\", record.Event.NS.Coll)\n\tdocBytes, _ := json.MarshalIndent(record.Event.FullDocument, \"\", \"  \")\n\tfmt.Printf(\"Full document: %s\\n\", string(docBytes))\n}\n\n",
                            "  5.JavaScript : console.log('Loading function');\nexports.handler = async (event, context) => {\n    event.events.forEach(record => {\n        logDocumentDBEvent(record);\n    });\n    return 'OK';\n};\n\nconst logDocumentDBEvent = (record) => {\n    console.log('Operation type: ' + record.event.operationType);\n    console.log('db: ' + record.event.ns.db);\n    console.log('collection: ' + record.event.ns.coll);\n    console.log('Full document:', JSON.stringify(record.event.fullDocument, null, 2));\n};\n\n\n",
                            "  6.SDK for JavaScript (v3) : console.log('Loading function');\nexports.handler = async (event, context) => {\n    event.events.forEach(record => {\n        logDocumentDBEvent(record);\n    });\n    return 'OK';\n};\n\nconst logDocumentDBEvent = (record) => {\n    console.log('Operation type: ' + record.event.operationType);\n    console.log('db: ' + record.event.ns.db);\n    console.log('collection: ' + record.event.ns.coll);\n    console.log('Full document:', JSON.stringify(record.event.fullDocument, null, 2));\n};\n\n\n",
                            "  7.PHP : <?php\n\nrequire __DIR__.'/vendor/autoload.php';\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Handler;\n\nclass DocumentDBEventHandler implements Handler\n{\n    public function handle($event, Context $context): string\n    {\n\n        $events = $event['events'] ?? [];\n        foreach ($events as $record) {\n            $this->logDocumentDBEvent($record['event']);\n        }\n        return 'OK';\n    }\n\n    private function logDocumentDBEvent($event): void\n    {\n        // Extract information from the event record\n\n        $operationType = $event['operationType'] ?? 'Unknown';\n        $db = $event['ns']['db'] ?? 'Unknown';\n        $collection = $event['ns']['coll'] ?? 'Unknown';\n        $fullDocument = $event['fullDocument'] ?? [];\n\n        // Log the event details\n\n        echo \"Operation type: $operationType\\n\";\n        echo \"Database: $db\\n\";\n        echo \"Collection: $collection\\n\";\n        echo \"Full document: \" . json_encode($fullDocument, JSON_PRETTY_PRINT) . \"\\n\";\n    }\n}\nreturn new DocumentDBEventHandler();\n",
                            "  8.SDK for PHP : <?php\n\nrequire __DIR__.'/vendor/autoload.php';\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Handler;\n\nclass DocumentDBEventHandler implements Handler\n{\n    public function handle($event, Context $context): string\n    {\n\n        $events = $event['events'] ?? [];\n        foreach ($events as $record) {\n            $this->logDocumentDBEvent($record['event']);\n        }\n        return 'OK';\n    }\n\n    private function logDocumentDBEvent($event): void\n    {\n        // Extract information from the event record\n\n        $operationType = $event['operationType'] ?? 'Unknown';\n        $db = $event['ns']['db'] ?? 'Unknown';\n        $collection = $event['ns']['coll'] ?? 'Unknown';\n        $fullDocument = $event['fullDocument'] ?? [];\n\n        // Log the event details\n\n        echo \"Operation type: $operationType\\n\";\n        echo \"Database: $db\\n\";\n        echo \"Collection: $collection\\n\";\n        echo \"Full document: \" . json_encode($fullDocument, JSON_PRETTY_PRINT) . \"\\n\";\n    }\n}\nreturn new DocumentDBEventHandler();\n",
                            "  9.Python : import json\n\ndef lambda_handler(event, context):\n    for record in event.get('events', []):\n        log_document_db_event(record)\n    return 'OK'\n\ndef log_document_db_event(record):\n    event_data = record.get('event', {})\n    operation_type = event_data.get('operationType', 'Unknown')\n    db = event_data.get('ns', {}).get('db', 'Unknown')\n    collection = event_data.get('ns', {}).get('coll', 'Unknown')\n    full_document = event_data.get('fullDocument', {})\n\n    print(f\"Operation type: {operation_type}\")\n    print(f\"db: {db}\")\n    print(f\"collection: {collection}\")\n    print(\"Full document:\", json.dumps(full_document, indent=2))\n",
                            "  10.SDK for Python (Boto3) : import json\n\ndef lambda_handler(event, context):\n    for record in event.get('events', []):\n        log_document_db_event(record)\n    return 'OK'\n\ndef log_document_db_event(record):\n    event_data = record.get('event', {})\n    operation_type = event_data.get('operationType', 'Unknown')\n    db = event_data.get('ns', {}).get('db', 'Unknown')\n    collection = event_data.get('ns', {}).get('coll', 'Unknown')\n    full_document = event_data.get('fullDocument', {})\n\n    print(f\"Operation type: {operation_type}\")\n    print(f\"db: {db}\")\n    print(f\"collection: {collection}\")\n    print(\"Full document:\", json.dumps(full_document, indent=2))\n",
                            "  11.Ruby : require 'json'\n\ndef lambda_handler(event:, context:)\n  event['events'].each do |record|\n    log_document_db_event(record)\n  end\n  'OK'\nend\n\ndef log_document_db_event(record)\n  event_data = record['event'] || {}\n  operation_type = event_data['operationType'] || 'Unknown'\n  db = event_data.dig('ns', 'db') || 'Unknown'\n  collection = event_data.dig('ns', 'coll') || 'Unknown'\n  full_document = event_data['fullDocument'] || {}\n\n  puts \"Operation type: #{operation_type}\"\n  puts \"db: #{db}\"\n  puts \"collection: #{collection}\"\n  puts \"Full document: #{JSON.pretty_generate(full_document)}\"\nend\n",
                            "  12.SDK for Ruby : require 'json'\n\ndef lambda_handler(event:, context:)\n  event['events'].each do |record|\n    log_document_db_event(record)\n  end\n  'OK'\nend\n\ndef log_document_db_event(record)\n  event_data = record['event'] || {}\n  operation_type = event_data['operationType'] || 'Unknown'\n  db = event_data.dig('ns', 'db') || 'Unknown'\n  collection = event_data.dig('ns', 'coll') || 'Unknown'\n  full_document = event_data['fullDocument'] || {}\n\n  puts \"Operation type: #{operation_type}\"\n  puts \"db: #{db}\"\n  puts \"collection: #{collection}\"\n  puts \"Full document: #{JSON.pretty_generate(full_document)}\"\nend\n",
                            "  13.Rust : \nuse lambda_runtime::{service_fn, tracing, Error, LambdaEvent};\nuse aws_lambda_events::{\n    event::documentdb::{DocumentDbEvent, DocumentDbInnerEvent},\n   };\n\n\n// Built with the following dependencies:\n//lambda_runtime = \"0.11.1\"\n//serde_json = \"1.0\"\n//tokio = { version = \"1\", features = [\"macros\"] }\n//tracing = { version = \"0.1\", features = [\"log\"] }\n//tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n//aws_lambda_events = \"0.15.0\"\n\nasync fn function_handler(event: LambdaEvent<DocumentDbEvent>) ->Result<(), Error> {\n    \n    tracing::info!(\"Event Source ARN: {:?}\", event.payload.event_source_arn);\n    tracing::info!(\"Event Source: {:?}\", event.payload.event_source);\n  \n    let records = &event.payload.events;\n   \n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    for record in records{\n        log_document_db_event(record);\n    }\n\n    tracing::info!(\"Document db records processed\");\n\n    // Prepare the response\n    Ok(())\n\n}\n\nfn log_document_db_event(record: &DocumentDbInnerEvent)-> Result<(), Error>{\n    tracing::info!(\"Change Event: {:?}\", record.event);\n    \n    Ok(())\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n    .with_max_level(tracing::Level::INFO)\n    .with_target(false)\n    .without_time()\n    .init();\n\n    let func = service_fn(function_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n    \n}\n\n",
                            "  14.SDK for Rust : \nuse lambda_runtime::{service_fn, tracing, Error, LambdaEvent};\nuse aws_lambda_events::{\n    event::documentdb::{DocumentDbEvent, DocumentDbInnerEvent},\n   };\n\n\n// Built with the following dependencies:\n//lambda_runtime = \"0.11.1\"\n//serde_json = \"1.0\"\n//tokio = { version = \"1\", features = [\"macros\"] }\n//tracing = { version = \"0.1\", features = [\"log\"] }\n//tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n//aws_lambda_events = \"0.15.0\"\n\nasync fn function_handler(event: LambdaEvent<DocumentDbEvent>) ->Result<(), Error> {\n    \n    tracing::info!(\"Event Source ARN: {:?}\", event.payload.event_source_arn);\n    tracing::info!(\"Event Source: {:?}\", event.payload.event_source);\n  \n    let records = &event.payload.events;\n   \n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(());\n    }\n\n    for record in records{\n        log_document_db_event(record);\n    }\n\n    tracing::info!(\"Document db records processed\");\n\n    // Prepare the response\n    Ok(())\n\n}\n\nfn log_document_db_event(record: &DocumentDbInnerEvent)-> Result<(), Error>{\n    tracing::info!(\"Change Event: {:?}\", record.event);\n    \n    Ok(())\n\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n    .with_max_level(tracing::Level::INFO)\n    .with_target(false)\n    .without_time()\n    .init();\n\n    let func = service_fn(function_handler);\n    lambda_runtime::run(func).await?;\n    Ok(())\n    \n}\n\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : using Amazon.Lambda.Core;\nusing System.Text.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.Text.Json.Serialization;\n//Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace LambdaDocDb;\n\npublic class Function\n{\n    \n     /// <summary>\n    /// Lambda function entry point to process Amazon DocumentDB events.\n    /// </summary>\n    /// <param name=\"event\">The Amazon DocumentDB event.</param>\n    /// <param name=\"context\">The Lambda context object.</param>\n    /// <returns>A string to indicate successful processing.</returns>\n    public string FunctionHandler(Event evnt, ILambdaContext context)\n    {\n        \n        foreach (var record in evnt.Events)\n        {\n            ProcessDocumentDBEvent(record, context);\n        }\n\n        return \"OK\";\n    }\n\n     private void ProcessDocumentDBEvent(DocumentDBEventRecord record, ILambdaContext context)\n    {\n        \n        var eventData = record.Event;\n        var operationType = eventData.OperationType;\n        var databaseName = eventData.Ns.Db;\n        var collectionName = eventData.Ns.Coll;\n        var fullDocument = JsonSerializer.Serialize(eventData.FullDocument, new JsonSerializerOptions { WriteIndented = true });\n\n        context.Logger.LogLine($\"Operation type: {operationType}\");\n        context.Logger.LogLine($\"Database: {databaseName}\");\n        context.Logger.LogLine($\"Collection: {collectionName}\");\n        context.Logger.LogLine($\"Full document:\\n{fullDocument}\");\n    }\n\n\n\n    public class Event\n    {\n        [JsonPropertyName(\"eventSourceArn\")]\n        public string EventSourceArn { get; set; }\n\n        [JsonPropertyName(\"events\")]\n        public List<DocumentDBEventRecord> Events { get; set; }\n\n        [JsonPropertyName(\"eventSource\")]\n        public string EventSource { get; set; }\n    }\n\n    public class DocumentDBEventRecord\n    {\n        [JsonPropertyName(\"event\")]\n        public EventData Event { get; set; }\n    }\n\n    public class EventData\n    {\n        [JsonPropertyName(\"_id\")]\n        public IdData Id { get; set; }\n\n        [JsonPropertyName(\"clusterTime\")]\n        public ClusterTime ClusterTime { get; set; }\n\n        [JsonPropertyName(\"documentKey\")]\n        public DocumentKey DocumentKey { get; set; }\n\n        [JsonPropertyName(\"fullDocument\")]\n        public Dictionary<string, object> FullDocument { get; set; }\n\n        [JsonPropertyName(\"ns\")]\n        public Namespace Ns { get; set; }\n\n        [JsonPropertyName(\"operationType\")]\n        public string OperationType { get; set; }\n    }\n\n    public class IdData\n    {\n        [JsonPropertyName(\"_data\")]\n        public string Data { get; set; }\n    }\n\n    public class ClusterTime\n    {\n        [JsonPropertyName(\"$timestamp\")]\n        public Timestamp Timestamp { get; set; }\n    }\n\n    public class Timestamp\n    {\n        [JsonPropertyName(\"t\")]\n        public long T { get; set; }\n\n        [JsonPropertyName(\"i\")]\n        public int I { get; set; }\n    }\n\n    public class DocumentKey\n    {\n        [JsonPropertyName(\"_id\")]\n        public Id Id { get; set; }\n    }\n\n    public class Id\n    {\n        [JsonPropertyName(\"$oid\")]\n        public string Oid { get; set; }\n    }\n\n    public class Namespace\n    {\n        [JsonPropertyName(\"db\")]\n        public string Db { get; set; }\n\n        [JsonPropertyName(\"coll\")]\n        public string Coll { get; set; }\n    }\n}\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Invoke a Lambda function from an Amazon MSK trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_MSK_Lambda_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement a Lambda function that receives an event triggered by receiving records from an Amazon MSK cluster. The function retrieves the MSK payload and logs the record contents.",
                            "  1..NET : using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KafkaEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace MSKLambda;\n\npublic class Function\n{\n    \n    \n    /// <param name=\"input\">The event for the Lambda function handler to process.</param>\n    /// <param name=\"context\">The ILambdaContext that provides methods for logging and describing the Lambda environment.</param>\n    /// <returns></returns>\n    public void FunctionHandler(KafkaEvent evnt, ILambdaContext context)\n    {\n\n        foreach (var record in evnt.Records)\n        {\n            Console.WriteLine(\"Key:\" + record.Key); \n            foreach (var eventRecord in record.Value)\n            {\n                var valueBytes = eventRecord.Value.ToArray();    \n                var valueText = Encoding.UTF8.GetString(valueBytes);\n                \n                Console.WriteLine(\"Message:\" + valueText);\n            }\n        }\n    }\n    \n\n}\n\n",
                            "  2.AWS SDK for .NET : using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KafkaEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace MSKLambda;\n\npublic class Function\n{\n    \n    \n    /// <param name=\"input\">The event for the Lambda function handler to process.</param>\n    /// <param name=\"context\">The ILambdaContext that provides methods for logging and describing the Lambda environment.</param>\n    /// <returns></returns>\n    public void FunctionHandler(KafkaEvent evnt, ILambdaContext context)\n    {\n\n        foreach (var record in evnt.Records)\n        {\n            Console.WriteLine(\"Key:\" + record.Key); \n            foreach (var eventRecord in record.Value)\n            {\n                var valueBytes = eventRecord.Value.ToArray();    \n                var valueText = Encoding.UTF8.GetString(valueBytes);\n                \n                Console.WriteLine(\"Message:\" + valueText);\n            }\n        }\n    }\n    \n\n}\n\n",
                            "  3.Go : \npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(event events.KafkaEvent) {\n\tfor key, records := range event.Records {\n\t\tfmt.Println(\"Key:\", key)\n\n\t\tfor _, record := range records {\n\t\t\tfmt.Println(\"Record:\", record)\n\n\t\t\tdecodedValue, _ := base64.StdEncoding.DecodeString(record.Value)\n\t\t\tmessage := string(decodedValue)\n\t\t\tfmt.Println(\"Message:\", message)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n",
                            "  4.SDK for Go V2 : \npackage main\n\nimport (\n\t\"encoding/base64\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(event events.KafkaEvent) {\n\tfor key, records := range event.Records {\n\t\tfmt.Println(\"Key:\", key)\n\n\t\tfor _, record := range records {\n\t\t\tfmt.Println(\"Record:\", record)\n\n\t\t\tdecodedValue, _ := base64.StdEncoding.DecodeString(record.Value)\n\t\t\tmessage := string(decodedValue)\n\t\t\tfmt.Println(\"Message:\", message)\n\t\t}\n\t}\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n",
                            "  5.Java : \nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KafkaEvent;\nimport com.amazonaws.services.lambda.runtime.events.KafkaEvent.KafkaEventRecord;\n\nimport java.util.Base64;\nimport java.util.Map;\n\npublic class Example implements RequestHandler<KafkaEvent, Void> {\n\n    @Override\n    public Void handleRequest(KafkaEvent event, Context context) {\n        for (Map.Entry<String, java.util.List<KafkaEventRecord>> entry : event.getRecords().entrySet()) {\n            String key = entry.getKey();\n            System.out.println(\"Key: \" + key);\n\n            for (KafkaEventRecord record : entry.getValue()) {\n                System.out.println(\"Record: \" + record);\n\n                byte[] value = Base64.getDecoder().decode(record.getValue());\n                String message = new String(value);\n                System.out.println(\"Message: \" + message);\n            }\n        }\n\n        return null;\n    }\n}\n\n",
                            "  6.SDK for Java 2.x : \nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KafkaEvent;\nimport com.amazonaws.services.lambda.runtime.events.KafkaEvent.KafkaEventRecord;\n\nimport java.util.Base64;\nimport java.util.Map;\n\npublic class Example implements RequestHandler<KafkaEvent, Void> {\n\n    @Override\n    public Void handleRequest(KafkaEvent event, Context context) {\n        for (Map.Entry<String, java.util.List<KafkaEventRecord>> entry : event.getRecords().entrySet()) {\n            String key = entry.getKey();\n            System.out.println(\"Key: \" + key);\n\n            for (KafkaEventRecord record : entry.getValue()) {\n                System.out.println(\"Record: \" + record);\n\n                byte[] value = Base64.getDecoder().decode(record.getValue());\n                String message = new String(value);\n                System.out.println(\"Message: \" + message);\n            }\n        }\n\n        return null;\n    }\n}\n\n",
                            "  7.JavaScript : \nexports.handler = async (event) => {\n    // Iterate through keys\n    for (let key in event.records) {\n      console.log('Key: ', key)\n      // Iterate through records\n      event.records[key].map((record) => {\n        console.log('Record: ', record)\n        // Decode base64\n        const msg = Buffer.from(record.value, 'base64').toString()\n        console.log('Message:', msg)\n      }) \n    }\n}\n",
                            "  8.SDK for JavaScript (v3) : \nexports.handler = async (event) => {\n    // Iterate through keys\n    for (let key in event.records) {\n      console.log('Key: ', key)\n      // Iterate through records\n      event.records[key].map((record) => {\n        console.log('Record: ', record)\n        // Decode base64\n        const msg = Buffer.from(record.value, 'base64').toString()\n        console.log('Message:', msg)\n      }) \n    }\n}\n",
                            "  9.PHP : <?php\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kafka\\KafkaEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): void\n    {\n        $kafkaEvent = new KafkaEvent($event);\n        $this->logger->info(\"Processing records\");\n        $records = $kafkaEvent->getRecords();\n\n        foreach ($records as $record) {\n            try {\n                $key = $record->getKey();\n                $this->logger->info(\"Key: $key\");\n\n                $values = $record->getValue();\n                $this->logger->info(json_encode($values));\n\n                foreach ($values as $value) {\n                    $this->logger->info(\"Value: $value\");\n                }\n                \n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  10.SDK for PHP : <?php\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\n// using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kafka\\KafkaEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): void\n    {\n        $kafkaEvent = new KafkaEvent($event);\n        $this->logger->info(\"Processing records\");\n        $records = $kafkaEvent->getRecords();\n\n        foreach ($records as $record) {\n            try {\n                $key = $record->getKey();\n                $this->logger->info(\"Key: $key\");\n\n                $values = $record->getValue();\n                $this->logger->info(json_encode($values));\n\n                foreach ($values as $value) {\n                    $this->logger->info(\"Value: $value\");\n                }\n                \n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  11.Python : \nimport base64\n\ndef lambda_handler(event, context):\n    # Iterate through keys\n    for key in event['records']:\n        print('Key:', key)\n        # Iterate through records\n        for record in event['records'][key]:\n            print('Record:', record)\n            # Decode base64\n            msg = base64.b64decode(record['value']).decode('utf-8')\n            print('Message:', msg)\n",
                            "  12.SDK for Python (Boto3) : \nimport base64\n\ndef lambda_handler(event, context):\n    # Iterate through keys\n    for key in event['records']:\n        print('Key:', key)\n        # Iterate through records\n        for record in event['records'][key]:\n            print('Record:', record)\n            # Decode base64\n            msg = base64.b64decode(record['value']).decode('utf-8')\n            print('Message:', msg)\n",
                            "  13.Ruby : \nrequire 'base64'\n\ndef lambda_handler(event:, context:)\n  # Iterate through keys\n  event['records'].each do |key, records|\n    puts \"Key: #{key}\"\n\n    # Iterate through records\n    records.each do |record|\n      puts \"Record: #{record}\"\n\n      # Decode base64\n      msg = Base64.decode64(record['value'])\n      puts \"Message: #{msg}\"\n    end\n  end\nend\n",
                            "  14.SDK for Ruby : \nrequire 'base64'\n\ndef lambda_handler(event:, context:)\n  # Iterate through keys\n  event['records'].each do |key, records|\n    puts \"Key: #{key}\"\n\n    # Iterate through records\n    records.each do |record|\n      puts \"Record: #{record}\"\n\n      # Decode base64\n      msg = Base64.decode64(record['value'])\n      puts \"Message: #{msg}\"\n    end\n  end\nend\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : using System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KafkaEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace MSKLambda;\n\npublic class Function\n{\n    \n    \n    /// <param name=\"input\">The event for the Lambda function handler to process.</param>\n    /// <param name=\"context\">The ILambdaContext that provides methods for logging and describing the Lambda environment.</param>\n    /// <returns></returns>\n    public void FunctionHandler(KafkaEvent evnt, ILambdaContext context)\n    {\n\n        foreach (var record in evnt.Records)\n        {\n            Console.WriteLine(\"Key:\" + record.Key); \n            foreach (var eventRecord in record.Value)\n            {\n                var valueBytes = eventRecord.Value.ToArray();    \n                var valueText = Encoding.UTF8.GetString(valueBytes);\n                \n                Console.WriteLine(\"Message:\" + valueText);\n            }\n        }\n    }\n    \n\n}\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Invoke a Lambda function from an Amazon S3 trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_S3_Lambda_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement a Lambda function that receives an event triggered by uploading an object to an S3 bucket. The function retrieves the S3 bucket name and object key from the event parameter and calls the Amazon S3 API to retrieve and log the content type of the object.",
                            "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Threading.Tasks;\nusing Amazon.Lambda.Core;\nusing Amazon.S3;\nusing System;\nusing Amazon.Lambda.S3Events;\nusing System.Web;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace S3Integration\n{\n    public class Function\n    {\n        private static AmazonS3Client _s3Client;\n        public Function() : this(null)\n        {\n        }\n\n        internal Function(AmazonS3Client s3Client)\n        {\n            _s3Client = s3Client ?? new AmazonS3Client();\n        }\n\n        public async Task<string> Handler(S3Event evt, ILambdaContext context)\n        {\n            try\n            {\n                if (evt.Records.Count <= 0)\n                {\n                    context.Logger.LogLine(\"Empty S3 Event received\");\n                    return string.Empty;\n                }\n\n                var bucket = evt.Records[0].S3.Bucket.Name;\n                var key = HttpUtility.UrlDecode(evt.Records[0].S3.Object.Key);\n\n                context.Logger.LogLine($\"Request is for {bucket} and {key}\");\n\n                var objectResult = await _s3Client.GetObjectAsync(bucket, key);\n\n                context.Logger.LogLine($\"Returning {objectResult.Key}\");\n\n                return objectResult.Key;\n            }\n            catch (Exception e)\n            {\n                context.Logger.LogLine($\"Error processing request - {e.Message}\");\n\n                return string.Empty;\n            }\n        }\n    }\n}\n",
                            "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Threading.Tasks;\nusing Amazon.Lambda.Core;\nusing Amazon.S3;\nusing System;\nusing Amazon.Lambda.S3Events;\nusing System.Web;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace S3Integration\n{\n    public class Function\n    {\n        private static AmazonS3Client _s3Client;\n        public Function() : this(null)\n        {\n        }\n\n        internal Function(AmazonS3Client s3Client)\n        {\n            _s3Client = s3Client ?? new AmazonS3Client();\n        }\n\n        public async Task<string> Handler(S3Event evt, ILambdaContext context)\n        {\n            try\n            {\n                if (evt.Records.Count <= 0)\n                {\n                    context.Logger.LogLine(\"Empty S3 Event received\");\n                    return string.Empty;\n                }\n\n                var bucket = evt.Records[0].S3.Bucket.Name;\n                var key = HttpUtility.UrlDecode(evt.Records[0].S3.Object.Key);\n\n                context.Logger.LogLine($\"Request is for {bucket} and {key}\");\n\n                var objectResult = await _s3Client.GetObjectAsync(bucket, key);\n\n                context.Logger.LogLine($\"Returning {objectResult.Key}\");\n\n                return objectResult.Key;\n            }\n            catch (Exception e)\n            {\n                context.Logger.LogLine($\"Error processing request - {e.Message}\");\n\n                return string.Empty;\n            }\n        }\n    }\n}\n",
                            "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\n\nfunc handler(ctx context.Context, s3Event events.S3Event) error {\n\tsdkConfig, err := config.LoadDefaultConfig(ctx)\n\tif err != nil {\n\t\tlog.Printf(\"failed to load default config: %s\", err)\n\t\treturn err\n\t}\n\ts3Client := s3.NewFromConfig(sdkConfig)\n\n\tfor _, record := range s3Event.Records {\n\t\tbucket := record.S3.Bucket.Name\n\t\tkey := record.S3.Object.URLDecodedKey\n\t\theadOutput, err := s3Client.HeadObject(ctx, &s3.HeadObjectInput{\n\t\t\tBucket: &bucket,\n\t\t\tKey:    &key,\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error getting head of object %s/%s: %s\", bucket, key, err)\n\t\t\treturn err\n\t\t}\n\t\tlog.Printf(\"successfully retrieved %s/%s of type %s\", bucket, key, *headOutput.ContentType)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t\"github.com/aws/aws-sdk-go-v2/config\"\n\t\"github.com/aws/aws-sdk-go-v2/service/s3\"\n)\n\nfunc handler(ctx context.Context, s3Event events.S3Event) error {\n\tsdkConfig, err := config.LoadDefaultConfig(ctx)\n\tif err != nil {\n\t\tlog.Printf(\"failed to load default config: %s\", err)\n\t\treturn err\n\t}\n\ts3Client := s3.NewFromConfig(sdkConfig)\n\n\tfor _, record := range s3Event.Records {\n\t\tbucket := record.S3.Bucket.Name\n\t\tkey := record.S3.Object.URLDecodedKey\n\t\theadOutput, err := s3Client.HeadObject(ctx, &s3.HeadObjectInput{\n\t\t\tBucket: &bucket,\n\t\t\tKey:    &key,\n\t\t})\n\t\tif err != nil {\n\t\t\tlog.Printf(\"error getting head of object %s/%s: %s\", bucket, key, err)\n\t\t\treturn err\n\t\t}\n\t\tlog.Printf(\"successfully retrieved %s/%s of type %s\", bucket, key, *headOutput.ContentType)\n\t}\n\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport software.amazon.awssdk.services.s3.model.HeadObjectRequest;\nimport software.amazon.awssdk.services.s3.model.HeadObjectResponse;\nimport software.amazon.awssdk.services.s3.S3Client;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.S3Event;\nimport com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification.S3EventNotificationRecord;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class Handler implements RequestHandler<S3Event, String> {\n    private static final Logger logger = LoggerFactory.getLogger(Handler.class);\n    @Override\n    public String handleRequest(S3Event s3event, Context context) {\n        try {\n          S3EventNotificationRecord record = s3event.getRecords().get(0);\n          String srcBucket = record.getS3().getBucket().getName();\n          String srcKey = record.getS3().getObject().getUrlDecodedKey();\n\n          S3Client s3Client = S3Client.builder().build();\n          HeadObjectResponse headObject = getHeadObject(s3Client, srcBucket, srcKey);\n\n          logger.info(\"Successfully retrieved \" + srcBucket + \"/\" + srcKey + \" of type \" + headObject.contentType());\n\n          return \"Ok\";\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n    }\n\n    private HeadObjectResponse getHeadObject(S3Client s3Client, String bucket, String key) {\n        HeadObjectRequest headObjectRequest = HeadObjectRequest.builder()\n                .bucket(bucket)\n                .key(key)\n                .build();\n        return s3Client.headObject(headObjectRequest);\n    }\n}\n",
                            "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport software.amazon.awssdk.services.s3.model.HeadObjectRequest;\nimport software.amazon.awssdk.services.s3.model.HeadObjectResponse;\nimport software.amazon.awssdk.services.s3.S3Client;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.S3Event;\nimport com.amazonaws.services.lambda.runtime.events.models.s3.S3EventNotification.S3EventNotificationRecord;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class Handler implements RequestHandler<S3Event, String> {\n    private static final Logger logger = LoggerFactory.getLogger(Handler.class);\n    @Override\n    public String handleRequest(S3Event s3event, Context context) {\n        try {\n          S3EventNotificationRecord record = s3event.getRecords().get(0);\n          String srcBucket = record.getS3().getBucket().getName();\n          String srcKey = record.getS3().getObject().getUrlDecodedKey();\n\n          S3Client s3Client = S3Client.builder().build();\n          HeadObjectResponse headObject = getHeadObject(s3Client, srcBucket, srcKey);\n\n          logger.info(\"Successfully retrieved \" + srcBucket + \"/\" + srcKey + \" of type \" + headObject.contentType());\n\n          return \"Ok\";\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n    }\n\n    private HeadObjectResponse getHeadObject(S3Client s3Client, String bucket, String key) {\n        HeadObjectRequest headObjectRequest = HeadObjectRequest.builder()\n                .bucket(bucket)\n                .key(key)\n                .build();\n        return s3Client.headObject(headObjectRequest);\n    }\n}\n",
                            "  7.JavaScript : import { S3Client, HeadObjectCommand } from \"@aws-sdk/client-s3\";\n\nconst client = new S3Client();\n\nexport const handler = async (event, context) => {\n\n    // Get the object from the event and show its content type\n    const bucket = event.Records[0].s3.bucket.name;\n    const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, ' '));\n\n    try {\n        const { ContentType } = await client.send(new HeadObjectCommand({\n            Bucket: bucket,\n            Key: key,\n        }));\n\n        console.log('CONTENT TYPE:', ContentType);\n        return ContentType;\n\n    } catch (err) {\n        console.log(err);\n        const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;\n        console.log(message);\n        throw new Error(message);\n    }\n};\n\n",
                            "  8.SDK for JavaScript (v3) : import { S3Client, HeadObjectCommand } from \"@aws-sdk/client-s3\";\n\nconst client = new S3Client();\n\nexport const handler = async (event, context) => {\n\n    // Get the object from the event and show its content type\n    const bucket = event.Records[0].s3.bucket.name;\n    const key = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, ' '));\n\n    try {\n        const { ContentType } = await client.send(new HeadObjectCommand({\n            Bucket: bucket,\n            Key: key,\n        }));\n\n        console.log('CONTENT TYPE:', ContentType);\n        return ContentType;\n\n    } catch (err) {\n        console.log(err);\n        const message = `Error getting object ${key} from bucket ${bucket}. Make sure they exist and your bucket is in the same region as this function.`;\n        console.log(message);\n        throw new Error(message);\n    }\n};\n\n",
                            "  9.PHP : <?php\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\S3\\S3Event;\nuse Bref\\Event\\S3\\S3Handler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n\nclass Handler extends S3Handler \n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n    \n    public function handleS3(S3Event $event, Context $context) : void\n    {\n        $this->logger->info(\"Processing S3 records\");\n\n        // Get the object from the event and show its content type\n        $records = $event->getRecords();\n        \n        foreach ($records as $record) \n        {\n            $bucket = $record->getBucket()->getName();\n            $key = urldecode($record->getObject()->getKey());\n\n            try {\n                $fileSize = urldecode($record->getObject()->getSize());\n                echo \"File Size: \" . $fileSize . \"\\n\";\n                // TODO: Implement your custom processing logic here\n            } catch (Exception $e) {\n                echo $e->getMessage() . \"\\n\";\n                echo 'Error getting object ' . $key . ' from bucket ' . $bucket . '. Make sure they exist and your bucket is in the same region as this function.' . \"\\n\";\n                throw $e;\n            }\n        }\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  10.SDK for PHP : <?php\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\S3\\S3Event;\nuse Bref\\Event\\S3\\S3Handler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n\nclass Handler extends S3Handler \n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n    \n    public function handleS3(S3Event $event, Context $context) : void\n    {\n        $this->logger->info(\"Processing S3 records\");\n\n        // Get the object from the event and show its content type\n        $records = $event->getRecords();\n        \n        foreach ($records as $record) \n        {\n            $bucket = $record->getBucket()->getName();\n            $key = urldecode($record->getObject()->getKey());\n\n            try {\n                $fileSize = urldecode($record->getObject()->getSize());\n                echo \"File Size: \" . $fileSize . \"\\n\";\n                // TODO: Implement your custom processing logic here\n            } catch (Exception $e) {\n                echo $e->getMessage() . \"\\n\";\n                echo 'Error getting object ' . $key . ' from bucket ' . $bucket . '. Make sure they exist and your bucket is in the same region as this function.' . \"\\n\";\n                throw $e;\n            }\n        }\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport json\nimport urllib.parse\nimport boto3\n\nprint('Loading function')\n\ns3 = boto3.client('s3')\n\n\ndef lambda_handler(event, context):\n    #print(\"Received event: \" + json.dumps(event, indent=2))\n\n    # Get the object from the event and show its content type\n    bucket = event['Records'][0]['s3']['bucket']['name']\n    key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')\n    try:\n        response = s3.get_object(Bucket=bucket, Key=key)\n        print(\"CONTENT TYPE: \" + response['ContentType'])\n        return response['ContentType']\n    except Exception as e:\n        print(e)\n        print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))\n        raise e\n              \n",
                            "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nimport json\nimport urllib.parse\nimport boto3\n\nprint('Loading function')\n\ns3 = boto3.client('s3')\n\n\ndef lambda_handler(event, context):\n    #print(\"Received event: \" + json.dumps(event, indent=2))\n\n    # Get the object from the event and show its content type\n    bucket = event['Records'][0]['s3']['bucket']['name']\n    key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')\n    try:\n        response = s3.get_object(Bucket=bucket, Key=key)\n        print(\"CONTENT TYPE: \" + response['ContentType'])\n        return response['ContentType']\n    except Exception as e:\n        print(e)\n        print('Error getting object {} from bucket {}. Make sure they exist and your bucket is in the same region as this function.'.format(key, bucket))\n        raise e\n              \n",
                            "  13.Ruby : require 'json'\nrequire 'uri'\nrequire 'aws-sdk'\n\nputs 'Loading function'\n\ndef lambda_handler(event:, context:)\n  s3 = Aws::S3::Client.new(region: 'region') # Your AWS region\n  # puts \"Received event: #{JSON.dump(event)}\"\n\n  # Get the object from the event and show its content type\n  bucket = event['Records'][0]['s3']['bucket']['name']\n  key = URI.decode_www_form_component(event['Records'][0]['s3']['object']['key'], Encoding::UTF_8)\n  begin\n    response = s3.get_object(bucket: bucket, key: key)\n    puts \"CONTENT TYPE: #{response.content_type}\"\n    return response.content_type\n  rescue StandardError => e\n    puts e.message\n    puts \"Error getting object #{key} from bucket #{bucket}. Make sure they exist and your bucket is in the same region as this function.\"\n    raise e\n  end\nend\n\n",
                            "  14.SDK for Ruby : require 'json'\nrequire 'uri'\nrequire 'aws-sdk'\n\nputs 'Loading function'\n\ndef lambda_handler(event:, context:)\n  s3 = Aws::S3::Client.new(region: 'region') # Your AWS region\n  # puts \"Received event: #{JSON.dump(event)}\"\n\n  # Get the object from the event and show its content type\n  bucket = event['Records'][0]['s3']['bucket']['name']\n  key = URI.decode_www_form_component(event['Records'][0]['s3']['object']['key'], Encoding::UTF_8)\n  begin\n    response = s3.get_object(bucket: bucket, key: key)\n    puts \"CONTENT TYPE: #{response.content_type}\"\n    return response.content_type\n  rescue StandardError => e\n    puts e.message\n    puts \"Error getting object #{key} from bucket #{bucket}. Make sure they exist and your bucket is in the same region as this function.\"\n    raise e\n  end\nend\n\n",
                            "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::s3::S3Event;\nuse aws_sdk_s3::{Client};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\n\n/// Main function\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        .with_target(false)\n        .without_time()\n        .init();\n\n    // Initialize the AWS SDK for Rust\n    let config = aws_config::load_from_env().await;\n    let s3_client = Client::new(&config);\n\n    let res = run(service_fn(|request: LambdaEvent<S3Event>| {\n        function_handler(&s3_client, request)\n    })).await;\n\n    res\n}\n\nasync fn function_handler(\n    s3_client: &Client,\n    evt: LambdaEvent<S3Event>\n) -> Result<(), Error> {\n    tracing::info!(records = ?evt.payload.records.len(), \"Received request from SQS\");\n\n    if evt.payload.records.len() == 0 {\n        tracing::info!(\"Empty S3 event received\");\n    }\n\n    let bucket = evt.payload.records[0].s3.bucket.name.as_ref().expect(\"Bucket name to exist\");\n    let key = evt.payload.records[0].s3.object.key.as_ref().expect(\"Object key to exist\");\n\n    tracing::info!(\"Request is for {} and object {}\", bucket, key);\n\n    let s3_get_object_result = s3_client\n        .get_object()\n        .bucket(bucket)\n        .key(key)\n        .send()\n        .await;\n\n    match s3_get_object_result {\n        Ok(_) => tracing::info!(\"S3 Get Object success, the s3GetObjectResult contains a 'body' property of type ByteStream\"),\n        Err(_) => tracing::info!(\"Failure with S3 Get Object request\")\n    }\n\n    Ok(())\n}\n",
                            "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::s3::S3Event;\nuse aws_sdk_s3::{Client};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\n\n/// Main function\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        .with_target(false)\n        .without_time()\n        .init();\n\n    // Initialize the AWS SDK for Rust\n    let config = aws_config::load_from_env().await;\n    let s3_client = Client::new(&config);\n\n    let res = run(service_fn(|request: LambdaEvent<S3Event>| {\n        function_handler(&s3_client, request)\n    })).await;\n\n    res\n}\n\nasync fn function_handler(\n    s3_client: &Client,\n    evt: LambdaEvent<S3Event>\n) -> Result<(), Error> {\n    tracing::info!(records = ?evt.payload.records.len(), \"Received request from SQS\");\n\n    if evt.payload.records.len() == 0 {\n        tracing::info!(\"Empty S3 event received\");\n    }\n\n    let bucket = evt.payload.records[0].s3.bucket.name.as_ref().expect(\"Bucket name to exist\");\n    let key = evt.payload.records[0].s3.object.key.as_ref().expect(\"Object key to exist\");\n\n    tracing::info!(\"Request is for {} and object {}\", bucket, key);\n\n    let s3_get_object_result = s3_client\n        .get_object()\n        .bucket(bucket)\n        .key(key)\n        .send()\n        .await;\n\n    match s3_get_object_result {\n        Ok(_) => tracing::info!(\"S3 Get Object success, the s3GetObjectResult contains a 'body' property of type ByteStream\"),\n        Err(_) => tracing::info!(\"Failure with S3 Get Object request\")\n    }\n\n    Ok(())\n}\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Threading.Tasks;\nusing Amazon.Lambda.Core;\nusing Amazon.S3;\nusing System;\nusing Amazon.Lambda.S3Events;\nusing System.Web;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace S3Integration\n{\n    public class Function\n    {\n        private static AmazonS3Client _s3Client;\n        public Function() : this(null)\n        {\n        }\n\n        internal Function(AmazonS3Client s3Client)\n        {\n            _s3Client = s3Client ?? new AmazonS3Client();\n        }\n\n        public async Task<string> Handler(S3Event evt, ILambdaContext context)\n        {\n            try\n            {\n                if (evt.Records.Count <= 0)\n                {\n                    context.Logger.LogLine(\"Empty S3 Event received\");\n                    return string.Empty;\n                }\n\n                var bucket = evt.Records[0].S3.Bucket.Name;\n                var key = HttpUtility.UrlDecode(evt.Records[0].S3.Object.Key);\n\n                context.Logger.LogLine($\"Request is for {bucket} and {key}\");\n\n                var objectResult = await _s3Client.GetObjectAsync(bucket, key);\n\n                context.Logger.LogLine($\"Returning {objectResult.Key}\");\n\n                return objectResult.Key;\n            }\n            catch (Exception e)\n            {\n                context.Logger.LogLine($\"Error processing request - {e.Message}\");\n\n                return string.Empty;\n            }\n        }\n    }\n}\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Invoke a Lambda function from an Amazon SNS trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_SNS_Lambda_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement a Lambda function that receives an event triggered by receiving messages from an SNS topic. The function retrieves the messages from the event parameter and logs the content of each message.",
                            "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SNSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SnsIntegration;\n\npublic class Function\n{\n    public async Task FunctionHandler(SNSEvent evnt, ILambdaContext context)\n    {\n        foreach (var record in evnt.Records)\n        {\n            await ProcessRecordAsync(record, context);\n        }\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessRecordAsync(SNSEvent.SNSRecord record, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed record {record.Sns.Message}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n    }\n}\n",
                            "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SNSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SnsIntegration;\n\npublic class Function\n{\n    public async Task FunctionHandler(SNSEvent evnt, ILambdaContext context)\n    {\n        foreach (var record in evnt.Records)\n        {\n            await ProcessRecordAsync(record, context);\n        }\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessRecordAsync(SNSEvent.SNSRecord record, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed record {record.Sns.Message}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n    }\n}\n",
                            "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, snsEvent events.SNSEvent) {\n\tfor _, record := range snsEvent.Records {\n\t\tprocessMessage(record)\n\t}\n\tfmt.Println(\"done\")\n}\n\nfunc processMessage(record events.SNSEventRecord) {\n\tmessage := record.SNS.Message\n\tfmt.Printf(\"Processed message: %s\\n\", message)\n\t// TODO: Process your record here\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, snsEvent events.SNSEvent) {\n\tfor _, record := range snsEvent.Records {\n\t\tprocessMessage(record)\n\t}\n\tfmt.Println(\"done\")\n}\n\nfunc processMessage(record events.SNSEventRecord) {\n\tmessage := record.SNS.Message\n\tfmt.Printf(\"Processed message: %s\\n\", message)\n\t// TODO: Process your record here\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent.SNSRecord;\n\n\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class SNSEventHandler implements RequestHandler<SNSEvent, Boolean> {\n    LambdaLogger logger;\n\n    @Override\n    public Boolean handleRequest(SNSEvent event, Context context) {\n        logger = context.getLogger();\n        List<SNSRecord> records = event.getRecords();\n        if (!records.isEmpty()) {\n            Iterator<SNSRecord> recordsIter = records.iterator();\n            while (recordsIter.hasNext()) {\n                processRecord(recordsIter.next());\n            }\n        }\n        return Boolean.TRUE;\n    }\n\n    public void processRecord(SNSRecord record) {\n        try {\n            String message = record.getSNS().getMessage();\n            logger.log(\"message: \" + message);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n\n\n\n\n",
                            "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage example;\n\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.LambdaLogger;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SNSEvent.SNSRecord;\n\n\nimport java.util.Iterator;\nimport java.util.List;\n\npublic class SNSEventHandler implements RequestHandler<SNSEvent, Boolean> {\n    LambdaLogger logger;\n\n    @Override\n    public Boolean handleRequest(SNSEvent event, Context context) {\n        logger = context.getLogger();\n        List<SNSRecord> records = event.getRecords();\n        if (!records.isEmpty()) {\n            Iterator<SNSRecord> recordsIter = records.iterator();\n            while (recordsIter.hasNext()) {\n                processRecord(recordsIter.next());\n            }\n        }\n        return Boolean.TRUE;\n    }\n\n    public void processRecord(SNSRecord record) {\n        try {\n            String message = record.getSNS().getMessage();\n            logger.log(\"message: \" + message);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}\n\n\n\n\n",
                            "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    await processMessageAsync(record);\n  }\n  console.info(\"done\");\n};\n\nasync function processMessageAsync(record) {\n  try {\n    const message = JSON.stringify(record.Sns.Message);\n    console.log(`Processed message ${message}`);\n    await Promise.resolve(1); //Placeholder for actual async work\n  } catch (err) {\n    console.error(\"An error occurred\");\n    throw err;\n  }\n}\n\n",
                            "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    await processMessageAsync(record);\n  }\n  console.info(\"done\");\n};\n\nasync function processMessageAsync(record) {\n  try {\n    const message = JSON.stringify(record.Sns.Message);\n    console.log(`Processed message ${message}`);\n    await Promise.resolve(1); //Placeholder for actual async work\n  } catch (err) {\n    console.error(\"An error occurred\");\n    throw err;\n  }\n}\n\n",
                            "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n/* \nSince native PHP support for AWS Lambda is not available, we are utilizing Bref's PHP functions runtime for AWS Lambda.\nFor more information on Bref's PHP runtime for Lambda, refer to: https://bref.sh/docs/runtimes/function\n\nAnother approach would be to create a custom runtime. \nA practical example can be found here: https://aws.amazon.com/blogs/apn/aws-lambda-custom-runtime-for-php-a-practical-example/\n*/\n\n// Additional composer packages may be required when using Bref or any other PHP functions runtime.\n// require __DIR__ . '/vendor/autoload.php';\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Sns\\SnsEvent;\nuse Bref\\Event\\Sns\\SnsHandler;\n\nclass Handler extends SnsHandler\n{\n    public function handleSns(SnsEvent $event, Context $context): void\n    {\n        foreach ($event->getRecords() as $record) {\n            $message = $record->getMessage();\n\n            // TODO: Implement your custom processing logic here\n            // Any exception thrown will be logged and the invocation will be marked as failed\n\n            echo \"Processed Message: $message\" . PHP_EOL;\n        }\n    }\n}\n\nreturn new Handler();\n\n",
                            "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n/* \nSince native PHP support for AWS Lambda is not available, we are utilizing Bref's PHP functions runtime for AWS Lambda.\nFor more information on Bref's PHP runtime for Lambda, refer to: https://bref.sh/docs/runtimes/function\n\nAnother approach would be to create a custom runtime. \nA practical example can be found here: https://aws.amazon.com/blogs/apn/aws-lambda-custom-runtime-for-php-a-practical-example/\n*/\n\n// Additional composer packages may be required when using Bref or any other PHP functions runtime.\n// require __DIR__ . '/vendor/autoload.php';\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Sns\\SnsEvent;\nuse Bref\\Event\\Sns\\SnsHandler;\n\nclass Handler extends SnsHandler\n{\n    public function handleSns(SnsEvent $event, Context $context): void\n    {\n        foreach ($event->getRecords() as $record) {\n            $message = $record->getMessage();\n\n            // TODO: Implement your custom processing logic here\n            // Any exception thrown will be logged and the invocation will be marked as failed\n\n            echo \"Processed Message: $message\" . PHP_EOL;\n        }\n    }\n}\n\nreturn new Handler();\n\n",
                            "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event, context):\n    for record in event['Records']:\n        process_message(record)\n    print(\"done\")\n\ndef process_message(record):\n    try:\n        message = record['Sns']['Message']\n        print(f\"Processed message {message}\")\n        # TODO; Process your record here\n        \n    except Exception as e:\n        print(\"An error occurred\")\n        raise e\n\n",
                            "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event, context):\n    for record in event['Records']:\n        process_message(record)\n    print(\"done\")\n\ndef process_message(record):\n    try:\n        message = record['Sns']['Message']\n        print(f\"Processed message {message}\")\n        # TODO; Process your record here\n        \n    except Exception as e:\n        print(\"An error occurred\")\n        raise e\n\n",
                            "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event:, context:)\n  event['Records'].map { |record| process_message(record) }\nend\n\ndef process_message(record)\n  message = record['Sns']['Message']\n  puts(\"Processing message: #{message}\")\nrescue StandardError => e\n  puts(\"Error processing message: #{e}\")\n  raise\nend\n\n",
                            "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event:, context:)\n  event['Records'].map { |record| process_message(record) }\nend\n\ndef process_message(record)\n  message = record['Sns']['Message']\n  puts(\"Processing message: #{message}\")\nrescue StandardError => e\n  puts(\"Error processing message: #{e}\")\n  raise\nend\n\n",
                            "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::sns::SnsEvent;\nuse aws_lambda_events::sns::SnsRecord;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse tracing::info;\n\n// Built with the following dependencies:\n//  aws_lambda_events = { version = \"0.10.0\", default-features = false, features = [\"sns\"] }\n//  lambda_runtime = \"0.8.1\"\n//  tokio = { version = \"1\", features = [\"macros\"] }\n//  tracing = { version = \"0.1\", features = [\"log\"] }\n//  tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n\nasync fn function_handler(event: LambdaEvent<SnsEvent>) -> Result<(), Error> {\n    for event in event.payload.records {\n        process_record(&event)?;\n    }\n    \n    Ok(())\n}\n\nfn process_record(record: &SnsRecord) -> Result<(), Error> {\n    info!(\"Processing SNS Message: {}\", record.sns.message);\n\n    // Implement your record handling code here.\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        .with_target(false)\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                            "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::sns::SnsEvent;\nuse aws_lambda_events::sns::SnsRecord;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\nuse tracing::info;\n\n// Built with the following dependencies:\n//  aws_lambda_events = { version = \"0.10.0\", default-features = false, features = [\"sns\"] }\n//  lambda_runtime = \"0.8.1\"\n//  tokio = { version = \"1\", features = [\"macros\"] }\n//  tracing = { version = \"0.1\", features = [\"log\"] }\n//  tracing-subscriber = { version = \"0.3\", default-features = false, features = [\"fmt\"] }\n\nasync fn function_handler(event: LambdaEvent<SnsEvent>) -> Result<(), Error> {\n    for event in event.payload.records {\n        process_record(&event)?;\n    }\n    \n    Ok(())\n}\n\nfn process_record(record: &SnsRecord) -> Result<(), Error> {\n    info!(\"Processing SNS Message: {}\", record.sns.message);\n\n    // Implement your record handling code here.\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        .with_target(false)\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SNSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SnsIntegration;\n\npublic class Function\n{\n    public async Task FunctionHandler(SNSEvent evnt, ILambdaContext context)\n    {\n        foreach (var record in evnt.Records)\n        {\n            await ProcessRecordAsync(record, context);\n        }\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessRecordAsync(SNSEvent.SNSRecord record, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed record {record.Sns.Message}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n    }\n}\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Invoke a Lambda function from an Amazon SQS trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_SQS_Lambda_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement a Lambda function that receives an event triggered by receiving messages from an SQS queue. The function retrieves the messages from the event parameter and logs the content of each message.",
                            "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SqsIntegrationSampleCode\n{\n    public async Task FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        foreach (var message in evnt.Records)\n        {\n            await ProcessMessageAsync(message, context);\n        }\n\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed message {message.Body}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n\n    }\n}\n\n",
                            "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SqsIntegrationSampleCode\n{\n    public async Task FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        foreach (var message in evnt.Records)\n        {\n            await ProcessMessageAsync(message, context);\n        }\n\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed message {message.Body}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n\n    }\n}\n\n",
                            "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage integration_sqs_to_lambda\n\nimport (\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(event events.SQSEvent) error {\n\tfor _, record := range event.Records {\n\t\terr := processMessage(record)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tfmt.Println(\"done\")\n\treturn nil\n}\n\nfunc processMessage(record events.SQSMessage) error {\n\tfmt.Printf(\"Processed message %s\\n\", record.Body)\n\t// TODO: Do interesting work based on the new message\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage integration_sqs_to_lambda\n\nimport (\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(event events.SQSEvent) error {\n\tfor _, record := range event.Records {\n\t\terr := processMessage(record)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tfmt.Println(\"done\")\n\treturn nil\n}\n\nfunc processMessage(record events.SQSMessage) error {\n\tfmt.Printf(\"Processed message %s\\n\", record.Body)\n\t// TODO: Do interesting work based on the new message\n\treturn nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent.SQSMessage;\n\npublic class Function implements RequestHandler<SQSEvent, Void> {\n    @Override\n    public Void handleRequest(SQSEvent sqsEvent, Context context) {\n        for (SQSMessage msg : sqsEvent.getRecords()) {\n            processMessage(msg, context);\n        }\n        context.getLogger().log(\"done\");\n        return null;\n    }\n\n    private void processMessage(SQSMessage msg, Context context) {\n        try {\n            context.getLogger().log(\"Processed message \" + msg.getBody());\n\n            // TODO: Do interesting work based on the new message\n\n        } catch (Exception e) {\n            context.getLogger().log(\"An error occurred\");\n            throw e;\n        }\n\n    }\n}\n",
                            "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent.SQSMessage;\n\npublic class Function implements RequestHandler<SQSEvent, Void> {\n    @Override\n    public Void handleRequest(SQSEvent sqsEvent, Context context) {\n        for (SQSMessage msg : sqsEvent.getRecords()) {\n            processMessage(msg, context);\n        }\n        context.getLogger().log(\"done\");\n        return null;\n    }\n\n    private void processMessage(SQSMessage msg, Context context) {\n        try {\n            context.getLogger().log(\"Processed message \" + msg.getBody());\n\n            // TODO: Do interesting work based on the new message\n\n        } catch (Exception e) {\n            context.getLogger().log(\"An error occurred\");\n            throw e;\n        }\n\n    }\n}\n",
                            "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const message of event.Records) {\n    await processMessageAsync(message);\n  }\n  console.info(\"done\");\n};\n\nasync function processMessageAsync(message) {\n  try {\n    console.log(`Processed message ${message.body}`);\n    // TODO: Do interesting work based on the new message\n    await Promise.resolve(1); //Placeholder for actual async work\n  } catch (err) {\n    console.error(\"An error occurred\");\n    throw err;\n  }\n}\n\n",
                            "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const message of event.Records) {\n    await processMessageAsync(message);\n  }\n  console.info(\"done\");\n};\n\nasync function processMessageAsync(message) {\n  try {\n    console.log(`Processed message ${message.body}`);\n    // TODO: Do interesting work based on the new message\n    await Promise.resolve(1); //Placeholder for actual async work\n  } catch (err) {\n    console.error(\"An error occurred\");\n    throw err;\n  }\n}\n\n",
                            "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\InvalidLambdaEvent;\nuse Bref\\Event\\Sqs\\SqsEvent;\nuse Bref\\Event\\Sqs\\SqsHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends SqsHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws InvalidLambdaEvent\n     */\n    public function handleSqs(SqsEvent $event, Context $context): void\n    {\n        foreach ($event->getRecords() as $record) {\n            $body = $record->getBody();\n            // TODO: Do interesting work based on the new message\n        }\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\InvalidLambdaEvent;\nuse Bref\\Event\\Sqs\\SqsEvent;\nuse Bref\\Event\\Sqs\\SqsHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends SqsHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws InvalidLambdaEvent\n     */\n    public function handleSqs(SqsEvent $event, Context $context): void\n    {\n        foreach ($event->getRecords() as $record) {\n            $body = $record->getBody();\n            // TODO: Do interesting work based on the new message\n        }\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event, context):\n    for message in event['Records']:\n        process_message(message)\n    print(\"done\")\n\ndef process_message(message):\n    try:\n        print(f\"Processed message {message['body']}\")\n        # TODO: Do interesting work based on the new message\n    except Exception as err:\n        print(\"An error occurred\")\n        raise err\n\n",
                            "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event, context):\n    for message in event['Records']:\n        process_message(message)\n    print(\"done\")\n\ndef process_message(message):\n    try:\n        print(f\"Processed message {message['body']}\")\n        # TODO: Do interesting work based on the new message\n    except Exception as err:\n        print(\"An error occurred\")\n        raise err\n\n",
                            "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event:, context:)\n  event['Records'].each do |message|\n    process_message(message)\n  end\n  puts \"done\"\nend\n\ndef process_message(message)\n  begin\n    puts \"Processed message #{message['body']}\"\n    # TODO: Do interesting work based on the new message\n  rescue StandardError => err\n    puts \"An error occurred\"\n    raise err\n  end\nend\n",
                            "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef lambda_handler(event:, context:)\n  event['Records'].each do |message|\n    process_message(message)\n  end\n  puts \"done\"\nend\n\ndef process_message(message)\n  begin\n    puts \"Processed message #{message['body']}\"\n    # TODO: Do interesting work based on the new message\n  rescue StandardError => err\n    puts \"An error occurred\"\n    raise err\n  end\nend\n",
                            "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::sqs::SqsEvent;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<SqsEvent>) -> Result<(), Error> {\n    event.payload.records.iter().for_each(|record| {\n        // process the record\n        tracing::info!(\"Message body: {}\", record.body.as_deref().unwrap_or_default())\n    });\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                            "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::event::sqs::SqsEvent;\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<SqsEvent>) -> Result<(), Error> {\n    event.payload.records.iter().for_each(|record| {\n        // process the record\n        tracing::info!(\"Message body: {}\", record.body.as_deref().unwrap_or_default())\n    });\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace SqsIntegrationSampleCode\n{\n    public async Task FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        foreach (var message in evnt.Records)\n        {\n            await ProcessMessageAsync(message, context);\n        }\n\n        context.Logger.LogInformation(\"done\");\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        try\n        {\n            context.Logger.LogInformation($\"Processed message {message.Body}\");\n\n            // TODO: Do interesting work based on the new message\n            await Task.CompletedTask;\n        }\n        catch (Exception e)\n        {\n            //You can use Dead Letter Queue to handle failures. By configuring a Lambda DLQ.\n            context.Logger.LogError($\"An error occurred\");\n            throw;\n        }\n\n    }\n}\n\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Reporting batch item failures for Lambda functions with a Kinesis trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_Kinesis_Lambda_batch_item_failures_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement partial batch response for Lambda functions that receive events from a Kinesis stream. The function reports the batch item failures in the response, signaling to Lambda to retry those messages later.",
                            "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing System.Text.Json.Serialization;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegration;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task<StreamsEventResponse> FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return new StreamsEventResponse();\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                return new StreamsEventResponse\n                {\n                    BatchItemFailures = new List<StreamsEventResponse.BatchItemFailure>\n                    {\n                        new StreamsEventResponse.BatchItemFailure { ItemIdentifier = record.Kinesis.SequenceNumber }\n                    }\n                };\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n        return new StreamsEventResponse();\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n\npublic class StreamsEventResponse\n{\n    [JsonPropertyName(\"batchItemFailures\")]\n    public IList<BatchItemFailure> BatchItemFailures { get; set; }\n    public class BatchItemFailure\n    {\n        [JsonPropertyName(\"itemIdentifier\")]\n        public string ItemIdentifier { get; set; }\n    }\n}\n",
                            "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing System.Text.Json.Serialization;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegration;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task<StreamsEventResponse> FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return new StreamsEventResponse();\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                return new StreamsEventResponse\n                {\n                    BatchItemFailures = new List<StreamsEventResponse.BatchItemFailure>\n                    {\n                        new StreamsEventResponse.BatchItemFailure { ItemIdentifier = record.Kinesis.SequenceNumber }\n                    }\n                };\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n        return new StreamsEventResponse();\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n\npublic class StreamsEventResponse\n{\n    [JsonPropertyName(\"batchItemFailures\")]\n    public IList<BatchItemFailure> BatchItemFailures { get; set; }\n    public class BatchItemFailure\n    {\n        [JsonPropertyName(\"itemIdentifier\")]\n        public string ItemIdentifier { get; set; }\n    }\n}\n",
                            "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) (map[string]interface{}, error) {\n\tbatchItemFailures := []map[string]interface{}{}\n\n\tfor _, record := range kinesisEvent.Records {\n\t\tcurRecordSequenceNumber := \"\"\n\n\t\t// Process your record\n\t\tif /* Your record processing condition here */ {\n\t\t\tcurRecordSequenceNumber = record.Kinesis.SequenceNumber\n\t\t}\n\n\t\t// Add a condition to check if the record processing failed\n\t\tif curRecordSequenceNumber != \"\" {\n\t\t\tbatchItemFailures = append(batchItemFailures, map[string]interface{}{\"itemIdentifier\": curRecordSequenceNumber})\n\t\t}\n\t}\n\n\tkinesisBatchResponse := map[string]interface{}{\n\t\t\"batchItemFailures\": batchItemFailures,\n\t}\n\treturn kinesisBatchResponse, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, kinesisEvent events.KinesisEvent) (map[string]interface{}, error) {\n\tbatchItemFailures := []map[string]interface{}{}\n\n\tfor _, record := range kinesisEvent.Records {\n\t\tcurRecordSequenceNumber := \"\"\n\n\t\t// Process your record\n\t\tif /* Your record processing condition here */ {\n\t\t\tcurRecordSequenceNumber = record.Kinesis.SequenceNumber\n\t\t}\n\n\t\t// Add a condition to check if the record processing failed\n\t\tif curRecordSequenceNumber != \"\" {\n\t\t\tbatchItemFailures = append(batchItemFailures, map[string]interface{}{\"itemIdentifier\": curRecordSequenceNumber})\n\t\t}\n\t}\n\n\tkinesisBatchResponse := map[string]interface{}{\n\t\t\"batchItemFailures\": batchItemFailures,\n\t}\n\treturn kinesisBatchResponse, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KinesisEvent;\nimport com.amazonaws.services.lambda.runtime.events.StreamsEventResponse;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProcessKinesisRecords implements RequestHandler<KinesisEvent, StreamsEventResponse> {\n\n    @Override\n    public StreamsEventResponse handleRequest(KinesisEvent input, Context context) {\n\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new ArrayList<>();\n        String curRecordSequenceNumber = \"\";\n\n        for (KinesisEvent.KinesisEventRecord kinesisEventRecord : input.getRecords()) {\n            try {\n                //Process your record\n                KinesisEvent.Record kinesisRecord = kinesisEventRecord.getKinesis();\n                curRecordSequenceNumber = kinesisRecord.getSequenceNumber();\n\n            } catch (Exception e) {\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                batchItemFailures.add(new StreamsEventResponse.BatchItemFailure(curRecordSequenceNumber));\n                return new StreamsEventResponse(batchItemFailures);\n            }\n        }\n       \n       return new StreamsEventResponse(batchItemFailures);   \n    }\n}\n\n",
                            "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.KinesisEvent;\nimport com.amazonaws.services.lambda.runtime.events.StreamsEventResponse;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProcessKinesisRecords implements RequestHandler<KinesisEvent, StreamsEventResponse> {\n\n    @Override\n    public StreamsEventResponse handleRequest(KinesisEvent input, Context context) {\n\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new ArrayList<>();\n        String curRecordSequenceNumber = \"\";\n\n        for (KinesisEvent.KinesisEventRecord kinesisEventRecord : input.getRecords()) {\n            try {\n                //Process your record\n                KinesisEvent.Record kinesisRecord = kinesisEventRecord.getKinesis();\n                curRecordSequenceNumber = kinesisRecord.getSequenceNumber();\n\n            } catch (Exception e) {\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                batchItemFailures.add(new StreamsEventResponse.BatchItemFailure(curRecordSequenceNumber));\n                return new StreamsEventResponse(batchItemFailures);\n            }\n        }\n       \n       return new StreamsEventResponse(batchItemFailures);   \n    }\n}\n\n",
                            "  7.JavaScript : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    try {\n      console.log(`Processed Kinesis Event - EventID: ${record.eventID}`);\n      const recordData = await getRecordDataAsync(record.kinesis);\n      console.log(`Record Data: ${recordData}`);\n      // TODO: Do interesting work based on the new data\n    } catch (err) {\n      console.error(`An error occurred ${err}`);\n      /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n      return {\n        batchItemFailures: [{ itemIdentifier: record.kinesis.sequenceNumber }],\n      };\n    }\n  }\n  console.log(`Successfully processed ${event.Records.length} records.`);\n  return { batchItemFailures: [] };\n};\n\nasync function getRecordDataAsync(payload) {\n  var data = Buffer.from(payload.data, \"base64\").toString(\"utf-8\");\n  await Promise.resolve(1); //Placeholder for actual async work\n  return data;\n}\n\n",
                            "  8.SDK for JavaScript (v3) : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexports.handler = async (event, context) => {\n  for (const record of event.Records) {\n    try {\n      console.log(`Processed Kinesis Event - EventID: ${record.eventID}`);\n      const recordData = await getRecordDataAsync(record.kinesis);\n      console.log(`Record Data: ${recordData}`);\n      // TODO: Do interesting work based on the new data\n    } catch (err) {\n      console.error(`An error occurred ${err}`);\n      /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n      return {\n        batchItemFailures: [{ itemIdentifier: record.kinesis.sequenceNumber }],\n      };\n    }\n  }\n  console.log(`Successfully processed ${event.Records.length} records.`);\n  return { batchItemFailures: [] };\n};\n\nasync function getRecordDataAsync(payload) {\n  var data = Buffer.from(payload.data, \"base64\").toString(\"utf-8\");\n  await Promise.resolve(1); //Placeholder for actual async work\n  return data;\n}\n\n",
                            "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kinesis\\KinesisEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $kinesisEvent = new KinesisEvent($event);\n        $this->logger->info(\"Processing records\");\n        $records = $kinesisEvent->getRecords();\n\n        $failedRecords = [];\n        foreach ($records as $record) {\n            try {\n                $data = $record->getData();\n                $this->logger->info(json_encode($data));\n                // TODO: Do interesting work based on the new data\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $failedRecords[] = $record->getSequenceNumber();\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n\n        // change format for the response\n        $failures = array_map(\n            fn(string $sequenceNumber) => ['itemIdentifier' => $sequenceNumber],\n            $failedRecords\n        );\n\n        return [\n            'batchItemFailures' => $failures\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Kinesis\\KinesisEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $kinesisEvent = new KinesisEvent($event);\n        $this->logger->info(\"Processing records\");\n        $records = $kinesisEvent->getRecords();\n\n        $failedRecords = [];\n        foreach ($records as $record) {\n            try {\n                $data = $record->getData();\n                $this->logger->info(json_encode($data));\n                // TODO: Do interesting work based on the new data\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $failedRecords[] = $record->getSequenceNumber();\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n\n        // change format for the response\n        $failures = array_map(\n            fn(string $sequenceNumber) => ['itemIdentifier' => $sequenceNumber],\n            $failedRecords\n        );\n\n        return [\n            'batchItemFailures' => $failures\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef handler(event, context):\n    records = event.get(\"Records\")\n    curRecordSequenceNumber = \"\"\n    \n    for record in records:\n        try:\n            # Process your record\n            curRecordSequenceNumber = record[\"kinesis\"][\"sequenceNumber\"]\n        except Exception as e:\n            # Return failed record's sequence number\n            return {\"batchItemFailures\":[{\"itemIdentifier\": curRecordSequenceNumber}]}\n\n    return {\"batchItemFailures\":[]}\n\n",
                            "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef handler(event, context):\n    records = event.get(\"Records\")\n    curRecordSequenceNumber = \"\"\n    \n    for record in records:\n        try:\n            # Process your record\n            curRecordSequenceNumber = record[\"kinesis\"][\"sequenceNumber\"]\n        except Exception as e:\n            # Return failed record's sequence number\n            return {\"batchItemFailures\":[{\"itemIdentifier\": curRecordSequenceNumber}]}\n\n    return {\"batchItemFailures\":[]}\n\n",
                            "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'aws-sdk'\n\ndef lambda_handler(event:, context:)\n  batch_item_failures = []\n\n  event['Records'].each do |record|\n    begin\n      puts \"Processed Kinesis Event - EventID: #{record['eventID']}\"\n      record_data = get_record_data_async(record['kinesis'])\n      puts \"Record Data: #{record_data}\"\n      # TODO: Do interesting work based on the new data\n    rescue StandardError => err\n      puts \"An error occurred #{err}\"\n      # Since we are working with streams, we can return the failed item immediately.\n      # Lambda will immediately begin to retry processing from this failed item onwards.\n      return { batchItemFailures: [{ itemIdentifier: record['kinesis']['sequenceNumber'] }] }\n    end\n  end\n\n  puts \"Successfully processed #{event['Records'].length} records.\"\n  { batchItemFailures: batch_item_failures }\nend\n\ndef get_record_data_async(payload)\n  data = Base64.decode64(payload['data']).force_encoding('utf-8')\n  # Placeholder for actual async work\n  sleep(1)\n  data\nend\n",
                            "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'aws-sdk'\n\ndef lambda_handler(event:, context:)\n  batch_item_failures = []\n\n  event['Records'].each do |record|\n    begin\n      puts \"Processed Kinesis Event - EventID: #{record['eventID']}\"\n      record_data = get_record_data_async(record['kinesis'])\n      puts \"Record Data: #{record_data}\"\n      # TODO: Do interesting work based on the new data\n    rescue StandardError => err\n      puts \"An error occurred #{err}\"\n      # Since we are working with streams, we can return the failed item immediately.\n      # Lambda will immediately begin to retry processing from this failed item onwards.\n      return { batchItemFailures: [{ itemIdentifier: record['kinesis']['sequenceNumber'] }] }\n    end\n  end\n\n  puts \"Successfully processed #{event['Records'].length} records.\"\n  { batchItemFailures: batch_item_failures }\nend\n\ndef get_record_data_async(payload)\n  data = Base64.decode64(payload['data']).force_encoding('utf-8')\n  # Placeholder for actual async work\n  sleep(1)\n  data\nend\n",
                            "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::{\n    event::kinesis::KinesisEvent,\n    kinesis::KinesisEventRecord,\n    streams::{KinesisBatchItemFailure, KinesisEventResponse},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<KinesisEvent>) -> Result<KinesisEventResponse, Error> {\n    let mut response = KinesisEventResponse {\n        batch_item_failures: vec![],\n    };\n\n    if event.payload.records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(response);\n    }\n\n    for record in &event.payload.records {\n        tracing::info!(\n            \"EventId: {}\",\n            record.event_id.as_deref().unwrap_or_default()\n        );\n\n        let record_processing_result = process_record(record);\n\n        if record_processing_result.is_err() {\n            response.batch_item_failures.push(KinesisBatchItemFailure {\n                item_identifier: record.kinesis.sequence_number.clone(),\n            });\n            /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n            return Ok(response);\n        }\n    }\n\n    tracing::info!(\n        \"Successfully processed {} records\",\n        event.payload.records.len()\n    );\n\n    Ok(response)\n}\n\nfn process_record(record: &KinesisEventRecord) -> Result<(), Error> {\n    let record_data = std::str::from_utf8(record.kinesis.data.as_slice());\n\n    if let Some(err) = record_data.err() {\n        tracing::error!(\"Error: {}\", err);\n        return Err(Error::from(err));\n    }\n\n    let record_data = record_data.unwrap_or_default();\n\n    // do something interesting with the data\n    tracing::info!(\"Data: {}\", record_data);\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                            "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::{\n    event::kinesis::KinesisEvent,\n    kinesis::KinesisEventRecord,\n    streams::{KinesisBatchItemFailure, KinesisEventResponse},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn function_handler(event: LambdaEvent<KinesisEvent>) -> Result<KinesisEventResponse, Error> {\n    let mut response = KinesisEventResponse {\n        batch_item_failures: vec![],\n    };\n\n    if event.payload.records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(response);\n    }\n\n    for record in &event.payload.records {\n        tracing::info!(\n            \"EventId: {}\",\n            record.event_id.as_deref().unwrap_or_default()\n        );\n\n        let record_processing_result = process_record(record);\n\n        if record_processing_result.is_err() {\n            response.batch_item_failures.push(KinesisBatchItemFailure {\n                item_identifier: record.kinesis.sequence_number.clone(),\n            });\n            /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n            return Ok(response);\n        }\n    }\n\n    tracing::info!(\n        \"Successfully processed {} records\",\n        event.payload.records.len()\n    );\n\n    Ok(response)\n}\n\nfn process_record(record: &KinesisEventRecord) -> Result<(), Error> {\n    let record_data = std::str::from_utf8(record.kinesis.data.as_slice());\n\n    if let Some(err) = record_data.err() {\n        tracing::error!(\"Error: {}\", err);\n        return Err(Error::from(err));\n    }\n\n    let record_data = record_data.unwrap_or_default();\n\n    // do something interesting with the data\n    tracing::info!(\"Data: {}\", record_data);\n\n    Ok(())\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n﻿using System.Text;\nusing System.Text.Json.Serialization;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.KinesisEvents;\nusing AWS.Lambda.Powertools.Logging;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace KinesisIntegration;\n\npublic class Function\n{\n    // Powertools Logger requires an environment variables against your function\n    // POWERTOOLS_SERVICE_NAME\n    [Logging(LogEvent = true)]\n    public async Task<StreamsEventResponse> FunctionHandler(KinesisEvent evnt, ILambdaContext context)\n    {\n        if (evnt.Records.Count == 0)\n        {\n            Logger.LogInformation(\"Empty Kinesis Event received\");\n            return new StreamsEventResponse();\n        }\n\n        foreach (var record in evnt.Records)\n        {\n            try\n            {\n                Logger.LogInformation($\"Processed Event with EventId: {record.EventId}\");\n                string data = await GetRecordDataAsync(record.Kinesis, context);\n                Logger.LogInformation($\"Data: {data}\");\n                // TODO: Do interesting work based on the new data\n            }\n            catch (Exception ex)\n            {\n                Logger.LogError($\"An error occurred {ex.Message}\");\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                return new StreamsEventResponse\n                {\n                    BatchItemFailures = new List<StreamsEventResponse.BatchItemFailure>\n                    {\n                        new StreamsEventResponse.BatchItemFailure { ItemIdentifier = record.Kinesis.SequenceNumber }\n                    }\n                };\n            }\n        }\n        Logger.LogInformation($\"Successfully processed {evnt.Records.Count} records.\");\n        return new StreamsEventResponse();\n    }\n\n    private async Task<string> GetRecordDataAsync(KinesisEvent.Record record, ILambdaContext context)\n    {\n        byte[] bytes = record.Data.ToArray();\n        string data = Encoding.UTF8.GetString(bytes);\n        await Task.CompletedTask; //Placeholder for actual async work\n        return data;\n    }\n}\n\npublic class StreamsEventResponse\n{\n    [JsonPropertyName(\"batchItemFailures\")]\n    public IList<BatchItemFailure> BatchItemFailures { get; set; }\n    public class BatchItemFailure\n    {\n        [JsonPropertyName(\"itemIdentifier\")]\n        public string ItemIdentifier { get; set; }\n    }\n}\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Reporting batch item failures for Lambda functions with a DynamoDB trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_DynamoDB_Lambda_batch_item_failures_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement partial batch response for Lambda functions that receive events from a DynamoDB stream. The function reports the batch item failures in the response, signaling to Lambda to retry those messages later.",
                            "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public StreamsEventResponse FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new List<StreamsEventResponse.BatchItemFailure>();\n        StreamsEventResponse streamsEventResponse = new StreamsEventResponse();\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            try\n            {\n                var sequenceNumber = record.Dynamodb.SequenceNumber;\n                context.Logger.LogInformation(sequenceNumber);\n            }\n            catch (Exception ex)\n            {\n                context.Logger.LogError(ex.Message);\n                batchItemFailures.Add(new StreamsEventResponse.BatchItemFailure() { ItemIdentifier = record.Dynamodb.SequenceNumber });\n            }\n        }\n\n        if (batchItemFailures.Count > 0)\n        {\n            streamsEventResponse.BatchItemFailures = batchItemFailures;\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n        return streamsEventResponse;\n    }\n}\n",
                            "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public StreamsEventResponse FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new List<StreamsEventResponse.BatchItemFailure>();\n        StreamsEventResponse streamsEventResponse = new StreamsEventResponse();\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            try\n            {\n                var sequenceNumber = record.Dynamodb.SequenceNumber;\n                context.Logger.LogInformation(sequenceNumber);\n            }\n            catch (Exception ex)\n            {\n                context.Logger.LogError(ex.Message);\n                batchItemFailures.Add(new StreamsEventResponse.BatchItemFailure() { ItemIdentifier = record.Dynamodb.SequenceNumber });\n            }\n        }\n\n        if (batchItemFailures.Count > 0)\n        {\n            streamsEventResponse.BatchItemFailures = batchItemFailures;\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n        return streamsEventResponse;\n    }\n}\n",
                            "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype BatchItemFailure struct {\n\tItemIdentifier string `json:\"ItemIdentifier\"`\n}\n\ntype BatchResult struct {\n\tBatchItemFailures []BatchItemFailure `json:\"BatchItemFailures\"`\n}\n\nfunc HandleRequest(ctx context.Context, event events.DynamoDBEvent) (*BatchResult, error) {\n\tvar batchItemFailures []BatchItemFailure\n\tcurRecordSequenceNumber := \"\"\n\n\tfor _, record := range event.Records {\n\t\t// Process your record\n\t\tcurRecordSequenceNumber = record.Change.SequenceNumber\n\t}\n\n\tif curRecordSequenceNumber != \"\" {\n\t\tbatchItemFailures = append(batchItemFailures, BatchItemFailure{ItemIdentifier: curRecordSequenceNumber})\n\t}\n\t\n\tbatchResult := BatchResult{\n\t\tBatchItemFailures: batchItemFailures,\n\t}\n\n\treturn &batchResult, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                            "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\ntype BatchItemFailure struct {\n\tItemIdentifier string `json:\"ItemIdentifier\"`\n}\n\ntype BatchResult struct {\n\tBatchItemFailures []BatchItemFailure `json:\"BatchItemFailures\"`\n}\n\nfunc HandleRequest(ctx context.Context, event events.DynamoDBEvent) (*BatchResult, error) {\n\tvar batchItemFailures []BatchItemFailure\n\tcurRecordSequenceNumber := \"\"\n\n\tfor _, record := range event.Records {\n\t\t// Process your record\n\t\tcurRecordSequenceNumber = record.Change.SequenceNumber\n\t}\n\n\tif curRecordSequenceNumber != \"\" {\n\t\tbatchItemFailures = append(batchItemFailures, BatchItemFailure{ItemIdentifier: curRecordSequenceNumber})\n\t}\n\t\n\tbatchResult := BatchResult{\n\t\tBatchItemFailures: batchItemFailures,\n\t}\n\n\treturn &batchResult, nil\n}\n\nfunc main() {\n\tlambda.Start(HandleRequest)\n}\n\n",
                            "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent;\nimport com.amazonaws.services.lambda.runtime.events.StreamsEventResponse;\nimport com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProcessDynamodbRecords implements RequestHandler<DynamodbEvent, Serializable> {\n\n    @Override\n    public StreamsEventResponse handleRequest(DynamodbEvent input, Context context) {\n\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new ArrayList<>();\n        String curRecordSequenceNumber = \"\";\n\n        for (DynamodbEvent.DynamodbStreamRecord dynamodbStreamRecord : input.getRecords()) {\n          try {\n                //Process your record\n                StreamRecord dynamodbRecord = dynamodbStreamRecord.getDynamodb();\n                curRecordSequenceNumber = dynamodbRecord.getSequenceNumber();\n                \n            } catch (Exception e) {\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                batchItemFailures.add(new StreamsEventResponse.BatchItemFailure(curRecordSequenceNumber));\n                return new StreamsEventResponse(batchItemFailures);\n            }\n        }\n       \n       return new StreamsEventResponse();   \n    }\n}\n\n",
                            "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.DynamodbEvent;\nimport com.amazonaws.services.lambda.runtime.events.StreamsEventResponse;\nimport com.amazonaws.services.lambda.runtime.events.models.dynamodb.StreamRecord;\n\nimport java.io.Serializable;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ProcessDynamodbRecords implements RequestHandler<DynamodbEvent, Serializable> {\n\n    @Override\n    public StreamsEventResponse handleRequest(DynamodbEvent input, Context context) {\n\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new ArrayList<>();\n        String curRecordSequenceNumber = \"\";\n\n        for (DynamodbEvent.DynamodbStreamRecord dynamodbStreamRecord : input.getRecords()) {\n          try {\n                //Process your record\n                StreamRecord dynamodbRecord = dynamodbStreamRecord.getDynamodb();\n                curRecordSequenceNumber = dynamodbRecord.getSequenceNumber();\n                \n            } catch (Exception e) {\n                /* Since we are working with streams, we can return the failed item immediately.\n                   Lambda will immediately begin to retry processing from this failed item onwards. */\n                batchItemFailures.add(new StreamsEventResponse.BatchItemFailure(curRecordSequenceNumber));\n                return new StreamsEventResponse(batchItemFailures);\n            }\n        }\n       \n       return new StreamsEventResponse();   \n    }\n}\n\n",
                            "  7.JavaScript : export const handler = async (event) => {\n  const records = event.Records;\n  let curRecordSequenceNumber = \"\";\n\n  for (const record of records) {\n    try {\n      // Process your record\n      curRecordSequenceNumber = record.dynamodb.SequenceNumber;\n    } catch (e) {\n      // Return failed record's sequence number\n      return { batchItemFailures: [{ itemIdentifier: curRecordSequenceNumber }] };\n    }\n  }\n\n  return { batchItemFailures: [] };\n};\n\n",
                            "  8.SDK for JavaScript (v3) : export const handler = async (event) => {\n  const records = event.Records;\n  let curRecordSequenceNumber = \"\";\n\n  for (const record of records) {\n    try {\n      // Process your record\n      curRecordSequenceNumber = record.dynamodb.SequenceNumber;\n    } catch (e) {\n      // Return failed record's sequence number\n      return { batchItemFailures: [{ itemIdentifier: curRecordSequenceNumber }] };\n    }\n  }\n\n  return { batchItemFailures: [] };\n};\n\n",
                            "  9.PHP : <?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\DynamoDb\\DynamoDbEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $dynamoDbEvent = new DynamoDbEvent($event);\n        $this->logger->info(\"Processing records\");\n\n        $records = $dynamoDbEvent->getRecords();\n        $failedRecords = [];\n        foreach ($records as $record) {\n            try {\n                $data = $record->getData();\n                $this->logger->info(json_encode($data));\n                // TODO: Do interesting work based on the new data\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $failedRecords[] = $record->getSequenceNumber();\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n\n        // change format for the response\n        $failures = array_map(\n            fn(string $sequenceNumber) => ['itemIdentifier' => $sequenceNumber],\n            $failedRecords\n        );\n\n        return [\n            'batchItemFailures' => $failures\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  10.SDK for PHP : <?php\n\n# using bref/bref and bref/logger for simplicity\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\DynamoDb\\DynamoDbEvent;\nuse Bref\\Event\\Handler as StdHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler implements StdHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handle(mixed $event, Context $context): array\n    {\n        $dynamoDbEvent = new DynamoDbEvent($event);\n        $this->logger->info(\"Processing records\");\n\n        $records = $dynamoDbEvent->getRecords();\n        $failedRecords = [];\n        foreach ($records as $record) {\n            try {\n                $data = $record->getData();\n                $this->logger->info(json_encode($data));\n                // TODO: Do interesting work based on the new data\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $failedRecords[] = $record->getSequenceNumber();\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords records\");\n\n        // change format for the response\n        $failures = array_map(\n            fn(string $sequenceNumber) => ['itemIdentifier' => $sequenceNumber],\n            $failedRecords\n        );\n\n        return [\n            'batchItemFailures' => $failures\n        ];\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef handler(event, context):\n    records = event.get(\"Records\")\n    curRecordSequenceNumber = \"\"\n    \n    for record in records:\n        try:\n            # Process your record\n            curRecordSequenceNumber = record[\"dynamodb\"][\"SequenceNumber\"]\n        except Exception as e:\n            # Return failed record's sequence number\n            return {\"batchItemFailures\":[{\"itemIdentifier\": curRecordSequenceNumber}]}\n\n    return {\"batchItemFailures\":[]}\n\n",
                            "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\ndef handler(event, context):\n    records = event.get(\"Records\")\n    curRecordSequenceNumber = \"\"\n    \n    for record in records:\n        try:\n            # Process your record\n            curRecordSequenceNumber = record[\"dynamodb\"][\"SequenceNumber\"]\n        except Exception as e:\n            # Return failed record's sequence number\n            return {\"batchItemFailures\":[{\"itemIdentifier\": curRecordSequenceNumber}]}\n\n    return {\"batchItemFailures\":[]}\n\n",
                            "  13.Ruby : def lambda_handler(event:, context:)\n    records = event[\"Records\"]\n    cur_record_sequence_number = \"\"\n  \n    records.each do |record|\n      begin\n        # Process your record\n        cur_record_sequence_number = record[\"dynamodb\"][\"SequenceNumber\"]\n      rescue StandardError => e\n        # Return failed record's sequence number\n        return {\"batchItemFailures\" => [{\"itemIdentifier\" => cur_record_sequence_number}]}\n      end\n    end\n  \n    {\"batchItemFailures\" => []}\n  end\n",
                            "  14.SDK for Ruby : def lambda_handler(event:, context:)\n    records = event[\"Records\"]\n    cur_record_sequence_number = \"\"\n  \n    records.each do |record|\n      begin\n        # Process your record\n        cur_record_sequence_number = record[\"dynamodb\"][\"SequenceNumber\"]\n      rescue StandardError => e\n        # Return failed record's sequence number\n        return {\"batchItemFailures\" => [{\"itemIdentifier\" => cur_record_sequence_number}]}\n      end\n    end\n  \n    {\"batchItemFailures\" => []}\n  end\n",
                            "  15.Rust : use aws_lambda_events::{\n    event::dynamodb::{Event, EventRecord, StreamRecord},\n    streams::{DynamoDbBatchItemFailure, DynamoDbEventResponse},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\n/// Process the stream record\nfn process_record(record: &EventRecord) -> Result<(), Error> {\n    let stream_record: &StreamRecord = &record.change;\n\n    // process your stream record here...\n    tracing::info!(\"Data: {:?}\", stream_record);\n\n    Ok(())\n}\n\n/// Main Lambda handler here...\nasync fn function_handler(event: LambdaEvent<Event>) -> Result<DynamoDbEventResponse, Error> {\n    let mut response = DynamoDbEventResponse {\n        batch_item_failures: vec![],\n    };\n\n    let records = &event.payload.records;\n\n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(response);\n    }\n\n    for record in records {\n        tracing::info!(\"EventId: {}\", record.event_id);\n\n        // Couldn't find a sequence number\n        if record.change.sequence_number.is_none() {\n            response.batch_item_failures.push(DynamoDbBatchItemFailure {\n                item_identifier: Some(\"\".to_string()),\n            });\n            return Ok(response);\n        }\n\n        // Process your record here...\n        if process_record(record).is_err() {\n            response.batch_item_failures.push(DynamoDbBatchItemFailure {\n                item_identifier: record.change.sequence_number.clone(),\n            });\n            /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n            return Ok(response);\n        }\n    }\n\n    tracing::info!(\"Successfully processed {} record(s)\", records.len());\n\n    Ok(response)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n\n",
                            "  16.SDK for Rust : use aws_lambda_events::{\n    event::dynamodb::{Event, EventRecord, StreamRecord},\n    streams::{DynamoDbBatchItemFailure, DynamoDbEventResponse},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\n/// Process the stream record\nfn process_record(record: &EventRecord) -> Result<(), Error> {\n    let stream_record: &StreamRecord = &record.change;\n\n    // process your stream record here...\n    tracing::info!(\"Data: {:?}\", stream_record);\n\n    Ok(())\n}\n\n/// Main Lambda handler here...\nasync fn function_handler(event: LambdaEvent<Event>) -> Result<DynamoDbEventResponse, Error> {\n    let mut response = DynamoDbEventResponse {\n        batch_item_failures: vec![],\n    };\n\n    let records = &event.payload.records;\n\n    if records.is_empty() {\n        tracing::info!(\"No records found. Exiting.\");\n        return Ok(response);\n    }\n\n    for record in records {\n        tracing::info!(\"EventId: {}\", record.event_id);\n\n        // Couldn't find a sequence number\n        if record.change.sequence_number.is_none() {\n            response.batch_item_failures.push(DynamoDbBatchItemFailure {\n                item_identifier: Some(\"\".to_string()),\n            });\n            return Ok(response);\n        }\n\n        // Process your record here...\n        if process_record(record).is_err() {\n            response.batch_item_failures.push(DynamoDbBatchItemFailure {\n                item_identifier: record.change.sequence_number.clone(),\n            });\n            /* Since we are working with streams, we can return the failed item immediately.\n            Lambda will immediately begin to retry processing from this failed item onwards. */\n            return Ok(response);\n        }\n    }\n\n    tracing::info!(\"Successfully processed {} record(s)\", records.len());\n\n    Ok(response)\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    tracing_subscriber::fmt()\n        .with_max_level(tracing::Level::INFO)\n        // disable printing the name of the module in every log line.\n        .with_target(false)\n        // disabling time is handy because CloudWatch will add the ingestion time.\n        .without_time()\n        .init();\n\n    run(service_fn(function_handler)).await\n}\n\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing System.Text.Json;\nusing System.Text;\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.DynamoDBEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\n\nnamespace AWSLambda_DDB;\n\npublic class Function\n{\n    public StreamsEventResponse FunctionHandler(DynamoDBEvent dynamoEvent, ILambdaContext context)\n\n    {\n        context.Logger.LogInformation($\"Beginning to process {dynamoEvent.Records.Count} records...\");\n        List<StreamsEventResponse.BatchItemFailure> batchItemFailures = new List<StreamsEventResponse.BatchItemFailure>();\n        StreamsEventResponse streamsEventResponse = new StreamsEventResponse();\n\n        foreach (var record in dynamoEvent.Records)\n        {\n            try\n            {\n                var sequenceNumber = record.Dynamodb.SequenceNumber;\n                context.Logger.LogInformation(sequenceNumber);\n            }\n            catch (Exception ex)\n            {\n                context.Logger.LogError(ex.Message);\n                batchItemFailures.Add(new StreamsEventResponse.BatchItemFailure() { ItemIdentifier = record.Dynamodb.SequenceNumber });\n            }\n        }\n\n        if (batchItemFailures.Count > 0)\n        {\n            streamsEventResponse.BatchItemFailures = batchItemFailures;\n        }\n\n        context.Logger.LogInformation(\"Stream processing complete.\");\n        return streamsEventResponse;\n    }\n}\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    },
                    {
                        "title": "Reporting batch item failures for Lambda functions with an Amazon SQS trigger",
                        "href": "https://docs.aws.amazon.com/lambda/latest/dg/example_serverless_SQS_Lambda_batch_item_failures_section.html",
                        "source": "aws_lamda",
                        "parent_content": [
                            "The following code examples show how to implement partial batch response for Lambda functions that receive events from an SQS queue. The function reports the batch item failures in the response, signaling to Lambda to retry those messages later.",
                            "  1..NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\nnamespace sqsSample;\n\npublic class Function\n{\n    public async Task<SQSBatchResponse> FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new List<SQSBatchResponse.BatchItemFailure>();\n        foreach(var message in evnt.Records)\n        {\n            try\n            {\n                //process your message\n                await ProcessMessageAsync(message, context);\n            }\n            catch (System.Exception)\n            {\n                //Add failed message identifier to the batchItemFailures list\n                batchItemFailures.Add(new SQSBatchResponse.BatchItemFailure{ItemIdentifier=message.MessageId}); \n            }\n        }\n        return new SQSBatchResponse(batchItemFailures);\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        if (String.IsNullOrEmpty(message.Body))\n        {\n            throw new Exception(\"No Body in SQS Message.\");\n        }\n        context.Logger.LogInformation($\"Processed message {message.Body}\");\n        // TODO: Do interesting work based on the new message\n        await Task.CompletedTask;\n    }\n}\n",
                            "  2.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\nnamespace sqsSample;\n\npublic class Function\n{\n    public async Task<SQSBatchResponse> FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new List<SQSBatchResponse.BatchItemFailure>();\n        foreach(var message in evnt.Records)\n        {\n            try\n            {\n                //process your message\n                await ProcessMessageAsync(message, context);\n            }\n            catch (System.Exception)\n            {\n                //Add failed message identifier to the batchItemFailures list\n                batchItemFailures.Add(new SQSBatchResponse.BatchItemFailure{ItemIdentifier=message.MessageId}); \n            }\n        }\n        return new SQSBatchResponse(batchItemFailures);\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        if (String.IsNullOrEmpty(message.Body))\n        {\n            throw new Exception(\"No Body in SQS Message.\");\n        }\n        context.Logger.LogInformation($\"Processed message {message.Body}\");\n        // TODO: Do interesting work based on the new message\n        await Task.CompletedTask;\n    }\n}\n",
                            "  3.Go : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, sqsEvent events.SQSEvent) (map[string]interface{}, error) {\n\tbatchItemFailures := []map[string]interface{}{}\n\n\tfor _, message := range sqsEvent.Records {\n\t\t\n\t\tif /* Your message processing condition here */ {\t\t\t\n\t\t\tbatchItemFailures = append(batchItemFailures, map[string]interface{}{\"itemIdentifier\": message.MessageId})\n\t\t}\n\t}\n\n\tsqsBatchResponse := map[string]interface{}{\n\t\t\"batchItemFailures\": batchItemFailures,\n\t}\n\treturn sqsBatchResponse, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  4.SDK for Go V2 : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n)\n\nfunc handler(ctx context.Context, sqsEvent events.SQSEvent) (map[string]interface{}, error) {\n\tbatchItemFailures := []map[string]interface{}{}\n\n\tfor _, message := range sqsEvent.Records {\n\t\t\n\t\tif /* Your message processing condition here */ {\t\t\t\n\t\t\tbatchItemFailures = append(batchItemFailures, map[string]interface{}{\"itemIdentifier\": message.MessageId})\n\t\t}\n\t}\n\n\tsqsBatchResponse := map[string]interface{}{\n\t\t\"batchItemFailures\": batchItemFailures,\n\t}\n\treturn sqsBatchResponse, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n\n",
                            "  5.Java : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SQSBatchResponse;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class ProcessSQSMessageBatch implements RequestHandler<SQSEvent, SQSBatchResponse> {\n    @Override\n    public SQSBatchResponse handleRequest(SQSEvent sqsEvent, Context context) {\n \n         List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new ArrayList<SQSBatchResponse.BatchItemFailure>();\n         String messageId = \"\";\n         for (SQSEvent.SQSMessage message : sqsEvent.getRecords()) {\n             try {\n                 //process your message\n                 messageId = message.getMessageId();\n             } catch (Exception e) {\n                 //Add failed message identifier to the batchItemFailures list\n                 batchItemFailures.add(new SQSBatchResponse.BatchItemFailure(messageId));\n             }\n         }\n         return new SQSBatchResponse(batchItemFailures);\n     }\n}\n",
                            "  6.SDK for Java 2.x : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport com.amazonaws.services.lambda.runtime.Context;\nimport com.amazonaws.services.lambda.runtime.RequestHandler;\nimport com.amazonaws.services.lambda.runtime.events.SQSEvent;\nimport com.amazonaws.services.lambda.runtime.events.SQSBatchResponse;\n \nimport java.util.ArrayList;\nimport java.util.List;\n \npublic class ProcessSQSMessageBatch implements RequestHandler<SQSEvent, SQSBatchResponse> {\n    @Override\n    public SQSBatchResponse handleRequest(SQSEvent sqsEvent, Context context) {\n \n         List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new ArrayList<SQSBatchResponse.BatchItemFailure>();\n         String messageId = \"\";\n         for (SQSEvent.SQSMessage message : sqsEvent.getRecords()) {\n             try {\n                 //process your message\n                 messageId = message.getMessageId();\n             } catch (Exception e) {\n                 //Add failed message identifier to the batchItemFailures list\n                 batchItemFailures.add(new SQSBatchResponse.BatchItemFailure(messageId));\n             }\n         }\n         return new SQSBatchResponse(batchItemFailures);\n     }\n}\n",
                            "  7.JavaScript : // Node.js 20.x Lambda runtime, AWS SDK for Javascript V3\nexport const handler = async (event, context) => {\n    const batchItemFailures = [];\n    for (const record of event.Records) {\n        try {\n            await processMessageAsync(record, context);\n        } catch (error) {\n            batchItemFailures.push({ itemIdentifier: record.messageId });\n        }\n    }\n    return { batchItemFailures };\n};\n\nasync function processMessageAsync(record, context) {\n    if (record.body && record.body.includes(\"error\")) {\n        throw new Error(\"There is an error in the SQS Message.\");\n    }\n    console.log(`Processed message: ${record.body}`);\n}\n",
                            "  8.SDK for JavaScript (v3) : // Node.js 20.x Lambda runtime, AWS SDK for Javascript V3\nexport const handler = async (event, context) => {\n    const batchItemFailures = [];\n    for (const record of event.Records) {\n        try {\n            await processMessageAsync(record, context);\n        } catch (error) {\n            batchItemFailures.push({ itemIdentifier: record.messageId });\n        }\n    }\n    return { batchItemFailures };\n};\n\nasync function processMessageAsync(record, context) {\n    if (record.body && record.body.includes(\"error\")) {\n        throw new Error(\"There is an error in the SQS Message.\");\n    }\n    console.log(`Processed message: ${record.body}`);\n}\n",
                            "  9.PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Sqs\\SqsEvent;\nuse Bref\\Event\\Sqs\\SqsHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends SqsHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleSqs(SqsEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing SQS records\");\n        $records = $event->getRecords();\n\n        foreach ($records as $record) {\n            try {\n                // Assuming the SQS message is in JSON format\n                $message = json_decode($record->getBody(), true);\n                $this->logger->info(json_encode($message));\n                // TODO: Implement your custom processing logic here\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $this->markAsFailed($record);\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords SQS records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  10.SDK for PHP : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n<?php\n\nuse Bref\\Context\\Context;\nuse Bref\\Event\\Sqs\\SqsEvent;\nuse Bref\\Event\\Sqs\\SqsHandler;\nuse Bref\\Logger\\StderrLogger;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nclass Handler extends SqsHandler\n{\n    private StderrLogger $logger;\n    public function __construct(StderrLogger $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @throws JsonException\n     * @throws \\Bref\\Event\\InvalidLambdaEvent\n     */\n    public function handleSqs(SqsEvent $event, Context $context): void\n    {\n        $this->logger->info(\"Processing SQS records\");\n        $records = $event->getRecords();\n\n        foreach ($records as $record) {\n            try {\n                // Assuming the SQS message is in JSON format\n                $message = json_decode($record->getBody(), true);\n                $this->logger->info(json_encode($message));\n                // TODO: Implement your custom processing logic here\n            } catch (Exception $e) {\n                $this->logger->error($e->getMessage());\n                // failed processing the record\n                $this->markAsFailed($record);\n            }\n        }\n        $totalRecords = count($records);\n        $this->logger->info(\"Successfully processed $totalRecords SQS records\");\n    }\n}\n\n$logger = new StderrLogger();\nreturn new Handler($logger);\n\n",
                            "  11.Python : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\ndef lambda_handler(event, context):\n    if event:\n        batch_item_failures = []\n        sqs_batch_response = {}\n     \n        for record in event[\"Records\"]:\n            try:\n                # process message\n            except Exception as e:\n                batch_item_failures.append({\"itemIdentifier\": record['messageId']})\n        \n        sqs_batch_response[\"batchItemFailures\"] = batch_item_failures\n        return sqs_batch_response\n",
                            "  12.SDK for Python (Boto3) : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\n\ndef lambda_handler(event, context):\n    if event:\n        batch_item_failures = []\n        sqs_batch_response = {}\n     \n        for record in event[\"Records\"]:\n            try:\n                # process message\n            except Exception as e:\n                batch_item_failures.append({\"itemIdentifier\": record['messageId']})\n        \n        sqs_batch_response[\"batchItemFailures\"] = batch_item_failures\n        return sqs_batch_response\n",
                            "  13.Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'json'\n\ndef lambda_handler(event:, context:)\n  if event\n    batch_item_failures = []\n    sqs_batch_response = {}\n\n    event[\"Records\"].each do |record|\n      begin\n        # process message\n      rescue StandardError => e\n        batch_item_failures << {\"itemIdentifier\" => record['messageId']}\n      end\n    end\n\n    sqs_batch_response[\"batchItemFailures\"] = batch_item_failures\n    return sqs_batch_response\n  end\nend\n\n",
                            "  14.SDK for Ruby : # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n# SPDX-License-Identifier: Apache-2.0\nrequire 'json'\n\ndef lambda_handler(event:, context:)\n  if event\n    batch_item_failures = []\n    sqs_batch_response = {}\n\n    event[\"Records\"].each do |record|\n      begin\n        # process message\n      rescue StandardError => e\n        batch_item_failures << {\"itemIdentifier\" => record['messageId']}\n      end\n    end\n\n    sqs_batch_response[\"batchItemFailures\"] = batch_item_failures\n    return sqs_batch_response\n  end\nend\n\n",
                            "  15.Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::{\n    event::sqs::{SqsBatchResponse, SqsEvent},\n    sqs::{BatchItemFailure, SqsMessage},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn process_record(_: &SqsMessage) -> Result<(), Error> {\n    Err(Error::from(\"Error processing message\"))\n}\n\nasync fn function_handler(event: LambdaEvent<SqsEvent>) -> Result<SqsBatchResponse, Error> {\n    let mut batch_item_failures = Vec::new();\n    for record in event.payload.records {\n        match process_record(&record).await {\n            Ok(_) => (),\n            Err(_) => batch_item_failures.push(BatchItemFailure {\n                item_identifier: record.message_id.unwrap(),\n            }),\n        }\n    }\n\n    Ok(SqsBatchResponse {\n        batch_item_failures,\n    })\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    run(service_fn(function_handler)).await\n}\n\n",
                            "  16.SDK for Rust : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nuse aws_lambda_events::{\n    event::sqs::{SqsBatchResponse, SqsEvent},\n    sqs::{BatchItemFailure, SqsMessage},\n};\nuse lambda_runtime::{run, service_fn, Error, LambdaEvent};\n\nasync fn process_record(_: &SqsMessage) -> Result<(), Error> {\n    Err(Error::from(\"Error processing message\"))\n}\n\nasync fn function_handler(event: LambdaEvent<SqsEvent>) -> Result<SqsBatchResponse, Error> {\n    let mut batch_item_failures = Vec::new();\n    for record in event.payload.records {\n        match process_record(&record).await {\n            Ok(_) => (),\n            Err(_) => batch_item_failures.push(BatchItemFailure {\n                item_identifier: record.message_id.unwrap(),\n            }),\n        }\n    }\n\n    Ok(SqsBatchResponse {\n        batch_item_failures,\n    })\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    run(service_fn(function_handler)).await\n}\n\n",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "anchor",
                            "  1.AWS SDK for .NET : // Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nusing Amazon.Lambda.Core;\nusing Amazon.Lambda.SQSEvents;\n\n// Assembly attribute to enable the Lambda function's JSON input to be converted into a .NET class.\n[assembly: LambdaSerializer(typeof(Amazon.Lambda.Serialization.SystemTextJson.DefaultLambdaJsonSerializer))]\nnamespace sqsSample;\n\npublic class Function\n{\n    public async Task<SQSBatchResponse> FunctionHandler(SQSEvent evnt, ILambdaContext context)\n    {\n        List<SQSBatchResponse.BatchItemFailure> batchItemFailures = new List<SQSBatchResponse.BatchItemFailure>();\n        foreach(var message in evnt.Records)\n        {\n            try\n            {\n                //process your message\n                await ProcessMessageAsync(message, context);\n            }\n            catch (System.Exception)\n            {\n                //Add failed message identifier to the batchItemFailures list\n                batchItemFailures.Add(new SQSBatchResponse.BatchItemFailure{ItemIdentifier=message.MessageId}); \n            }\n        }\n        return new SQSBatchResponse(batchItemFailures);\n    }\n\n    private async Task ProcessMessageAsync(SQSEvent.SQSMessage message, ILambdaContext context)\n    {\n        if (String.IsNullOrEmpty(message.Body))\n        {\n            throw new Exception(\"No Body in SQS Message.\");\n        }\n        context.Logger.LogInformation($\"Processed message {message.Body}\");\n        // TODO: Do interesting work based on the new message\n        await Task.CompletedTask;\n    }\n}\n",
                            "For a complete list of AWS SDK developer guides and code examples, see    Using Lambda with an AWS SDK.    This topic also includes information about getting started and details about previous SDK versions."
                        ]
                    }
                ],
                "source": "aws_lamda",
                "parent_content": [
                    "The following code examples show how to use Lambda with AWS SDKs.",
                    "Examples"
                ]
            }
        ]
    }
]