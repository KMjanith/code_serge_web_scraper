[
    "[\n    {\n        \"header\": \"Tutorial: Tic-Tac-Toe\",\n        \"content\": [\n            {\n                \"header\": \"Note\",\n                \"content\": [],\n                \"code_examples\": [\n                    \"This tutorial is designed for people who prefer tolearn by doingand want to quickly try making something tangible. If you prefer learning each concept step by step, start withDescribing the UI.\"\n                ]\n            },\n            {\n                \"header\": \"What are you building?\",\n                \"content\": [\n                    \"In this tutorial, you\\u2019ll build an interactive tic-tac-toe game with React.\",\n                    \"You can see what it will look like when you\\u2019re finished here:\"\n                ]\n            },\n            {\n                \"header\": \"Setup for the tutorial\",\n                \"content\": [\n                    \"In the live code editor below, clickForkin the top-right corner to open the editor in a new tab using the website CodeSandbox. CodeSandbox lets you write code in your browser and preview how your users will see the app you\\u2019ve created. The new tab should display an empty square and the starter code for this tutorial.\",\n                    {\n                        \"header\": \"Note\",\n                        \"content\": [],\n                        \"code_examples\": [\n                            \"You can also follow this tutorial using your local development environment. To do this, you need to:InstallNode.jsIn the CodeSandbox tab you opened earlier, press the top-left corner button to open the menu, and then chooseDownload Sandboxin that menu to download an archive of the files locallyUnzip the archive, then open a terminal andcdto the directory you unzippedInstall the dependencies withnpm installRunnpm startto start a local server and follow the prompts to view the code running in a browserIf you get stuck, don\\u2019t let this stop you! Follow along online instead and try a local setup again later.\"\n                        ]\n                    }\n                ]\n            },\n            {\n                \"header\": \"Overview\",\n                \"content\": [\n                    \"Now that you\\u2019re set up, let\\u2019s get an overview of React!\",\n                    \"Inspecting the starter code\",\n                    \"In CodeSandbox you\\u2019ll see three main sections:\",\n                    \"TheFilessection with a list of files likeApp.js,index.js,styles.cssand a folder calledpublicThecode editorwhere you\\u2019ll see the source code of your selected fileThebrowsersection where you\\u2019ll see how the code you\\u2019ve written will be displayed\",\n                    \"TheApp.jsfile should be selected in theFilessection. The contents of that file in thecode editorshould be:\",\n                    \"Thebrowsersection should be displaying a square with a X in it like this:\",\n                    \"Now let\\u2019s have a look at the files in the starter code.\",\n                    \"App.js\",\n                    \"The code inApp.jscreates acomponent. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let\\u2019s look at the component line by line to see what\\u2019s going on:\",\n                    \"The first line defines a function calledSquare. TheexportJavaScript keyword makes this function accessible outside of this file. Thedefaultkeyword tells other files using your code that it\\u2019s the main function in your file.\",\n                    \"The second line returns a button. ThereturnJavaScript keyword means whatever comes after is returned as a value to the caller of the function.<button>is aJSX element. A JSX element is a combination of JavaScript code and HTML tags that describes what you\\u2019d like to display.className=\\\"square\\\"is a button property orpropthat tells CSS how to style the button.Xis the text displayed inside of the button and</button>closes the JSX element to indicate that any following content shouldn\\u2019t be placed inside the button.\",\n                    \"styles.css\",\n                    \"Click on the file labeledstyles.cssin theFilessection of CodeSandbox. This file defines the styles for your React app. The first twoCSS selectors(*andbody) define the style of large parts of your app while the.squareselector defines the style of any component where theclassNameproperty is set tosquare. In your code, that would match the button from your Square component in theApp.jsfile.\",\n                    \"index.js\",\n                    \"Click on the file labeledindex.jsin theFilessection of CodeSandbox. You won\\u2019t be editing this file during the tutorial but it is the bridge between the component you created in theApp.jsfile and the web browser.\",\n                    \"Lines 1-5 bring all the necessary pieces together:\",\n                    \"ReactReact\\u2019s library to talk to web browsers (React DOM)the styles for your componentsthe component you created inApp.js.\",\n                    \"The remainder of the file brings all the pieces together and injects the final product intoindex.htmlin thepublicfolder.\",\n                    \"Building the board\",\n                    \"Let\\u2019s get back toApp.js. This is where you\\u2019ll spend the rest of the tutorial.\",\n                    \"Currently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:\",\n                    \"You\\u2019ll get this error:\",\n                    \"React components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can useFragments(<>and</>) to wrap multiple adjacent JSX elements like this:\",\n                    \"Now you should see:\",\n                    \"Great! Now you just need to copy-paste a few times to add nine squares and\\u2026\",\n                    \"Oh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you\\u2019ll need to group your squares into rows withdivs and add some CSS classes. While you\\u2019re at it, you\\u2019ll give each square a number to make sure you know where each square is displayed.\",\n                    \"In theApp.jsfile, update theSquarecomponent to look like this:\",\n                    \"The CSS defined instyles.cssstyles the divs with theclassNameofboard-row. Now that you\\u2019ve grouped your components into rows with the styleddivs you have your tic-tac-toe board:\",\n                    \"But you now have a problem. Your component namedSquare, really isn\\u2019t a square anymore. Let\\u2019s fix that by changing the name toBoard:\",\n                    \"At this point your code should look something like this:\",\n                    {\n                        \"header\": \"Inspecting the starter code\",\n                        \"content\": [\n                            \"In CodeSandbox you\\u2019ll see three main sections:\",\n                            \"TheFilessection with a list of files likeApp.js,index.js,styles.cssand a folder calledpublicThecode editorwhere you\\u2019ll see the source code of your selected fileThebrowsersection where you\\u2019ll see how the code you\\u2019ve written will be displayed\",\n                            \"TheApp.jsfile should be selected in theFilessection. The contents of that file in thecode editorshould be:\",\n                            \"Thebrowsersection should be displaying a square with a X in it like this:\",\n                            \"Now let\\u2019s have a look at the files in the starter code.\",\n                            \"App.js\",\n                            \"The code inApp.jscreates acomponent. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let\\u2019s look at the component line by line to see what\\u2019s going on:\",\n                            \"The first line defines a function calledSquare. TheexportJavaScript keyword makes this function accessible outside of this file. Thedefaultkeyword tells other files using your code that it\\u2019s the main function in your file.\",\n                            \"The second line returns a button. ThereturnJavaScript keyword means whatever comes after is returned as a value to the caller of the function.<button>is aJSX element. A JSX element is a combination of JavaScript code and HTML tags that describes what you\\u2019d like to display.className=\\\"square\\\"is a button property orpropthat tells CSS how to style the button.Xis the text displayed inside of the button and</button>closes the JSX element to indicate that any following content shouldn\\u2019t be placed inside the button.\",\n                            \"styles.css\",\n                            \"Click on the file labeledstyles.cssin theFilessection of CodeSandbox. This file defines the styles for your React app. The first twoCSS selectors(*andbody) define the style of large parts of your app while the.squareselector defines the style of any component where theclassNameproperty is set tosquare. In your code, that would match the button from your Square component in theApp.jsfile.\",\n                            \"index.js\",\n                            \"Click on the file labeledindex.jsin theFilessection of CodeSandbox. You won\\u2019t be editing this file during the tutorial but it is the bridge between the component you created in theApp.jsfile and the web browser.\",\n                            \"Lines 1-5 bring all the necessary pieces together:\",\n                            \"ReactReact\\u2019s library to talk to web browsers (React DOM)the styles for your componentsthe component you created inApp.js.\",\n                            \"The remainder of the file brings all the pieces together and injects the final product intoindex.htmlin thepublicfolder.\",\n                            {\n                                \"header\": \"App.js\",\n                                \"content\": [\n                                    \"The code inApp.jscreates acomponent. In React, a component is a piece of reusable code that represents a part of a user interface. Components are used to render, manage, and update the UI elements in your application. Let\\u2019s look at the component line by line to see what\\u2019s going on:\",\n                                    \"The first line defines a function calledSquare. TheexportJavaScript keyword makes this function accessible outside of this file. Thedefaultkeyword tells other files using your code that it\\u2019s the main function in your file.\",\n                                    \"The second line returns a button. ThereturnJavaScript keyword means whatever comes after is returned as a value to the caller of the function.<button>is aJSX element. A JSX element is a combination of JavaScript code and HTML tags that describes what you\\u2019d like to display.className=\\\"square\\\"is a button property orpropthat tells CSS how to style the button.Xis the text displayed inside of the button and</button>closes the JSX element to indicate that any following content shouldn\\u2019t be placed inside the button.\"\n                                ],\n                                \"code_examples\": [\n                                    \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button>;}\",\n                                    \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button>;}\"\n                                ]\n                            },\n                            {\n                                \"header\": \"styles.css\",\n                                \"content\": [\n                                    \"Click on the file labeledstyles.cssin theFilessection of CodeSandbox. This file defines the styles for your React app. The first twoCSS selectors(*andbody) define the style of large parts of your app while the.squareselector defines the style of any component where theclassNameproperty is set tosquare. In your code, that would match the button from your Square component in theApp.jsfile.\"\n                                ]\n                            },\n                            {\n                                \"header\": \"index.js\",\n                                \"content\": [\n                                    \"Click on the file labeledindex.jsin theFilessection of CodeSandbox. You won\\u2019t be editing this file during the tutorial but it is the bridge between the component you created in theApp.jsfile and the web browser.\",\n                                    \"Lines 1-5 bring all the necessary pieces together:\",\n                                    \"ReactReact\\u2019s library to talk to web browsers (React DOM)the styles for your componentsthe component you created inApp.js.\",\n                                    \"The remainder of the file brings all the pieces together and injects the final product intoindex.htmlin thepublicfolder.\"\n                                ],\n                                \"code_examples\": [\n                                    \"import{StrictMode}from'react';import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';\"\n                                ]\n                            }\n                        ],\n                        \"code_examples\": [\n                            \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button>;}\",\n                            \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button>;}\",\n                            \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button>;}\",\n                            \"import{StrictMode}from'react';import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Building the board\",\n                        \"content\": [\n                            \"Let\\u2019s get back toApp.js. This is where you\\u2019ll spend the rest of the tutorial.\",\n                            \"Currently the board is only a single square, but you need nine! If you just try and copy paste your square to make two squares like this:\",\n                            \"You\\u2019ll get this error:\",\n                            \"React components need to return a single JSX element and not multiple adjacent JSX elements like two buttons. To fix this you can useFragments(<>and</>) to wrap multiple adjacent JSX elements like this:\",\n                            \"Now you should see:\",\n                            \"Great! Now you just need to copy-paste a few times to add nine squares and\\u2026\",\n                            \"Oh no! The squares are all in a single line, not in a grid like you need for our board. To fix this you\\u2019ll need to group your squares into rows withdivs and add some CSS classes. While you\\u2019re at it, you\\u2019ll give each square a number to make sure you know where each square is displayed.\",\n                            \"In theApp.jsfile, update theSquarecomponent to look like this:\",\n                            \"The CSS defined instyles.cssstyles the divs with theclassNameofboard-row. Now that you\\u2019ve grouped your components into rows with the styleddivs you have your tic-tac-toe board:\",\n                            \"But you now have a problem. Your component namedSquare, really isn\\u2019t a square anymore. Let\\u2019s fix that by changing the name toBoard:\",\n                            \"At this point your code should look something like this:\"\n                        ],\n                        \"code_examples\": [\n                            \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button><buttonclassName=\\\"square\\\">X</button>;}\",\n                            \"Console/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX Fragment<>...</>?\",\n                            \"exportdefaultfunctionSquare(){return(<><buttonclassName=\\\"square\\\">X</button><buttonclassName=\\\"square\\\">X</button></>);}\",\n                            \"exportdefaultfunctionSquare(){return(<><divclassName=\\\"board-row\\\"><buttonclassName=\\\"square\\\">1</button><buttonclassName=\\\"square\\\">2</button><buttonclassName=\\\"square\\\">3</button></div><divclassName=\\\"board-row\\\"><buttonclassName=\\\"square\\\">4</button><buttonclassName=\\\"square\\\">5</button><buttonclassName=\\\"square\\\">6</button></div><divclassName=\\\"board-row\\\"><buttonclassName=\\\"square\\\">7</button><buttonclassName=\\\"square\\\">8</button><buttonclassName=\\\"square\\\">9</button></div></>);}\",\n                            \"exportdefaultfunctionBoard(){//...}\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Note\",\n                        \"content\": [],\n                        \"code_examples\": [\n                            \"Psssst\\u2026 That\\u2019s a lot to type! It\\u2019s okay to copy and paste code from this page. However, if you\\u2019re up for a little challenge, we recommend only copying code that you\\u2019ve manually typed at least once yourself.\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Passing data through props\",\n                        \"content\": [\n                            \"Next, you\\u2019ll want to change the value of a square from empty to \\u201cX\\u201d when the user clicks on the square. With how you\\u2019ve built the board so far you would need to copy-paste the code that updates the square nine times (once for each square you have)! Instead of copy-pasting, React\\u2019s component architecture allows you to create a reusable component to avoid messy, duplicated code.\",\n                            \"First, you are going to copy the line defining your first square (<button className=\\\"square\\\">1</button>) from yourBoardcomponent into a newSquarecomponent:\",\n                            \"Then you\\u2019ll update the Board component to render thatSquarecomponent using JSX syntax:\",\n                            \"Note how unlike the browserdivs, your own componentsBoardandSquaremust start with a capital letter.\",\n                            \"Let\\u2019s take a look:\",\n                            \"Oh no! You lost the numbered squares you had before. Now each square says \\u201c1\\u201d. To fix this, you will usepropsto pass the value each square should have from the parent component (Board) to its child (Square).\",\n                            \"Update theSquarecomponent to read thevalueprop that you\\u2019ll pass from theBoard:\",\n                            \"function Square({ value })indicates the Square component can be passed a prop calledvalue.\",\n                            \"Now you want to display thatvalueinstead of1inside every square. Try doing it like this:\",\n                            \"Oops, this is not what you wanted:\",\n                            \"You wanted to render the JavaScript variable calledvaluefrom your component, not the word \\u201cvalue\\u201d. To \\u201cescape into JavaScript\\u201d from JSX, you need curly braces. Add curly braces aroundvaluein JSX like so:\",\n                            \"For now, you should see an empty board:\",\n                            \"This is because theBoardcomponent hasn\\u2019t passed thevalueprop to eachSquarecomponent it renders yet. To fix it you\\u2019ll add thevalueprop to eachSquarecomponent rendered by theBoardcomponent:\",\n                            \"Now you should see a grid of numbers again:\",\n                            \"Your updated code should look like this:\"\n                        ],\n                        \"code_examples\": [\n                            \"functionSquare(){return<buttonclassName=\\\"square\\\">1</button>;}exportdefaultfunctionBoard(){// ...}\",\n                            \"// ...exportdefaultfunctionBoard(){return(<><divclassName=\\\"board-row\\\"><Square/><Square/><Square/></div><divclassName=\\\"board-row\\\"><Square/><Square/><Square/></div><divclassName=\\\"board-row\\\"><Square/><Square/><Square/></div></>);}\",\n                            \"functionSquare({value}){return<buttonclassName=\\\"square\\\">1</button>;}\",\n                            \"functionSquare({value}){return<buttonclassName=\\\"square\\\">value</button>;}\",\n                            \"functionSquare({value}){return<buttonclassName=\\\"square\\\">{value}</button>;}\",\n                            \"exportdefaultfunctionBoard(){return(<><divclassName=\\\"board-row\\\"><Squarevalue=\\\"1\\\"/><Squarevalue=\\\"2\\\"/><Squarevalue=\\\"3\\\"/></div><divclassName=\\\"board-row\\\"><Squarevalue=\\\"4\\\"/><Squarevalue=\\\"5\\\"/><Squarevalue=\\\"6\\\"/></div><divclassName=\\\"board-row\\\"><Squarevalue=\\\"7\\\"/><Squarevalue=\\\"8\\\"/><Squarevalue=\\\"9\\\"/></div></>);}\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Making an interactive component\",\n                        \"content\": [\n                            \"Let\\u2019s fill theSquarecomponent with anXwhen you click it. Declare a function calledhandleClickinside of theSquare. Then, addonClickto the props of the button JSX element returned from theSquare:\",\n                            \"If you click on a square now, you should see a log saying\\\"clicked!\\\"in theConsoletab at the bottom of theBrowsersection in CodeSandbox. Clicking the square more than once will log\\\"clicked!\\\"again. Repeated console logs with the same message will not create more lines in the console. Instead, you will see an incrementing counter next to your first\\\"clicked!\\\"log.\",\n                            \"As a next step, you want the Square component to \\u201cremember\\u201d that it got clicked, and fill it with an \\u201cX\\u201d mark. To \\u201cremember\\u201d things, components usestate.\",\n                            \"React provides a special function calleduseStatethat you can call from your component to let it \\u201cremember\\u201d things. Let\\u2019s store the current value of theSquarein state, and change it when theSquareis clicked.\",\n                            \"ImportuseStateat the top of the file. Remove thevalueprop from theSquarecomponent. Instead, add a new line at the start of theSquarethat callsuseState. Have it return a state variable calledvalue:\",\n                            \"valuestores the value andsetValueis a function that can be used to change the value. Thenullpassed touseStateis used as the initial value for this state variable, sovaluehere starts off equal tonull.\",\n                            \"Since theSquarecomponent no longer accepts props anymore, you\\u2019ll remove thevalueprop from all nine of the Square components created by the Board component:\",\n                            \"Now you\\u2019ll changeSquareto display an \\u201cX\\u201d when clicked. Replace theconsole.log(\\\"clicked!\\\");event handler withsetValue('X');. Now yourSquarecomponent looks like this:\",\n                            \"By calling thissetfunction from anonClickhandler, you\\u2019re telling React to re-render thatSquarewhenever its<button>is clicked. After the update, theSquare\\u2019svaluewill be'X', so you\\u2019ll see the \\u201cX\\u201d on the game board. Click on any Square, and \\u201cX\\u201d should show up:\",\n                            \"Each Square has its own state: thevaluestored in each Square is completely independent of the others. When you call asetfunction in a component, React automatically updates the child components inside too.\",\n                            \"After you\\u2019ve made the above changes, your code will look like this:\"\n                        ],\n                        \"code_examples\": [\n                            \"functionSquare({value}){functionhandleClick(){console.log('clicked!');}return(<buttonclassName=\\\"square\\\"onClick={handleClick}>{value}</button>);}\",\n                            \"NoteIf you are following this tutorial using your local development environment, you need to open your browser\\u2019s Console. For example, if you use the Chrome browser, you can view the Console with the keyboard shortcutShift + Ctrl + J(on Windows/Linux) orOption + \\u2318 + J(on macOS).\",\n                            \"import{useState}from'react';functionSquare(){const[value,setValue]=useState(null);functionhandleClick(){//...\",\n                            \"// ...exportdefaultfunctionBoard(){return(<><divclassName=\\\"board-row\\\"><Square/><Square/><Square/></div><divclassName=\\\"board-row\\\"><Square/><Square/><Square/></div><divclassName=\\\"board-row\\\"><Square/><Square/><Square/></div></>);}\",\n                            \"functionSquare(){const[value,setValue]=useState(null);functionhandleClick(){setValue('X');}return(<buttonclassName=\\\"square\\\"onClick={handleClick}>{value}</button>);}\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Note\",\n                        \"content\": [],\n                        \"code_examples\": [\n                            \"If you are following this tutorial using your local development environment, you need to open your browser\\u2019s Console. For example, if you use the Chrome browser, you can view the Console with the keyboard shortcutShift + Ctrl + J(on Windows/Linux) orOption + \\u2318 + J(on macOS).\"\n                        ]\n                    },\n                    {\n                        \"header\": \"React Developer Tools\",\n                        \"content\": [\n                            \"React DevTools let you check the props and the state of your React components. You can find the React DevTools tab at the bottom of thebrowsersection in CodeSandbox:\",\n                            \"To inspect a particular component on the screen, use the button in the top left corner of React DevTools:\"\n                        ],\n                        \"code_examples\": [\n                            \"NoteFor local development, React DevTools is available as aChrome,Firefox, andEdgebrowser extension. Install it, and theComponentstab will appear in your browser Developer Tools for sites using React.\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Note\",\n                        \"content\": [],\n                        \"code_examples\": [\n                            \"For local development, React DevTools is available as aChrome,Firefox, andEdgebrowser extension. Install it, and theComponentstab will appear in your browser Developer Tools for sites using React.\"\n                        ]\n                    }\n                ],\n                \"code_examples\": [\n                    \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button>;}\",\n                    \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button>;}\",\n                    \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button>;}\",\n                    \"import{StrictMode}from'react';import{createRoot}from'react-dom/client';import'./styles.css';importAppfrom'./App';\",\n                    \"exportdefaultfunctionSquare(){return<buttonclassName=\\\"square\\\">X</button><buttonclassName=\\\"square\\\">X</button>;}\",\n                    \"Console/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX Fragment<>...</>?\",\n                    \"exportdefaultfunctionSquare(){return(<><buttonclassName=\\\"square\\\">X</button><buttonclassName=\\\"square\\\">X</button></>);}\",\n                    \"exportdefaultfunctionSquare(){return(<><divclassName=\\\"board-row\\\"><buttonclassName=\\\"square\\\">1</button><buttonclassName=\\\"square\\\">2</button><buttonclassName=\\\"square\\\">3</button></div><divclassName=\\\"board-row\\\"><buttonclassName=\\\"square\\\">4</button><buttonclassName=\\\"square\\\">5</button><buttonclassName=\\\"square\\\">6</button></div><divclassName=\\\"board-row\\\"><buttonclassName=\\\"square\\\">7</button><buttonclassName=\\\"square\\\">8</button><buttonclassName=\\\"square\\\">9</button></div></>);}\",\n                    \"exportdefaultfunctionBoard(){//...}\"\n                ]\n            },\n            {\n                \"header\": \"Completing the game\",\n                \"content\": [\n                    \"By this point, you have all the basic building blocks for your tic-tac-toe game. To have a complete game, you now need to alternate placing \\u201cX\\u201ds and \\u201cO\\u201ds on the board, and you need a way to determine a winner.\",\n                    \"Lifting state up\",\n                    \"Currently, eachSquarecomponent maintains a part of the game\\u2019s state. To check for a winner in a tic-tac-toe game, theBoardwould need to somehow know the state of each of the 9Squarecomponents.\",\n                    \"How would you approach that? At first, you might guess that theBoardneeds to \\u201cask\\u201d eachSquarefor thatSquare\\u2019s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game\\u2019s state in the parentBoardcomponent instead of in eachSquare. TheBoardcomponent can tell eachSquarewhat to display by passing a prop, like you did when you passed a number to each Square.\",\n                    \"To collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.\",\n                    \"Lifting state into a parent component is common when React components are refactored.\",\n                    \"Let\\u2019s take this opportunity to try it out. Edit theBoardcomponent so that it declares a state variable namedsquaresthat defaults to an array of 9 nulls corresponding to the 9 squares:\",\n                    \"Array(9).fill(null)creates an array with nine elements and sets each of them tonull. TheuseState()call around it declares asquaresstate variable that\\u2019s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, thesquaresarray will look like this:\",\n                    \"Now yourBoardcomponent needs to pass thevalueprop down to eachSquarethat it renders:\",\n                    \"Next, you\\u2019ll edit theSquarecomponent to receive thevalueprop from the Board component. This will require removing the Square component\\u2019s own stateful tracking ofvalueand the button\\u2019sonClickprop:\",\n                    \"At this point you should see an empty tic-tac-toe board:\",\n                    \"And your code should look like this:\",\n                    {\n                        \"header\": \"Lifting state up\",\n                        \"content\": [\n                            \"Currently, eachSquarecomponent maintains a part of the game\\u2019s state. To check for a winner in a tic-tac-toe game, theBoardwould need to somehow know the state of each of the 9Squarecomponents.\",\n                            \"How would you approach that? At first, you might guess that theBoardneeds to \\u201cask\\u201d eachSquarefor thatSquare\\u2019s state. Although this approach is technically possible in React, we discourage it because the code becomes difficult to understand, susceptible to bugs, and hard to refactor. Instead, the best approach is to store the game\\u2019s state in the parentBoardcomponent instead of in eachSquare. TheBoardcomponent can tell eachSquarewhat to display by passing a prop, like you did when you passed a number to each Square.\",\n                            \"To collect data from multiple children, or to have two child components communicate with each other, declare the shared state in their parent component instead. The parent component can pass that state back down to the children via props. This keeps the child components in sync with each other and with their parent.\",\n                            \"Lifting state into a parent component is common when React components are refactored.\",\n                            \"Let\\u2019s take this opportunity to try it out. Edit theBoardcomponent so that it declares a state variable namedsquaresthat defaults to an array of 9 nulls corresponding to the 9 squares:\",\n                            \"Array(9).fill(null)creates an array with nine elements and sets each of them tonull. TheuseState()call around it declares asquaresstate variable that\\u2019s initially set to that array. Each entry in the array corresponds to the value of a square. When you fill the board in later, thesquaresarray will look like this:\",\n                            \"Now yourBoardcomponent needs to pass thevalueprop down to eachSquarethat it renders:\",\n                            \"Next, you\\u2019ll edit theSquarecomponent to receive thevalueprop from the Board component. This will require removing the Square component\\u2019s own stateful tracking ofvalueand the button\\u2019sonClickprop:\",\n                            \"At this point you should see an empty tic-tac-toe board:\",\n                            \"And your code should look like this:\"\n                        ],\n                        \"code_examples\": [\n                            \"// ...exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(// ...);}\",\n                            \"['O',null,'X','X','X','O','O',null,null]\",\n                            \"exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(<><divclassName=\\\"board-row\\\"><Squarevalue={squares[0]}/><Squarevalue={squares[1]}/><Squarevalue={squares[2]}/></div><divclassName=\\\"board-row\\\"><Squarevalue={squares[3]}/><Squarevalue={squares[4]}/><Squarevalue={squares[5]}/></div><divclassName=\\\"board-row\\\"><Squarevalue={squares[6]}/><Squarevalue={squares[7]}/><Squarevalue={squares[8]}/></div></>);}\",\n                            \"functionSquare({value}){return<buttonclassName=\\\"square\\\">{value}</button>;}\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Note\",\n                        \"content\": [],\n                        \"code_examples\": [\n                            \"JavaScript supportsclosureswhich means an inner function (e.g.handleClick) has access to variables and functions defined in an outer function (e.g.Board). ThehandleClickfunction can read thesquaresstate and call thesetSquaresmethod because they are both defined inside of theBoardfunction.\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Note\",\n                        \"content\": [],\n                        \"code_examples\": [\n                            \"The DOM<button>element\\u2019sonClickattribute has a special meaning to React because it is a built-in component. For custom components like Square, the naming is up to you. You could give any name to theSquare\\u2019sonSquareClickprop orBoard\\u2019shandleClickfunction, and the code would work the same. In React, it\\u2019s conventional to useonSomethingnames for props which represent events andhandleSomethingfor the function definitions which handle those events.\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Why immutability is important\",\n                        \"content\": [\n                            \"Note how inhandleClick, you call.slice()to create a copy of thesquaresarray instead of modifying the existing array. To explain why, we need to discuss immutability and why immutability is important to learn.\",\n                            \"There are generally two approaches to changing data. The first approach is tomutatethe data by directly changing the data\\u2019s values. The second approach is to replace the data with a new copy which has the desired changes. Here is what it would look like if you mutated thesquaresarray:\",\n                            \"And here is what it would look like if you changed data without mutating thesquaresarray:\",\n                            \"The result is the same but by not mutating (changing the underlying data) directly, you gain several benefits.\",\n                            \"Immutability makes complex features much easier to implement. Later in this tutorial, you will implement a \\u201ctime travel\\u201d feature that lets you review the game\\u2019s history and \\u201cjump back\\u201d to past moves. This functionality isn\\u2019t specific to games\\u2014an ability to undo and redo certain actions is a common requirement for apps. Avoiding direct data mutation lets you keep previous versions of the data intact, and reuse them later.\",\n                            \"There is also another benefit of immutability. By default, all child components re-render automatically when the state of a parent component changes. This includes even the child components that weren\\u2019t affected by the change. Although re-rendering is not by itself noticeable to the user (you shouldn\\u2019t actively try to avoid it!), you might want to skip re-rendering a part of the tree that clearly wasn\\u2019t affected by it for performance reasons. Immutability makes it very cheap for components to compare whether their data has changed or not. You can learn more about how React chooses when to re-render a component inthememoAPI reference.\"\n                        ],\n                        \"code_examples\": [\n                            \"constsquares=[null,null,null,null,null,null,null,null,null];squares[0]='X';// Now `squares` is [\\\"X\\\", null, null, null, null, null, null, null, null];\",\n                            \"constsquares=[null,null,null,null,null,null,null,null,null];constnextSquares=['X',null,null,null,null,null,null,null,null];// Now `squares` is unchanged, but `nextSquares` first element is 'X' rather than `null`\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Taking turns\",\n                        \"content\": [\n                            \"It\\u2019s now time to fix a major defect in this tic-tac-toe game: the \\u201cO\\u201ds cannot be marked on the board.\",\n                            \"You\\u2019ll set the first move to be \\u201cX\\u201d by default. Let\\u2019s keep track of this by adding another piece of state to the Board component:\",\n                            \"Each time a player moves,xIsNext(a boolean) will be flipped to determine which player goes next and the game\\u2019s state will be saved. You\\u2019ll update theBoard\\u2019shandleClickfunction to flip the value ofxIsNext:\",\n                            \"Now, as you click on different squares, they will alternate betweenXandO, as they should!\",\n                            \"But wait, there\\u2019s a problem. Try clicking on the same square multiple times:\",\n                            \"TheXis overwritten by anO! While this would add a very interesting twist to the game, we\\u2019re going to stick to the original rules for now.\",\n                            \"When you mark a square with aXor anOyou aren\\u2019t first checking to see if the square already has aXorOvalue. You can fix this byreturning early. You\\u2019ll check to see if the square already has aXor anO. If the square is already filled, you willreturnin thehandleClickfunction early\\u2014before it tries to update the board state.\",\n                            \"Now you can only addX\\u2019s orO\\u2019s to empty squares! Here is what your code should look like at this point:\"\n                        ],\n                        \"code_examples\": [\n                            \"functionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));// ...}\",\n                            \"exportdefaultfunctionBoard(){const[xIsNext,setXIsNext]=useState(true);const[squares,setSquares]=useState(Array(9).fill(null));functionhandleClick(i){constnextSquares=squares.slice();if(xIsNext){nextSquares[i]=\\\"X\\\";}else{nextSquares[i]=\\\"O\\\";}setSquares(nextSquares);setXIsNext(!xIsNext);}return(//...);}\",\n                            \"functionhandleClick(i){if(squares[i]){return;}constnextSquares=squares.slice();//...}\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Declaring a winner\",\n                        \"content\": [\n                            \"Now that the players can take turns, you\\u2019ll want to show when the game is won and there are no more turns to make. To do this you\\u2019ll add a helper function calledcalculateWinnerthat takes an array of 9 squares, checks for a winner and returns'X','O', ornullas appropriate. Don\\u2019t worry too much about thecalculateWinnerfunction; it\\u2019s not specific to React:\",\n                            \"You will callcalculateWinner(squares)in theBoardcomponent\\u2019shandleClickfunction to check if a player has won. You can perform this check at the same time you check if a user has clicked a square that already has aXor andO. We\\u2019d like to return early in both cases:\",\n                            \"To let the players know when the game is over, you can display text such as \\u201cWinner: X\\u201d or \\u201cWinner: O\\u201d. To do that you\\u2019ll add astatussection to theBoardcomponent. The status will display the winner if the game is over and if the game is ongoing you\\u2019ll display which player\\u2019s turn is next:\",\n                            \"Congratulations! You now have a working tic-tac-toe game. And you\\u2019ve just learned the basics of React too. Soyouare the real winner here. Here is what the code should look like:\"\n                        ],\n                        \"code_examples\": [\n                            \"exportdefaultfunctionBoard(){//...}functioncalculateWinner(squares){constlines=[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];for(leti=0;i<lines.length;i++){const[a,b,c]=lines[i];if(squares[a]&&squares[a]===squares[b]&&squares[a]===squares[c]){returnsquares[a];}}returnnull;}\",\n                            \"NoteIt does not matter whether you definecalculateWinnerbefore or after theBoard. Let\\u2019s put it at the end so that you don\\u2019t have to scroll past it every time you edit your components.\",\n                            \"functionhandleClick(i){if(squares[i]||calculateWinner(squares)){return;}constnextSquares=squares.slice();//...}\",\n                            \"exportdefaultfunctionBoard(){// ...constwinner=calculateWinner(squares);letstatus;if(winner){status=\\\"Winner: \\\"+winner;}else{status=\\\"Next player: \\\"+(xIsNext?\\\"X\\\":\\\"O\\\");}return(<><divclassName=\\\"status\\\">{status}</div><divclassName=\\\"board-row\\\">// ...)}\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Note\",\n                        \"content\": [],\n                        \"code_examples\": [\n                            \"It does not matter whether you definecalculateWinnerbefore or after theBoard. Let\\u2019s put it at the end so that you don\\u2019t have to scroll past it every time you edit your components.\"\n                        ]\n                    }\n                ],\n                \"code_examples\": [\n                    \"// ...exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(// ...);}\",\n                    \"['O',null,'X','X','X','O','O',null,null]\",\n                    \"exportdefaultfunctionBoard(){const[squares,setSquares]=useState(Array(9).fill(null));return(<><divclassName=\\\"board-row\\\"><Squarevalue={squares[0]}/><Squarevalue={squares[1]}/><Squarevalue={squares[2]}/></div><divclassName=\\\"board-row\\\"><Squarevalue={squares[3]}/><Squarevalue={squares[4]}/><Squarevalue={squares[5]}/></div><divclassName=\\\"board-row\\\"><Squarevalue={squares[6]}/><Squarevalue={squares[7]}/><Squarevalue={squares[8]}/></div></>);}\",\n                    \"functionSquare({value}){return<buttonclassName=\\\"square\\\">{value}</button>;}\"\n                ]\n            },\n            {\n                \"header\": \"Adding time travel\",\n                \"content\": [\n                    \"As a final exercise, let\\u2019s make it possible to \\u201cgo back in time\\u201d to the previous moves in the game.\",\n                    \"Storing a history of moves\",\n                    \"If you mutated thesquaresarray, implementing time travel would be very difficult.\",\n                    \"However, you usedslice()to create a new copy of thesquaresarray after every move, and treated it as immutable. This will allow you to store every past version of thesquaresarray, and navigate between the turns that have already happened.\",\n                    \"You\\u2019ll store the pastsquaresarrays in another array calledhistory, which you\\u2019ll store as a new state variable. Thehistoryarray represents all board states, from the first to the last move, and has a shape like this:\",\n                    \"Lifting state up, again\",\n                    \"You will now write a new top-level component calledGameto display a list of past moves. That\\u2019s where you will place thehistorystate that contains the entire game history.\",\n                    \"Placing thehistorystate into theGamecomponent will let you remove thesquaresstate from its childBoardcomponent. Just like you \\u201clifted state up\\u201d from theSquarecomponent into theBoardcomponent, you will now lift it up from theBoardinto the top-levelGamecomponent. This gives theGamecomponent full control over theBoard\\u2019s data and lets it instruct theBoardto render previous turns from thehistory.\",\n                    \"First, add aGamecomponent withexport default. Have it render theBoardcomponent and some markup:\",\n                    \"Note that you are removing theexport defaultkeywords before thefunction Board() {declaration and adding them before thefunction Game() {declaration. This tells yourindex.jsfile to use theGamecomponent as the top-level component instead of yourBoardcomponent. The additionaldivs returned by theGamecomponent are making room for the game information you\\u2019ll add to the board later.\",\n                    \"Add some state to theGamecomponent to track which player is next and the history of moves:\",\n                    \"Notice how[Array(9).fill(null)]is an array with a single item, which itself is an array of 9nulls.\",\n                    \"To render the squares for the current move, you\\u2019ll want to read the last squares array from thehistory. You don\\u2019t needuseStatefor this\\u2014you already have enough information to calculate it during rendering:\",\n                    \"Next, create ahandlePlayfunction inside theGamecomponent that will be called by theBoardcomponent to update the game. PassxIsNext,currentSquaresandhandlePlayas props to theBoardcomponent:\",\n                    \"Let\\u2019s make theBoardcomponent fully controlled by the props it receives. Change theBoardcomponent to take three props:xIsNext,squares, and a newonPlayfunction thatBoardcan call with the updated squares array when a player makes a move. Next, remove the first two lines of theBoardfunction that calluseState:\",\n                    \"Now replace thesetSquaresandsetXIsNextcalls inhandleClickin theBoardcomponent with a single call to your newonPlayfunction so theGamecomponent can update theBoardwhen the user clicks a square:\",\n                    \"TheBoardcomponent is fully controlled by the props passed to it by theGamecomponent. You need to implement thehandlePlayfunction in theGamecomponent to get the game working again.\",\n                    \"What shouldhandlePlaydo when called? Remember that Board used to callsetSquareswith an updated array; now it passes the updatedsquaresarray toonPlay.\",\n                    \"ThehandlePlayfunction needs to updateGame\\u2019s state to trigger a re-render, but you don\\u2019t have asetSquaresfunction that you can call any more\\u2014you\\u2019re now using thehistorystate variable to store this information. You\\u2019ll want to updatehistoryby appending the updatedsquaresarray as a new history entry. You also want to togglexIsNext, just as Board used to do:\",\n                    \"Here,[...history, nextSquares]creates a new array that contains all the items inhistory, followed bynextSquares. (You can read the...historyspread syntaxas \\u201cenumerate all the items inhistory\\u201d.)\",\n                    \"For example, ifhistoryis[[null,null,null], [\\\"X\\\",null,null]]andnextSquaresis[\\\"X\\\",null,\\\"O\\\"], then the new[...history, nextSquares]array will be[[null,null,null], [\\\"X\\\",null,null], [\\\"X\\\",null,\\\"O\\\"]].\",\n                    \"At this point, you\\u2019ve moved the state to live in theGamecomponent, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:\",\n                    {\n                        \"header\": \"Storing a history of moves\",\n                        \"content\": [\n                            \"If you mutated thesquaresarray, implementing time travel would be very difficult.\",\n                            \"However, you usedslice()to create a new copy of thesquaresarray after every move, and treated it as immutable. This will allow you to store every past version of thesquaresarray, and navigate between the turns that have already happened.\",\n                            \"You\\u2019ll store the pastsquaresarrays in another array calledhistory, which you\\u2019ll store as a new state variable. Thehistoryarray represents all board states, from the first to the last move, and has a shape like this:\"\n                        ],\n                        \"code_examples\": [\n                            \"[// Before first move[null,null,null,null,null,null,null,null,null],// After first move[null,null,null,null,'X',null,null,null,null],// After second move[null,null,null,null,'X',null,null,null,'O'],// ...]\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Lifting state up, again\",\n                        \"content\": [\n                            \"You will now write a new top-level component calledGameto display a list of past moves. That\\u2019s where you will place thehistorystate that contains the entire game history.\",\n                            \"Placing thehistorystate into theGamecomponent will let you remove thesquaresstate from its childBoardcomponent. Just like you \\u201clifted state up\\u201d from theSquarecomponent into theBoardcomponent, you will now lift it up from theBoardinto the top-levelGamecomponent. This gives theGamecomponent full control over theBoard\\u2019s data and lets it instruct theBoardto render previous turns from thehistory.\",\n                            \"First, add aGamecomponent withexport default. Have it render theBoardcomponent and some markup:\",\n                            \"Note that you are removing theexport defaultkeywords before thefunction Board() {declaration and adding them before thefunction Game() {declaration. This tells yourindex.jsfile to use theGamecomponent as the top-level component instead of yourBoardcomponent. The additionaldivs returned by theGamecomponent are making room for the game information you\\u2019ll add to the board later.\",\n                            \"Add some state to theGamecomponent to track which player is next and the history of moves:\",\n                            \"Notice how[Array(9).fill(null)]is an array with a single item, which itself is an array of 9nulls.\",\n                            \"To render the squares for the current move, you\\u2019ll want to read the last squares array from thehistory. You don\\u2019t needuseStatefor this\\u2014you already have enough information to calculate it during rendering:\",\n                            \"Next, create ahandlePlayfunction inside theGamecomponent that will be called by theBoardcomponent to update the game. PassxIsNext,currentSquaresandhandlePlayas props to theBoardcomponent:\",\n                            \"Let\\u2019s make theBoardcomponent fully controlled by the props it receives. Change theBoardcomponent to take three props:xIsNext,squares, and a newonPlayfunction thatBoardcan call with the updated squares array when a player makes a move. Next, remove the first two lines of theBoardfunction that calluseState:\",\n                            \"Now replace thesetSquaresandsetXIsNextcalls inhandleClickin theBoardcomponent with a single call to your newonPlayfunction so theGamecomponent can update theBoardwhen the user clicks a square:\",\n                            \"TheBoardcomponent is fully controlled by the props passed to it by theGamecomponent. You need to implement thehandlePlayfunction in theGamecomponent to get the game working again.\",\n                            \"What shouldhandlePlaydo when called? Remember that Board used to callsetSquareswith an updated array; now it passes the updatedsquaresarray toonPlay.\",\n                            \"ThehandlePlayfunction needs to updateGame\\u2019s state to trigger a re-render, but you don\\u2019t have asetSquaresfunction that you can call any more\\u2014you\\u2019re now using thehistorystate variable to store this information. You\\u2019ll want to updatehistoryby appending the updatedsquaresarray as a new history entry. You also want to togglexIsNext, just as Board used to do:\",\n                            \"Here,[...history, nextSquares]creates a new array that contains all the items inhistory, followed bynextSquares. (You can read the...historyspread syntaxas \\u201cenumerate all the items inhistory\\u201d.)\",\n                            \"For example, ifhistoryis[[null,null,null], [\\\"X\\\",null,null]]andnextSquaresis[\\\"X\\\",null,\\\"O\\\"], then the new[...history, nextSquares]array will be[[null,null,null], [\\\"X\\\",null,null], [\\\"X\\\",null,\\\"O\\\"]].\",\n                            \"At this point, you\\u2019ve moved the state to live in theGamecomponent, and the UI should be fully working, just as it was before the refactor. Here is what the code should look like at this point:\"\n                        ],\n                        \"code_examples\": [\n                            \"functionBoard(){// ...}exportdefaultfunctionGame(){return(<divclassName=\\\"game\\\"><divclassName=\\\"game-board\\\"><Board/></div><divclassName=\\\"game-info\\\"><ol>{/*TODO*/}</ol></div></div>);}\",\n                            \"exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);// ...\",\n                            \"exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];// ...\",\n                            \"exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){// TODO}return(<divclassName=\\\"game\\\"><divclassName=\\\"game-board\\\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/>//...)}\",\n                            \"functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){//...}// ...}\",\n                            \"functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]=\\\"X\\\";}else{nextSquares[i]=\\\"O\\\";}onPlay(nextSquares);}//...}\",\n                            \"exportdefaultfunctionGame(){//...functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}//...}\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Showing the past moves\",\n                        \"content\": [\n                            \"Since you are recording the tic-tac-toe game\\u2019s history, you can now display a list of past moves to the player.\",\n                            \"React elements like<button>are regular JavaScript objects; you can pass them around in your application. To render multiple items in React, you can use an array of React elements.\",\n                            \"You already have an array ofhistorymoves in state, so now you need to transform it to an array of React elements. In JavaScript, to transform one array into another, you can use thearraymapmethod:\",\n                            \"You\\u2019ll usemapto transform yourhistoryof moves into React elements representing buttons on the screen, and display a list of buttons to \\u201cjump\\u201d to past moves. Let\\u2019smapover thehistoryin the Game component:\",\n                            \"You can see what your code should look like below. Note that you should see an error in the developer tools console that says:\",\n                            \"You\\u2019ll fix this error in the next section.\"\n                        ],\n                        \"code_examples\": [\n                            \"[1,2,3].map((x)=>x*2)// [2, 4, 6]\",\n                            \"exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}functionjumpTo(nextMove){// TODO}constmoves=history.map((squares,move)=>{letdescription;if(move>0){description='Go to move #'+move;}else{description='Go to game start';}return(<li><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});return(<divclassName=\\\"game\\\"><divclassName=\\\"game-board\\\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/></div><divclassName=\\\"game-info\\\"><ol>{moves}</ol></div></div>);}\",\n                            \"ConsoleWarning: Each child in an array or iterator should have a unique \\u201ckey\\u201d prop. Check the render method of `Game`.\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Picking a key\",\n                        \"content\": [\n                            \"When you render a list, React stores some information about each rendered list item. When you update a list, React needs to determine what has changed. You could have added, removed, re-arranged, or updated the list\\u2019s items.\",\n                            \"Imagine transitioning from\",\n                            \"to\",\n                            \"In addition to the updated counts, a human reading this would probably say that you swapped Alexa and Ben\\u2019s ordering and inserted Claudia between Alexa and Ben. However, React is a computer program and does not know what you intended, so you need to specify akeyproperty for each list item to differentiate each list item from its siblings. If your data was from a database, Alexa, Ben, and Claudia\\u2019s database IDs could be used as keys.\",\n                            \"When a list is re-rendered, React takes each list item\\u2019s key and searches the previous list\\u2019s items for a matching key. If the current list has a key that didn\\u2019t exist before, React creates a component. If the current list is missing a key that existed in the previous list, React destroys the previous component. If two keys match, the corresponding component is moved.\",\n                            \"Keys tell React about the identity of each component, which allows React to maintain state between re-renders. If a component\\u2019s key changes, the component will be destroyed and re-created with a new state.\",\n                            \"keyis a special and reserved property in React. When an element is created, React extracts thekeyproperty and stores the key directly on the returned element. Even thoughkeymay look like it is passed as props, React automatically useskeyto decide which components to update. There\\u2019s no way for a component to ask whatkeyits parent specified.\",\n                            \"It\\u2019s strongly recommended that you assign proper keys whenever you build dynamic lists.If you don\\u2019t have an appropriate key, you may want to consider restructuring your data so that you do.\",\n                            \"If no key is specified, React will report an error and use the array index as a key by default. Using the array index as a key is problematic when trying to re-order a list\\u2019s items or inserting/removing list items. Explicitly passingkey={i}silences the error but has the same problems as array indices and is not recommended in most cases.\",\n                            \"Keys do not need to be globally unique; they only need to be unique between components and their siblings.\"\n                        ],\n                        \"code_examples\": [\n                            \"<li>Alexa: 7 tasks left</li><li>Ben: 5 tasks left</li>\",\n                            \"<li>Ben: 9 tasks left</li><li>Claudia: 8 tasks left</li><li>Alexa: 5 tasks left</li>\",\n                            \"<likey={user.id}>{user.name}:{user.taskCount}tasks left</li>\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Implementing time travel\",\n                        \"content\": [\n                            \"In the tic-tac-toe game\\u2019s history, each past move has a unique ID associated with it: it\\u2019s the sequential number of the move. Moves will never be re-ordered, deleted, or inserted in the middle, so it\\u2019s safe to use the move index as a key.\",\n                            \"In theGamefunction, you can add the key as<li key={move}>, and if you reload the rendered game, React\\u2019s \\u201ckey\\u201d error should disappear:\"\n                        ],\n                        \"code_examples\": [\n                            \"constmoves=history.map((squares,move)=>{//...return(<likey={move}><buttononClick={()=>jumpTo(move)}>{description}</button></li>);});\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Final cleanup\",\n                        \"content\": [\n                            \"If you look at the code very closely, you may notice thatxIsNext === truewhencurrentMoveis even andxIsNext === falsewhencurrentMoveis odd. In other words, if you know the value ofcurrentMove, then you can always figure out whatxIsNextshould be.\",\n                            \"There\\u2019s no reason for you to store both of these in state. In fact, always try to avoid redundant state. Simplifying what you store in state reduces bugs and makes your code easier to understand. ChangeGameso that it doesn\\u2019t storexIsNextas a separate state variable and instead figures it out based on thecurrentMove:\",\n                            \"You no longer need thexIsNextstate declaration or the calls tosetXIsNext. Now, there\\u2019s no chance forxIsNextto get out of sync withcurrentMove, even if you make a mistake while coding the components.\"\n                        ],\n                        \"code_examples\": [\n                            \"exportdefaultfunctionGame(){const[history,setHistory]=useState([Array(9).fill(null)]);const[currentMove,setCurrentMove]=useState(0);constxIsNext=currentMove%2===0;constcurrentSquares=history[currentMove];functionhandlePlay(nextSquares){constnextHistory=[...history.slice(0,currentMove+1),nextSquares];setHistory(nextHistory);setCurrentMove(nextHistory.length-1);}functionjumpTo(nextMove){setCurrentMove(nextMove);}// ...}\"\n                        ]\n                    },\n                    {\n                        \"header\": \"Wrapping up\",\n                        \"content\": [\n                            \"Congratulations! You\\u2019ve created a tic-tac-toe game that:\",\n                            \"Lets you play tic-tac-toe,Indicates when a player has won the game,Stores a game\\u2019s history as a game progresses,Allows players to review a game\\u2019s history and see previous versions of a game\\u2019s board.\",\n                            \"Nice work! We hope you now feel like you have a decent grasp of how React works.\",\n                            \"Check out the final result here:\"\n                        ]\n                    }\n                ],\n                \"code_examples\": [\n                    \"[// Before first move[null,null,null,null,null,null,null,null,null],// After first move[null,null,null,null,'X',null,null,null,null],// After second move[null,null,null,null,'X',null,null,null,'O'],// ...]\",\n                    \"functionBoard(){// ...}exportdefaultfunctionGame(){return(<divclassName=\\\"game\\\"><divclassName=\\\"game-board\\\"><Board/></div><divclassName=\\\"game-info\\\"><ol>{/*TODO*/}</ol></div></div>);}\",\n                    \"exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);// ...\",\n                    \"exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];// ...\",\n                    \"exportdefaultfunctionGame(){const[xIsNext,setXIsNext]=useState(true);const[history,setHistory]=useState([Array(9).fill(null)]);constcurrentSquares=history[history.length-1];functionhandlePlay(nextSquares){// TODO}return(<divclassName=\\\"game\\\"><divclassName=\\\"game-board\\\"><BoardxIsNext={xIsNext}squares={currentSquares}onPlay={handlePlay}/>//...)}\",\n                    \"functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){//...}// ...}\",\n                    \"functionBoard({xIsNext,squares,onPlay}){functionhandleClick(i){if(calculateWinner(squares)||squares[i]){return;}constnextSquares=squares.slice();if(xIsNext){nextSquares[i]=\\\"X\\\";}else{nextSquares[i]=\\\"O\\\";}onPlay(nextSquares);}//...}\",\n                    \"exportdefaultfunctionGame(){//...functionhandlePlay(nextSquares){setHistory([...history,nextSquares]);setXIsNext(!xIsNext);}//...}\"\n                ]\n            }\n        ]\n    }\n]",
    "[\n    {\n        \"header\": \"Thinking in React\",\n        \"content\": [\n            {\n                \"header\": \"Start with the mockup\",\n                \"content\": [\n                    \"Imagine that you already have a JSON API and a mockup from a designer.\",\n                    \"The JSON API returns some data that looks like this:\",\n                    \"The mockup looks like this:\",\n                    \"To implement a UI in React, you will usually follow the same five steps.\"\n                ],\n                \"code_examples\": [\n                    \"[{category:\\\"Fruits\\\",price:\\\"$1\\\",stocked:true,name:\\\"Apple\\\"},{category:\\\"Fruits\\\",price:\\\"$1\\\",stocked:true,name:\\\"Dragonfruit\\\"},{category:\\\"Fruits\\\",price:\\\"$2\\\",stocked:false,name:\\\"Passionfruit\\\"},{category:\\\"Vegetables\\\",price:\\\"$2\\\",stocked:true,name:\\\"Spinach\\\"},{category:\\\"Vegetables\\\",price:\\\"$4\\\",stocked:false,name:\\\"Pumpkin\\\"},{category:\\\"Vegetables\\\",price:\\\"$1\\\",stocked:true,name:\\\"Peas\\\"}]\"\n                ]\n            },\n            {\n                \"header\": \"Step 1: Break the UI into a component hierarchy\",\n                \"content\": [\n                    \"Start by drawing boxes around every component and subcomponent in the mockup and naming them. If you work with a designer, they may have already named these components in their design tool. Ask them!\",\n                    \"Depending on your background, you can think about splitting up a design into components in different ways:\",\n                    \"Programming\\u2014use the same techniques for deciding if you should create a new function or object. One such technique is thesingle responsibility principle, that is, a component should ideally only do one thing. If it ends up growing, it should be decomposed into smaller subcomponents.CSS\\u2014consider what you would make class selectors for. (However, components are a bit less granular.)Design\\u2014consider how you would organize the design\\u2019s layers.\",\n                    \"If your JSON is well-structured, you\\u2019ll often find that it naturally maps to the component structure of your UI. That\\u2019s because UI and data models often have the same information architecture\\u2014that is, the same shape. Separate your UI into components, where each component matches one piece of your data model.\",\n                    \"There are five components on this screen:\"\n                ]\n            },\n            {\n                \"header\": \"Step 2: Build a static version in React\",\n                \"content\": [\n                    \"Now that you have your component hierarchy, it\\u2019s time to implement your app. The most straightforward approach is to build a version that renders the UI from your data model without adding any interactivity\\u2026 yet! It\\u2019s often easier to build the static version first and add interactivity later. Building a static version requires a lot of typing and no thinking, but adding interactivity requires a lot of thinking and not a lot of typing.\",\n                    \"To build a static version of your app that renders your data model, you\\u2019ll want to buildcomponentsthat reuse other components and pass data usingprops.Props are a way of passing data from parent to child. (If you\\u2019re familiar with the concept ofstate, don\\u2019t use state at all to build this static version. State is reserved only for interactivity, that is, data that changes over time. Since this is a static version of the app, you don\\u2019t need it.)\",\n                    \"You can either build \\u201ctop down\\u201d by starting with building the components higher up in the hierarchy (likeFilterableProductTable) or \\u201cbottom up\\u201d by working from components lower down (likeProductRow). In simpler examples, it\\u2019s usually easier to go top-down, and on larger projects, it\\u2019s easier to go bottom-up.\",\n                    {\n                        \"header\": \"Pitfall\",\n                        \"content\": [],\n                        \"code_examples\": [\n                            \"At this point, you should not be using any state values. That\\u2019s for the next step!\"\n                        ]\n                    }\n                ]\n            },\n            {\n                \"header\": \"Step 3: Find the minimal but complete representation of UI state\",\n                \"content\": [\n                    \"To make the UI interactive, you need to let users change your underlying data model. You will usestatefor this.\",\n                    \"Think of state as the minimal set of changing data that your app needs to remember. The most important principle for structuring state is to keep itDRY (Don\\u2019t Repeat Yourself).Figure out the absolute minimal representation of the state your application needs and compute everything else on-demand. For example, if you\\u2019re building a shopping list, you can store the items as an array in state. If you want to also display the number of items in the list, don\\u2019t store the number of items as another state value\\u2014instead, read the length of your array.\",\n                    \"Now think of all of the pieces of data in this example application:\",\n                    \"The original list of productsThe search text the user has enteredThe value of the checkboxThe filtered list of products\",\n                    \"Which of these are state? Identify the ones that are not:\",\n                    \"Does itremain unchangedover time? If so, it isn\\u2019t state.Is itpassed in from a parentvia props? If so, it isn\\u2019t state.Can you compute itbased on existing state or props in your component? If so, itdefinitelyisn\\u2019t state!\",\n                    \"What\\u2019s left is probably state.\",\n                    \"Let\\u2019s go through them one by one again:\",\n                    \"The original list of products ispassed in as props, so it\\u2019s not state.The search text seems to be state since it changes over time and can\\u2019t be computed from anything.The value of the checkbox seems to be state since it changes over time and can\\u2019t be computed from anything.The filtered list of productsisn\\u2019t state because it can be computedby taking the original list of products and filtering it according to the search text and value of the checkbox.\",\n                    \"This means only the search text and the value of the checkbox are state! Nicely done!\",\n                    \"Deep DiveProps vs StateShow DetailsThere are two types of \\u201cmodel\\u201d data in React: props and state. The two are very different:Propsare like arguments you passto a function. They let a parent component pass data to a child component and customize its appearance. For example, aFormcan pass acolorprop to aButton.Stateis like a component\\u2019s memory.It lets a component keep track of some information and change it in response to interactions. For example, aButtonmight keep track ofisHoveredstate.Props and state are different, but they work together. A parent component will often keep some information in state (so that it can change it), andpass it downto child components as their props. It\\u2019s okay if the difference still feels fuzzy on the first read. It takes a bit of practice for it to really stick!\",\n                    {\n                        \"header\": \"Props vs State\",\n                        \"content\": []\n                    }\n                ]\n            },\n            {\n                \"header\": \"Step 4: Identify where your state should live\",\n                \"content\": [\n                    \"After identifying your app\\u2019s minimal state data, you need to identify which component is responsible for changing this state, orownsthe state. Remember: React uses one-way data flow, passing data down the component hierarchy from parent to child component. It may not be immediately clear which component should own what state. This can be challenging if you\\u2019re new to this concept, but you can figure it out by following these steps!\",\n                    \"For each piece of state in your application:\",\n                    \"Identifyeverycomponent that renders something based on that state.Find their closest common parent component\\u2014a component above them all in the hierarchy.Decide where the state should live:Often, you can put the state directly into their common parent.You can also put the state into some component above their common parent.If you can\\u2019t find a component where it makes sense to own the state, create a new component solely for holding the state and add it somewhere in the hierarchy above the common parent component.\",\n                    \"In the previous step, you found two pieces of state in this application: the search input text, and the value of the checkbox. In this example, they always appear together, so it makes sense to put them into the same place.\",\n                    \"Now let\\u2019s run through our strategy for them:\",\n                    \"Identify components that use state:ProductTableneeds to filter the product list based on that state (search text and checkbox value).SearchBarneeds to display that state (search text and checkbox value).Find their common parent:The first parent component both components share isFilterableProductTable.Decide where the state lives: We\\u2019ll keep the filter text and checked state values inFilterableProductTable.\",\n                    \"So the state values will live inFilterableProductTable.\",\n                    \"Add state to the component with theuseState()Hook.Hooks are special functions that let you \\u201chook into\\u201d React. Add two state variables at the top ofFilterableProductTableand specify their initial state:\",\n                    \"Then, passfilterTextandinStockOnlytoProductTableandSearchBaras props:\",\n                    \"You can start seeing how your application will behave. Edit thefilterTextinitial value fromuseState('')touseState('fruit')in the sandbox code below. You\\u2019ll see both the search input text and the table update:\"\n                ],\n                \"code_examples\": [\n                    \"functionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);\",\n                    \"<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}/><ProductTableproducts={products}filterText={filterText}inStockOnly={inStockOnly}/></div>\"\n                ]\n            },\n            {\n                \"header\": \"Step 5: Add inverse data flow\",\n                \"content\": [\n                    \"Currently your app renders correctly with props and state flowing down the hierarchy. But to change the state according to user input, you will need to support data flowing the other way: the form components deep in the hierarchy need to update the state inFilterableProductTable.\",\n                    \"React makes this data flow explicit, but it requires a little more typing than two-way data binding. If you try to type or check the box in the example above, you\\u2019ll see that React ignores your input. This is intentional. By writing<input value={filterText} />, you\\u2019ve set thevalueprop of theinputto always be equal to thefilterTextstate passed in fromFilterableProductTable. SincefilterTextstate is never set, the input never changes.\",\n                    \"You want to make it so whenever the user changes the form inputs, the state updates to reflect those changes. The state is owned byFilterableProductTable, so only it can callsetFilterTextandsetInStockOnly. To letSearchBarupdate theFilterableProductTable\\u2019s state, you need to pass these functions down toSearchBar:\",\n                    \"Inside theSearchBar, you will add theonChangeevent handlers and set the parent state from them:\",\n                    \"Now the application fully works!\"\n                ],\n                \"code_examples\": [\n                    \"functionFilterableProductTable({products}){const[filterText,setFilterText]=useState('');const[inStockOnly,setInStockOnly]=useState(false);return(<div><SearchBarfilterText={filterText}inStockOnly={inStockOnly}onFilterTextChange={setFilterText}onInStockOnlyChange={setInStockOnly}/>\",\n                    \"functionSearchBar({filterText,inStockOnly,onFilterTextChange,onInStockOnlyChange}){return(<form><inputtype=\\\"text\\\"value={filterText}placeholder=\\\"Search...\\\"onChange={(e)=>onFilterTextChange(e.target.value)}/><label><inputtype=\\\"checkbox\\\"checked={inStockOnly}onChange={(e)=>onInStockOnlyChange(e.target.checked)}\"\n                ]\n            },\n            {\n                \"header\": \"Where to go from here\",\n                \"content\": [\n                    \"This was a very brief introduction to how to think about building components and applications with React. You canstart a React projectright now ordive deeper on all the syntaxused in this tutorial.\"\n                ]\n            }\n        ]\n    }\n]"
]